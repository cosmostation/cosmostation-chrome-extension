/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["ethermint-v0220"] || ($protobuf.roots["ethermint-v0220"] = {});

export const ethermint = $root.ethermint = (() => {

    /**
     * Namespace ethermint.
     * @exports ethermint
     * @namespace
     */
    const ethermint = {};

    ethermint.crypto = (function() {

        /**
         * Namespace crypto.
         * @memberof ethermint
         * @namespace
         */
        const crypto = {};

        crypto.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof ethermint.crypto
             * @namespace
             */
            const v1 = {};

            v1.ethsecp256k1 = (function() {

                /**
                 * Namespace ethsecp256k1.
                 * @memberof ethermint.crypto.v1
                 * @namespace
                 */
                const ethsecp256k1 = {};

                ethsecp256k1.PubKey = (function() {

                    /**
                     * Properties of a PubKey.
                     * @memberof ethermint.crypto.v1.ethsecp256k1
                     * @interface IPubKey
                     * @property {Uint8Array|null} [key] PubKey key
                     */

                    /**
                     * Constructs a new PubKey.
                     * @memberof ethermint.crypto.v1.ethsecp256k1
                     * @classdesc Represents a PubKey.
                     * @implements IPubKey
                     * @constructor
                     * @param {ethermint.crypto.v1.ethsecp256k1.IPubKey=} [properties] Properties to set
                     */
                    function PubKey(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PubKey key.
                     * @member {Uint8Array} key
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @instance
                     */
                    PubKey.prototype.key = $util.newBuffer([]);

                    /**
                     * Encodes the specified PubKey message. Does not implicitly {@link ethermint.crypto.v1.ethsecp256k1.PubKey.verify|verify} messages.
                     * @function encode
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @static
                     * @param {ethermint.crypto.v1.ethsecp256k1.IPubKey} message PubKey message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PubKey.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        return writer;
                    };

                    /**
                     * Encodes the specified PubKey message, length delimited. Does not implicitly {@link ethermint.crypto.v1.ethsecp256k1.PubKey.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @static
                     * @param {ethermint.crypto.v1.ethsecp256k1.IPubKey} message PubKey message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PubKey.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PubKey message from the specified reader or buffer.
                     * @function decode
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ethermint.crypto.v1.ethsecp256k1.PubKey} PubKey
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PubKey.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.crypto.v1.ethsecp256k1.PubKey();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PubKey message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ethermint.crypto.v1.ethsecp256k1.PubKey} PubKey
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PubKey.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PubKey message.
                     * @function verify
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PubKey.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PubKey message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ethermint.crypto.v1.ethsecp256k1.PubKey} PubKey
                     */
                    PubKey.fromObject = function fromObject(object) {
                        if (object instanceof $root.ethermint.crypto.v1.ethsecp256k1.PubKey)
                            return object;
                        let message = new $root.ethermint.crypto.v1.ethsecp256k1.PubKey();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PubKey message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @static
                     * @param {ethermint.crypto.v1.ethsecp256k1.PubKey} message PubKey
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PubKey.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        return object;
                    };

                    /**
                     * Converts this PubKey to JSON.
                     * @function toJSON
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PubKey
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PubKey.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PubKey;
                })();

                ethsecp256k1.PrivKey = (function() {

                    /**
                     * Properties of a PrivKey.
                     * @memberof ethermint.crypto.v1.ethsecp256k1
                     * @interface IPrivKey
                     * @property {Uint8Array|null} [key] PrivKey key
                     */

                    /**
                     * Constructs a new PrivKey.
                     * @memberof ethermint.crypto.v1.ethsecp256k1
                     * @classdesc Represents a PrivKey.
                     * @implements IPrivKey
                     * @constructor
                     * @param {ethermint.crypto.v1.ethsecp256k1.IPrivKey=} [properties] Properties to set
                     */
                    function PrivKey(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PrivKey key.
                     * @member {Uint8Array} key
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @instance
                     */
                    PrivKey.prototype.key = $util.newBuffer([]);

                    /**
                     * Encodes the specified PrivKey message. Does not implicitly {@link ethermint.crypto.v1.ethsecp256k1.PrivKey.verify|verify} messages.
                     * @function encode
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @static
                     * @param {ethermint.crypto.v1.ethsecp256k1.IPrivKey} message PrivKey message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PrivKey.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        return writer;
                    };

                    /**
                     * Encodes the specified PrivKey message, length delimited. Does not implicitly {@link ethermint.crypto.v1.ethsecp256k1.PrivKey.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @static
                     * @param {ethermint.crypto.v1.ethsecp256k1.IPrivKey} message PrivKey message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PrivKey.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PrivKey message from the specified reader or buffer.
                     * @function decode
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ethermint.crypto.v1.ethsecp256k1.PrivKey} PrivKey
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PrivKey.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.crypto.v1.ethsecp256k1.PrivKey();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PrivKey message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ethermint.crypto.v1.ethsecp256k1.PrivKey} PrivKey
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PrivKey.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PrivKey message.
                     * @function verify
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PrivKey.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PrivKey message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ethermint.crypto.v1.ethsecp256k1.PrivKey} PrivKey
                     */
                    PrivKey.fromObject = function fromObject(object) {
                        if (object instanceof $root.ethermint.crypto.v1.ethsecp256k1.PrivKey)
                            return object;
                        let message = new $root.ethermint.crypto.v1.ethsecp256k1.PrivKey();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PrivKey message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @static
                     * @param {ethermint.crypto.v1.ethsecp256k1.PrivKey} message PrivKey
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PrivKey.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        return object;
                    };

                    /**
                     * Converts this PrivKey to JSON.
                     * @function toJSON
                     * @memberof ethermint.crypto.v1.ethsecp256k1.PrivKey
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PrivKey.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PrivKey;
                })();

                return ethsecp256k1;
            })();

            return v1;
        })();

        return crypto;
    })();

    ethermint.evm = (function() {

        /**
         * Namespace evm.
         * @memberof ethermint
         * @namespace
         */
        const evm = {};

        evm.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof ethermint.evm
             * @namespace
             */
            const v1 = {};

            v1.Msg = (function() {

                /**
                 * Constructs a new Msg service.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                /**
                 * Callback as used by {@link ethermint.evm.v1.Msg#ethereumTx}.
                 * @memberof ethermint.evm.v1.Msg
                 * @typedef EthereumTxCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.MsgEthereumTxResponse} [response] MsgEthereumTxResponse
                 */

                /**
                 * Calls EthereumTx.
                 * @function ethereumTx
                 * @memberof ethermint.evm.v1.Msg
                 * @instance
                 * @param {ethermint.evm.v1.IMsgEthereumTx} request MsgEthereumTx message or plain object
                 * @param {ethermint.evm.v1.Msg.EthereumTxCallback} callback Node-style callback called with the error, if any, and MsgEthereumTxResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.ethereumTx = function ethereumTx(request, callback) {
                    return this.rpcCall(ethereumTx, $root.ethermint.evm.v1.MsgEthereumTx, $root.ethermint.evm.v1.MsgEthereumTxResponse, request, callback);
                }, "name", { value: "EthereumTx" });

                /**
                 * Calls EthereumTx.
                 * @function ethereumTx
                 * @memberof ethermint.evm.v1.Msg
                 * @instance
                 * @param {ethermint.evm.v1.IMsgEthereumTx} request MsgEthereumTx message or plain object
                 * @returns {Promise<ethermint.evm.v1.MsgEthereumTxResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Msg#updateParams}.
                 * @memberof ethermint.evm.v1.Msg
                 * @typedef UpdateParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                 */

                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof ethermint.evm.v1.Msg
                 * @instance
                 * @param {ethermint.evm.v1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @param {ethermint.evm.v1.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                    return this.rpcCall(updateParams, $root.ethermint.evm.v1.MsgUpdateParams, $root.ethermint.evm.v1.MsgUpdateParamsResponse, request, callback);
                }, "name", { value: "UpdateParams" });

                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof ethermint.evm.v1.Msg
                 * @instance
                 * @param {ethermint.evm.v1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @returns {Promise<ethermint.evm.v1.MsgUpdateParamsResponse>} Promise
                 * @variation 2
                 */

                return Msg;
            })();

            v1.MsgEthereumTx = (function() {

                /**
                 * Properties of a MsgEthereumTx.
                 * @memberof ethermint.evm.v1
                 * @interface IMsgEthereumTx
                 * @property {google.protobuf.IAny|null} [data] MsgEthereumTx data
                 * @property {number|null} [size] MsgEthereumTx size
                 * @property {string|null} [hash] MsgEthereumTx hash
                 * @property {string|null} [from] MsgEthereumTx from
                 */

                /**
                 * Constructs a new MsgEthereumTx.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a MsgEthereumTx.
                 * @implements IMsgEthereumTx
                 * @constructor
                 * @param {ethermint.evm.v1.IMsgEthereumTx=} [properties] Properties to set
                 */
                function MsgEthereumTx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgEthereumTx data.
                 * @member {google.protobuf.IAny|null|undefined} data
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @instance
                 */
                MsgEthereumTx.prototype.data = null;

                /**
                 * MsgEthereumTx size.
                 * @member {number} size
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @instance
                 */
                MsgEthereumTx.prototype.size = 0;

                /**
                 * MsgEthereumTx hash.
                 * @member {string} hash
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @instance
                 */
                MsgEthereumTx.prototype.hash = "";

                /**
                 * MsgEthereumTx from.
                 * @member {string} from
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @instance
                 */
                MsgEthereumTx.prototype.from = "";

                /**
                 * Encodes the specified MsgEthereumTx message. Does not implicitly {@link ethermint.evm.v1.MsgEthereumTx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.IMsgEthereumTx} message MsgEthereumTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEthereumTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        $root.google.protobuf.Any.encode(message.data, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.size);
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.hash);
                    if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.from);
                    return writer;
                };

                /**
                 * Encodes the specified MsgEthereumTx message, length delimited. Does not implicitly {@link ethermint.evm.v1.MsgEthereumTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.IMsgEthereumTx} message MsgEthereumTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEthereumTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgEthereumTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.MsgEthereumTx} MsgEthereumTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEthereumTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.MsgEthereumTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.size = reader.double();
                            break;
                        case 3:
                            message.hash = reader.string();
                            break;
                        case 4:
                            message.from = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgEthereumTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.MsgEthereumTx} MsgEthereumTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEthereumTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgEthereumTx message.
                 * @function verify
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgEthereumTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.google.protobuf.Any.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.size != null && message.hasOwnProperty("size"))
                        if (typeof message.size !== "number")
                            return "size: number expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!$util.isString(message.hash))
                            return "hash: string expected";
                    if (message.from != null && message.hasOwnProperty("from"))
                        if (!$util.isString(message.from))
                            return "from: string expected";
                    return null;
                };

                /**
                 * Creates a MsgEthereumTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.MsgEthereumTx} MsgEthereumTx
                 */
                MsgEthereumTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.MsgEthereumTx)
                        return object;
                    let message = new $root.ethermint.evm.v1.MsgEthereumTx();
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".ethermint.evm.v1.MsgEthereumTx.data: object expected");
                        message.data = $root.google.protobuf.Any.fromObject(object.data);
                    }
                    if (object.size != null)
                        message.size = Number(object.size);
                    if (object.hash != null)
                        message.hash = String(object.hash);
                    if (object.from != null)
                        message.from = String(object.from);
                    return message;
                };

                /**
                 * Creates a plain object from a MsgEthereumTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.MsgEthereumTx} message MsgEthereumTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgEthereumTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.data = null;
                        object.size = 0;
                        object.hash = "";
                        object.from = "";
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.google.protobuf.Any.toObject(message.data, options);
                    if (message.size != null && message.hasOwnProperty("size"))
                        object.size = options.json && !isFinite(message.size) ? String(message.size) : message.size;
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = message.hash;
                    if (message.from != null && message.hasOwnProperty("from"))
                        object.from = message.from;
                    return object;
                };

                /**
                 * Converts this MsgEthereumTx to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.MsgEthereumTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgEthereumTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgEthereumTx;
            })();

            v1.LegacyTx = (function() {

                /**
                 * Properties of a LegacyTx.
                 * @memberof ethermint.evm.v1
                 * @interface ILegacyTx
                 * @property {number|null} [nonce] LegacyTx nonce
                 * @property {string|null} [gas_price] LegacyTx gas_price
                 * @property {number|null} [gas] LegacyTx gas
                 * @property {string|null} [to] LegacyTx to
                 * @property {string|null} [value] LegacyTx value
                 * @property {Uint8Array|null} [data] LegacyTx data
                 * @property {Uint8Array|null} [v] LegacyTx v
                 * @property {Uint8Array|null} [r] LegacyTx r
                 * @property {Uint8Array|null} [s] LegacyTx s
                 */

                /**
                 * Constructs a new LegacyTx.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a LegacyTx.
                 * @implements ILegacyTx
                 * @constructor
                 * @param {ethermint.evm.v1.ILegacyTx=} [properties] Properties to set
                 */
                function LegacyTx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * LegacyTx nonce.
                 * @member {number} nonce
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * LegacyTx gas_price.
                 * @member {string} gas_price
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.gas_price = "";

                /**
                 * LegacyTx gas.
                 * @member {number} gas
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * LegacyTx to.
                 * @member {string} to
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.to = "";

                /**
                 * LegacyTx value.
                 * @member {string} value
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.value = "";

                /**
                 * LegacyTx data.
                 * @member {Uint8Array} data
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.data = $util.newBuffer([]);

                /**
                 * LegacyTx v.
                 * @member {Uint8Array} v
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.v = $util.newBuffer([]);

                /**
                 * LegacyTx r.
                 * @member {Uint8Array} r
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.r = $util.newBuffer([]);

                /**
                 * LegacyTx s.
                 * @member {Uint8Array} s
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 */
                LegacyTx.prototype.s = $util.newBuffer([]);

                /**
                 * Encodes the specified LegacyTx message. Does not implicitly {@link ethermint.evm.v1.LegacyTx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @static
                 * @param {ethermint.evm.v1.ILegacyTx} message LegacyTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LegacyTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                    if (message.gas_price != null && Object.hasOwnProperty.call(message, "gas_price"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gas_price);
                    if (message.gas != null && Object.hasOwnProperty.call(message, "gas"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.gas);
                    if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.to);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.value);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.data);
                    if (message.v != null && Object.hasOwnProperty.call(message, "v"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.v);
                    if (message.r != null && Object.hasOwnProperty.call(message, "r"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.r);
                    if (message.s != null && Object.hasOwnProperty.call(message, "s"))
                        writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.s);
                    return writer;
                };

                /**
                 * Encodes the specified LegacyTx message, length delimited. Does not implicitly {@link ethermint.evm.v1.LegacyTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @static
                 * @param {ethermint.evm.v1.ILegacyTx} message LegacyTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LegacyTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a LegacyTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.LegacyTx} LegacyTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LegacyTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.LegacyTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.nonce = reader.uint64();
                            break;
                        case 2:
                            message.gas_price = reader.string();
                            break;
                        case 3:
                            message.gas = reader.uint64();
                            break;
                        case 4:
                            message.to = reader.string();
                            break;
                        case 5:
                            message.value = reader.string();
                            break;
                        case 6:
                            message.data = reader.bytes();
                            break;
                        case 7:
                            message.v = reader.bytes();
                            break;
                        case 8:
                            message.r = reader.bytes();
                            break;
                        case 9:
                            message.s = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a LegacyTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.LegacyTx} LegacyTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LegacyTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a LegacyTx message.
                 * @function verify
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LegacyTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                            return "nonce: integer|Long expected";
                    if (message.gas_price != null && message.hasOwnProperty("gas_price"))
                        if (!$util.isString(message.gas_price))
                            return "gas_price: string expected";
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (!$util.isInteger(message.gas) && !(message.gas && $util.isInteger(message.gas.low) && $util.isInteger(message.gas.high)))
                            return "gas: integer|Long expected";
                    if (message.to != null && message.hasOwnProperty("to"))
                        if (!$util.isString(message.to))
                            return "to: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.v != null && message.hasOwnProperty("v"))
                        if (!(message.v && typeof message.v.length === "number" || $util.isString(message.v)))
                            return "v: buffer expected";
                    if (message.r != null && message.hasOwnProperty("r"))
                        if (!(message.r && typeof message.r.length === "number" || $util.isString(message.r)))
                            return "r: buffer expected";
                    if (message.s != null && message.hasOwnProperty("s"))
                        if (!(message.s && typeof message.s.length === "number" || $util.isString(message.s)))
                            return "s: buffer expected";
                    return null;
                };

                /**
                 * Creates a LegacyTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.LegacyTx} LegacyTx
                 */
                LegacyTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.LegacyTx)
                        return object;
                    let message = new $root.ethermint.evm.v1.LegacyTx();
                    if (object.nonce != null)
                        if ($util.Long)
                            (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                        else if (typeof object.nonce === "string")
                            message.nonce = parseInt(object.nonce, 10);
                        else if (typeof object.nonce === "number")
                            message.nonce = object.nonce;
                        else if (typeof object.nonce === "object")
                            message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                    if (object.gas_price != null)
                        message.gas_price = String(object.gas_price);
                    if (object.gas != null)
                        if ($util.Long)
                            (message.gas = $util.Long.fromValue(object.gas)).unsigned = true;
                        else if (typeof object.gas === "string")
                            message.gas = parseInt(object.gas, 10);
                        else if (typeof object.gas === "number")
                            message.gas = object.gas;
                        else if (typeof object.gas === "object")
                            message.gas = new $util.LongBits(object.gas.low >>> 0, object.gas.high >>> 0).toNumber(true);
                    if (object.to != null)
                        message.to = String(object.to);
                    if (object.value != null)
                        message.value = String(object.value);
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.v != null)
                        if (typeof object.v === "string")
                            $util.base64.decode(object.v, message.v = $util.newBuffer($util.base64.length(object.v)), 0);
                        else if (object.v.length)
                            message.v = object.v;
                    if (object.r != null)
                        if (typeof object.r === "string")
                            $util.base64.decode(object.r, message.r = $util.newBuffer($util.base64.length(object.r)), 0);
                        else if (object.r.length)
                            message.r = object.r;
                    if (object.s != null)
                        if (typeof object.s === "string")
                            $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);
                        else if (object.s.length)
                            message.s = object.s;
                    return message;
                };

                /**
                 * Creates a plain object from a LegacyTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @static
                 * @param {ethermint.evm.v1.LegacyTx} message LegacyTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LegacyTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.nonce = options.longs === String ? "0" : 0;
                        object.gas_price = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas = options.longs === String ? "0" : 0;
                        object.to = "";
                        object.value = "";
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        if (options.bytes === String)
                            object.v = "";
                        else {
                            object.v = [];
                            if (options.bytes !== Array)
                                object.v = $util.newBuffer(object.v);
                        }
                        if (options.bytes === String)
                            object.r = "";
                        else {
                            object.r = [];
                            if (options.bytes !== Array)
                                object.r = $util.newBuffer(object.r);
                        }
                        if (options.bytes === String)
                            object.s = "";
                        else {
                            object.s = [];
                            if (options.bytes !== Array)
                                object.s = $util.newBuffer(object.s);
                        }
                    }
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (typeof message.nonce === "number")
                            object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                        else
                            object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                    if (message.gas_price != null && message.hasOwnProperty("gas_price"))
                        object.gas_price = message.gas_price;
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (typeof message.gas === "number")
                            object.gas = options.longs === String ? String(message.gas) : message.gas;
                        else
                            object.gas = options.longs === String ? $util.Long.prototype.toString.call(message.gas) : options.longs === Number ? new $util.LongBits(message.gas.low >>> 0, message.gas.high >>> 0).toNumber(true) : message.gas;
                    if (message.to != null && message.hasOwnProperty("to"))
                        object.to = message.to;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.v != null && message.hasOwnProperty("v"))
                        object.v = options.bytes === String ? $util.base64.encode(message.v, 0, message.v.length) : options.bytes === Array ? Array.prototype.slice.call(message.v) : message.v;
                    if (message.r != null && message.hasOwnProperty("r"))
                        object.r = options.bytes === String ? $util.base64.encode(message.r, 0, message.r.length) : options.bytes === Array ? Array.prototype.slice.call(message.r) : message.r;
                    if (message.s != null && message.hasOwnProperty("s"))
                        object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;
                    return object;
                };

                /**
                 * Converts this LegacyTx to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.LegacyTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LegacyTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return LegacyTx;
            })();

            v1.AccessListTx = (function() {

                /**
                 * Properties of an AccessListTx.
                 * @memberof ethermint.evm.v1
                 * @interface IAccessListTx
                 * @property {string|null} [chain_id] AccessListTx chain_id
                 * @property {number|null} [nonce] AccessListTx nonce
                 * @property {string|null} [gas_price] AccessListTx gas_price
                 * @property {number|null} [gas] AccessListTx gas
                 * @property {string|null} [to] AccessListTx to
                 * @property {string|null} [value] AccessListTx value
                 * @property {Uint8Array|null} [data] AccessListTx data
                 * @property {Array.<ethermint.evm.v1.IAccessTuple>|null} [accesses] AccessListTx accesses
                 * @property {Uint8Array|null} [v] AccessListTx v
                 * @property {Uint8Array|null} [r] AccessListTx r
                 * @property {Uint8Array|null} [s] AccessListTx s
                 */

                /**
                 * Constructs a new AccessListTx.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an AccessListTx.
                 * @implements IAccessListTx
                 * @constructor
                 * @param {ethermint.evm.v1.IAccessListTx=} [properties] Properties to set
                 */
                function AccessListTx(properties) {
                    this.accesses = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AccessListTx chain_id.
                 * @member {string} chain_id
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.chain_id = "";

                /**
                 * AccessListTx nonce.
                 * @member {number} nonce
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * AccessListTx gas_price.
                 * @member {string} gas_price
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.gas_price = "";

                /**
                 * AccessListTx gas.
                 * @member {number} gas
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * AccessListTx to.
                 * @member {string} to
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.to = "";

                /**
                 * AccessListTx value.
                 * @member {string} value
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.value = "";

                /**
                 * AccessListTx data.
                 * @member {Uint8Array} data
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.data = $util.newBuffer([]);

                /**
                 * AccessListTx accesses.
                 * @member {Array.<ethermint.evm.v1.IAccessTuple>} accesses
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.accesses = $util.emptyArray;

                /**
                 * AccessListTx v.
                 * @member {Uint8Array} v
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.v = $util.newBuffer([]);

                /**
                 * AccessListTx r.
                 * @member {Uint8Array} r
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.r = $util.newBuffer([]);

                /**
                 * AccessListTx s.
                 * @member {Uint8Array} s
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 */
                AccessListTx.prototype.s = $util.newBuffer([]);

                /**
                 * Encodes the specified AccessListTx message. Does not implicitly {@link ethermint.evm.v1.AccessListTx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @static
                 * @param {ethermint.evm.v1.IAccessListTx} message AccessListTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessListTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                    if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.nonce);
                    if (message.gas_price != null && Object.hasOwnProperty.call(message, "gas_price"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.gas_price);
                    if (message.gas != null && Object.hasOwnProperty.call(message, "gas"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.gas);
                    if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.to);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.value);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.data);
                    if (message.accesses != null && message.accesses.length)
                        for (let i = 0; i < message.accesses.length; ++i)
                            $root.ethermint.evm.v1.AccessTuple.encode(message.accesses[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.v != null && Object.hasOwnProperty.call(message, "v"))
                        writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.v);
                    if (message.r != null && Object.hasOwnProperty.call(message, "r"))
                        writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.r);
                    if (message.s != null && Object.hasOwnProperty.call(message, "s"))
                        writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.s);
                    return writer;
                };

                /**
                 * Encodes the specified AccessListTx message, length delimited. Does not implicitly {@link ethermint.evm.v1.AccessListTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @static
                 * @param {ethermint.evm.v1.IAccessListTx} message AccessListTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessListTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AccessListTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.AccessListTx} AccessListTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessListTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.AccessListTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.chain_id = reader.string();
                            break;
                        case 2:
                            message.nonce = reader.uint64();
                            break;
                        case 3:
                            message.gas_price = reader.string();
                            break;
                        case 4:
                            message.gas = reader.uint64();
                            break;
                        case 5:
                            message.to = reader.string();
                            break;
                        case 6:
                            message.value = reader.string();
                            break;
                        case 7:
                            message.data = reader.bytes();
                            break;
                        case 8:
                            if (!(message.accesses && message.accesses.length))
                                message.accesses = [];
                            message.accesses.push($root.ethermint.evm.v1.AccessTuple.decode(reader, reader.uint32()));
                            break;
                        case 9:
                            message.v = reader.bytes();
                            break;
                        case 10:
                            message.r = reader.bytes();
                            break;
                        case 11:
                            message.s = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AccessListTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.AccessListTx} AccessListTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessListTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AccessListTx message.
                 * @function verify
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AccessListTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isString(message.chain_id))
                            return "chain_id: string expected";
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                            return "nonce: integer|Long expected";
                    if (message.gas_price != null && message.hasOwnProperty("gas_price"))
                        if (!$util.isString(message.gas_price))
                            return "gas_price: string expected";
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (!$util.isInteger(message.gas) && !(message.gas && $util.isInteger(message.gas.low) && $util.isInteger(message.gas.high)))
                            return "gas: integer|Long expected";
                    if (message.to != null && message.hasOwnProperty("to"))
                        if (!$util.isString(message.to))
                            return "to: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.accesses != null && message.hasOwnProperty("accesses")) {
                        if (!Array.isArray(message.accesses))
                            return "accesses: array expected";
                        for (let i = 0; i < message.accesses.length; ++i) {
                            let error = $root.ethermint.evm.v1.AccessTuple.verify(message.accesses[i]);
                            if (error)
                                return "accesses." + error;
                        }
                    }
                    if (message.v != null && message.hasOwnProperty("v"))
                        if (!(message.v && typeof message.v.length === "number" || $util.isString(message.v)))
                            return "v: buffer expected";
                    if (message.r != null && message.hasOwnProperty("r"))
                        if (!(message.r && typeof message.r.length === "number" || $util.isString(message.r)))
                            return "r: buffer expected";
                    if (message.s != null && message.hasOwnProperty("s"))
                        if (!(message.s && typeof message.s.length === "number" || $util.isString(message.s)))
                            return "s: buffer expected";
                    return null;
                };

                /**
                 * Creates an AccessListTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.AccessListTx} AccessListTx
                 */
                AccessListTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.AccessListTx)
                        return object;
                    let message = new $root.ethermint.evm.v1.AccessListTx();
                    if (object.chain_id != null)
                        message.chain_id = String(object.chain_id);
                    if (object.nonce != null)
                        if ($util.Long)
                            (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                        else if (typeof object.nonce === "string")
                            message.nonce = parseInt(object.nonce, 10);
                        else if (typeof object.nonce === "number")
                            message.nonce = object.nonce;
                        else if (typeof object.nonce === "object")
                            message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                    if (object.gas_price != null)
                        message.gas_price = String(object.gas_price);
                    if (object.gas != null)
                        if ($util.Long)
                            (message.gas = $util.Long.fromValue(object.gas)).unsigned = true;
                        else if (typeof object.gas === "string")
                            message.gas = parseInt(object.gas, 10);
                        else if (typeof object.gas === "number")
                            message.gas = object.gas;
                        else if (typeof object.gas === "object")
                            message.gas = new $util.LongBits(object.gas.low >>> 0, object.gas.high >>> 0).toNumber(true);
                    if (object.to != null)
                        message.to = String(object.to);
                    if (object.value != null)
                        message.value = String(object.value);
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.accesses) {
                        if (!Array.isArray(object.accesses))
                            throw TypeError(".ethermint.evm.v1.AccessListTx.accesses: array expected");
                        message.accesses = [];
                        for (let i = 0; i < object.accesses.length; ++i) {
                            if (typeof object.accesses[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.AccessListTx.accesses: object expected");
                            message.accesses[i] = $root.ethermint.evm.v1.AccessTuple.fromObject(object.accesses[i]);
                        }
                    }
                    if (object.v != null)
                        if (typeof object.v === "string")
                            $util.base64.decode(object.v, message.v = $util.newBuffer($util.base64.length(object.v)), 0);
                        else if (object.v.length)
                            message.v = object.v;
                    if (object.r != null)
                        if (typeof object.r === "string")
                            $util.base64.decode(object.r, message.r = $util.newBuffer($util.base64.length(object.r)), 0);
                        else if (object.r.length)
                            message.r = object.r;
                    if (object.s != null)
                        if (typeof object.s === "string")
                            $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);
                        else if (object.s.length)
                            message.s = object.s;
                    return message;
                };

                /**
                 * Creates a plain object from an AccessListTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @static
                 * @param {ethermint.evm.v1.AccessListTx} message AccessListTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AccessListTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.accesses = [];
                    if (options.defaults) {
                        object.chain_id = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.nonce = options.longs === String ? "0" : 0;
                        object.gas_price = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas = options.longs === String ? "0" : 0;
                        object.to = "";
                        object.value = "";
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        if (options.bytes === String)
                            object.v = "";
                        else {
                            object.v = [];
                            if (options.bytes !== Array)
                                object.v = $util.newBuffer(object.v);
                        }
                        if (options.bytes === String)
                            object.r = "";
                        else {
                            object.r = [];
                            if (options.bytes !== Array)
                                object.r = $util.newBuffer(object.r);
                        }
                        if (options.bytes === String)
                            object.s = "";
                        else {
                            object.s = [];
                            if (options.bytes !== Array)
                                object.s = $util.newBuffer(object.s);
                        }
                    }
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        object.chain_id = message.chain_id;
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (typeof message.nonce === "number")
                            object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                        else
                            object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                    if (message.gas_price != null && message.hasOwnProperty("gas_price"))
                        object.gas_price = message.gas_price;
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (typeof message.gas === "number")
                            object.gas = options.longs === String ? String(message.gas) : message.gas;
                        else
                            object.gas = options.longs === String ? $util.Long.prototype.toString.call(message.gas) : options.longs === Number ? new $util.LongBits(message.gas.low >>> 0, message.gas.high >>> 0).toNumber(true) : message.gas;
                    if (message.to != null && message.hasOwnProperty("to"))
                        object.to = message.to;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.accesses && message.accesses.length) {
                        object.accesses = [];
                        for (let j = 0; j < message.accesses.length; ++j)
                            object.accesses[j] = $root.ethermint.evm.v1.AccessTuple.toObject(message.accesses[j], options);
                    }
                    if (message.v != null && message.hasOwnProperty("v"))
                        object.v = options.bytes === String ? $util.base64.encode(message.v, 0, message.v.length) : options.bytes === Array ? Array.prototype.slice.call(message.v) : message.v;
                    if (message.r != null && message.hasOwnProperty("r"))
                        object.r = options.bytes === String ? $util.base64.encode(message.r, 0, message.r.length) : options.bytes === Array ? Array.prototype.slice.call(message.r) : message.r;
                    if (message.s != null && message.hasOwnProperty("s"))
                        object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;
                    return object;
                };

                /**
                 * Converts this AccessListTx to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.AccessListTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AccessListTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AccessListTx;
            })();

            v1.DynamicFeeTx = (function() {

                /**
                 * Properties of a DynamicFeeTx.
                 * @memberof ethermint.evm.v1
                 * @interface IDynamicFeeTx
                 * @property {string|null} [chain_id] DynamicFeeTx chain_id
                 * @property {number|null} [nonce] DynamicFeeTx nonce
                 * @property {string|null} [gas_tip_cap] DynamicFeeTx gas_tip_cap
                 * @property {string|null} [gas_fee_cap] DynamicFeeTx gas_fee_cap
                 * @property {number|null} [gas] DynamicFeeTx gas
                 * @property {string|null} [to] DynamicFeeTx to
                 * @property {string|null} [value] DynamicFeeTx value
                 * @property {Uint8Array|null} [data] DynamicFeeTx data
                 * @property {Array.<ethermint.evm.v1.IAccessTuple>|null} [accesses] DynamicFeeTx accesses
                 * @property {Uint8Array|null} [v] DynamicFeeTx v
                 * @property {Uint8Array|null} [r] DynamicFeeTx r
                 * @property {Uint8Array|null} [s] DynamicFeeTx s
                 */

                /**
                 * Constructs a new DynamicFeeTx.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a DynamicFeeTx.
                 * @implements IDynamicFeeTx
                 * @constructor
                 * @param {ethermint.evm.v1.IDynamicFeeTx=} [properties] Properties to set
                 */
                function DynamicFeeTx(properties) {
                    this.accesses = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DynamicFeeTx chain_id.
                 * @member {string} chain_id
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.chain_id = "";

                /**
                 * DynamicFeeTx nonce.
                 * @member {number} nonce
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * DynamicFeeTx gas_tip_cap.
                 * @member {string} gas_tip_cap
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.gas_tip_cap = "";

                /**
                 * DynamicFeeTx gas_fee_cap.
                 * @member {string} gas_fee_cap
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.gas_fee_cap = "";

                /**
                 * DynamicFeeTx gas.
                 * @member {number} gas
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * DynamicFeeTx to.
                 * @member {string} to
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.to = "";

                /**
                 * DynamicFeeTx value.
                 * @member {string} value
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.value = "";

                /**
                 * DynamicFeeTx data.
                 * @member {Uint8Array} data
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.data = $util.newBuffer([]);

                /**
                 * DynamicFeeTx accesses.
                 * @member {Array.<ethermint.evm.v1.IAccessTuple>} accesses
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.accesses = $util.emptyArray;

                /**
                 * DynamicFeeTx v.
                 * @member {Uint8Array} v
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.v = $util.newBuffer([]);

                /**
                 * DynamicFeeTx r.
                 * @member {Uint8Array} r
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.r = $util.newBuffer([]);

                /**
                 * DynamicFeeTx s.
                 * @member {Uint8Array} s
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 */
                DynamicFeeTx.prototype.s = $util.newBuffer([]);

                /**
                 * Encodes the specified DynamicFeeTx message. Does not implicitly {@link ethermint.evm.v1.DynamicFeeTx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @static
                 * @param {ethermint.evm.v1.IDynamicFeeTx} message DynamicFeeTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DynamicFeeTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                    if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.nonce);
                    if (message.gas_tip_cap != null && Object.hasOwnProperty.call(message, "gas_tip_cap"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.gas_tip_cap);
                    if (message.gas_fee_cap != null && Object.hasOwnProperty.call(message, "gas_fee_cap"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.gas_fee_cap);
                    if (message.gas != null && Object.hasOwnProperty.call(message, "gas"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gas);
                    if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.to);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.value);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.data);
                    if (message.accesses != null && message.accesses.length)
                        for (let i = 0; i < message.accesses.length; ++i)
                            $root.ethermint.evm.v1.AccessTuple.encode(message.accesses[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.v != null && Object.hasOwnProperty.call(message, "v"))
                        writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.v);
                    if (message.r != null && Object.hasOwnProperty.call(message, "r"))
                        writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.r);
                    if (message.s != null && Object.hasOwnProperty.call(message, "s"))
                        writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.s);
                    return writer;
                };

                /**
                 * Encodes the specified DynamicFeeTx message, length delimited. Does not implicitly {@link ethermint.evm.v1.DynamicFeeTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @static
                 * @param {ethermint.evm.v1.IDynamicFeeTx} message DynamicFeeTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DynamicFeeTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DynamicFeeTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.DynamicFeeTx} DynamicFeeTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DynamicFeeTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.DynamicFeeTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.chain_id = reader.string();
                            break;
                        case 2:
                            message.nonce = reader.uint64();
                            break;
                        case 3:
                            message.gas_tip_cap = reader.string();
                            break;
                        case 4:
                            message.gas_fee_cap = reader.string();
                            break;
                        case 5:
                            message.gas = reader.uint64();
                            break;
                        case 6:
                            message.to = reader.string();
                            break;
                        case 7:
                            message.value = reader.string();
                            break;
                        case 8:
                            message.data = reader.bytes();
                            break;
                        case 9:
                            if (!(message.accesses && message.accesses.length))
                                message.accesses = [];
                            message.accesses.push($root.ethermint.evm.v1.AccessTuple.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            message.v = reader.bytes();
                            break;
                        case 11:
                            message.r = reader.bytes();
                            break;
                        case 12:
                            message.s = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DynamicFeeTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.DynamicFeeTx} DynamicFeeTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DynamicFeeTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DynamicFeeTx message.
                 * @function verify
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DynamicFeeTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isString(message.chain_id))
                            return "chain_id: string expected";
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                            return "nonce: integer|Long expected";
                    if (message.gas_tip_cap != null && message.hasOwnProperty("gas_tip_cap"))
                        if (!$util.isString(message.gas_tip_cap))
                            return "gas_tip_cap: string expected";
                    if (message.gas_fee_cap != null && message.hasOwnProperty("gas_fee_cap"))
                        if (!$util.isString(message.gas_fee_cap))
                            return "gas_fee_cap: string expected";
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (!$util.isInteger(message.gas) && !(message.gas && $util.isInteger(message.gas.low) && $util.isInteger(message.gas.high)))
                            return "gas: integer|Long expected";
                    if (message.to != null && message.hasOwnProperty("to"))
                        if (!$util.isString(message.to))
                            return "to: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.accesses != null && message.hasOwnProperty("accesses")) {
                        if (!Array.isArray(message.accesses))
                            return "accesses: array expected";
                        for (let i = 0; i < message.accesses.length; ++i) {
                            let error = $root.ethermint.evm.v1.AccessTuple.verify(message.accesses[i]);
                            if (error)
                                return "accesses." + error;
                        }
                    }
                    if (message.v != null && message.hasOwnProperty("v"))
                        if (!(message.v && typeof message.v.length === "number" || $util.isString(message.v)))
                            return "v: buffer expected";
                    if (message.r != null && message.hasOwnProperty("r"))
                        if (!(message.r && typeof message.r.length === "number" || $util.isString(message.r)))
                            return "r: buffer expected";
                    if (message.s != null && message.hasOwnProperty("s"))
                        if (!(message.s && typeof message.s.length === "number" || $util.isString(message.s)))
                            return "s: buffer expected";
                    return null;
                };

                /**
                 * Creates a DynamicFeeTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.DynamicFeeTx} DynamicFeeTx
                 */
                DynamicFeeTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.DynamicFeeTx)
                        return object;
                    let message = new $root.ethermint.evm.v1.DynamicFeeTx();
                    if (object.chain_id != null)
                        message.chain_id = String(object.chain_id);
                    if (object.nonce != null)
                        if ($util.Long)
                            (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                        else if (typeof object.nonce === "string")
                            message.nonce = parseInt(object.nonce, 10);
                        else if (typeof object.nonce === "number")
                            message.nonce = object.nonce;
                        else if (typeof object.nonce === "object")
                            message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                    if (object.gas_tip_cap != null)
                        message.gas_tip_cap = String(object.gas_tip_cap);
                    if (object.gas_fee_cap != null)
                        message.gas_fee_cap = String(object.gas_fee_cap);
                    if (object.gas != null)
                        if ($util.Long)
                            (message.gas = $util.Long.fromValue(object.gas)).unsigned = true;
                        else if (typeof object.gas === "string")
                            message.gas = parseInt(object.gas, 10);
                        else if (typeof object.gas === "number")
                            message.gas = object.gas;
                        else if (typeof object.gas === "object")
                            message.gas = new $util.LongBits(object.gas.low >>> 0, object.gas.high >>> 0).toNumber(true);
                    if (object.to != null)
                        message.to = String(object.to);
                    if (object.value != null)
                        message.value = String(object.value);
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.accesses) {
                        if (!Array.isArray(object.accesses))
                            throw TypeError(".ethermint.evm.v1.DynamicFeeTx.accesses: array expected");
                        message.accesses = [];
                        for (let i = 0; i < object.accesses.length; ++i) {
                            if (typeof object.accesses[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.DynamicFeeTx.accesses: object expected");
                            message.accesses[i] = $root.ethermint.evm.v1.AccessTuple.fromObject(object.accesses[i]);
                        }
                    }
                    if (object.v != null)
                        if (typeof object.v === "string")
                            $util.base64.decode(object.v, message.v = $util.newBuffer($util.base64.length(object.v)), 0);
                        else if (object.v.length)
                            message.v = object.v;
                    if (object.r != null)
                        if (typeof object.r === "string")
                            $util.base64.decode(object.r, message.r = $util.newBuffer($util.base64.length(object.r)), 0);
                        else if (object.r.length)
                            message.r = object.r;
                    if (object.s != null)
                        if (typeof object.s === "string")
                            $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);
                        else if (object.s.length)
                            message.s = object.s;
                    return message;
                };

                /**
                 * Creates a plain object from a DynamicFeeTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @static
                 * @param {ethermint.evm.v1.DynamicFeeTx} message DynamicFeeTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DynamicFeeTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.accesses = [];
                    if (options.defaults) {
                        object.chain_id = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.nonce = options.longs === String ? "0" : 0;
                        object.gas_tip_cap = "";
                        object.gas_fee_cap = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas = options.longs === String ? "0" : 0;
                        object.to = "";
                        object.value = "";
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        if (options.bytes === String)
                            object.v = "";
                        else {
                            object.v = [];
                            if (options.bytes !== Array)
                                object.v = $util.newBuffer(object.v);
                        }
                        if (options.bytes === String)
                            object.r = "";
                        else {
                            object.r = [];
                            if (options.bytes !== Array)
                                object.r = $util.newBuffer(object.r);
                        }
                        if (options.bytes === String)
                            object.s = "";
                        else {
                            object.s = [];
                            if (options.bytes !== Array)
                                object.s = $util.newBuffer(object.s);
                        }
                    }
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        object.chain_id = message.chain_id;
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (typeof message.nonce === "number")
                            object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                        else
                            object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                    if (message.gas_tip_cap != null && message.hasOwnProperty("gas_tip_cap"))
                        object.gas_tip_cap = message.gas_tip_cap;
                    if (message.gas_fee_cap != null && message.hasOwnProperty("gas_fee_cap"))
                        object.gas_fee_cap = message.gas_fee_cap;
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (typeof message.gas === "number")
                            object.gas = options.longs === String ? String(message.gas) : message.gas;
                        else
                            object.gas = options.longs === String ? $util.Long.prototype.toString.call(message.gas) : options.longs === Number ? new $util.LongBits(message.gas.low >>> 0, message.gas.high >>> 0).toNumber(true) : message.gas;
                    if (message.to != null && message.hasOwnProperty("to"))
                        object.to = message.to;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.accesses && message.accesses.length) {
                        object.accesses = [];
                        for (let j = 0; j < message.accesses.length; ++j)
                            object.accesses[j] = $root.ethermint.evm.v1.AccessTuple.toObject(message.accesses[j], options);
                    }
                    if (message.v != null && message.hasOwnProperty("v"))
                        object.v = options.bytes === String ? $util.base64.encode(message.v, 0, message.v.length) : options.bytes === Array ? Array.prototype.slice.call(message.v) : message.v;
                    if (message.r != null && message.hasOwnProperty("r"))
                        object.r = options.bytes === String ? $util.base64.encode(message.r, 0, message.r.length) : options.bytes === Array ? Array.prototype.slice.call(message.r) : message.r;
                    if (message.s != null && message.hasOwnProperty("s"))
                        object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;
                    return object;
                };

                /**
                 * Converts this DynamicFeeTx to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.DynamicFeeTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DynamicFeeTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DynamicFeeTx;
            })();

            v1.ExtensionOptionsEthereumTx = (function() {

                /**
                 * Properties of an ExtensionOptionsEthereumTx.
                 * @memberof ethermint.evm.v1
                 * @interface IExtensionOptionsEthereumTx
                 */

                /**
                 * Constructs a new ExtensionOptionsEthereumTx.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an ExtensionOptionsEthereumTx.
                 * @implements IExtensionOptionsEthereumTx
                 * @constructor
                 * @param {ethermint.evm.v1.IExtensionOptionsEthereumTx=} [properties] Properties to set
                 */
                function ExtensionOptionsEthereumTx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified ExtensionOptionsEthereumTx message. Does not implicitly {@link ethermint.evm.v1.ExtensionOptionsEthereumTx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.IExtensionOptionsEthereumTx} message ExtensionOptionsEthereumTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionOptionsEthereumTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionOptionsEthereumTx message, length delimited. Does not implicitly {@link ethermint.evm.v1.ExtensionOptionsEthereumTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.IExtensionOptionsEthereumTx} message ExtensionOptionsEthereumTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionOptionsEthereumTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionOptionsEthereumTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.ExtensionOptionsEthereumTx} ExtensionOptionsEthereumTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionOptionsEthereumTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.ExtensionOptionsEthereumTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionOptionsEthereumTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.ExtensionOptionsEthereumTx} ExtensionOptionsEthereumTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionOptionsEthereumTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionOptionsEthereumTx message.
                 * @function verify
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionOptionsEthereumTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates an ExtensionOptionsEthereumTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.ExtensionOptionsEthereumTx} ExtensionOptionsEthereumTx
                 */
                ExtensionOptionsEthereumTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.ExtensionOptionsEthereumTx)
                        return object;
                    return new $root.ethermint.evm.v1.ExtensionOptionsEthereumTx();
                };

                /**
                 * Creates a plain object from an ExtensionOptionsEthereumTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.ExtensionOptionsEthereumTx} message ExtensionOptionsEthereumTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionOptionsEthereumTx.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this ExtensionOptionsEthereumTx to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.ExtensionOptionsEthereumTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionOptionsEthereumTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionOptionsEthereumTx;
            })();

            v1.MsgEthereumTxResponse = (function() {

                /**
                 * Properties of a MsgEthereumTxResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IMsgEthereumTxResponse
                 * @property {string|null} [hash] MsgEthereumTxResponse hash
                 * @property {Array.<ethermint.evm.v1.ILog>|null} [logs] MsgEthereumTxResponse logs
                 * @property {Uint8Array|null} [ret] MsgEthereumTxResponse ret
                 * @property {string|null} [vm_error] MsgEthereumTxResponse vm_error
                 * @property {number|null} [gas_used] MsgEthereumTxResponse gas_used
                 */

                /**
                 * Constructs a new MsgEthereumTxResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a MsgEthereumTxResponse.
                 * @implements IMsgEthereumTxResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IMsgEthereumTxResponse=} [properties] Properties to set
                 */
                function MsgEthereumTxResponse(properties) {
                    this.logs = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgEthereumTxResponse hash.
                 * @member {string} hash
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @instance
                 */
                MsgEthereumTxResponse.prototype.hash = "";

                /**
                 * MsgEthereumTxResponse logs.
                 * @member {Array.<ethermint.evm.v1.ILog>} logs
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @instance
                 */
                MsgEthereumTxResponse.prototype.logs = $util.emptyArray;

                /**
                 * MsgEthereumTxResponse ret.
                 * @member {Uint8Array} ret
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @instance
                 */
                MsgEthereumTxResponse.prototype.ret = $util.newBuffer([]);

                /**
                 * MsgEthereumTxResponse vm_error.
                 * @member {string} vm_error
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @instance
                 */
                MsgEthereumTxResponse.prototype.vm_error = "";

                /**
                 * MsgEthereumTxResponse gas_used.
                 * @member {number} gas_used
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @instance
                 */
                MsgEthereumTxResponse.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified MsgEthereumTxResponse message. Does not implicitly {@link ethermint.evm.v1.MsgEthereumTxResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @static
                 * @param {ethermint.evm.v1.IMsgEthereumTxResponse} message MsgEthereumTxResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEthereumTxResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                    if (message.logs != null && message.logs.length)
                        for (let i = 0; i < message.logs.length; ++i)
                            $root.ethermint.evm.v1.Log.encode(message.logs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.ret != null && Object.hasOwnProperty.call(message, "ret"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.ret);
                    if (message.vm_error != null && Object.hasOwnProperty.call(message, "vm_error"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.vm_error);
                    if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gas_used);
                    return writer;
                };

                /**
                 * Encodes the specified MsgEthereumTxResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.MsgEthereumTxResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @static
                 * @param {ethermint.evm.v1.IMsgEthereumTxResponse} message MsgEthereumTxResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEthereumTxResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgEthereumTxResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.MsgEthereumTxResponse} MsgEthereumTxResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEthereumTxResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.MsgEthereumTxResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.hash = reader.string();
                            break;
                        case 2:
                            if (!(message.logs && message.logs.length))
                                message.logs = [];
                            message.logs.push($root.ethermint.evm.v1.Log.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.ret = reader.bytes();
                            break;
                        case 4:
                            message.vm_error = reader.string();
                            break;
                        case 5:
                            message.gas_used = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgEthereumTxResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.MsgEthereumTxResponse} MsgEthereumTxResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEthereumTxResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgEthereumTxResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgEthereumTxResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!$util.isString(message.hash))
                            return "hash: string expected";
                    if (message.logs != null && message.hasOwnProperty("logs")) {
                        if (!Array.isArray(message.logs))
                            return "logs: array expected";
                        for (let i = 0; i < message.logs.length; ++i) {
                            let error = $root.ethermint.evm.v1.Log.verify(message.logs[i]);
                            if (error)
                                return "logs." + error;
                        }
                    }
                    if (message.ret != null && message.hasOwnProperty("ret"))
                        if (!(message.ret && typeof message.ret.length === "number" || $util.isString(message.ret)))
                            return "ret: buffer expected";
                    if (message.vm_error != null && message.hasOwnProperty("vm_error"))
                        if (!$util.isString(message.vm_error))
                            return "vm_error: string expected";
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                            return "gas_used: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a MsgEthereumTxResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.MsgEthereumTxResponse} MsgEthereumTxResponse
                 */
                MsgEthereumTxResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.MsgEthereumTxResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.MsgEthereumTxResponse();
                    if (object.hash != null)
                        message.hash = String(object.hash);
                    if (object.logs) {
                        if (!Array.isArray(object.logs))
                            throw TypeError(".ethermint.evm.v1.MsgEthereumTxResponse.logs: array expected");
                        message.logs = [];
                        for (let i = 0; i < object.logs.length; ++i) {
                            if (typeof object.logs[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.MsgEthereumTxResponse.logs: object expected");
                            message.logs[i] = $root.ethermint.evm.v1.Log.fromObject(object.logs[i]);
                        }
                    }
                    if (object.ret != null)
                        if (typeof object.ret === "string")
                            $util.base64.decode(object.ret, message.ret = $util.newBuffer($util.base64.length(object.ret)), 0);
                        else if (object.ret.length)
                            message.ret = object.ret;
                    if (object.vm_error != null)
                        message.vm_error = String(object.vm_error);
                    if (object.gas_used != null)
                        if ($util.Long)
                            (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = true;
                        else if (typeof object.gas_used === "string")
                            message.gas_used = parseInt(object.gas_used, 10);
                        else if (typeof object.gas_used === "number")
                            message.gas_used = object.gas_used;
                        else if (typeof object.gas_used === "object")
                            message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a MsgEthereumTxResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @static
                 * @param {ethermint.evm.v1.MsgEthereumTxResponse} message MsgEthereumTxResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgEthereumTxResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.logs = [];
                    if (options.defaults) {
                        object.hash = "";
                        if (options.bytes === String)
                            object.ret = "";
                        else {
                            object.ret = [];
                            if (options.bytes !== Array)
                                object.ret = $util.newBuffer(object.ret);
                        }
                        object.vm_error = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_used = options.longs === String ? "0" : 0;
                    }
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = message.hash;
                    if (message.logs && message.logs.length) {
                        object.logs = [];
                        for (let j = 0; j < message.logs.length; ++j)
                            object.logs[j] = $root.ethermint.evm.v1.Log.toObject(message.logs[j], options);
                    }
                    if (message.ret != null && message.hasOwnProperty("ret"))
                        object.ret = options.bytes === String ? $util.base64.encode(message.ret, 0, message.ret.length) : options.bytes === Array ? Array.prototype.slice.call(message.ret) : message.ret;
                    if (message.vm_error != null && message.hasOwnProperty("vm_error"))
                        object.vm_error = message.vm_error;
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (typeof message.gas_used === "number")
                            object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                        else
                            object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber(true) : message.gas_used;
                    return object;
                };

                /**
                 * Converts this MsgEthereumTxResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.MsgEthereumTxResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgEthereumTxResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgEthereumTxResponse;
            })();

            v1.MsgUpdateParams = (function() {

                /**
                 * Properties of a MsgUpdateParams.
                 * @memberof ethermint.evm.v1
                 * @interface IMsgUpdateParams
                 * @property {string|null} [authority] MsgUpdateParams authority
                 * @property {ethermint.evm.v1.IParams|null} [params] MsgUpdateParams params
                 */

                /**
                 * Constructs a new MsgUpdateParams.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a MsgUpdateParams.
                 * @implements IMsgUpdateParams
                 * @constructor
                 * @param {ethermint.evm.v1.IMsgUpdateParams=} [properties] Properties to set
                 */
                function MsgUpdateParams(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgUpdateParams authority.
                 * @member {string} authority
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.authority = "";

                /**
                 * MsgUpdateParams params.
                 * @member {ethermint.evm.v1.IParams|null|undefined} params
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.params = null;

                /**
                 * Encodes the specified MsgUpdateParams message. Does not implicitly {@link ethermint.evm.v1.MsgUpdateParams.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @static
                 * @param {ethermint.evm.v1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.ethermint.evm.v1.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link ethermint.evm.v1.MsgUpdateParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @static
                 * @param {ethermint.evm.v1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.MsgUpdateParams();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.authority = reader.string();
                            break;
                        case 2:
                            message.params = $root.ethermint.evm.v1.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgUpdateParams message.
                 * @function verify
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        if (!$util.isString(message.authority))
                            return "authority: string expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.ethermint.evm.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };

                /**
                 * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.MsgUpdateParams} MsgUpdateParams
                 */
                MsgUpdateParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.MsgUpdateParams)
                        return object;
                    let message = new $root.ethermint.evm.v1.MsgUpdateParams();
                    if (object.authority != null)
                        message.authority = String(object.authority);
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".ethermint.evm.v1.MsgUpdateParams.params: object expected");
                        message.params = $root.ethermint.evm.v1.Params.fromObject(object.params);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @static
                 * @param {ethermint.evm.v1.MsgUpdateParams} message MsgUpdateParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.authority = "";
                        object.params = null;
                    }
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        object.authority = message.authority;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.ethermint.evm.v1.Params.toObject(message.params, options);
                    return object;
                };

                /**
                 * Converts this MsgUpdateParams to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.MsgUpdateParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgUpdateParams;
            })();

            v1.MsgUpdateParamsResponse = (function() {

                /**
                 * Properties of a MsgUpdateParamsResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IMsgUpdateParamsResponse
                 */

                /**
                 * Constructs a new MsgUpdateParamsResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a MsgUpdateParamsResponse.
                 * @implements IMsgUpdateParamsResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IMsgUpdateParamsResponse=} [properties] Properties to set
                 */
                function MsgUpdateParamsResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link ethermint.evm.v1.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {ethermint.evm.v1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {ethermint.evm.v1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.MsgUpdateParamsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgUpdateParamsResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 */
                MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.MsgUpdateParamsResponse)
                        return object;
                    return new $root.ethermint.evm.v1.MsgUpdateParamsResponse();
                };

                /**
                 * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {ethermint.evm.v1.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParamsResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgUpdateParamsResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.MsgUpdateParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgUpdateParamsResponse;
            })();

            v1.Params = (function() {

                /**
                 * Properties of a Params.
                 * @memberof ethermint.evm.v1
                 * @interface IParams
                 * @property {string|null} [evm_denom] Params evm_denom
                 * @property {boolean|null} [enable_create] Params enable_create
                 * @property {boolean|null} [enable_call] Params enable_call
                 * @property {Array.<number>|null} [extra_eips] Params extra_eips
                 * @property {ethermint.evm.v1.IChainConfig|null} [chain_config] Params chain_config
                 * @property {boolean|null} [allow_unprotected_txs] Params allow_unprotected_txs
                 */

                /**
                 * Constructs a new Params.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {ethermint.evm.v1.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    this.extra_eips = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Params evm_denom.
                 * @member {string} evm_denom
                 * @memberof ethermint.evm.v1.Params
                 * @instance
                 */
                Params.prototype.evm_denom = "";

                /**
                 * Params enable_create.
                 * @member {boolean} enable_create
                 * @memberof ethermint.evm.v1.Params
                 * @instance
                 */
                Params.prototype.enable_create = false;

                /**
                 * Params enable_call.
                 * @member {boolean} enable_call
                 * @memberof ethermint.evm.v1.Params
                 * @instance
                 */
                Params.prototype.enable_call = false;

                /**
                 * Params extra_eips.
                 * @member {Array.<number>} extra_eips
                 * @memberof ethermint.evm.v1.Params
                 * @instance
                 */
                Params.prototype.extra_eips = $util.emptyArray;

                /**
                 * Params chain_config.
                 * @member {ethermint.evm.v1.IChainConfig|null|undefined} chain_config
                 * @memberof ethermint.evm.v1.Params
                 * @instance
                 */
                Params.prototype.chain_config = null;

                /**
                 * Params allow_unprotected_txs.
                 * @member {boolean} allow_unprotected_txs
                 * @memberof ethermint.evm.v1.Params
                 * @instance
                 */
                Params.prototype.allow_unprotected_txs = false;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link ethermint.evm.v1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.Params
                 * @static
                 * @param {ethermint.evm.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.evm_denom != null && Object.hasOwnProperty.call(message, "evm_denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.evm_denom);
                    if (message.enable_create != null && Object.hasOwnProperty.call(message, "enable_create"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enable_create);
                    if (message.enable_call != null && Object.hasOwnProperty.call(message, "enable_call"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable_call);
                    if (message.extra_eips != null && message.extra_eips.length) {
                        writer.uint32(/* id 4, wireType 2 =*/34).fork();
                        for (let i = 0; i < message.extra_eips.length; ++i)
                            writer.int64(message.extra_eips[i]);
                        writer.ldelim();
                    }
                    if (message.chain_config != null && Object.hasOwnProperty.call(message, "chain_config"))
                        $root.ethermint.evm.v1.ChainConfig.encode(message.chain_config, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.allow_unprotected_txs != null && Object.hasOwnProperty.call(message, "allow_unprotected_txs"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.allow_unprotected_txs);
                    return writer;
                };

                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link ethermint.evm.v1.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.Params
                 * @static
                 * @param {ethermint.evm.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.Params();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.evm_denom = reader.string();
                            break;
                        case 2:
                            message.enable_create = reader.bool();
                            break;
                        case 3:
                            message.enable_call = reader.bool();
                            break;
                        case 4:
                            if (!(message.extra_eips && message.extra_eips.length))
                                message.extra_eips = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.extra_eips.push(reader.int64());
                            } else
                                message.extra_eips.push(reader.int64());
                            break;
                        case 5:
                            message.chain_config = $root.ethermint.evm.v1.ChainConfig.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.allow_unprotected_txs = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof ethermint.evm.v1.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.evm_denom != null && message.hasOwnProperty("evm_denom"))
                        if (!$util.isString(message.evm_denom))
                            return "evm_denom: string expected";
                    if (message.enable_create != null && message.hasOwnProperty("enable_create"))
                        if (typeof message.enable_create !== "boolean")
                            return "enable_create: boolean expected";
                    if (message.enable_call != null && message.hasOwnProperty("enable_call"))
                        if (typeof message.enable_call !== "boolean")
                            return "enable_call: boolean expected";
                    if (message.extra_eips != null && message.hasOwnProperty("extra_eips")) {
                        if (!Array.isArray(message.extra_eips))
                            return "extra_eips: array expected";
                        for (let i = 0; i < message.extra_eips.length; ++i)
                            if (!$util.isInteger(message.extra_eips[i]) && !(message.extra_eips[i] && $util.isInteger(message.extra_eips[i].low) && $util.isInteger(message.extra_eips[i].high)))
                                return "extra_eips: integer|Long[] expected";
                    }
                    if (message.chain_config != null && message.hasOwnProperty("chain_config")) {
                        let error = $root.ethermint.evm.v1.ChainConfig.verify(message.chain_config);
                        if (error)
                            return "chain_config." + error;
                    }
                    if (message.allow_unprotected_txs != null && message.hasOwnProperty("allow_unprotected_txs"))
                        if (typeof message.allow_unprotected_txs !== "boolean")
                            return "allow_unprotected_txs: boolean expected";
                    return null;
                };

                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.Params)
                        return object;
                    let message = new $root.ethermint.evm.v1.Params();
                    if (object.evm_denom != null)
                        message.evm_denom = String(object.evm_denom);
                    if (object.enable_create != null)
                        message.enable_create = Boolean(object.enable_create);
                    if (object.enable_call != null)
                        message.enable_call = Boolean(object.enable_call);
                    if (object.extra_eips) {
                        if (!Array.isArray(object.extra_eips))
                            throw TypeError(".ethermint.evm.v1.Params.extra_eips: array expected");
                        message.extra_eips = [];
                        for (let i = 0; i < object.extra_eips.length; ++i)
                            if ($util.Long)
                                (message.extra_eips[i] = $util.Long.fromValue(object.extra_eips[i])).unsigned = false;
                            else if (typeof object.extra_eips[i] === "string")
                                message.extra_eips[i] = parseInt(object.extra_eips[i], 10);
                            else if (typeof object.extra_eips[i] === "number")
                                message.extra_eips[i] = object.extra_eips[i];
                            else if (typeof object.extra_eips[i] === "object")
                                message.extra_eips[i] = new $util.LongBits(object.extra_eips[i].low >>> 0, object.extra_eips[i].high >>> 0).toNumber();
                    }
                    if (object.chain_config != null) {
                        if (typeof object.chain_config !== "object")
                            throw TypeError(".ethermint.evm.v1.Params.chain_config: object expected");
                        message.chain_config = $root.ethermint.evm.v1.ChainConfig.fromObject(object.chain_config);
                    }
                    if (object.allow_unprotected_txs != null)
                        message.allow_unprotected_txs = Boolean(object.allow_unprotected_txs);
                    return message;
                };

                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.Params
                 * @static
                 * @param {ethermint.evm.v1.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.extra_eips = [];
                    if (options.defaults) {
                        object.evm_denom = "";
                        object.enable_create = false;
                        object.enable_call = false;
                        object.chain_config = null;
                        object.allow_unprotected_txs = false;
                    }
                    if (message.evm_denom != null && message.hasOwnProperty("evm_denom"))
                        object.evm_denom = message.evm_denom;
                    if (message.enable_create != null && message.hasOwnProperty("enable_create"))
                        object.enable_create = message.enable_create;
                    if (message.enable_call != null && message.hasOwnProperty("enable_call"))
                        object.enable_call = message.enable_call;
                    if (message.extra_eips && message.extra_eips.length) {
                        object.extra_eips = [];
                        for (let j = 0; j < message.extra_eips.length; ++j)
                            if (typeof message.extra_eips[j] === "number")
                                object.extra_eips[j] = options.longs === String ? String(message.extra_eips[j]) : message.extra_eips[j];
                            else
                                object.extra_eips[j] = options.longs === String ? $util.Long.prototype.toString.call(message.extra_eips[j]) : options.longs === Number ? new $util.LongBits(message.extra_eips[j].low >>> 0, message.extra_eips[j].high >>> 0).toNumber() : message.extra_eips[j];
                    }
                    if (message.chain_config != null && message.hasOwnProperty("chain_config"))
                        object.chain_config = $root.ethermint.evm.v1.ChainConfig.toObject(message.chain_config, options);
                    if (message.allow_unprotected_txs != null && message.hasOwnProperty("allow_unprotected_txs"))
                        object.allow_unprotected_txs = message.allow_unprotected_txs;
                    return object;
                };

                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Params;
            })();

            v1.ChainConfig = (function() {

                /**
                 * Properties of a ChainConfig.
                 * @memberof ethermint.evm.v1
                 * @interface IChainConfig
                 * @property {string|null} [homestead_block] ChainConfig homestead_block
                 * @property {string|null} [dao_fork_block] ChainConfig dao_fork_block
                 * @property {boolean|null} [dao_fork_support] ChainConfig dao_fork_support
                 * @property {string|null} [eip150_block] ChainConfig eip150_block
                 * @property {string|null} [eip150_hash] ChainConfig eip150_hash
                 * @property {string|null} [eip155_block] ChainConfig eip155_block
                 * @property {string|null} [eip158_block] ChainConfig eip158_block
                 * @property {string|null} [byzantium_block] ChainConfig byzantium_block
                 * @property {string|null} [constantinople_block] ChainConfig constantinople_block
                 * @property {string|null} [petersburg_block] ChainConfig petersburg_block
                 * @property {string|null} [istanbul_block] ChainConfig istanbul_block
                 * @property {string|null} [muir_glacier_block] ChainConfig muir_glacier_block
                 * @property {string|null} [berlin_block] ChainConfig berlin_block
                 * @property {string|null} [london_block] ChainConfig london_block
                 * @property {string|null} [arrow_glacier_block] ChainConfig arrow_glacier_block
                 * @property {string|null} [gray_glacier_block] ChainConfig gray_glacier_block
                 * @property {string|null} [merge_netsplit_block] ChainConfig merge_netsplit_block
                 * @property {string|null} [shanghai_block] ChainConfig shanghai_block
                 * @property {string|null} [cancun_block] ChainConfig cancun_block
                 */

                /**
                 * Constructs a new ChainConfig.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a ChainConfig.
                 * @implements IChainConfig
                 * @constructor
                 * @param {ethermint.evm.v1.IChainConfig=} [properties] Properties to set
                 */
                function ChainConfig(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ChainConfig homestead_block.
                 * @member {string} homestead_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.homestead_block = "";

                /**
                 * ChainConfig dao_fork_block.
                 * @member {string} dao_fork_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.dao_fork_block = "";

                /**
                 * ChainConfig dao_fork_support.
                 * @member {boolean} dao_fork_support
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.dao_fork_support = false;

                /**
                 * ChainConfig eip150_block.
                 * @member {string} eip150_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.eip150_block = "";

                /**
                 * ChainConfig eip150_hash.
                 * @member {string} eip150_hash
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.eip150_hash = "";

                /**
                 * ChainConfig eip155_block.
                 * @member {string} eip155_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.eip155_block = "";

                /**
                 * ChainConfig eip158_block.
                 * @member {string} eip158_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.eip158_block = "";

                /**
                 * ChainConfig byzantium_block.
                 * @member {string} byzantium_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.byzantium_block = "";

                /**
                 * ChainConfig constantinople_block.
                 * @member {string} constantinople_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.constantinople_block = "";

                /**
                 * ChainConfig petersburg_block.
                 * @member {string} petersburg_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.petersburg_block = "";

                /**
                 * ChainConfig istanbul_block.
                 * @member {string} istanbul_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.istanbul_block = "";

                /**
                 * ChainConfig muir_glacier_block.
                 * @member {string} muir_glacier_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.muir_glacier_block = "";

                /**
                 * ChainConfig berlin_block.
                 * @member {string} berlin_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.berlin_block = "";

                /**
                 * ChainConfig london_block.
                 * @member {string} london_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.london_block = "";

                /**
                 * ChainConfig arrow_glacier_block.
                 * @member {string} arrow_glacier_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.arrow_glacier_block = "";

                /**
                 * ChainConfig gray_glacier_block.
                 * @member {string} gray_glacier_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.gray_glacier_block = "";

                /**
                 * ChainConfig merge_netsplit_block.
                 * @member {string} merge_netsplit_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.merge_netsplit_block = "";

                /**
                 * ChainConfig shanghai_block.
                 * @member {string} shanghai_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.shanghai_block = "";

                /**
                 * ChainConfig cancun_block.
                 * @member {string} cancun_block
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 */
                ChainConfig.prototype.cancun_block = "";

                /**
                 * Encodes the specified ChainConfig message. Does not implicitly {@link ethermint.evm.v1.ChainConfig.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @static
                 * @param {ethermint.evm.v1.IChainConfig} message ChainConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ChainConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.homestead_block != null && Object.hasOwnProperty.call(message, "homestead_block"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.homestead_block);
                    if (message.dao_fork_block != null && Object.hasOwnProperty.call(message, "dao_fork_block"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.dao_fork_block);
                    if (message.dao_fork_support != null && Object.hasOwnProperty.call(message, "dao_fork_support"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.dao_fork_support);
                    if (message.eip150_block != null && Object.hasOwnProperty.call(message, "eip150_block"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.eip150_block);
                    if (message.eip150_hash != null && Object.hasOwnProperty.call(message, "eip150_hash"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.eip150_hash);
                    if (message.eip155_block != null && Object.hasOwnProperty.call(message, "eip155_block"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.eip155_block);
                    if (message.eip158_block != null && Object.hasOwnProperty.call(message, "eip158_block"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.eip158_block);
                    if (message.byzantium_block != null && Object.hasOwnProperty.call(message, "byzantium_block"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.byzantium_block);
                    if (message.constantinople_block != null && Object.hasOwnProperty.call(message, "constantinople_block"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.constantinople_block);
                    if (message.petersburg_block != null && Object.hasOwnProperty.call(message, "petersburg_block"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.petersburg_block);
                    if (message.istanbul_block != null && Object.hasOwnProperty.call(message, "istanbul_block"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.istanbul_block);
                    if (message.muir_glacier_block != null && Object.hasOwnProperty.call(message, "muir_glacier_block"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.muir_glacier_block);
                    if (message.berlin_block != null && Object.hasOwnProperty.call(message, "berlin_block"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.berlin_block);
                    if (message.london_block != null && Object.hasOwnProperty.call(message, "london_block"))
                        writer.uint32(/* id 17, wireType 2 =*/138).string(message.london_block);
                    if (message.arrow_glacier_block != null && Object.hasOwnProperty.call(message, "arrow_glacier_block"))
                        writer.uint32(/* id 18, wireType 2 =*/146).string(message.arrow_glacier_block);
                    if (message.gray_glacier_block != null && Object.hasOwnProperty.call(message, "gray_glacier_block"))
                        writer.uint32(/* id 20, wireType 2 =*/162).string(message.gray_glacier_block);
                    if (message.merge_netsplit_block != null && Object.hasOwnProperty.call(message, "merge_netsplit_block"))
                        writer.uint32(/* id 21, wireType 2 =*/170).string(message.merge_netsplit_block);
                    if (message.shanghai_block != null && Object.hasOwnProperty.call(message, "shanghai_block"))
                        writer.uint32(/* id 22, wireType 2 =*/178).string(message.shanghai_block);
                    if (message.cancun_block != null && Object.hasOwnProperty.call(message, "cancun_block"))
                        writer.uint32(/* id 23, wireType 2 =*/186).string(message.cancun_block);
                    return writer;
                };

                /**
                 * Encodes the specified ChainConfig message, length delimited. Does not implicitly {@link ethermint.evm.v1.ChainConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @static
                 * @param {ethermint.evm.v1.IChainConfig} message ChainConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ChainConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ChainConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.ChainConfig} ChainConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ChainConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.ChainConfig();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.homestead_block = reader.string();
                            break;
                        case 2:
                            message.dao_fork_block = reader.string();
                            break;
                        case 3:
                            message.dao_fork_support = reader.bool();
                            break;
                        case 4:
                            message.eip150_block = reader.string();
                            break;
                        case 5:
                            message.eip150_hash = reader.string();
                            break;
                        case 6:
                            message.eip155_block = reader.string();
                            break;
                        case 7:
                            message.eip158_block = reader.string();
                            break;
                        case 8:
                            message.byzantium_block = reader.string();
                            break;
                        case 9:
                            message.constantinople_block = reader.string();
                            break;
                        case 10:
                            message.petersburg_block = reader.string();
                            break;
                        case 11:
                            message.istanbul_block = reader.string();
                            break;
                        case 12:
                            message.muir_glacier_block = reader.string();
                            break;
                        case 13:
                            message.berlin_block = reader.string();
                            break;
                        case 17:
                            message.london_block = reader.string();
                            break;
                        case 18:
                            message.arrow_glacier_block = reader.string();
                            break;
                        case 20:
                            message.gray_glacier_block = reader.string();
                            break;
                        case 21:
                            message.merge_netsplit_block = reader.string();
                            break;
                        case 22:
                            message.shanghai_block = reader.string();
                            break;
                        case 23:
                            message.cancun_block = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ChainConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.ChainConfig} ChainConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ChainConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ChainConfig message.
                 * @function verify
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ChainConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.homestead_block != null && message.hasOwnProperty("homestead_block"))
                        if (!$util.isString(message.homestead_block))
                            return "homestead_block: string expected";
                    if (message.dao_fork_block != null && message.hasOwnProperty("dao_fork_block"))
                        if (!$util.isString(message.dao_fork_block))
                            return "dao_fork_block: string expected";
                    if (message.dao_fork_support != null && message.hasOwnProperty("dao_fork_support"))
                        if (typeof message.dao_fork_support !== "boolean")
                            return "dao_fork_support: boolean expected";
                    if (message.eip150_block != null && message.hasOwnProperty("eip150_block"))
                        if (!$util.isString(message.eip150_block))
                            return "eip150_block: string expected";
                    if (message.eip150_hash != null && message.hasOwnProperty("eip150_hash"))
                        if (!$util.isString(message.eip150_hash))
                            return "eip150_hash: string expected";
                    if (message.eip155_block != null && message.hasOwnProperty("eip155_block"))
                        if (!$util.isString(message.eip155_block))
                            return "eip155_block: string expected";
                    if (message.eip158_block != null && message.hasOwnProperty("eip158_block"))
                        if (!$util.isString(message.eip158_block))
                            return "eip158_block: string expected";
                    if (message.byzantium_block != null && message.hasOwnProperty("byzantium_block"))
                        if (!$util.isString(message.byzantium_block))
                            return "byzantium_block: string expected";
                    if (message.constantinople_block != null && message.hasOwnProperty("constantinople_block"))
                        if (!$util.isString(message.constantinople_block))
                            return "constantinople_block: string expected";
                    if (message.petersburg_block != null && message.hasOwnProperty("petersburg_block"))
                        if (!$util.isString(message.petersburg_block))
                            return "petersburg_block: string expected";
                    if (message.istanbul_block != null && message.hasOwnProperty("istanbul_block"))
                        if (!$util.isString(message.istanbul_block))
                            return "istanbul_block: string expected";
                    if (message.muir_glacier_block != null && message.hasOwnProperty("muir_glacier_block"))
                        if (!$util.isString(message.muir_glacier_block))
                            return "muir_glacier_block: string expected";
                    if (message.berlin_block != null && message.hasOwnProperty("berlin_block"))
                        if (!$util.isString(message.berlin_block))
                            return "berlin_block: string expected";
                    if (message.london_block != null && message.hasOwnProperty("london_block"))
                        if (!$util.isString(message.london_block))
                            return "london_block: string expected";
                    if (message.arrow_glacier_block != null && message.hasOwnProperty("arrow_glacier_block"))
                        if (!$util.isString(message.arrow_glacier_block))
                            return "arrow_glacier_block: string expected";
                    if (message.gray_glacier_block != null && message.hasOwnProperty("gray_glacier_block"))
                        if (!$util.isString(message.gray_glacier_block))
                            return "gray_glacier_block: string expected";
                    if (message.merge_netsplit_block != null && message.hasOwnProperty("merge_netsplit_block"))
                        if (!$util.isString(message.merge_netsplit_block))
                            return "merge_netsplit_block: string expected";
                    if (message.shanghai_block != null && message.hasOwnProperty("shanghai_block"))
                        if (!$util.isString(message.shanghai_block))
                            return "shanghai_block: string expected";
                    if (message.cancun_block != null && message.hasOwnProperty("cancun_block"))
                        if (!$util.isString(message.cancun_block))
                            return "cancun_block: string expected";
                    return null;
                };

                /**
                 * Creates a ChainConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.ChainConfig} ChainConfig
                 */
                ChainConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.ChainConfig)
                        return object;
                    let message = new $root.ethermint.evm.v1.ChainConfig();
                    if (object.homestead_block != null)
                        message.homestead_block = String(object.homestead_block);
                    if (object.dao_fork_block != null)
                        message.dao_fork_block = String(object.dao_fork_block);
                    if (object.dao_fork_support != null)
                        message.dao_fork_support = Boolean(object.dao_fork_support);
                    if (object.eip150_block != null)
                        message.eip150_block = String(object.eip150_block);
                    if (object.eip150_hash != null)
                        message.eip150_hash = String(object.eip150_hash);
                    if (object.eip155_block != null)
                        message.eip155_block = String(object.eip155_block);
                    if (object.eip158_block != null)
                        message.eip158_block = String(object.eip158_block);
                    if (object.byzantium_block != null)
                        message.byzantium_block = String(object.byzantium_block);
                    if (object.constantinople_block != null)
                        message.constantinople_block = String(object.constantinople_block);
                    if (object.petersburg_block != null)
                        message.petersburg_block = String(object.petersburg_block);
                    if (object.istanbul_block != null)
                        message.istanbul_block = String(object.istanbul_block);
                    if (object.muir_glacier_block != null)
                        message.muir_glacier_block = String(object.muir_glacier_block);
                    if (object.berlin_block != null)
                        message.berlin_block = String(object.berlin_block);
                    if (object.london_block != null)
                        message.london_block = String(object.london_block);
                    if (object.arrow_glacier_block != null)
                        message.arrow_glacier_block = String(object.arrow_glacier_block);
                    if (object.gray_glacier_block != null)
                        message.gray_glacier_block = String(object.gray_glacier_block);
                    if (object.merge_netsplit_block != null)
                        message.merge_netsplit_block = String(object.merge_netsplit_block);
                    if (object.shanghai_block != null)
                        message.shanghai_block = String(object.shanghai_block);
                    if (object.cancun_block != null)
                        message.cancun_block = String(object.cancun_block);
                    return message;
                };

                /**
                 * Creates a plain object from a ChainConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @static
                 * @param {ethermint.evm.v1.ChainConfig} message ChainConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ChainConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.homestead_block = "";
                        object.dao_fork_block = "";
                        object.dao_fork_support = false;
                        object.eip150_block = "";
                        object.eip150_hash = "";
                        object.eip155_block = "";
                        object.eip158_block = "";
                        object.byzantium_block = "";
                        object.constantinople_block = "";
                        object.petersburg_block = "";
                        object.istanbul_block = "";
                        object.muir_glacier_block = "";
                        object.berlin_block = "";
                        object.london_block = "";
                        object.arrow_glacier_block = "";
                        object.gray_glacier_block = "";
                        object.merge_netsplit_block = "";
                        object.shanghai_block = "";
                        object.cancun_block = "";
                    }
                    if (message.homestead_block != null && message.hasOwnProperty("homestead_block"))
                        object.homestead_block = message.homestead_block;
                    if (message.dao_fork_block != null && message.hasOwnProperty("dao_fork_block"))
                        object.dao_fork_block = message.dao_fork_block;
                    if (message.dao_fork_support != null && message.hasOwnProperty("dao_fork_support"))
                        object.dao_fork_support = message.dao_fork_support;
                    if (message.eip150_block != null && message.hasOwnProperty("eip150_block"))
                        object.eip150_block = message.eip150_block;
                    if (message.eip150_hash != null && message.hasOwnProperty("eip150_hash"))
                        object.eip150_hash = message.eip150_hash;
                    if (message.eip155_block != null && message.hasOwnProperty("eip155_block"))
                        object.eip155_block = message.eip155_block;
                    if (message.eip158_block != null && message.hasOwnProperty("eip158_block"))
                        object.eip158_block = message.eip158_block;
                    if (message.byzantium_block != null && message.hasOwnProperty("byzantium_block"))
                        object.byzantium_block = message.byzantium_block;
                    if (message.constantinople_block != null && message.hasOwnProperty("constantinople_block"))
                        object.constantinople_block = message.constantinople_block;
                    if (message.petersburg_block != null && message.hasOwnProperty("petersburg_block"))
                        object.petersburg_block = message.petersburg_block;
                    if (message.istanbul_block != null && message.hasOwnProperty("istanbul_block"))
                        object.istanbul_block = message.istanbul_block;
                    if (message.muir_glacier_block != null && message.hasOwnProperty("muir_glacier_block"))
                        object.muir_glacier_block = message.muir_glacier_block;
                    if (message.berlin_block != null && message.hasOwnProperty("berlin_block"))
                        object.berlin_block = message.berlin_block;
                    if (message.london_block != null && message.hasOwnProperty("london_block"))
                        object.london_block = message.london_block;
                    if (message.arrow_glacier_block != null && message.hasOwnProperty("arrow_glacier_block"))
                        object.arrow_glacier_block = message.arrow_glacier_block;
                    if (message.gray_glacier_block != null && message.hasOwnProperty("gray_glacier_block"))
                        object.gray_glacier_block = message.gray_glacier_block;
                    if (message.merge_netsplit_block != null && message.hasOwnProperty("merge_netsplit_block"))
                        object.merge_netsplit_block = message.merge_netsplit_block;
                    if (message.shanghai_block != null && message.hasOwnProperty("shanghai_block"))
                        object.shanghai_block = message.shanghai_block;
                    if (message.cancun_block != null && message.hasOwnProperty("cancun_block"))
                        object.cancun_block = message.cancun_block;
                    return object;
                };

                /**
                 * Converts this ChainConfig to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.ChainConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ChainConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ChainConfig;
            })();

            v1.State = (function() {

                /**
                 * Properties of a State.
                 * @memberof ethermint.evm.v1
                 * @interface IState
                 * @property {string|null} [key] State key
                 * @property {string|null} [value] State value
                 */

                /**
                 * Constructs a new State.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a State.
                 * @implements IState
                 * @constructor
                 * @param {ethermint.evm.v1.IState=} [properties] Properties to set
                 */
                function State(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * State key.
                 * @member {string} key
                 * @memberof ethermint.evm.v1.State
                 * @instance
                 */
                State.prototype.key = "";

                /**
                 * State value.
                 * @member {string} value
                 * @memberof ethermint.evm.v1.State
                 * @instance
                 */
                State.prototype.value = "";

                /**
                 * Encodes the specified State message. Does not implicitly {@link ethermint.evm.v1.State.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.State
                 * @static
                 * @param {ethermint.evm.v1.IState} message State message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                State.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                    return writer;
                };

                /**
                 * Encodes the specified State message, length delimited. Does not implicitly {@link ethermint.evm.v1.State.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.State
                 * @static
                 * @param {ethermint.evm.v1.IState} message State message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                State.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a State message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.State
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.State} State
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                State.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.State();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = reader.string();
                            break;
                        case 2:
                            message.value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a State message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.State
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.State} State
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                State.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a State message.
                 * @function verify
                 * @memberof ethermint.evm.v1.State
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                State.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!$util.isString(message.key))
                            return "key: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    return null;
                };

                /**
                 * Creates a State message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.State
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.State} State
                 */
                State.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.State)
                        return object;
                    let message = new $root.ethermint.evm.v1.State();
                    if (object.key != null)
                        message.key = String(object.key);
                    if (object.value != null)
                        message.value = String(object.value);
                    return message;
                };

                /**
                 * Creates a plain object from a State message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.State
                 * @static
                 * @param {ethermint.evm.v1.State} message State
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                State.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.key = "";
                        object.value = "";
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = message.key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };

                /**
                 * Converts this State to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.State
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                State.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return State;
            })();

            v1.TransactionLogs = (function() {

                /**
                 * Properties of a TransactionLogs.
                 * @memberof ethermint.evm.v1
                 * @interface ITransactionLogs
                 * @property {string|null} [hash] TransactionLogs hash
                 * @property {Array.<ethermint.evm.v1.ILog>|null} [logs] TransactionLogs logs
                 */

                /**
                 * Constructs a new TransactionLogs.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a TransactionLogs.
                 * @implements ITransactionLogs
                 * @constructor
                 * @param {ethermint.evm.v1.ITransactionLogs=} [properties] Properties to set
                 */
                function TransactionLogs(properties) {
                    this.logs = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TransactionLogs hash.
                 * @member {string} hash
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @instance
                 */
                TransactionLogs.prototype.hash = "";

                /**
                 * TransactionLogs logs.
                 * @member {Array.<ethermint.evm.v1.ILog>} logs
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @instance
                 */
                TransactionLogs.prototype.logs = $util.emptyArray;

                /**
                 * Encodes the specified TransactionLogs message. Does not implicitly {@link ethermint.evm.v1.TransactionLogs.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @static
                 * @param {ethermint.evm.v1.ITransactionLogs} message TransactionLogs message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TransactionLogs.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                    if (message.logs != null && message.logs.length)
                        for (let i = 0; i < message.logs.length; ++i)
                            $root.ethermint.evm.v1.Log.encode(message.logs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified TransactionLogs message, length delimited. Does not implicitly {@link ethermint.evm.v1.TransactionLogs.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @static
                 * @param {ethermint.evm.v1.ITransactionLogs} message TransactionLogs message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TransactionLogs.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TransactionLogs message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.TransactionLogs} TransactionLogs
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TransactionLogs.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.TransactionLogs();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.hash = reader.string();
                            break;
                        case 2:
                            if (!(message.logs && message.logs.length))
                                message.logs = [];
                            message.logs.push($root.ethermint.evm.v1.Log.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TransactionLogs message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.TransactionLogs} TransactionLogs
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TransactionLogs.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TransactionLogs message.
                 * @function verify
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TransactionLogs.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!$util.isString(message.hash))
                            return "hash: string expected";
                    if (message.logs != null && message.hasOwnProperty("logs")) {
                        if (!Array.isArray(message.logs))
                            return "logs: array expected";
                        for (let i = 0; i < message.logs.length; ++i) {
                            let error = $root.ethermint.evm.v1.Log.verify(message.logs[i]);
                            if (error)
                                return "logs." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a TransactionLogs message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.TransactionLogs} TransactionLogs
                 */
                TransactionLogs.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.TransactionLogs)
                        return object;
                    let message = new $root.ethermint.evm.v1.TransactionLogs();
                    if (object.hash != null)
                        message.hash = String(object.hash);
                    if (object.logs) {
                        if (!Array.isArray(object.logs))
                            throw TypeError(".ethermint.evm.v1.TransactionLogs.logs: array expected");
                        message.logs = [];
                        for (let i = 0; i < object.logs.length; ++i) {
                            if (typeof object.logs[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.TransactionLogs.logs: object expected");
                            message.logs[i] = $root.ethermint.evm.v1.Log.fromObject(object.logs[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a TransactionLogs message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @static
                 * @param {ethermint.evm.v1.TransactionLogs} message TransactionLogs
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TransactionLogs.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.logs = [];
                    if (options.defaults)
                        object.hash = "";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = message.hash;
                    if (message.logs && message.logs.length) {
                        object.logs = [];
                        for (let j = 0; j < message.logs.length; ++j)
                            object.logs[j] = $root.ethermint.evm.v1.Log.toObject(message.logs[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this TransactionLogs to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.TransactionLogs
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TransactionLogs.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TransactionLogs;
            })();

            v1.Log = (function() {

                /**
                 * Properties of a Log.
                 * @memberof ethermint.evm.v1
                 * @interface ILog
                 * @property {string|null} [address] Log address
                 * @property {Array.<string>|null} [topics] Log topics
                 * @property {Uint8Array|null} [data] Log data
                 * @property {number|null} [block_number] Log block_number
                 * @property {string|null} [tx_hash] Log tx_hash
                 * @property {number|null} [tx_index] Log tx_index
                 * @property {string|null} [block_hash] Log block_hash
                 * @property {number|null} [index] Log index
                 * @property {boolean|null} [removed] Log removed
                 */

                /**
                 * Constructs a new Log.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a Log.
                 * @implements ILog
                 * @constructor
                 * @param {ethermint.evm.v1.ILog=} [properties] Properties to set
                 */
                function Log(properties) {
                    this.topics = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Log address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.address = "";

                /**
                 * Log topics.
                 * @member {Array.<string>} topics
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.topics = $util.emptyArray;

                /**
                 * Log data.
                 * @member {Uint8Array} data
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.data = $util.newBuffer([]);

                /**
                 * Log block_number.
                 * @member {number} block_number
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.block_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Log tx_hash.
                 * @member {string} tx_hash
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.tx_hash = "";

                /**
                 * Log tx_index.
                 * @member {number} tx_index
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.tx_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Log block_hash.
                 * @member {string} block_hash
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.block_hash = "";

                /**
                 * Log index.
                 * @member {number} index
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Log removed.
                 * @member {boolean} removed
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 */
                Log.prototype.removed = false;

                /**
                 * Encodes the specified Log message. Does not implicitly {@link ethermint.evm.v1.Log.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.Log
                 * @static
                 * @param {ethermint.evm.v1.ILog} message Log message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Log.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.topics != null && message.topics.length)
                        for (let i = 0; i < message.topics.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.topics[i]);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                    if (message.block_number != null && Object.hasOwnProperty.call(message, "block_number"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.block_number);
                    if (message.tx_hash != null && Object.hasOwnProperty.call(message, "tx_hash"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.tx_hash);
                    if (message.tx_index != null && Object.hasOwnProperty.call(message, "tx_index"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.tx_index);
                    if (message.block_hash != null && Object.hasOwnProperty.call(message, "block_hash"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.block_hash);
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.index);
                    if (message.removed != null && Object.hasOwnProperty.call(message, "removed"))
                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.removed);
                    return writer;
                };

                /**
                 * Encodes the specified Log message, length delimited. Does not implicitly {@link ethermint.evm.v1.Log.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.Log
                 * @static
                 * @param {ethermint.evm.v1.ILog} message Log message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Log.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Log message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.Log
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.Log} Log
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Log.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.Log();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            if (!(message.topics && message.topics.length))
                                message.topics = [];
                            message.topics.push(reader.string());
                            break;
                        case 3:
                            message.data = reader.bytes();
                            break;
                        case 4:
                            message.block_number = reader.uint64();
                            break;
                        case 5:
                            message.tx_hash = reader.string();
                            break;
                        case 6:
                            message.tx_index = reader.uint64();
                            break;
                        case 7:
                            message.block_hash = reader.string();
                            break;
                        case 8:
                            message.index = reader.uint64();
                            break;
                        case 9:
                            message.removed = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Log message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.Log
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.Log} Log
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Log.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Log message.
                 * @function verify
                 * @memberof ethermint.evm.v1.Log
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Log.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.topics != null && message.hasOwnProperty("topics")) {
                        if (!Array.isArray(message.topics))
                            return "topics: array expected";
                        for (let i = 0; i < message.topics.length; ++i)
                            if (!$util.isString(message.topics[i]))
                                return "topics: string[] expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.block_number != null && message.hasOwnProperty("block_number"))
                        if (!$util.isInteger(message.block_number) && !(message.block_number && $util.isInteger(message.block_number.low) && $util.isInteger(message.block_number.high)))
                            return "block_number: integer|Long expected";
                    if (message.tx_hash != null && message.hasOwnProperty("tx_hash"))
                        if (!$util.isString(message.tx_hash))
                            return "tx_hash: string expected";
                    if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                        if (!$util.isInteger(message.tx_index) && !(message.tx_index && $util.isInteger(message.tx_index.low) && $util.isInteger(message.tx_index.high)))
                            return "tx_index: integer|Long expected";
                    if (message.block_hash != null && message.hasOwnProperty("block_hash"))
                        if (!$util.isString(message.block_hash))
                            return "block_hash: string expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                            return "index: integer|Long expected";
                    if (message.removed != null && message.hasOwnProperty("removed"))
                        if (typeof message.removed !== "boolean")
                            return "removed: boolean expected";
                    return null;
                };

                /**
                 * Creates a Log message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.Log
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.Log} Log
                 */
                Log.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.Log)
                        return object;
                    let message = new $root.ethermint.evm.v1.Log();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.topics) {
                        if (!Array.isArray(object.topics))
                            throw TypeError(".ethermint.evm.v1.Log.topics: array expected");
                        message.topics = [];
                        for (let i = 0; i < object.topics.length; ++i)
                            message.topics[i] = String(object.topics[i]);
                    }
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.block_number != null)
                        if ($util.Long)
                            (message.block_number = $util.Long.fromValue(object.block_number)).unsigned = true;
                        else if (typeof object.block_number === "string")
                            message.block_number = parseInt(object.block_number, 10);
                        else if (typeof object.block_number === "number")
                            message.block_number = object.block_number;
                        else if (typeof object.block_number === "object")
                            message.block_number = new $util.LongBits(object.block_number.low >>> 0, object.block_number.high >>> 0).toNumber(true);
                    if (object.tx_hash != null)
                        message.tx_hash = String(object.tx_hash);
                    if (object.tx_index != null)
                        if ($util.Long)
                            (message.tx_index = $util.Long.fromValue(object.tx_index)).unsigned = true;
                        else if (typeof object.tx_index === "string")
                            message.tx_index = parseInt(object.tx_index, 10);
                        else if (typeof object.tx_index === "number")
                            message.tx_index = object.tx_index;
                        else if (typeof object.tx_index === "object")
                            message.tx_index = new $util.LongBits(object.tx_index.low >>> 0, object.tx_index.high >>> 0).toNumber(true);
                    if (object.block_hash != null)
                        message.block_hash = String(object.block_hash);
                    if (object.index != null)
                        if ($util.Long)
                            (message.index = $util.Long.fromValue(object.index)).unsigned = true;
                        else if (typeof object.index === "string")
                            message.index = parseInt(object.index, 10);
                        else if (typeof object.index === "number")
                            message.index = object.index;
                        else if (typeof object.index === "object")
                            message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber(true);
                    if (object.removed != null)
                        message.removed = Boolean(object.removed);
                    return message;
                };

                /**
                 * Creates a plain object from a Log message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.Log
                 * @static
                 * @param {ethermint.evm.v1.Log} message Log
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Log.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.topics = [];
                    if (options.defaults) {
                        object.address = "";
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.block_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_number = options.longs === String ? "0" : 0;
                        object.tx_hash = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.tx_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.tx_index = options.longs === String ? "0" : 0;
                        object.block_hash = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.index = options.longs === String ? "0" : 0;
                        object.removed = false;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.topics && message.topics.length) {
                        object.topics = [];
                        for (let j = 0; j < message.topics.length; ++j)
                            object.topics[j] = message.topics[j];
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.block_number != null && message.hasOwnProperty("block_number"))
                        if (typeof message.block_number === "number")
                            object.block_number = options.longs === String ? String(message.block_number) : message.block_number;
                        else
                            object.block_number = options.longs === String ? $util.Long.prototype.toString.call(message.block_number) : options.longs === Number ? new $util.LongBits(message.block_number.low >>> 0, message.block_number.high >>> 0).toNumber(true) : message.block_number;
                    if (message.tx_hash != null && message.hasOwnProperty("tx_hash"))
                        object.tx_hash = message.tx_hash;
                    if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                        if (typeof message.tx_index === "number")
                            object.tx_index = options.longs === String ? String(message.tx_index) : message.tx_index;
                        else
                            object.tx_index = options.longs === String ? $util.Long.prototype.toString.call(message.tx_index) : options.longs === Number ? new $util.LongBits(message.tx_index.low >>> 0, message.tx_index.high >>> 0).toNumber(true) : message.tx_index;
                    if (message.block_hash != null && message.hasOwnProperty("block_hash"))
                        object.block_hash = message.block_hash;
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (typeof message.index === "number")
                            object.index = options.longs === String ? String(message.index) : message.index;
                        else
                            object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber(true) : message.index;
                    if (message.removed != null && message.hasOwnProperty("removed"))
                        object.removed = message.removed;
                    return object;
                };

                /**
                 * Converts this Log to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.Log
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Log.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Log;
            })();

            v1.TxResult = (function() {

                /**
                 * Properties of a TxResult.
                 * @memberof ethermint.evm.v1
                 * @interface ITxResult
                 * @property {string|null} [contract_address] TxResult contract_address
                 * @property {Uint8Array|null} [bloom] TxResult bloom
                 * @property {ethermint.evm.v1.ITransactionLogs|null} [tx_logs] TxResult tx_logs
                 * @property {Uint8Array|null} [ret] TxResult ret
                 * @property {boolean|null} [reverted] TxResult reverted
                 * @property {number|null} [gas_used] TxResult gas_used
                 */

                /**
                 * Constructs a new TxResult.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a TxResult.
                 * @implements ITxResult
                 * @constructor
                 * @param {ethermint.evm.v1.ITxResult=} [properties] Properties to set
                 */
                function TxResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TxResult contract_address.
                 * @member {string} contract_address
                 * @memberof ethermint.evm.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.contract_address = "";

                /**
                 * TxResult bloom.
                 * @member {Uint8Array} bloom
                 * @memberof ethermint.evm.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.bloom = $util.newBuffer([]);

                /**
                 * TxResult tx_logs.
                 * @member {ethermint.evm.v1.ITransactionLogs|null|undefined} tx_logs
                 * @memberof ethermint.evm.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.tx_logs = null;

                /**
                 * TxResult ret.
                 * @member {Uint8Array} ret
                 * @memberof ethermint.evm.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.ret = $util.newBuffer([]);

                /**
                 * TxResult reverted.
                 * @member {boolean} reverted
                 * @memberof ethermint.evm.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.reverted = false;

                /**
                 * TxResult gas_used.
                 * @member {number} gas_used
                 * @memberof ethermint.evm.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified TxResult message. Does not implicitly {@link ethermint.evm.v1.TxResult.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.TxResult
                 * @static
                 * @param {ethermint.evm.v1.ITxResult} message TxResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contract_address != null && Object.hasOwnProperty.call(message, "contract_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.contract_address);
                    if (message.bloom != null && Object.hasOwnProperty.call(message, "bloom"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.bloom);
                    if (message.tx_logs != null && Object.hasOwnProperty.call(message, "tx_logs"))
                        $root.ethermint.evm.v1.TransactionLogs.encode(message.tx_logs, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.ret != null && Object.hasOwnProperty.call(message, "ret"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.ret);
                    if (message.reverted != null && Object.hasOwnProperty.call(message, "reverted"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reverted);
                    if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.gas_used);
                    return writer;
                };

                /**
                 * Encodes the specified TxResult message, length delimited. Does not implicitly {@link ethermint.evm.v1.TxResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.TxResult
                 * @static
                 * @param {ethermint.evm.v1.ITxResult} message TxResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TxResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.TxResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.TxResult} TxResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.TxResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contract_address = reader.string();
                            break;
                        case 2:
                            message.bloom = reader.bytes();
                            break;
                        case 3:
                            message.tx_logs = $root.ethermint.evm.v1.TransactionLogs.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.ret = reader.bytes();
                            break;
                        case 5:
                            message.reverted = reader.bool();
                            break;
                        case 6:
                            message.gas_used = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TxResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.TxResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.TxResult} TxResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TxResult message.
                 * @function verify
                 * @memberof ethermint.evm.v1.TxResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TxResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                        if (!$util.isString(message.contract_address))
                            return "contract_address: string expected";
                    if (message.bloom != null && message.hasOwnProperty("bloom"))
                        if (!(message.bloom && typeof message.bloom.length === "number" || $util.isString(message.bloom)))
                            return "bloom: buffer expected";
                    if (message.tx_logs != null && message.hasOwnProperty("tx_logs")) {
                        let error = $root.ethermint.evm.v1.TransactionLogs.verify(message.tx_logs);
                        if (error)
                            return "tx_logs." + error;
                    }
                    if (message.ret != null && message.hasOwnProperty("ret"))
                        if (!(message.ret && typeof message.ret.length === "number" || $util.isString(message.ret)))
                            return "ret: buffer expected";
                    if (message.reverted != null && message.hasOwnProperty("reverted"))
                        if (typeof message.reverted !== "boolean")
                            return "reverted: boolean expected";
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                            return "gas_used: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a TxResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.TxResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.TxResult} TxResult
                 */
                TxResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.TxResult)
                        return object;
                    let message = new $root.ethermint.evm.v1.TxResult();
                    if (object.contract_address != null)
                        message.contract_address = String(object.contract_address);
                    if (object.bloom != null)
                        if (typeof object.bloom === "string")
                            $util.base64.decode(object.bloom, message.bloom = $util.newBuffer($util.base64.length(object.bloom)), 0);
                        else if (object.bloom.length)
                            message.bloom = object.bloom;
                    if (object.tx_logs != null) {
                        if (typeof object.tx_logs !== "object")
                            throw TypeError(".ethermint.evm.v1.TxResult.tx_logs: object expected");
                        message.tx_logs = $root.ethermint.evm.v1.TransactionLogs.fromObject(object.tx_logs);
                    }
                    if (object.ret != null)
                        if (typeof object.ret === "string")
                            $util.base64.decode(object.ret, message.ret = $util.newBuffer($util.base64.length(object.ret)), 0);
                        else if (object.ret.length)
                            message.ret = object.ret;
                    if (object.reverted != null)
                        message.reverted = Boolean(object.reverted);
                    if (object.gas_used != null)
                        if ($util.Long)
                            (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = true;
                        else if (typeof object.gas_used === "string")
                            message.gas_used = parseInt(object.gas_used, 10);
                        else if (typeof object.gas_used === "number")
                            message.gas_used = object.gas_used;
                        else if (typeof object.gas_used === "object")
                            message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a TxResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.TxResult
                 * @static
                 * @param {ethermint.evm.v1.TxResult} message TxResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TxResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.contract_address = "";
                        if (options.bytes === String)
                            object.bloom = "";
                        else {
                            object.bloom = [];
                            if (options.bytes !== Array)
                                object.bloom = $util.newBuffer(object.bloom);
                        }
                        object.tx_logs = null;
                        if (options.bytes === String)
                            object.ret = "";
                        else {
                            object.ret = [];
                            if (options.bytes !== Array)
                                object.ret = $util.newBuffer(object.ret);
                        }
                        object.reverted = false;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_used = options.longs === String ? "0" : 0;
                    }
                    if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                        object.contract_address = message.contract_address;
                    if (message.bloom != null && message.hasOwnProperty("bloom"))
                        object.bloom = options.bytes === String ? $util.base64.encode(message.bloom, 0, message.bloom.length) : options.bytes === Array ? Array.prototype.slice.call(message.bloom) : message.bloom;
                    if (message.tx_logs != null && message.hasOwnProperty("tx_logs"))
                        object.tx_logs = $root.ethermint.evm.v1.TransactionLogs.toObject(message.tx_logs, options);
                    if (message.ret != null && message.hasOwnProperty("ret"))
                        object.ret = options.bytes === String ? $util.base64.encode(message.ret, 0, message.ret.length) : options.bytes === Array ? Array.prototype.slice.call(message.ret) : message.ret;
                    if (message.reverted != null && message.hasOwnProperty("reverted"))
                        object.reverted = message.reverted;
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (typeof message.gas_used === "number")
                            object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                        else
                            object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber(true) : message.gas_used;
                    return object;
                };

                /**
                 * Converts this TxResult to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.TxResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TxResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TxResult;
            })();

            v1.AccessTuple = (function() {

                /**
                 * Properties of an AccessTuple.
                 * @memberof ethermint.evm.v1
                 * @interface IAccessTuple
                 * @property {string|null} [address] AccessTuple address
                 * @property {Array.<string>|null} [storage_keys] AccessTuple storage_keys
                 */

                /**
                 * Constructs a new AccessTuple.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an AccessTuple.
                 * @implements IAccessTuple
                 * @constructor
                 * @param {ethermint.evm.v1.IAccessTuple=} [properties] Properties to set
                 */
                function AccessTuple(properties) {
                    this.storage_keys = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AccessTuple address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @instance
                 */
                AccessTuple.prototype.address = "";

                /**
                 * AccessTuple storage_keys.
                 * @member {Array.<string>} storage_keys
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @instance
                 */
                AccessTuple.prototype.storage_keys = $util.emptyArray;

                /**
                 * Encodes the specified AccessTuple message. Does not implicitly {@link ethermint.evm.v1.AccessTuple.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @static
                 * @param {ethermint.evm.v1.IAccessTuple} message AccessTuple message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessTuple.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.storage_keys != null && message.storage_keys.length)
                        for (let i = 0; i < message.storage_keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.storage_keys[i]);
                    return writer;
                };

                /**
                 * Encodes the specified AccessTuple message, length delimited. Does not implicitly {@link ethermint.evm.v1.AccessTuple.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @static
                 * @param {ethermint.evm.v1.IAccessTuple} message AccessTuple message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessTuple.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AccessTuple message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.AccessTuple} AccessTuple
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessTuple.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.AccessTuple();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            if (!(message.storage_keys && message.storage_keys.length))
                                message.storage_keys = [];
                            message.storage_keys.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AccessTuple message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.AccessTuple} AccessTuple
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessTuple.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AccessTuple message.
                 * @function verify
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AccessTuple.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.storage_keys != null && message.hasOwnProperty("storage_keys")) {
                        if (!Array.isArray(message.storage_keys))
                            return "storage_keys: array expected";
                        for (let i = 0; i < message.storage_keys.length; ++i)
                            if (!$util.isString(message.storage_keys[i]))
                                return "storage_keys: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates an AccessTuple message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.AccessTuple} AccessTuple
                 */
                AccessTuple.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.AccessTuple)
                        return object;
                    let message = new $root.ethermint.evm.v1.AccessTuple();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.storage_keys) {
                        if (!Array.isArray(object.storage_keys))
                            throw TypeError(".ethermint.evm.v1.AccessTuple.storage_keys: array expected");
                        message.storage_keys = [];
                        for (let i = 0; i < object.storage_keys.length; ++i)
                            message.storage_keys[i] = String(object.storage_keys[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AccessTuple message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @static
                 * @param {ethermint.evm.v1.AccessTuple} message AccessTuple
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AccessTuple.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.storage_keys = [];
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.storage_keys && message.storage_keys.length) {
                        object.storage_keys = [];
                        for (let j = 0; j < message.storage_keys.length; ++j)
                            object.storage_keys[j] = message.storage_keys[j];
                    }
                    return object;
                };

                /**
                 * Converts this AccessTuple to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.AccessTuple
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AccessTuple.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AccessTuple;
            })();

            v1.TraceConfig = (function() {

                /**
                 * Properties of a TraceConfig.
                 * @memberof ethermint.evm.v1
                 * @interface ITraceConfig
                 * @property {string|null} [tracer] TraceConfig tracer
                 * @property {string|null} [timeout] TraceConfig timeout
                 * @property {number|null} [reexec] TraceConfig reexec
                 * @property {boolean|null} [disable_stack] TraceConfig disable_stack
                 * @property {boolean|null} [disable_storage] TraceConfig disable_storage
                 * @property {boolean|null} [debug] TraceConfig debug
                 * @property {number|null} [limit] TraceConfig limit
                 * @property {ethermint.evm.v1.IChainConfig|null} [overrides] TraceConfig overrides
                 * @property {boolean|null} [enable_memory] TraceConfig enable_memory
                 * @property {boolean|null} [enable_return_data] TraceConfig enable_return_data
                 * @property {string|null} [tracer_json_config] TraceConfig tracer_json_config
                 */

                /**
                 * Constructs a new TraceConfig.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a TraceConfig.
                 * @implements ITraceConfig
                 * @constructor
                 * @param {ethermint.evm.v1.ITraceConfig=} [properties] Properties to set
                 */
                function TraceConfig(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TraceConfig tracer.
                 * @member {string} tracer
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.tracer = "";

                /**
                 * TraceConfig timeout.
                 * @member {string} timeout
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.timeout = "";

                /**
                 * TraceConfig reexec.
                 * @member {number} reexec
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.reexec = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * TraceConfig disable_stack.
                 * @member {boolean} disable_stack
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.disable_stack = false;

                /**
                 * TraceConfig disable_storage.
                 * @member {boolean} disable_storage
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.disable_storage = false;

                /**
                 * TraceConfig debug.
                 * @member {boolean} debug
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.debug = false;

                /**
                 * TraceConfig limit.
                 * @member {number} limit
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.limit = 0;

                /**
                 * TraceConfig overrides.
                 * @member {ethermint.evm.v1.IChainConfig|null|undefined} overrides
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.overrides = null;

                /**
                 * TraceConfig enable_memory.
                 * @member {boolean} enable_memory
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.enable_memory = false;

                /**
                 * TraceConfig enable_return_data.
                 * @member {boolean} enable_return_data
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.enable_return_data = false;

                /**
                 * TraceConfig tracer_json_config.
                 * @member {string} tracer_json_config
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 */
                TraceConfig.prototype.tracer_json_config = "";

                /**
                 * Encodes the specified TraceConfig message. Does not implicitly {@link ethermint.evm.v1.TraceConfig.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @static
                 * @param {ethermint.evm.v1.ITraceConfig} message TraceConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TraceConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tracer != null && Object.hasOwnProperty.call(message, "tracer"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.tracer);
                    if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.timeout);
                    if (message.reexec != null && Object.hasOwnProperty.call(message, "reexec"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.reexec);
                    if (message.disable_stack != null && Object.hasOwnProperty.call(message, "disable_stack"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.disable_stack);
                    if (message.disable_storage != null && Object.hasOwnProperty.call(message, "disable_storage"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disable_storage);
                    if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                        writer.uint32(/* id 8, wireType 0 =*/64).bool(message.debug);
                    if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.limit);
                    if (message.overrides != null && Object.hasOwnProperty.call(message, "overrides"))
                        $root.ethermint.evm.v1.ChainConfig.encode(message.overrides, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.enable_memory != null && Object.hasOwnProperty.call(message, "enable_memory"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.enable_memory);
                    if (message.enable_return_data != null && Object.hasOwnProperty.call(message, "enable_return_data"))
                        writer.uint32(/* id 12, wireType 0 =*/96).bool(message.enable_return_data);
                    if (message.tracer_json_config != null && Object.hasOwnProperty.call(message, "tracer_json_config"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.tracer_json_config);
                    return writer;
                };

                /**
                 * Encodes the specified TraceConfig message, length delimited. Does not implicitly {@link ethermint.evm.v1.TraceConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @static
                 * @param {ethermint.evm.v1.ITraceConfig} message TraceConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TraceConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TraceConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.TraceConfig} TraceConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TraceConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.TraceConfig();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.tracer = reader.string();
                            break;
                        case 2:
                            message.timeout = reader.string();
                            break;
                        case 3:
                            message.reexec = reader.uint64();
                            break;
                        case 5:
                            message.disable_stack = reader.bool();
                            break;
                        case 6:
                            message.disable_storage = reader.bool();
                            break;
                        case 8:
                            message.debug = reader.bool();
                            break;
                        case 9:
                            message.limit = reader.int32();
                            break;
                        case 10:
                            message.overrides = $root.ethermint.evm.v1.ChainConfig.decode(reader, reader.uint32());
                            break;
                        case 11:
                            message.enable_memory = reader.bool();
                            break;
                        case 12:
                            message.enable_return_data = reader.bool();
                            break;
                        case 13:
                            message.tracer_json_config = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TraceConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.TraceConfig} TraceConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TraceConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TraceConfig message.
                 * @function verify
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TraceConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tracer != null && message.hasOwnProperty("tracer"))
                        if (!$util.isString(message.tracer))
                            return "tracer: string expected";
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        if (!$util.isString(message.timeout))
                            return "timeout: string expected";
                    if (message.reexec != null && message.hasOwnProperty("reexec"))
                        if (!$util.isInteger(message.reexec) && !(message.reexec && $util.isInteger(message.reexec.low) && $util.isInteger(message.reexec.high)))
                            return "reexec: integer|Long expected";
                    if (message.disable_stack != null && message.hasOwnProperty("disable_stack"))
                        if (typeof message.disable_stack !== "boolean")
                            return "disable_stack: boolean expected";
                    if (message.disable_storage != null && message.hasOwnProperty("disable_storage"))
                        if (typeof message.disable_storage !== "boolean")
                            return "disable_storage: boolean expected";
                    if (message.debug != null && message.hasOwnProperty("debug"))
                        if (typeof message.debug !== "boolean")
                            return "debug: boolean expected";
                    if (message.limit != null && message.hasOwnProperty("limit"))
                        if (!$util.isInteger(message.limit))
                            return "limit: integer expected";
                    if (message.overrides != null && message.hasOwnProperty("overrides")) {
                        let error = $root.ethermint.evm.v1.ChainConfig.verify(message.overrides);
                        if (error)
                            return "overrides." + error;
                    }
                    if (message.enable_memory != null && message.hasOwnProperty("enable_memory"))
                        if (typeof message.enable_memory !== "boolean")
                            return "enable_memory: boolean expected";
                    if (message.enable_return_data != null && message.hasOwnProperty("enable_return_data"))
                        if (typeof message.enable_return_data !== "boolean")
                            return "enable_return_data: boolean expected";
                    if (message.tracer_json_config != null && message.hasOwnProperty("tracer_json_config"))
                        if (!$util.isString(message.tracer_json_config))
                            return "tracer_json_config: string expected";
                    return null;
                };

                /**
                 * Creates a TraceConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.TraceConfig} TraceConfig
                 */
                TraceConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.TraceConfig)
                        return object;
                    let message = new $root.ethermint.evm.v1.TraceConfig();
                    if (object.tracer != null)
                        message.tracer = String(object.tracer);
                    if (object.timeout != null)
                        message.timeout = String(object.timeout);
                    if (object.reexec != null)
                        if ($util.Long)
                            (message.reexec = $util.Long.fromValue(object.reexec)).unsigned = true;
                        else if (typeof object.reexec === "string")
                            message.reexec = parseInt(object.reexec, 10);
                        else if (typeof object.reexec === "number")
                            message.reexec = object.reexec;
                        else if (typeof object.reexec === "object")
                            message.reexec = new $util.LongBits(object.reexec.low >>> 0, object.reexec.high >>> 0).toNumber(true);
                    if (object.disable_stack != null)
                        message.disable_stack = Boolean(object.disable_stack);
                    if (object.disable_storage != null)
                        message.disable_storage = Boolean(object.disable_storage);
                    if (object.debug != null)
                        message.debug = Boolean(object.debug);
                    if (object.limit != null)
                        message.limit = object.limit | 0;
                    if (object.overrides != null) {
                        if (typeof object.overrides !== "object")
                            throw TypeError(".ethermint.evm.v1.TraceConfig.overrides: object expected");
                        message.overrides = $root.ethermint.evm.v1.ChainConfig.fromObject(object.overrides);
                    }
                    if (object.enable_memory != null)
                        message.enable_memory = Boolean(object.enable_memory);
                    if (object.enable_return_data != null)
                        message.enable_return_data = Boolean(object.enable_return_data);
                    if (object.tracer_json_config != null)
                        message.tracer_json_config = String(object.tracer_json_config);
                    return message;
                };

                /**
                 * Creates a plain object from a TraceConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @static
                 * @param {ethermint.evm.v1.TraceConfig} message TraceConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TraceConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tracer = "";
                        object.timeout = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.reexec = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.reexec = options.longs === String ? "0" : 0;
                        object.disable_stack = false;
                        object.disable_storage = false;
                        object.debug = false;
                        object.limit = 0;
                        object.overrides = null;
                        object.enable_memory = false;
                        object.enable_return_data = false;
                        object.tracer_json_config = "";
                    }
                    if (message.tracer != null && message.hasOwnProperty("tracer"))
                        object.tracer = message.tracer;
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        object.timeout = message.timeout;
                    if (message.reexec != null && message.hasOwnProperty("reexec"))
                        if (typeof message.reexec === "number")
                            object.reexec = options.longs === String ? String(message.reexec) : message.reexec;
                        else
                            object.reexec = options.longs === String ? $util.Long.prototype.toString.call(message.reexec) : options.longs === Number ? new $util.LongBits(message.reexec.low >>> 0, message.reexec.high >>> 0).toNumber(true) : message.reexec;
                    if (message.disable_stack != null && message.hasOwnProperty("disable_stack"))
                        object.disable_stack = message.disable_stack;
                    if (message.disable_storage != null && message.hasOwnProperty("disable_storage"))
                        object.disable_storage = message.disable_storage;
                    if (message.debug != null && message.hasOwnProperty("debug"))
                        object.debug = message.debug;
                    if (message.limit != null && message.hasOwnProperty("limit"))
                        object.limit = message.limit;
                    if (message.overrides != null && message.hasOwnProperty("overrides"))
                        object.overrides = $root.ethermint.evm.v1.ChainConfig.toObject(message.overrides, options);
                    if (message.enable_memory != null && message.hasOwnProperty("enable_memory"))
                        object.enable_memory = message.enable_memory;
                    if (message.enable_return_data != null && message.hasOwnProperty("enable_return_data"))
                        object.enable_return_data = message.enable_return_data;
                    if (message.tracer_json_config != null && message.hasOwnProperty("tracer_json_config"))
                        object.tracer_json_config = message.tracer_json_config;
                    return object;
                };

                /**
                 * Converts this TraceConfig to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.TraceConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TraceConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TraceConfig;
            })();

            v1.EventEthereumTx = (function() {

                /**
                 * Properties of an EventEthereumTx.
                 * @memberof ethermint.evm.v1
                 * @interface IEventEthereumTx
                 * @property {string|null} [amount] EventEthereumTx amount
                 * @property {string|null} [eth_hash] EventEthereumTx eth_hash
                 * @property {string|null} [index] EventEthereumTx index
                 * @property {string|null} [gas_used] EventEthereumTx gas_used
                 * @property {string|null} [hash] EventEthereumTx hash
                 * @property {string|null} [recipient] EventEthereumTx recipient
                 * @property {string|null} [eth_tx_failed] EventEthereumTx eth_tx_failed
                 */

                /**
                 * Constructs a new EventEthereumTx.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an EventEthereumTx.
                 * @implements IEventEthereumTx
                 * @constructor
                 * @param {ethermint.evm.v1.IEventEthereumTx=} [properties] Properties to set
                 */
                function EventEthereumTx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventEthereumTx amount.
                 * @member {string} amount
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 */
                EventEthereumTx.prototype.amount = "";

                /**
                 * EventEthereumTx eth_hash.
                 * @member {string} eth_hash
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 */
                EventEthereumTx.prototype.eth_hash = "";

                /**
                 * EventEthereumTx index.
                 * @member {string} index
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 */
                EventEthereumTx.prototype.index = "";

                /**
                 * EventEthereumTx gas_used.
                 * @member {string} gas_used
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 */
                EventEthereumTx.prototype.gas_used = "";

                /**
                 * EventEthereumTx hash.
                 * @member {string} hash
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 */
                EventEthereumTx.prototype.hash = "";

                /**
                 * EventEthereumTx recipient.
                 * @member {string} recipient
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 */
                EventEthereumTx.prototype.recipient = "";

                /**
                 * EventEthereumTx eth_tx_failed.
                 * @member {string} eth_tx_failed
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 */
                EventEthereumTx.prototype.eth_tx_failed = "";

                /**
                 * Encodes the specified EventEthereumTx message. Does not implicitly {@link ethermint.evm.v1.EventEthereumTx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.IEventEthereumTx} message EventEthereumTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventEthereumTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.amount);
                    if (message.eth_hash != null && Object.hasOwnProperty.call(message, "eth_hash"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.eth_hash);
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.index);
                    if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.gas_used);
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.hash);
                    if (message.recipient != null && Object.hasOwnProperty.call(message, "recipient"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.recipient);
                    if (message.eth_tx_failed != null && Object.hasOwnProperty.call(message, "eth_tx_failed"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.eth_tx_failed);
                    return writer;
                };

                /**
                 * Encodes the specified EventEthereumTx message, length delimited. Does not implicitly {@link ethermint.evm.v1.EventEthereumTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.IEventEthereumTx} message EventEthereumTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventEthereumTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventEthereumTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.EventEthereumTx} EventEthereumTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventEthereumTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.EventEthereumTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.amount = reader.string();
                            break;
                        case 2:
                            message.eth_hash = reader.string();
                            break;
                        case 3:
                            message.index = reader.string();
                            break;
                        case 4:
                            message.gas_used = reader.string();
                            break;
                        case 5:
                            message.hash = reader.string();
                            break;
                        case 6:
                            message.recipient = reader.string();
                            break;
                        case 7:
                            message.eth_tx_failed = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventEthereumTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.EventEthereumTx} EventEthereumTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventEthereumTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventEthereumTx message.
                 * @function verify
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventEthereumTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    if (message.eth_hash != null && message.hasOwnProperty("eth_hash"))
                        if (!$util.isString(message.eth_hash))
                            return "eth_hash: string expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isString(message.index))
                            return "index: string expected";
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (!$util.isString(message.gas_used))
                            return "gas_used: string expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!$util.isString(message.hash))
                            return "hash: string expected";
                    if (message.recipient != null && message.hasOwnProperty("recipient"))
                        if (!$util.isString(message.recipient))
                            return "recipient: string expected";
                    if (message.eth_tx_failed != null && message.hasOwnProperty("eth_tx_failed"))
                        if (!$util.isString(message.eth_tx_failed))
                            return "eth_tx_failed: string expected";
                    return null;
                };

                /**
                 * Creates an EventEthereumTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.EventEthereumTx} EventEthereumTx
                 */
                EventEthereumTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.EventEthereumTx)
                        return object;
                    let message = new $root.ethermint.evm.v1.EventEthereumTx();
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    if (object.eth_hash != null)
                        message.eth_hash = String(object.eth_hash);
                    if (object.index != null)
                        message.index = String(object.index);
                    if (object.gas_used != null)
                        message.gas_used = String(object.gas_used);
                    if (object.hash != null)
                        message.hash = String(object.hash);
                    if (object.recipient != null)
                        message.recipient = String(object.recipient);
                    if (object.eth_tx_failed != null)
                        message.eth_tx_failed = String(object.eth_tx_failed);
                    return message;
                };

                /**
                 * Creates a plain object from an EventEthereumTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @static
                 * @param {ethermint.evm.v1.EventEthereumTx} message EventEthereumTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventEthereumTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.amount = "";
                        object.eth_hash = "";
                        object.index = "";
                        object.gas_used = "";
                        object.hash = "";
                        object.recipient = "";
                        object.eth_tx_failed = "";
                    }
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    if (message.eth_hash != null && message.hasOwnProperty("eth_hash"))
                        object.eth_hash = message.eth_hash;
                    if (message.index != null && message.hasOwnProperty("index"))
                        object.index = message.index;
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        object.gas_used = message.gas_used;
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = message.hash;
                    if (message.recipient != null && message.hasOwnProperty("recipient"))
                        object.recipient = message.recipient;
                    if (message.eth_tx_failed != null && message.hasOwnProperty("eth_tx_failed"))
                        object.eth_tx_failed = message.eth_tx_failed;
                    return object;
                };

                /**
                 * Converts this EventEthereumTx to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.EventEthereumTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventEthereumTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventEthereumTx;
            })();

            v1.EventTxLog = (function() {

                /**
                 * Properties of an EventTxLog.
                 * @memberof ethermint.evm.v1
                 * @interface IEventTxLog
                 * @property {Array.<string>|null} [tx_logs] EventTxLog tx_logs
                 */

                /**
                 * Constructs a new EventTxLog.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an EventTxLog.
                 * @implements IEventTxLog
                 * @constructor
                 * @param {ethermint.evm.v1.IEventTxLog=} [properties] Properties to set
                 */
                function EventTxLog(properties) {
                    this.tx_logs = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventTxLog tx_logs.
                 * @member {Array.<string>} tx_logs
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @instance
                 */
                EventTxLog.prototype.tx_logs = $util.emptyArray;

                /**
                 * Encodes the specified EventTxLog message. Does not implicitly {@link ethermint.evm.v1.EventTxLog.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @static
                 * @param {ethermint.evm.v1.IEventTxLog} message EventTxLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventTxLog.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tx_logs != null && message.tx_logs.length)
                        for (let i = 0; i < message.tx_logs.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tx_logs[i]);
                    return writer;
                };

                /**
                 * Encodes the specified EventTxLog message, length delimited. Does not implicitly {@link ethermint.evm.v1.EventTxLog.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @static
                 * @param {ethermint.evm.v1.IEventTxLog} message EventTxLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventTxLog.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventTxLog message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.EventTxLog} EventTxLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventTxLog.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.EventTxLog();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.tx_logs && message.tx_logs.length))
                                message.tx_logs = [];
                            message.tx_logs.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventTxLog message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.EventTxLog} EventTxLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventTxLog.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventTxLog message.
                 * @function verify
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventTxLog.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tx_logs != null && message.hasOwnProperty("tx_logs")) {
                        if (!Array.isArray(message.tx_logs))
                            return "tx_logs: array expected";
                        for (let i = 0; i < message.tx_logs.length; ++i)
                            if (!$util.isString(message.tx_logs[i]))
                                return "tx_logs: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates an EventTxLog message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.EventTxLog} EventTxLog
                 */
                EventTxLog.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.EventTxLog)
                        return object;
                    let message = new $root.ethermint.evm.v1.EventTxLog();
                    if (object.tx_logs) {
                        if (!Array.isArray(object.tx_logs))
                            throw TypeError(".ethermint.evm.v1.EventTxLog.tx_logs: array expected");
                        message.tx_logs = [];
                        for (let i = 0; i < object.tx_logs.length; ++i)
                            message.tx_logs[i] = String(object.tx_logs[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventTxLog message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @static
                 * @param {ethermint.evm.v1.EventTxLog} message EventTxLog
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventTxLog.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.tx_logs = [];
                    if (message.tx_logs && message.tx_logs.length) {
                        object.tx_logs = [];
                        for (let j = 0; j < message.tx_logs.length; ++j)
                            object.tx_logs[j] = message.tx_logs[j];
                    }
                    return object;
                };

                /**
                 * Converts this EventTxLog to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.EventTxLog
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventTxLog.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventTxLog;
            })();

            v1.EventMessage = (function() {

                /**
                 * Properties of an EventMessage.
                 * @memberof ethermint.evm.v1
                 * @interface IEventMessage
                 * @property {string|null} [module] EventMessage module
                 * @property {string|null} [sender] EventMessage sender
                 * @property {string|null} [tx_type] EventMessage tx_type
                 */

                /**
                 * Constructs a new EventMessage.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an EventMessage.
                 * @implements IEventMessage
                 * @constructor
                 * @param {ethermint.evm.v1.IEventMessage=} [properties] Properties to set
                 */
                function EventMessage(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventMessage module.
                 * @member {string} module
                 * @memberof ethermint.evm.v1.EventMessage
                 * @instance
                 */
                EventMessage.prototype.module = "";

                /**
                 * EventMessage sender.
                 * @member {string} sender
                 * @memberof ethermint.evm.v1.EventMessage
                 * @instance
                 */
                EventMessage.prototype.sender = "";

                /**
                 * EventMessage tx_type.
                 * @member {string} tx_type
                 * @memberof ethermint.evm.v1.EventMessage
                 * @instance
                 */
                EventMessage.prototype.tx_type = "";

                /**
                 * Encodes the specified EventMessage message. Does not implicitly {@link ethermint.evm.v1.EventMessage.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.EventMessage
                 * @static
                 * @param {ethermint.evm.v1.IEventMessage} message EventMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.module != null && Object.hasOwnProperty.call(message, "module"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.module);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);
                    if (message.tx_type != null && Object.hasOwnProperty.call(message, "tx_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.tx_type);
                    return writer;
                };

                /**
                 * Encodes the specified EventMessage message, length delimited. Does not implicitly {@link ethermint.evm.v1.EventMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.EventMessage
                 * @static
                 * @param {ethermint.evm.v1.IEventMessage} message EventMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.EventMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.EventMessage} EventMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.EventMessage();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.module = reader.string();
                            break;
                        case 2:
                            message.sender = reader.string();
                            break;
                        case 3:
                            message.tx_type = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.EventMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.EventMessage} EventMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventMessage message.
                 * @function verify
                 * @memberof ethermint.evm.v1.EventMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.module != null && message.hasOwnProperty("module"))
                        if (!$util.isString(message.module))
                            return "module: string expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.tx_type != null && message.hasOwnProperty("tx_type"))
                        if (!$util.isString(message.tx_type))
                            return "tx_type: string expected";
                    return null;
                };

                /**
                 * Creates an EventMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.EventMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.EventMessage} EventMessage
                 */
                EventMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.EventMessage)
                        return object;
                    let message = new $root.ethermint.evm.v1.EventMessage();
                    if (object.module != null)
                        message.module = String(object.module);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.tx_type != null)
                        message.tx_type = String(object.tx_type);
                    return message;
                };

                /**
                 * Creates a plain object from an EventMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.EventMessage
                 * @static
                 * @param {ethermint.evm.v1.EventMessage} message EventMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.module = "";
                        object.sender = "";
                        object.tx_type = "";
                    }
                    if (message.module != null && message.hasOwnProperty("module"))
                        object.module = message.module;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.tx_type != null && message.hasOwnProperty("tx_type"))
                        object.tx_type = message.tx_type;
                    return object;
                };

                /**
                 * Converts this EventMessage to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.EventMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventMessage;
            })();

            v1.EventBlockBloom = (function() {

                /**
                 * Properties of an EventBlockBloom.
                 * @memberof ethermint.evm.v1
                 * @interface IEventBlockBloom
                 * @property {string|null} [bloom] EventBlockBloom bloom
                 */

                /**
                 * Constructs a new EventBlockBloom.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an EventBlockBloom.
                 * @implements IEventBlockBloom
                 * @constructor
                 * @param {ethermint.evm.v1.IEventBlockBloom=} [properties] Properties to set
                 */
                function EventBlockBloom(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventBlockBloom bloom.
                 * @member {string} bloom
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @instance
                 */
                EventBlockBloom.prototype.bloom = "";

                /**
                 * Encodes the specified EventBlockBloom message. Does not implicitly {@link ethermint.evm.v1.EventBlockBloom.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @static
                 * @param {ethermint.evm.v1.IEventBlockBloom} message EventBlockBloom message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventBlockBloom.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.bloom != null && Object.hasOwnProperty.call(message, "bloom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.bloom);
                    return writer;
                };

                /**
                 * Encodes the specified EventBlockBloom message, length delimited. Does not implicitly {@link ethermint.evm.v1.EventBlockBloom.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @static
                 * @param {ethermint.evm.v1.IEventBlockBloom} message EventBlockBloom message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventBlockBloom.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventBlockBloom message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.EventBlockBloom} EventBlockBloom
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventBlockBloom.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.EventBlockBloom();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.bloom = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventBlockBloom message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.EventBlockBloom} EventBlockBloom
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventBlockBloom.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventBlockBloom message.
                 * @function verify
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventBlockBloom.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.bloom != null && message.hasOwnProperty("bloom"))
                        if (!$util.isString(message.bloom))
                            return "bloom: string expected";
                    return null;
                };

                /**
                 * Creates an EventBlockBloom message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.EventBlockBloom} EventBlockBloom
                 */
                EventBlockBloom.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.EventBlockBloom)
                        return object;
                    let message = new $root.ethermint.evm.v1.EventBlockBloom();
                    if (object.bloom != null)
                        message.bloom = String(object.bloom);
                    return message;
                };

                /**
                 * Creates a plain object from an EventBlockBloom message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @static
                 * @param {ethermint.evm.v1.EventBlockBloom} message EventBlockBloom
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventBlockBloom.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.bloom = "";
                    if (message.bloom != null && message.hasOwnProperty("bloom"))
                        object.bloom = message.bloom;
                    return object;
                };

                /**
                 * Converts this EventBlockBloom to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.EventBlockBloom
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventBlockBloom.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventBlockBloom;
            })();

            v1.Query = (function() {

                /**
                 * Constructs a new Query service.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#account}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef AccountCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryAccountResponse} [response] QueryAccountResponse
                 */

                /**
                 * Calls Account.
                 * @function account
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryAccountRequest} request QueryAccountRequest message or plain object
                 * @param {ethermint.evm.v1.Query.AccountCallback} callback Node-style callback called with the error, if any, and QueryAccountResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.account = function account(request, callback) {
                    return this.rpcCall(account, $root.ethermint.evm.v1.QueryAccountRequest, $root.ethermint.evm.v1.QueryAccountResponse, request, callback);
                }, "name", { value: "Account" });

                /**
                 * Calls Account.
                 * @function account
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryAccountRequest} request QueryAccountRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryAccountResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#cosmosAccount}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef CosmosAccountCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryCosmosAccountResponse} [response] QueryCosmosAccountResponse
                 */

                /**
                 * Calls CosmosAccount.
                 * @function cosmosAccount
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryCosmosAccountRequest} request QueryCosmosAccountRequest message or plain object
                 * @param {ethermint.evm.v1.Query.CosmosAccountCallback} callback Node-style callback called with the error, if any, and QueryCosmosAccountResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.cosmosAccount = function cosmosAccount(request, callback) {
                    return this.rpcCall(cosmosAccount, $root.ethermint.evm.v1.QueryCosmosAccountRequest, $root.ethermint.evm.v1.QueryCosmosAccountResponse, request, callback);
                }, "name", { value: "CosmosAccount" });

                /**
                 * Calls CosmosAccount.
                 * @function cosmosAccount
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryCosmosAccountRequest} request QueryCosmosAccountRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryCosmosAccountResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#validatorAccount}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef ValidatorAccountCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryValidatorAccountResponse} [response] QueryValidatorAccountResponse
                 */

                /**
                 * Calls ValidatorAccount.
                 * @function validatorAccount
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryValidatorAccountRequest} request QueryValidatorAccountRequest message or plain object
                 * @param {ethermint.evm.v1.Query.ValidatorAccountCallback} callback Node-style callback called with the error, if any, and QueryValidatorAccountResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.validatorAccount = function validatorAccount(request, callback) {
                    return this.rpcCall(validatorAccount, $root.ethermint.evm.v1.QueryValidatorAccountRequest, $root.ethermint.evm.v1.QueryValidatorAccountResponse, request, callback);
                }, "name", { value: "ValidatorAccount" });

                /**
                 * Calls ValidatorAccount.
                 * @function validatorAccount
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryValidatorAccountRequest} request QueryValidatorAccountRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryValidatorAccountResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#balance}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef BalanceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryBalanceResponse} [response] QueryBalanceResponse
                 */

                /**
                 * Calls Balance.
                 * @function balance
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryBalanceRequest} request QueryBalanceRequest message or plain object
                 * @param {ethermint.evm.v1.Query.BalanceCallback} callback Node-style callback called with the error, if any, and QueryBalanceResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.balance = function balance(request, callback) {
                    return this.rpcCall(balance, $root.ethermint.evm.v1.QueryBalanceRequest, $root.ethermint.evm.v1.QueryBalanceResponse, request, callback);
                }, "name", { value: "Balance" });

                /**
                 * Calls Balance.
                 * @function balance
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryBalanceRequest} request QueryBalanceRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryBalanceResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#storage}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef StorageCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryStorageResponse} [response] QueryStorageResponse
                 */

                /**
                 * Calls Storage.
                 * @function storage
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryStorageRequest} request QueryStorageRequest message or plain object
                 * @param {ethermint.evm.v1.Query.StorageCallback} callback Node-style callback called with the error, if any, and QueryStorageResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.storage = function storage(request, callback) {
                    return this.rpcCall(storage, $root.ethermint.evm.v1.QueryStorageRequest, $root.ethermint.evm.v1.QueryStorageResponse, request, callback);
                }, "name", { value: "Storage" });

                /**
                 * Calls Storage.
                 * @function storage
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryStorageRequest} request QueryStorageRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryStorageResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#code}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef CodeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryCodeResponse} [response] QueryCodeResponse
                 */

                /**
                 * Calls Code.
                 * @function code
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryCodeRequest} request QueryCodeRequest message or plain object
                 * @param {ethermint.evm.v1.Query.CodeCallback} callback Node-style callback called with the error, if any, and QueryCodeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.code = function code(request, callback) {
                    return this.rpcCall(code, $root.ethermint.evm.v1.QueryCodeRequest, $root.ethermint.evm.v1.QueryCodeResponse, request, callback);
                }, "name", { value: "Code" });

                /**
                 * Calls Code.
                 * @function code
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryCodeRequest} request QueryCodeRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryCodeResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#params}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryParamsResponse} [response] QueryParamsResponse
                 */

                /**
                 * Calls Params.
                 * @function params
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {ethermint.evm.v1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.ethermint.evm.v1.QueryParamsRequest, $root.ethermint.evm.v1.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });

                /**
                 * Calls Params.
                 * @function params
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryParamsResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#ethCall}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef EthCallCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.MsgEthereumTxResponse} [response] MsgEthereumTxResponse
                 */

                /**
                 * Calls EthCall.
                 * @function ethCall
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IEthCallRequest} request EthCallRequest message or plain object
                 * @param {ethermint.evm.v1.Query.EthCallCallback} callback Node-style callback called with the error, if any, and MsgEthereumTxResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.ethCall = function ethCall(request, callback) {
                    return this.rpcCall(ethCall, $root.ethermint.evm.v1.EthCallRequest, $root.ethermint.evm.v1.MsgEthereumTxResponse, request, callback);
                }, "name", { value: "EthCall" });

                /**
                 * Calls EthCall.
                 * @function ethCall
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IEthCallRequest} request EthCallRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.MsgEthereumTxResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#estimateGas}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef EstimateGasCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.EstimateGasResponse} [response] EstimateGasResponse
                 */

                /**
                 * Calls EstimateGas.
                 * @function estimateGas
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IEthCallRequest} request EthCallRequest message or plain object
                 * @param {ethermint.evm.v1.Query.EstimateGasCallback} callback Node-style callback called with the error, if any, and EstimateGasResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.estimateGas = function estimateGas(request, callback) {
                    return this.rpcCall(estimateGas, $root.ethermint.evm.v1.EthCallRequest, $root.ethermint.evm.v1.EstimateGasResponse, request, callback);
                }, "name", { value: "EstimateGas" });

                /**
                 * Calls EstimateGas.
                 * @function estimateGas
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IEthCallRequest} request EthCallRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.EstimateGasResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#traceTx}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef TraceTxCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryTraceTxResponse} [response] QueryTraceTxResponse
                 */

                /**
                 * Calls TraceTx.
                 * @function traceTx
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryTraceTxRequest} request QueryTraceTxRequest message or plain object
                 * @param {ethermint.evm.v1.Query.TraceTxCallback} callback Node-style callback called with the error, if any, and QueryTraceTxResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.traceTx = function traceTx(request, callback) {
                    return this.rpcCall(traceTx, $root.ethermint.evm.v1.QueryTraceTxRequest, $root.ethermint.evm.v1.QueryTraceTxResponse, request, callback);
                }, "name", { value: "TraceTx" });

                /**
                 * Calls TraceTx.
                 * @function traceTx
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryTraceTxRequest} request QueryTraceTxRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryTraceTxResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#traceBlock}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef TraceBlockCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryTraceBlockResponse} [response] QueryTraceBlockResponse
                 */

                /**
                 * Calls TraceBlock.
                 * @function traceBlock
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryTraceBlockRequest} request QueryTraceBlockRequest message or plain object
                 * @param {ethermint.evm.v1.Query.TraceBlockCallback} callback Node-style callback called with the error, if any, and QueryTraceBlockResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.traceBlock = function traceBlock(request, callback) {
                    return this.rpcCall(traceBlock, $root.ethermint.evm.v1.QueryTraceBlockRequest, $root.ethermint.evm.v1.QueryTraceBlockResponse, request, callback);
                }, "name", { value: "TraceBlock" });

                /**
                 * Calls TraceBlock.
                 * @function traceBlock
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryTraceBlockRequest} request QueryTraceBlockRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryTraceBlockResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.evm.v1.Query#baseFee}.
                 * @memberof ethermint.evm.v1.Query
                 * @typedef BaseFeeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.evm.v1.QueryBaseFeeResponse} [response] QueryBaseFeeResponse
                 */

                /**
                 * Calls BaseFee.
                 * @function baseFee
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryBaseFeeRequest} request QueryBaseFeeRequest message or plain object
                 * @param {ethermint.evm.v1.Query.BaseFeeCallback} callback Node-style callback called with the error, if any, and QueryBaseFeeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.baseFee = function baseFee(request, callback) {
                    return this.rpcCall(baseFee, $root.ethermint.evm.v1.QueryBaseFeeRequest, $root.ethermint.evm.v1.QueryBaseFeeResponse, request, callback);
                }, "name", { value: "BaseFee" });

                /**
                 * Calls BaseFee.
                 * @function baseFee
                 * @memberof ethermint.evm.v1.Query
                 * @instance
                 * @param {ethermint.evm.v1.IQueryBaseFeeRequest} request QueryBaseFeeRequest message or plain object
                 * @returns {Promise<ethermint.evm.v1.QueryBaseFeeResponse>} Promise
                 * @variation 2
                 */

                return Query;
            })();

            v1.QueryAccountRequest = (function() {

                /**
                 * Properties of a QueryAccountRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryAccountRequest
                 * @property {string|null} [address] QueryAccountRequest address
                 */

                /**
                 * Constructs a new QueryAccountRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryAccountRequest.
                 * @implements IQueryAccountRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryAccountRequest=} [properties] Properties to set
                 */
                function QueryAccountRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryAccountRequest address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @instance
                 */
                QueryAccountRequest.prototype.address = "";

                /**
                 * Encodes the specified QueryAccountRequest message. Does not implicitly {@link ethermint.evm.v1.QueryAccountRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryAccountRequest} message QueryAccountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAccountRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    return writer;
                };

                /**
                 * Encodes the specified QueryAccountRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryAccountRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryAccountRequest} message QueryAccountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAccountRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryAccountRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryAccountRequest} QueryAccountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAccountRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryAccountRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryAccountRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryAccountRequest} QueryAccountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAccountRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryAccountRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryAccountRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    return null;
                };

                /**
                 * Creates a QueryAccountRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryAccountRequest} QueryAccountRequest
                 */
                QueryAccountRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryAccountRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryAccountRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryAccountRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryAccountRequest} message QueryAccountRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryAccountRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    return object;
                };

                /**
                 * Converts this QueryAccountRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryAccountRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryAccountRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryAccountRequest;
            })();

            v1.QueryAccountResponse = (function() {

                /**
                 * Properties of a QueryAccountResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryAccountResponse
                 * @property {string|null} [balance] QueryAccountResponse balance
                 * @property {string|null} [code_hash] QueryAccountResponse code_hash
                 * @property {number|null} [nonce] QueryAccountResponse nonce
                 */

                /**
                 * Constructs a new QueryAccountResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryAccountResponse.
                 * @implements IQueryAccountResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryAccountResponse=} [properties] Properties to set
                 */
                function QueryAccountResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryAccountResponse balance.
                 * @member {string} balance
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @instance
                 */
                QueryAccountResponse.prototype.balance = "";

                /**
                 * QueryAccountResponse code_hash.
                 * @member {string} code_hash
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @instance
                 */
                QueryAccountResponse.prototype.code_hash = "";

                /**
                 * QueryAccountResponse nonce.
                 * @member {number} nonce
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @instance
                 */
                QueryAccountResponse.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryAccountResponse message. Does not implicitly {@link ethermint.evm.v1.QueryAccountResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryAccountResponse} message QueryAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAccountResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.balance != null && Object.hasOwnProperty.call(message, "balance"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.balance);
                    if (message.code_hash != null && Object.hasOwnProperty.call(message, "code_hash"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.code_hash);
                    if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.nonce);
                    return writer;
                };

                /**
                 * Encodes the specified QueryAccountResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryAccountResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryAccountResponse} message QueryAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAccountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryAccountResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryAccountResponse} QueryAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAccountResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryAccountResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.balance = reader.string();
                            break;
                        case 2:
                            message.code_hash = reader.string();
                            break;
                        case 3:
                            message.nonce = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryAccountResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryAccountResponse} QueryAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAccountResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryAccountResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryAccountResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.balance != null && message.hasOwnProperty("balance"))
                        if (!$util.isString(message.balance))
                            return "balance: string expected";
                    if (message.code_hash != null && message.hasOwnProperty("code_hash"))
                        if (!$util.isString(message.code_hash))
                            return "code_hash: string expected";
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                            return "nonce: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryAccountResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryAccountResponse} QueryAccountResponse
                 */
                QueryAccountResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryAccountResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryAccountResponse();
                    if (object.balance != null)
                        message.balance = String(object.balance);
                    if (object.code_hash != null)
                        message.code_hash = String(object.code_hash);
                    if (object.nonce != null)
                        if ($util.Long)
                            (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                        else if (typeof object.nonce === "string")
                            message.nonce = parseInt(object.nonce, 10);
                        else if (typeof object.nonce === "number")
                            message.nonce = object.nonce;
                        else if (typeof object.nonce === "object")
                            message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryAccountResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryAccountResponse} message QueryAccountResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryAccountResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.balance = "";
                        object.code_hash = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.nonce = options.longs === String ? "0" : 0;
                    }
                    if (message.balance != null && message.hasOwnProperty("balance"))
                        object.balance = message.balance;
                    if (message.code_hash != null && message.hasOwnProperty("code_hash"))
                        object.code_hash = message.code_hash;
                    if (message.nonce != null && message.hasOwnProperty("nonce"))
                        if (typeof message.nonce === "number")
                            object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                        else
                            object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                    return object;
                };

                /**
                 * Converts this QueryAccountResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryAccountResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryAccountResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryAccountResponse;
            })();

            v1.QueryCosmosAccountRequest = (function() {

                /**
                 * Properties of a QueryCosmosAccountRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryCosmosAccountRequest
                 * @property {string|null} [address] QueryCosmosAccountRequest address
                 */

                /**
                 * Constructs a new QueryCosmosAccountRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryCosmosAccountRequest.
                 * @implements IQueryCosmosAccountRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryCosmosAccountRequest=} [properties] Properties to set
                 */
                function QueryCosmosAccountRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCosmosAccountRequest address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @instance
                 */
                QueryCosmosAccountRequest.prototype.address = "";

                /**
                 * Encodes the specified QueryCosmosAccountRequest message. Does not implicitly {@link ethermint.evm.v1.QueryCosmosAccountRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryCosmosAccountRequest} message QueryCosmosAccountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCosmosAccountRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    return writer;
                };

                /**
                 * Encodes the specified QueryCosmosAccountRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryCosmosAccountRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryCosmosAccountRequest} message QueryCosmosAccountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCosmosAccountRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCosmosAccountRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryCosmosAccountRequest} QueryCosmosAccountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCosmosAccountRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryCosmosAccountRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCosmosAccountRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryCosmosAccountRequest} QueryCosmosAccountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCosmosAccountRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCosmosAccountRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCosmosAccountRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    return null;
                };

                /**
                 * Creates a QueryCosmosAccountRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryCosmosAccountRequest} QueryCosmosAccountRequest
                 */
                QueryCosmosAccountRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryCosmosAccountRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryCosmosAccountRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCosmosAccountRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryCosmosAccountRequest} message QueryCosmosAccountRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCosmosAccountRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    return object;
                };

                /**
                 * Converts this QueryCosmosAccountRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryCosmosAccountRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCosmosAccountRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCosmosAccountRequest;
            })();

            v1.QueryCosmosAccountResponse = (function() {

                /**
                 * Properties of a QueryCosmosAccountResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryCosmosAccountResponse
                 * @property {string|null} [cosmos_address] QueryCosmosAccountResponse cosmos_address
                 * @property {number|null} [sequence] QueryCosmosAccountResponse sequence
                 * @property {number|null} [account_number] QueryCosmosAccountResponse account_number
                 */

                /**
                 * Constructs a new QueryCosmosAccountResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryCosmosAccountResponse.
                 * @implements IQueryCosmosAccountResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryCosmosAccountResponse=} [properties] Properties to set
                 */
                function QueryCosmosAccountResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCosmosAccountResponse cosmos_address.
                 * @member {string} cosmos_address
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @instance
                 */
                QueryCosmosAccountResponse.prototype.cosmos_address = "";

                /**
                 * QueryCosmosAccountResponse sequence.
                 * @member {number} sequence
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @instance
                 */
                QueryCosmosAccountResponse.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryCosmosAccountResponse account_number.
                 * @member {number} account_number
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @instance
                 */
                QueryCosmosAccountResponse.prototype.account_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryCosmosAccountResponse message. Does not implicitly {@link ethermint.evm.v1.QueryCosmosAccountResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryCosmosAccountResponse} message QueryCosmosAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCosmosAccountResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cosmos_address != null && Object.hasOwnProperty.call(message, "cosmos_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cosmos_address);
                    if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.sequence);
                    if (message.account_number != null && Object.hasOwnProperty.call(message, "account_number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.account_number);
                    return writer;
                };

                /**
                 * Encodes the specified QueryCosmosAccountResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryCosmosAccountResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryCosmosAccountResponse} message QueryCosmosAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCosmosAccountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCosmosAccountResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryCosmosAccountResponse} QueryCosmosAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCosmosAccountResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryCosmosAccountResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.cosmos_address = reader.string();
                            break;
                        case 2:
                            message.sequence = reader.uint64();
                            break;
                        case 3:
                            message.account_number = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCosmosAccountResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryCosmosAccountResponse} QueryCosmosAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCosmosAccountResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCosmosAccountResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCosmosAccountResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cosmos_address != null && message.hasOwnProperty("cosmos_address"))
                        if (!$util.isString(message.cosmos_address))
                            return "cosmos_address: string expected";
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                            return "sequence: integer|Long expected";
                    if (message.account_number != null && message.hasOwnProperty("account_number"))
                        if (!$util.isInteger(message.account_number) && !(message.account_number && $util.isInteger(message.account_number.low) && $util.isInteger(message.account_number.high)))
                            return "account_number: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryCosmosAccountResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryCosmosAccountResponse} QueryCosmosAccountResponse
                 */
                QueryCosmosAccountResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryCosmosAccountResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryCosmosAccountResponse();
                    if (object.cosmos_address != null)
                        message.cosmos_address = String(object.cosmos_address);
                    if (object.sequence != null)
                        if ($util.Long)
                            (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                        else if (typeof object.sequence === "string")
                            message.sequence = parseInt(object.sequence, 10);
                        else if (typeof object.sequence === "number")
                            message.sequence = object.sequence;
                        else if (typeof object.sequence === "object")
                            message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                    if (object.account_number != null)
                        if ($util.Long)
                            (message.account_number = $util.Long.fromValue(object.account_number)).unsigned = true;
                        else if (typeof object.account_number === "string")
                            message.account_number = parseInt(object.account_number, 10);
                        else if (typeof object.account_number === "number")
                            message.account_number = object.account_number;
                        else if (typeof object.account_number === "object")
                            message.account_number = new $util.LongBits(object.account_number.low >>> 0, object.account_number.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCosmosAccountResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryCosmosAccountResponse} message QueryCosmosAccountResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCosmosAccountResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.cosmos_address = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sequence = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.account_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.account_number = options.longs === String ? "0" : 0;
                    }
                    if (message.cosmos_address != null && message.hasOwnProperty("cosmos_address"))
                        object.cosmos_address = message.cosmos_address;
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (typeof message.sequence === "number")
                            object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                        else
                            object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                    if (message.account_number != null && message.hasOwnProperty("account_number"))
                        if (typeof message.account_number === "number")
                            object.account_number = options.longs === String ? String(message.account_number) : message.account_number;
                        else
                            object.account_number = options.longs === String ? $util.Long.prototype.toString.call(message.account_number) : options.longs === Number ? new $util.LongBits(message.account_number.low >>> 0, message.account_number.high >>> 0).toNumber(true) : message.account_number;
                    return object;
                };

                /**
                 * Converts this QueryCosmosAccountResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryCosmosAccountResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCosmosAccountResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCosmosAccountResponse;
            })();

            v1.QueryValidatorAccountRequest = (function() {

                /**
                 * Properties of a QueryValidatorAccountRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryValidatorAccountRequest
                 * @property {string|null} [cons_address] QueryValidatorAccountRequest cons_address
                 */

                /**
                 * Constructs a new QueryValidatorAccountRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryValidatorAccountRequest.
                 * @implements IQueryValidatorAccountRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryValidatorAccountRequest=} [properties] Properties to set
                 */
                function QueryValidatorAccountRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryValidatorAccountRequest cons_address.
                 * @member {string} cons_address
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @instance
                 */
                QueryValidatorAccountRequest.prototype.cons_address = "";

                /**
                 * Encodes the specified QueryValidatorAccountRequest message. Does not implicitly {@link ethermint.evm.v1.QueryValidatorAccountRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryValidatorAccountRequest} message QueryValidatorAccountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorAccountRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cons_address != null && Object.hasOwnProperty.call(message, "cons_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cons_address);
                    return writer;
                };

                /**
                 * Encodes the specified QueryValidatorAccountRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryValidatorAccountRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryValidatorAccountRequest} message QueryValidatorAccountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorAccountRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryValidatorAccountRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryValidatorAccountRequest} QueryValidatorAccountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorAccountRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryValidatorAccountRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.cons_address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryValidatorAccountRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryValidatorAccountRequest} QueryValidatorAccountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorAccountRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryValidatorAccountRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryValidatorAccountRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cons_address != null && message.hasOwnProperty("cons_address"))
                        if (!$util.isString(message.cons_address))
                            return "cons_address: string expected";
                    return null;
                };

                /**
                 * Creates a QueryValidatorAccountRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryValidatorAccountRequest} QueryValidatorAccountRequest
                 */
                QueryValidatorAccountRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryValidatorAccountRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryValidatorAccountRequest();
                    if (object.cons_address != null)
                        message.cons_address = String(object.cons_address);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryValidatorAccountRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryValidatorAccountRequest} message QueryValidatorAccountRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryValidatorAccountRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.cons_address = "";
                    if (message.cons_address != null && message.hasOwnProperty("cons_address"))
                        object.cons_address = message.cons_address;
                    return object;
                };

                /**
                 * Converts this QueryValidatorAccountRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryValidatorAccountRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryValidatorAccountRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryValidatorAccountRequest;
            })();

            v1.QueryValidatorAccountResponse = (function() {

                /**
                 * Properties of a QueryValidatorAccountResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryValidatorAccountResponse
                 * @property {string|null} [account_address] QueryValidatorAccountResponse account_address
                 * @property {number|null} [sequence] QueryValidatorAccountResponse sequence
                 * @property {number|null} [account_number] QueryValidatorAccountResponse account_number
                 */

                /**
                 * Constructs a new QueryValidatorAccountResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryValidatorAccountResponse.
                 * @implements IQueryValidatorAccountResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryValidatorAccountResponse=} [properties] Properties to set
                 */
                function QueryValidatorAccountResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryValidatorAccountResponse account_address.
                 * @member {string} account_address
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @instance
                 */
                QueryValidatorAccountResponse.prototype.account_address = "";

                /**
                 * QueryValidatorAccountResponse sequence.
                 * @member {number} sequence
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @instance
                 */
                QueryValidatorAccountResponse.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryValidatorAccountResponse account_number.
                 * @member {number} account_number
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @instance
                 */
                QueryValidatorAccountResponse.prototype.account_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryValidatorAccountResponse message. Does not implicitly {@link ethermint.evm.v1.QueryValidatorAccountResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryValidatorAccountResponse} message QueryValidatorAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorAccountResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.account_address != null && Object.hasOwnProperty.call(message, "account_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.account_address);
                    if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.sequence);
                    if (message.account_number != null && Object.hasOwnProperty.call(message, "account_number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.account_number);
                    return writer;
                };

                /**
                 * Encodes the specified QueryValidatorAccountResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryValidatorAccountResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryValidatorAccountResponse} message QueryValidatorAccountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorAccountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryValidatorAccountResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryValidatorAccountResponse} QueryValidatorAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorAccountResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryValidatorAccountResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.account_address = reader.string();
                            break;
                        case 2:
                            message.sequence = reader.uint64();
                            break;
                        case 3:
                            message.account_number = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryValidatorAccountResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryValidatorAccountResponse} QueryValidatorAccountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorAccountResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryValidatorAccountResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryValidatorAccountResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.account_address != null && message.hasOwnProperty("account_address"))
                        if (!$util.isString(message.account_address))
                            return "account_address: string expected";
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                            return "sequence: integer|Long expected";
                    if (message.account_number != null && message.hasOwnProperty("account_number"))
                        if (!$util.isInteger(message.account_number) && !(message.account_number && $util.isInteger(message.account_number.low) && $util.isInteger(message.account_number.high)))
                            return "account_number: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryValidatorAccountResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryValidatorAccountResponse} QueryValidatorAccountResponse
                 */
                QueryValidatorAccountResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryValidatorAccountResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryValidatorAccountResponse();
                    if (object.account_address != null)
                        message.account_address = String(object.account_address);
                    if (object.sequence != null)
                        if ($util.Long)
                            (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                        else if (typeof object.sequence === "string")
                            message.sequence = parseInt(object.sequence, 10);
                        else if (typeof object.sequence === "number")
                            message.sequence = object.sequence;
                        else if (typeof object.sequence === "object")
                            message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                    if (object.account_number != null)
                        if ($util.Long)
                            (message.account_number = $util.Long.fromValue(object.account_number)).unsigned = true;
                        else if (typeof object.account_number === "string")
                            message.account_number = parseInt(object.account_number, 10);
                        else if (typeof object.account_number === "number")
                            message.account_number = object.account_number;
                        else if (typeof object.account_number === "object")
                            message.account_number = new $util.LongBits(object.account_number.low >>> 0, object.account_number.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryValidatorAccountResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryValidatorAccountResponse} message QueryValidatorAccountResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryValidatorAccountResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.account_address = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sequence = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.account_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.account_number = options.longs === String ? "0" : 0;
                    }
                    if (message.account_address != null && message.hasOwnProperty("account_address"))
                        object.account_address = message.account_address;
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (typeof message.sequence === "number")
                            object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                        else
                            object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                    if (message.account_number != null && message.hasOwnProperty("account_number"))
                        if (typeof message.account_number === "number")
                            object.account_number = options.longs === String ? String(message.account_number) : message.account_number;
                        else
                            object.account_number = options.longs === String ? $util.Long.prototype.toString.call(message.account_number) : options.longs === Number ? new $util.LongBits(message.account_number.low >>> 0, message.account_number.high >>> 0).toNumber(true) : message.account_number;
                    return object;
                };

                /**
                 * Converts this QueryValidatorAccountResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryValidatorAccountResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryValidatorAccountResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryValidatorAccountResponse;
            })();

            v1.QueryBalanceRequest = (function() {

                /**
                 * Properties of a QueryBalanceRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryBalanceRequest
                 * @property {string|null} [address] QueryBalanceRequest address
                 */

                /**
                 * Constructs a new QueryBalanceRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryBalanceRequest.
                 * @implements IQueryBalanceRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryBalanceRequest=} [properties] Properties to set
                 */
                function QueryBalanceRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryBalanceRequest address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @instance
                 */
                QueryBalanceRequest.prototype.address = "";

                /**
                 * Encodes the specified QueryBalanceRequest message. Does not implicitly {@link ethermint.evm.v1.QueryBalanceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryBalanceRequest} message QueryBalanceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBalanceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    return writer;
                };

                /**
                 * Encodes the specified QueryBalanceRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryBalanceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryBalanceRequest} message QueryBalanceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBalanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBalanceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryBalanceRequest} QueryBalanceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBalanceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryBalanceRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBalanceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryBalanceRequest} QueryBalanceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBalanceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBalanceRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBalanceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    return null;
                };

                /**
                 * Creates a QueryBalanceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryBalanceRequest} QueryBalanceRequest
                 */
                QueryBalanceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryBalanceRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryBalanceRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryBalanceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryBalanceRequest} message QueryBalanceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBalanceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    return object;
                };

                /**
                 * Converts this QueryBalanceRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryBalanceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBalanceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBalanceRequest;
            })();

            v1.QueryBalanceResponse = (function() {

                /**
                 * Properties of a QueryBalanceResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryBalanceResponse
                 * @property {string|null} [balance] QueryBalanceResponse balance
                 */

                /**
                 * Constructs a new QueryBalanceResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryBalanceResponse.
                 * @implements IQueryBalanceResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryBalanceResponse=} [properties] Properties to set
                 */
                function QueryBalanceResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryBalanceResponse balance.
                 * @member {string} balance
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @instance
                 */
                QueryBalanceResponse.prototype.balance = "";

                /**
                 * Encodes the specified QueryBalanceResponse message. Does not implicitly {@link ethermint.evm.v1.QueryBalanceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryBalanceResponse} message QueryBalanceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBalanceResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.balance != null && Object.hasOwnProperty.call(message, "balance"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.balance);
                    return writer;
                };

                /**
                 * Encodes the specified QueryBalanceResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryBalanceResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryBalanceResponse} message QueryBalanceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBalanceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBalanceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryBalanceResponse} QueryBalanceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBalanceResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryBalanceResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.balance = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBalanceResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryBalanceResponse} QueryBalanceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBalanceResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBalanceResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBalanceResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.balance != null && message.hasOwnProperty("balance"))
                        if (!$util.isString(message.balance))
                            return "balance: string expected";
                    return null;
                };

                /**
                 * Creates a QueryBalanceResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryBalanceResponse} QueryBalanceResponse
                 */
                QueryBalanceResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryBalanceResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryBalanceResponse();
                    if (object.balance != null)
                        message.balance = String(object.balance);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryBalanceResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryBalanceResponse} message QueryBalanceResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBalanceResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.balance = "";
                    if (message.balance != null && message.hasOwnProperty("balance"))
                        object.balance = message.balance;
                    return object;
                };

                /**
                 * Converts this QueryBalanceResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryBalanceResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBalanceResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBalanceResponse;
            })();

            v1.QueryStorageRequest = (function() {

                /**
                 * Properties of a QueryStorageRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryStorageRequest
                 * @property {string|null} [address] QueryStorageRequest address
                 * @property {string|null} [key] QueryStorageRequest key
                 */

                /**
                 * Constructs a new QueryStorageRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryStorageRequest.
                 * @implements IQueryStorageRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryStorageRequest=} [properties] Properties to set
                 */
                function QueryStorageRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryStorageRequest address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @instance
                 */
                QueryStorageRequest.prototype.address = "";

                /**
                 * QueryStorageRequest key.
                 * @member {string} key
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @instance
                 */
                QueryStorageRequest.prototype.key = "";

                /**
                 * Encodes the specified QueryStorageRequest message. Does not implicitly {@link ethermint.evm.v1.QueryStorageRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryStorageRequest} message QueryStorageRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryStorageRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);
                    return writer;
                };

                /**
                 * Encodes the specified QueryStorageRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryStorageRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryStorageRequest} message QueryStorageRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryStorageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryStorageRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryStorageRequest} QueryStorageRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryStorageRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryStorageRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.key = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryStorageRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryStorageRequest} QueryStorageRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryStorageRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryStorageRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryStorageRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!$util.isString(message.key))
                            return "key: string expected";
                    return null;
                };

                /**
                 * Creates a QueryStorageRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryStorageRequest} QueryStorageRequest
                 */
                QueryStorageRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryStorageRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryStorageRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.key != null)
                        message.key = String(object.key);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryStorageRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryStorageRequest} message QueryStorageRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryStorageRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        object.key = "";
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = message.key;
                    return object;
                };

                /**
                 * Converts this QueryStorageRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryStorageRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryStorageRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryStorageRequest;
            })();

            v1.QueryStorageResponse = (function() {

                /**
                 * Properties of a QueryStorageResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryStorageResponse
                 * @property {string|null} [value] QueryStorageResponse value
                 */

                /**
                 * Constructs a new QueryStorageResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryStorageResponse.
                 * @implements IQueryStorageResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryStorageResponse=} [properties] Properties to set
                 */
                function QueryStorageResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryStorageResponse value.
                 * @member {string} value
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @instance
                 */
                QueryStorageResponse.prototype.value = "";

                /**
                 * Encodes the specified QueryStorageResponse message. Does not implicitly {@link ethermint.evm.v1.QueryStorageResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryStorageResponse} message QueryStorageResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryStorageResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                    return writer;
                };

                /**
                 * Encodes the specified QueryStorageResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryStorageResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryStorageResponse} message QueryStorageResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryStorageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryStorageResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryStorageResponse} QueryStorageResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryStorageResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryStorageResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryStorageResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryStorageResponse} QueryStorageResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryStorageResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryStorageResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryStorageResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    return null;
                };

                /**
                 * Creates a QueryStorageResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryStorageResponse} QueryStorageResponse
                 */
                QueryStorageResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryStorageResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryStorageResponse();
                    if (object.value != null)
                        message.value = String(object.value);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryStorageResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryStorageResponse} message QueryStorageResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryStorageResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.value = "";
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };

                /**
                 * Converts this QueryStorageResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryStorageResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryStorageResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryStorageResponse;
            })();

            v1.QueryCodeRequest = (function() {

                /**
                 * Properties of a QueryCodeRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryCodeRequest
                 * @property {string|null} [address] QueryCodeRequest address
                 */

                /**
                 * Constructs a new QueryCodeRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryCodeRequest.
                 * @implements IQueryCodeRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryCodeRequest=} [properties] Properties to set
                 */
                function QueryCodeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCodeRequest address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @instance
                 */
                QueryCodeRequest.prototype.address = "";

                /**
                 * Encodes the specified QueryCodeRequest message. Does not implicitly {@link ethermint.evm.v1.QueryCodeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryCodeRequest} message QueryCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    return writer;
                };

                /**
                 * Encodes the specified QueryCodeRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryCodeRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryCodeRequest} message QueryCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCodeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryCodeRequest} QueryCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryCodeRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCodeRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryCodeRequest} QueryCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCodeRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCodeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    return null;
                };

                /**
                 * Creates a QueryCodeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryCodeRequest} QueryCodeRequest
                 */
                QueryCodeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryCodeRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryCodeRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCodeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryCodeRequest} message QueryCodeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCodeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    return object;
                };

                /**
                 * Converts this QueryCodeRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryCodeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCodeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCodeRequest;
            })();

            v1.QueryCodeResponse = (function() {

                /**
                 * Properties of a QueryCodeResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryCodeResponse
                 * @property {Uint8Array|null} [code] QueryCodeResponse code
                 */

                /**
                 * Constructs a new QueryCodeResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryCodeResponse.
                 * @implements IQueryCodeResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryCodeResponse=} [properties] Properties to set
                 */
                function QueryCodeResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCodeResponse code.
                 * @member {Uint8Array} code
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @instance
                 */
                QueryCodeResponse.prototype.code = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryCodeResponse message. Does not implicitly {@link ethermint.evm.v1.QueryCodeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryCodeResponse} message QueryCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.code);
                    return writer;
                };

                /**
                 * Encodes the specified QueryCodeResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryCodeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryCodeResponse} message QueryCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCodeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryCodeResponse} QueryCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryCodeResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCodeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryCodeResponse} QueryCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCodeResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCodeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!(message.code && typeof message.code.length === "number" || $util.isString(message.code)))
                            return "code: buffer expected";
                    return null;
                };

                /**
                 * Creates a QueryCodeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryCodeResponse} QueryCodeResponse
                 */
                QueryCodeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryCodeResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryCodeResponse();
                    if (object.code != null)
                        if (typeof object.code === "string")
                            $util.base64.decode(object.code, message.code = $util.newBuffer($util.base64.length(object.code)), 0);
                        else if (object.code.length)
                            message.code = object.code;
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCodeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryCodeResponse} message QueryCodeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCodeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.code = "";
                        else {
                            object.code = [];
                            if (options.bytes !== Array)
                                object.code = $util.newBuffer(object.code);
                        }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = options.bytes === String ? $util.base64.encode(message.code, 0, message.code.length) : options.bytes === Array ? Array.prototype.slice.call(message.code) : message.code;
                    return object;
                };

                /**
                 * Converts this QueryCodeResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryCodeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCodeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCodeResponse;
            })();

            v1.QueryTxLogsRequest = (function() {

                /**
                 * Properties of a QueryTxLogsRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryTxLogsRequest
                 * @property {string|null} [hash] QueryTxLogsRequest hash
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryTxLogsRequest pagination
                 */

                /**
                 * Constructs a new QueryTxLogsRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryTxLogsRequest.
                 * @implements IQueryTxLogsRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryTxLogsRequest=} [properties] Properties to set
                 */
                function QueryTxLogsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryTxLogsRequest hash.
                 * @member {string} hash
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @instance
                 */
                QueryTxLogsRequest.prototype.hash = "";

                /**
                 * QueryTxLogsRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @instance
                 */
                QueryTxLogsRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryTxLogsRequest message. Does not implicitly {@link ethermint.evm.v1.QueryTxLogsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryTxLogsRequest} message QueryTxLogsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTxLogsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryTxLogsRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryTxLogsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryTxLogsRequest} message QueryTxLogsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTxLogsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryTxLogsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryTxLogsRequest} QueryTxLogsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTxLogsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryTxLogsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.hash = reader.string();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryTxLogsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryTxLogsRequest} QueryTxLogsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTxLogsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryTxLogsRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTxLogsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!$util.isString(message.hash))
                            return "hash: string expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryTxLogsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryTxLogsRequest} QueryTxLogsRequest
                 */
                QueryTxLogsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryTxLogsRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryTxLogsRequest();
                    if (object.hash != null)
                        message.hash = String(object.hash);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryTxLogsRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryTxLogsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryTxLogsRequest} message QueryTxLogsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTxLogsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.hash = "";
                        object.pagination = null;
                    }
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = message.hash;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryTxLogsRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryTxLogsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTxLogsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryTxLogsRequest;
            })();

            v1.QueryTxLogsResponse = (function() {

                /**
                 * Properties of a QueryTxLogsResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryTxLogsResponse
                 * @property {Array.<ethermint.evm.v1.ILog>|null} [logs] QueryTxLogsResponse logs
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryTxLogsResponse pagination
                 */

                /**
                 * Constructs a new QueryTxLogsResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryTxLogsResponse.
                 * @implements IQueryTxLogsResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryTxLogsResponse=} [properties] Properties to set
                 */
                function QueryTxLogsResponse(properties) {
                    this.logs = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryTxLogsResponse logs.
                 * @member {Array.<ethermint.evm.v1.ILog>} logs
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @instance
                 */
                QueryTxLogsResponse.prototype.logs = $util.emptyArray;

                /**
                 * QueryTxLogsResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @instance
                 */
                QueryTxLogsResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryTxLogsResponse message. Does not implicitly {@link ethermint.evm.v1.QueryTxLogsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryTxLogsResponse} message QueryTxLogsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTxLogsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.logs != null && message.logs.length)
                        for (let i = 0; i < message.logs.length; ++i)
                            $root.ethermint.evm.v1.Log.encode(message.logs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryTxLogsResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryTxLogsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryTxLogsResponse} message QueryTxLogsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTxLogsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryTxLogsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryTxLogsResponse} QueryTxLogsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTxLogsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryTxLogsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.logs && message.logs.length))
                                message.logs = [];
                            message.logs.push($root.ethermint.evm.v1.Log.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryTxLogsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryTxLogsResponse} QueryTxLogsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTxLogsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryTxLogsResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTxLogsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.logs != null && message.hasOwnProperty("logs")) {
                        if (!Array.isArray(message.logs))
                            return "logs: array expected";
                        for (let i = 0; i < message.logs.length; ++i) {
                            let error = $root.ethermint.evm.v1.Log.verify(message.logs[i]);
                            if (error)
                                return "logs." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryTxLogsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryTxLogsResponse} QueryTxLogsResponse
                 */
                QueryTxLogsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryTxLogsResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryTxLogsResponse();
                    if (object.logs) {
                        if (!Array.isArray(object.logs))
                            throw TypeError(".ethermint.evm.v1.QueryTxLogsResponse.logs: array expected");
                        message.logs = [];
                        for (let i = 0; i < object.logs.length; ++i) {
                            if (typeof object.logs[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.QueryTxLogsResponse.logs: object expected");
                            message.logs[i] = $root.ethermint.evm.v1.Log.fromObject(object.logs[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryTxLogsResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryTxLogsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryTxLogsResponse} message QueryTxLogsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTxLogsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.logs = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.logs && message.logs.length) {
                        object.logs = [];
                        for (let j = 0; j < message.logs.length; ++j)
                            object.logs[j] = $root.ethermint.evm.v1.Log.toObject(message.logs[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryTxLogsResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryTxLogsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTxLogsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryTxLogsResponse;
            })();

            v1.QueryParamsRequest = (function() {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link ethermint.evm.v1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryParamsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryParamsRequest)
                        return object;
                    return new $root.ethermint.evm.v1.QueryParamsRequest();
                };

                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryParamsRequest;
            })();

            v1.QueryParamsResponse = (function() {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryParamsResponse
                 * @property {ethermint.evm.v1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {ethermint.evm.v1.IParams|null|undefined} params
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link ethermint.evm.v1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.ethermint.evm.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryParamsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.ethermint.evm.v1.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.ethermint.evm.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryParamsResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryParamsResponse.params: object expected");
                        message.params = $root.ethermint.evm.v1.Params.fromObject(object.params);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.ethermint.evm.v1.Params.toObject(message.params, options);
                    return object;
                };

                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryParamsResponse;
            })();

            v1.EthCallRequest = (function() {

                /**
                 * Properties of an EthCallRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IEthCallRequest
                 * @property {Uint8Array|null} [args] EthCallRequest args
                 * @property {number|null} [gas_cap] EthCallRequest gas_cap
                 * @property {Uint8Array|null} [proposer_address] EthCallRequest proposer_address
                 * @property {number|null} [chain_id] EthCallRequest chain_id
                 */

                /**
                 * Constructs a new EthCallRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an EthCallRequest.
                 * @implements IEthCallRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IEthCallRequest=} [properties] Properties to set
                 */
                function EthCallRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EthCallRequest args.
                 * @member {Uint8Array} args
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @instance
                 */
                EthCallRequest.prototype.args = $util.newBuffer([]);

                /**
                 * EthCallRequest gas_cap.
                 * @member {number} gas_cap
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @instance
                 */
                EthCallRequest.prototype.gas_cap = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * EthCallRequest proposer_address.
                 * @member {Uint8Array} proposer_address
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @instance
                 */
                EthCallRequest.prototype.proposer_address = $util.newBuffer([]);

                /**
                 * EthCallRequest chain_id.
                 * @member {number} chain_id
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @instance
                 */
                EthCallRequest.prototype.chain_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Encodes the specified EthCallRequest message. Does not implicitly {@link ethermint.evm.v1.EthCallRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @static
                 * @param {ethermint.evm.v1.IEthCallRequest} message EthCallRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EthCallRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.args != null && Object.hasOwnProperty.call(message, "args"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.args);
                    if (message.gas_cap != null && Object.hasOwnProperty.call(message, "gas_cap"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.gas_cap);
                    if (message.proposer_address != null && Object.hasOwnProperty.call(message, "proposer_address"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proposer_address);
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.chain_id);
                    return writer;
                };

                /**
                 * Encodes the specified EthCallRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.EthCallRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @static
                 * @param {ethermint.evm.v1.IEthCallRequest} message EthCallRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EthCallRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EthCallRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.EthCallRequest} EthCallRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EthCallRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.EthCallRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.args = reader.bytes();
                            break;
                        case 2:
                            message.gas_cap = reader.uint64();
                            break;
                        case 3:
                            message.proposer_address = reader.bytes();
                            break;
                        case 4:
                            message.chain_id = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EthCallRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.EthCallRequest} EthCallRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EthCallRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EthCallRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EthCallRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.args != null && message.hasOwnProperty("args"))
                        if (!(message.args && typeof message.args.length === "number" || $util.isString(message.args)))
                            return "args: buffer expected";
                    if (message.gas_cap != null && message.hasOwnProperty("gas_cap"))
                        if (!$util.isInteger(message.gas_cap) && !(message.gas_cap && $util.isInteger(message.gas_cap.low) && $util.isInteger(message.gas_cap.high)))
                            return "gas_cap: integer|Long expected";
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        if (!(message.proposer_address && typeof message.proposer_address.length === "number" || $util.isString(message.proposer_address)))
                            return "proposer_address: buffer expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isInteger(message.chain_id) && !(message.chain_id && $util.isInteger(message.chain_id.low) && $util.isInteger(message.chain_id.high)))
                            return "chain_id: integer|Long expected";
                    return null;
                };

                /**
                 * Creates an EthCallRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.EthCallRequest} EthCallRequest
                 */
                EthCallRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.EthCallRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.EthCallRequest();
                    if (object.args != null)
                        if (typeof object.args === "string")
                            $util.base64.decode(object.args, message.args = $util.newBuffer($util.base64.length(object.args)), 0);
                        else if (object.args.length)
                            message.args = object.args;
                    if (object.gas_cap != null)
                        if ($util.Long)
                            (message.gas_cap = $util.Long.fromValue(object.gas_cap)).unsigned = true;
                        else if (typeof object.gas_cap === "string")
                            message.gas_cap = parseInt(object.gas_cap, 10);
                        else if (typeof object.gas_cap === "number")
                            message.gas_cap = object.gas_cap;
                        else if (typeof object.gas_cap === "object")
                            message.gas_cap = new $util.LongBits(object.gas_cap.low >>> 0, object.gas_cap.high >>> 0).toNumber(true);
                    if (object.proposer_address != null)
                        if (typeof object.proposer_address === "string")
                            $util.base64.decode(object.proposer_address, message.proposer_address = $util.newBuffer($util.base64.length(object.proposer_address)), 0);
                        else if (object.proposer_address.length)
                            message.proposer_address = object.proposer_address;
                    if (object.chain_id != null)
                        if ($util.Long)
                            (message.chain_id = $util.Long.fromValue(object.chain_id)).unsigned = false;
                        else if (typeof object.chain_id === "string")
                            message.chain_id = parseInt(object.chain_id, 10);
                        else if (typeof object.chain_id === "number")
                            message.chain_id = object.chain_id;
                        else if (typeof object.chain_id === "object")
                            message.chain_id = new $util.LongBits(object.chain_id.low >>> 0, object.chain_id.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from an EthCallRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @static
                 * @param {ethermint.evm.v1.EthCallRequest} message EthCallRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EthCallRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.args = "";
                        else {
                            object.args = [];
                            if (options.bytes !== Array)
                                object.args = $util.newBuffer(object.args);
                        }
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas_cap = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_cap = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.proposer_address = "";
                        else {
                            object.proposer_address = [];
                            if (options.bytes !== Array)
                                object.proposer_address = $util.newBuffer(object.proposer_address);
                        }
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.chain_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.chain_id = options.longs === String ? "0" : 0;
                    }
                    if (message.args != null && message.hasOwnProperty("args"))
                        object.args = options.bytes === String ? $util.base64.encode(message.args, 0, message.args.length) : options.bytes === Array ? Array.prototype.slice.call(message.args) : message.args;
                    if (message.gas_cap != null && message.hasOwnProperty("gas_cap"))
                        if (typeof message.gas_cap === "number")
                            object.gas_cap = options.longs === String ? String(message.gas_cap) : message.gas_cap;
                        else
                            object.gas_cap = options.longs === String ? $util.Long.prototype.toString.call(message.gas_cap) : options.longs === Number ? new $util.LongBits(message.gas_cap.low >>> 0, message.gas_cap.high >>> 0).toNumber(true) : message.gas_cap;
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        object.proposer_address = options.bytes === String ? $util.base64.encode(message.proposer_address, 0, message.proposer_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.proposer_address) : message.proposer_address;
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (typeof message.chain_id === "number")
                            object.chain_id = options.longs === String ? String(message.chain_id) : message.chain_id;
                        else
                            object.chain_id = options.longs === String ? $util.Long.prototype.toString.call(message.chain_id) : options.longs === Number ? new $util.LongBits(message.chain_id.low >>> 0, message.chain_id.high >>> 0).toNumber() : message.chain_id;
                    return object;
                };

                /**
                 * Converts this EthCallRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.EthCallRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EthCallRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EthCallRequest;
            })();

            v1.EstimateGasResponse = (function() {

                /**
                 * Properties of an EstimateGasResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IEstimateGasResponse
                 * @property {number|null} [gas] EstimateGasResponse gas
                 */

                /**
                 * Constructs a new EstimateGasResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents an EstimateGasResponse.
                 * @implements IEstimateGasResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IEstimateGasResponse=} [properties] Properties to set
                 */
                function EstimateGasResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EstimateGasResponse gas.
                 * @member {number} gas
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @instance
                 */
                EstimateGasResponse.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified EstimateGasResponse message. Does not implicitly {@link ethermint.evm.v1.EstimateGasResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @static
                 * @param {ethermint.evm.v1.IEstimateGasResponse} message EstimateGasResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EstimateGasResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.gas != null && Object.hasOwnProperty.call(message, "gas"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.gas);
                    return writer;
                };

                /**
                 * Encodes the specified EstimateGasResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.EstimateGasResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @static
                 * @param {ethermint.evm.v1.IEstimateGasResponse} message EstimateGasResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EstimateGasResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EstimateGasResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.EstimateGasResponse} EstimateGasResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EstimateGasResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.EstimateGasResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.gas = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EstimateGasResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.EstimateGasResponse} EstimateGasResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EstimateGasResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EstimateGasResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EstimateGasResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (!$util.isInteger(message.gas) && !(message.gas && $util.isInteger(message.gas.low) && $util.isInteger(message.gas.high)))
                            return "gas: integer|Long expected";
                    return null;
                };

                /**
                 * Creates an EstimateGasResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.EstimateGasResponse} EstimateGasResponse
                 */
                EstimateGasResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.EstimateGasResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.EstimateGasResponse();
                    if (object.gas != null)
                        if ($util.Long)
                            (message.gas = $util.Long.fromValue(object.gas)).unsigned = true;
                        else if (typeof object.gas === "string")
                            message.gas = parseInt(object.gas, 10);
                        else if (typeof object.gas === "number")
                            message.gas = object.gas;
                        else if (typeof object.gas === "object")
                            message.gas = new $util.LongBits(object.gas.low >>> 0, object.gas.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from an EstimateGasResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @static
                 * @param {ethermint.evm.v1.EstimateGasResponse} message EstimateGasResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EstimateGasResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas = options.longs === String ? "0" : 0;
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (typeof message.gas === "number")
                            object.gas = options.longs === String ? String(message.gas) : message.gas;
                        else
                            object.gas = options.longs === String ? $util.Long.prototype.toString.call(message.gas) : options.longs === Number ? new $util.LongBits(message.gas.low >>> 0, message.gas.high >>> 0).toNumber(true) : message.gas;
                    return object;
                };

                /**
                 * Converts this EstimateGasResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.EstimateGasResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EstimateGasResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EstimateGasResponse;
            })();

            v1.QueryTraceTxRequest = (function() {

                /**
                 * Properties of a QueryTraceTxRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryTraceTxRequest
                 * @property {ethermint.evm.v1.IMsgEthereumTx|null} [msg] QueryTraceTxRequest msg
                 * @property {ethermint.evm.v1.ITraceConfig|null} [trace_config] QueryTraceTxRequest trace_config
                 * @property {Array.<ethermint.evm.v1.IMsgEthereumTx>|null} [predecessors] QueryTraceTxRequest predecessors
                 * @property {number|null} [block_number] QueryTraceTxRequest block_number
                 * @property {string|null} [block_hash] QueryTraceTxRequest block_hash
                 * @property {google.protobuf.ITimestamp|null} [block_time] QueryTraceTxRequest block_time
                 * @property {Uint8Array|null} [proposer_address] QueryTraceTxRequest proposer_address
                 * @property {number|null} [chain_id] QueryTraceTxRequest chain_id
                 */

                /**
                 * Constructs a new QueryTraceTxRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryTraceTxRequest.
                 * @implements IQueryTraceTxRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryTraceTxRequest=} [properties] Properties to set
                 */
                function QueryTraceTxRequest(properties) {
                    this.predecessors = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryTraceTxRequest msg.
                 * @member {ethermint.evm.v1.IMsgEthereumTx|null|undefined} msg
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.msg = null;

                /**
                 * QueryTraceTxRequest trace_config.
                 * @member {ethermint.evm.v1.ITraceConfig|null|undefined} trace_config
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.trace_config = null;

                /**
                 * QueryTraceTxRequest predecessors.
                 * @member {Array.<ethermint.evm.v1.IMsgEthereumTx>} predecessors
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.predecessors = $util.emptyArray;

                /**
                 * QueryTraceTxRequest block_number.
                 * @member {number} block_number
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.block_number = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * QueryTraceTxRequest block_hash.
                 * @member {string} block_hash
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.block_hash = "";

                /**
                 * QueryTraceTxRequest block_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} block_time
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.block_time = null;

                /**
                 * QueryTraceTxRequest proposer_address.
                 * @member {Uint8Array} proposer_address
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.proposer_address = $util.newBuffer([]);

                /**
                 * QueryTraceTxRequest chain_id.
                 * @member {number} chain_id
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 */
                QueryTraceTxRequest.prototype.chain_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Encodes the specified QueryTraceTxRequest message. Does not implicitly {@link ethermint.evm.v1.QueryTraceTxRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceTxRequest} message QueryTraceTxRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceTxRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        $root.ethermint.evm.v1.MsgEthereumTx.encode(message.msg, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trace_config != null && Object.hasOwnProperty.call(message, "trace_config"))
                        $root.ethermint.evm.v1.TraceConfig.encode(message.trace_config, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.predecessors != null && message.predecessors.length)
                        for (let i = 0; i < message.predecessors.length; ++i)
                            $root.ethermint.evm.v1.MsgEthereumTx.encode(message.predecessors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.block_number != null && Object.hasOwnProperty.call(message, "block_number"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.block_number);
                    if (message.block_hash != null && Object.hasOwnProperty.call(message, "block_hash"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.block_hash);
                    if (message.block_time != null && Object.hasOwnProperty.call(message, "block_time"))
                        $root.google.protobuf.Timestamp.encode(message.block_time, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.proposer_address != null && Object.hasOwnProperty.call(message, "proposer_address"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.proposer_address);
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int64(message.chain_id);
                    return writer;
                };

                /**
                 * Encodes the specified QueryTraceTxRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryTraceTxRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceTxRequest} message QueryTraceTxRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceTxRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryTraceTxRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryTraceTxRequest} QueryTraceTxRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceTxRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryTraceTxRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.msg = $root.ethermint.evm.v1.MsgEthereumTx.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.trace_config = $root.ethermint.evm.v1.TraceConfig.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.predecessors && message.predecessors.length))
                                message.predecessors = [];
                            message.predecessors.push($root.ethermint.evm.v1.MsgEthereumTx.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.block_number = reader.int64();
                            break;
                        case 6:
                            message.block_hash = reader.string();
                            break;
                        case 7:
                            message.block_time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.proposer_address = reader.bytes();
                            break;
                        case 9:
                            message.chain_id = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryTraceTxRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryTraceTxRequest} QueryTraceTxRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceTxRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryTraceTxRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTraceTxRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.msg != null && message.hasOwnProperty("msg")) {
                        let error = $root.ethermint.evm.v1.MsgEthereumTx.verify(message.msg);
                        if (error)
                            return "msg." + error;
                    }
                    if (message.trace_config != null && message.hasOwnProperty("trace_config")) {
                        let error = $root.ethermint.evm.v1.TraceConfig.verify(message.trace_config);
                        if (error)
                            return "trace_config." + error;
                    }
                    if (message.predecessors != null && message.hasOwnProperty("predecessors")) {
                        if (!Array.isArray(message.predecessors))
                            return "predecessors: array expected";
                        for (let i = 0; i < message.predecessors.length; ++i) {
                            let error = $root.ethermint.evm.v1.MsgEthereumTx.verify(message.predecessors[i]);
                            if (error)
                                return "predecessors." + error;
                        }
                    }
                    if (message.block_number != null && message.hasOwnProperty("block_number"))
                        if (!$util.isInteger(message.block_number) && !(message.block_number && $util.isInteger(message.block_number.low) && $util.isInteger(message.block_number.high)))
                            return "block_number: integer|Long expected";
                    if (message.block_hash != null && message.hasOwnProperty("block_hash"))
                        if (!$util.isString(message.block_hash))
                            return "block_hash: string expected";
                    if (message.block_time != null && message.hasOwnProperty("block_time")) {
                        let error = $root.google.protobuf.Timestamp.verify(message.block_time);
                        if (error)
                            return "block_time." + error;
                    }
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        if (!(message.proposer_address && typeof message.proposer_address.length === "number" || $util.isString(message.proposer_address)))
                            return "proposer_address: buffer expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isInteger(message.chain_id) && !(message.chain_id && $util.isInteger(message.chain_id.low) && $util.isInteger(message.chain_id.high)))
                            return "chain_id: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryTraceTxRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryTraceTxRequest} QueryTraceTxRequest
                 */
                QueryTraceTxRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryTraceTxRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryTraceTxRequest();
                    if (object.msg != null) {
                        if (typeof object.msg !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryTraceTxRequest.msg: object expected");
                        message.msg = $root.ethermint.evm.v1.MsgEthereumTx.fromObject(object.msg);
                    }
                    if (object.trace_config != null) {
                        if (typeof object.trace_config !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryTraceTxRequest.trace_config: object expected");
                        message.trace_config = $root.ethermint.evm.v1.TraceConfig.fromObject(object.trace_config);
                    }
                    if (object.predecessors) {
                        if (!Array.isArray(object.predecessors))
                            throw TypeError(".ethermint.evm.v1.QueryTraceTxRequest.predecessors: array expected");
                        message.predecessors = [];
                        for (let i = 0; i < object.predecessors.length; ++i) {
                            if (typeof object.predecessors[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.QueryTraceTxRequest.predecessors: object expected");
                            message.predecessors[i] = $root.ethermint.evm.v1.MsgEthereumTx.fromObject(object.predecessors[i]);
                        }
                    }
                    if (object.block_number != null)
                        if ($util.Long)
                            (message.block_number = $util.Long.fromValue(object.block_number)).unsigned = false;
                        else if (typeof object.block_number === "string")
                            message.block_number = parseInt(object.block_number, 10);
                        else if (typeof object.block_number === "number")
                            message.block_number = object.block_number;
                        else if (typeof object.block_number === "object")
                            message.block_number = new $util.LongBits(object.block_number.low >>> 0, object.block_number.high >>> 0).toNumber();
                    if (object.block_hash != null)
                        message.block_hash = String(object.block_hash);
                    if (object.block_time != null) {
                        if (typeof object.block_time !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryTraceTxRequest.block_time: object expected");
                        message.block_time = $root.google.protobuf.Timestamp.fromObject(object.block_time);
                    }
                    if (object.proposer_address != null)
                        if (typeof object.proposer_address === "string")
                            $util.base64.decode(object.proposer_address, message.proposer_address = $util.newBuffer($util.base64.length(object.proposer_address)), 0);
                        else if (object.proposer_address.length)
                            message.proposer_address = object.proposer_address;
                    if (object.chain_id != null)
                        if ($util.Long)
                            (message.chain_id = $util.Long.fromValue(object.chain_id)).unsigned = false;
                        else if (typeof object.chain_id === "string")
                            message.chain_id = parseInt(object.chain_id, 10);
                        else if (typeof object.chain_id === "number")
                            message.chain_id = object.chain_id;
                        else if (typeof object.chain_id === "object")
                            message.chain_id = new $util.LongBits(object.chain_id.low >>> 0, object.chain_id.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a QueryTraceTxRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryTraceTxRequest} message QueryTraceTxRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTraceTxRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.predecessors = [];
                    if (options.defaults) {
                        object.msg = null;
                        object.trace_config = null;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.block_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_number = options.longs === String ? "0" : 0;
                        object.block_hash = "";
                        object.block_time = null;
                        if (options.bytes === String)
                            object.proposer_address = "";
                        else {
                            object.proposer_address = [];
                            if (options.bytes !== Array)
                                object.proposer_address = $util.newBuffer(object.proposer_address);
                        }
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.chain_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.chain_id = options.longs === String ? "0" : 0;
                    }
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = $root.ethermint.evm.v1.MsgEthereumTx.toObject(message.msg, options);
                    if (message.trace_config != null && message.hasOwnProperty("trace_config"))
                        object.trace_config = $root.ethermint.evm.v1.TraceConfig.toObject(message.trace_config, options);
                    if (message.predecessors && message.predecessors.length) {
                        object.predecessors = [];
                        for (let j = 0; j < message.predecessors.length; ++j)
                            object.predecessors[j] = $root.ethermint.evm.v1.MsgEthereumTx.toObject(message.predecessors[j], options);
                    }
                    if (message.block_number != null && message.hasOwnProperty("block_number"))
                        if (typeof message.block_number === "number")
                            object.block_number = options.longs === String ? String(message.block_number) : message.block_number;
                        else
                            object.block_number = options.longs === String ? $util.Long.prototype.toString.call(message.block_number) : options.longs === Number ? new $util.LongBits(message.block_number.low >>> 0, message.block_number.high >>> 0).toNumber() : message.block_number;
                    if (message.block_hash != null && message.hasOwnProperty("block_hash"))
                        object.block_hash = message.block_hash;
                    if (message.block_time != null && message.hasOwnProperty("block_time"))
                        object.block_time = $root.google.protobuf.Timestamp.toObject(message.block_time, options);
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        object.proposer_address = options.bytes === String ? $util.base64.encode(message.proposer_address, 0, message.proposer_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.proposer_address) : message.proposer_address;
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (typeof message.chain_id === "number")
                            object.chain_id = options.longs === String ? String(message.chain_id) : message.chain_id;
                        else
                            object.chain_id = options.longs === String ? $util.Long.prototype.toString.call(message.chain_id) : options.longs === Number ? new $util.LongBits(message.chain_id.low >>> 0, message.chain_id.high >>> 0).toNumber() : message.chain_id;
                    return object;
                };

                /**
                 * Converts this QueryTraceTxRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryTraceTxRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTraceTxRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryTraceTxRequest;
            })();

            v1.QueryTraceTxResponse = (function() {

                /**
                 * Properties of a QueryTraceTxResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryTraceTxResponse
                 * @property {Uint8Array|null} [data] QueryTraceTxResponse data
                 */

                /**
                 * Constructs a new QueryTraceTxResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryTraceTxResponse.
                 * @implements IQueryTraceTxResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryTraceTxResponse=} [properties] Properties to set
                 */
                function QueryTraceTxResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryTraceTxResponse data.
                 * @member {Uint8Array} data
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @instance
                 */
                QueryTraceTxResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryTraceTxResponse message. Does not implicitly {@link ethermint.evm.v1.QueryTraceTxResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceTxResponse} message QueryTraceTxResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceTxResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified QueryTraceTxResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryTraceTxResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceTxResponse} message QueryTraceTxResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceTxResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryTraceTxResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryTraceTxResponse} QueryTraceTxResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceTxResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryTraceTxResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryTraceTxResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryTraceTxResponse} QueryTraceTxResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceTxResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryTraceTxResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTraceTxResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a QueryTraceTxResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryTraceTxResponse} QueryTraceTxResponse
                 */
                QueryTraceTxResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryTraceTxResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryTraceTxResponse();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a QueryTraceTxResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryTraceTxResponse} message QueryTraceTxResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTraceTxResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this QueryTraceTxResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryTraceTxResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTraceTxResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryTraceTxResponse;
            })();

            v1.QueryTraceBlockRequest = (function() {

                /**
                 * Properties of a QueryTraceBlockRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryTraceBlockRequest
                 * @property {Array.<ethermint.evm.v1.IMsgEthereumTx>|null} [txs] QueryTraceBlockRequest txs
                 * @property {ethermint.evm.v1.ITraceConfig|null} [trace_config] QueryTraceBlockRequest trace_config
                 * @property {number|null} [block_number] QueryTraceBlockRequest block_number
                 * @property {string|null} [block_hash] QueryTraceBlockRequest block_hash
                 * @property {google.protobuf.ITimestamp|null} [block_time] QueryTraceBlockRequest block_time
                 * @property {Uint8Array|null} [proposer_address] QueryTraceBlockRequest proposer_address
                 * @property {number|null} [chain_id] QueryTraceBlockRequest chain_id
                 */

                /**
                 * Constructs a new QueryTraceBlockRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryTraceBlockRequest.
                 * @implements IQueryTraceBlockRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryTraceBlockRequest=} [properties] Properties to set
                 */
                function QueryTraceBlockRequest(properties) {
                    this.txs = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryTraceBlockRequest txs.
                 * @member {Array.<ethermint.evm.v1.IMsgEthereumTx>} txs
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 */
                QueryTraceBlockRequest.prototype.txs = $util.emptyArray;

                /**
                 * QueryTraceBlockRequest trace_config.
                 * @member {ethermint.evm.v1.ITraceConfig|null|undefined} trace_config
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 */
                QueryTraceBlockRequest.prototype.trace_config = null;

                /**
                 * QueryTraceBlockRequest block_number.
                 * @member {number} block_number
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 */
                QueryTraceBlockRequest.prototype.block_number = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * QueryTraceBlockRequest block_hash.
                 * @member {string} block_hash
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 */
                QueryTraceBlockRequest.prototype.block_hash = "";

                /**
                 * QueryTraceBlockRequest block_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} block_time
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 */
                QueryTraceBlockRequest.prototype.block_time = null;

                /**
                 * QueryTraceBlockRequest proposer_address.
                 * @member {Uint8Array} proposer_address
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 */
                QueryTraceBlockRequest.prototype.proposer_address = $util.newBuffer([]);

                /**
                 * QueryTraceBlockRequest chain_id.
                 * @member {number} chain_id
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 */
                QueryTraceBlockRequest.prototype.chain_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Encodes the specified QueryTraceBlockRequest message. Does not implicitly {@link ethermint.evm.v1.QueryTraceBlockRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceBlockRequest} message QueryTraceBlockRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceBlockRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.txs != null && message.txs.length)
                        for (let i = 0; i < message.txs.length; ++i)
                            $root.ethermint.evm.v1.MsgEthereumTx.encode(message.txs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trace_config != null && Object.hasOwnProperty.call(message, "trace_config"))
                        $root.ethermint.evm.v1.TraceConfig.encode(message.trace_config, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.block_number != null && Object.hasOwnProperty.call(message, "block_number"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.block_number);
                    if (message.block_hash != null && Object.hasOwnProperty.call(message, "block_hash"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.block_hash);
                    if (message.block_time != null && Object.hasOwnProperty.call(message, "block_time"))
                        $root.google.protobuf.Timestamp.encode(message.block_time, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.proposer_address != null && Object.hasOwnProperty.call(message, "proposer_address"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.proposer_address);
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int64(message.chain_id);
                    return writer;
                };

                /**
                 * Encodes the specified QueryTraceBlockRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryTraceBlockRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceBlockRequest} message QueryTraceBlockRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceBlockRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryTraceBlockRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryTraceBlockRequest} QueryTraceBlockRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceBlockRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryTraceBlockRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.txs && message.txs.length))
                                message.txs = [];
                            message.txs.push($root.ethermint.evm.v1.MsgEthereumTx.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.trace_config = $root.ethermint.evm.v1.TraceConfig.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.block_number = reader.int64();
                            break;
                        case 6:
                            message.block_hash = reader.string();
                            break;
                        case 7:
                            message.block_time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.proposer_address = reader.bytes();
                            break;
                        case 9:
                            message.chain_id = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryTraceBlockRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryTraceBlockRequest} QueryTraceBlockRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceBlockRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryTraceBlockRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTraceBlockRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.txs != null && message.hasOwnProperty("txs")) {
                        if (!Array.isArray(message.txs))
                            return "txs: array expected";
                        for (let i = 0; i < message.txs.length; ++i) {
                            let error = $root.ethermint.evm.v1.MsgEthereumTx.verify(message.txs[i]);
                            if (error)
                                return "txs." + error;
                        }
                    }
                    if (message.trace_config != null && message.hasOwnProperty("trace_config")) {
                        let error = $root.ethermint.evm.v1.TraceConfig.verify(message.trace_config);
                        if (error)
                            return "trace_config." + error;
                    }
                    if (message.block_number != null && message.hasOwnProperty("block_number"))
                        if (!$util.isInteger(message.block_number) && !(message.block_number && $util.isInteger(message.block_number.low) && $util.isInteger(message.block_number.high)))
                            return "block_number: integer|Long expected";
                    if (message.block_hash != null && message.hasOwnProperty("block_hash"))
                        if (!$util.isString(message.block_hash))
                            return "block_hash: string expected";
                    if (message.block_time != null && message.hasOwnProperty("block_time")) {
                        let error = $root.google.protobuf.Timestamp.verify(message.block_time);
                        if (error)
                            return "block_time." + error;
                    }
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        if (!(message.proposer_address && typeof message.proposer_address.length === "number" || $util.isString(message.proposer_address)))
                            return "proposer_address: buffer expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isInteger(message.chain_id) && !(message.chain_id && $util.isInteger(message.chain_id.low) && $util.isInteger(message.chain_id.high)))
                            return "chain_id: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryTraceBlockRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryTraceBlockRequest} QueryTraceBlockRequest
                 */
                QueryTraceBlockRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryTraceBlockRequest)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryTraceBlockRequest();
                    if (object.txs) {
                        if (!Array.isArray(object.txs))
                            throw TypeError(".ethermint.evm.v1.QueryTraceBlockRequest.txs: array expected");
                        message.txs = [];
                        for (let i = 0; i < object.txs.length; ++i) {
                            if (typeof object.txs[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.QueryTraceBlockRequest.txs: object expected");
                            message.txs[i] = $root.ethermint.evm.v1.MsgEthereumTx.fromObject(object.txs[i]);
                        }
                    }
                    if (object.trace_config != null) {
                        if (typeof object.trace_config !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryTraceBlockRequest.trace_config: object expected");
                        message.trace_config = $root.ethermint.evm.v1.TraceConfig.fromObject(object.trace_config);
                    }
                    if (object.block_number != null)
                        if ($util.Long)
                            (message.block_number = $util.Long.fromValue(object.block_number)).unsigned = false;
                        else if (typeof object.block_number === "string")
                            message.block_number = parseInt(object.block_number, 10);
                        else if (typeof object.block_number === "number")
                            message.block_number = object.block_number;
                        else if (typeof object.block_number === "object")
                            message.block_number = new $util.LongBits(object.block_number.low >>> 0, object.block_number.high >>> 0).toNumber();
                    if (object.block_hash != null)
                        message.block_hash = String(object.block_hash);
                    if (object.block_time != null) {
                        if (typeof object.block_time !== "object")
                            throw TypeError(".ethermint.evm.v1.QueryTraceBlockRequest.block_time: object expected");
                        message.block_time = $root.google.protobuf.Timestamp.fromObject(object.block_time);
                    }
                    if (object.proposer_address != null)
                        if (typeof object.proposer_address === "string")
                            $util.base64.decode(object.proposer_address, message.proposer_address = $util.newBuffer($util.base64.length(object.proposer_address)), 0);
                        else if (object.proposer_address.length)
                            message.proposer_address = object.proposer_address;
                    if (object.chain_id != null)
                        if ($util.Long)
                            (message.chain_id = $util.Long.fromValue(object.chain_id)).unsigned = false;
                        else if (typeof object.chain_id === "string")
                            message.chain_id = parseInt(object.chain_id, 10);
                        else if (typeof object.chain_id === "number")
                            message.chain_id = object.chain_id;
                        else if (typeof object.chain_id === "object")
                            message.chain_id = new $util.LongBits(object.chain_id.low >>> 0, object.chain_id.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a QueryTraceBlockRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryTraceBlockRequest} message QueryTraceBlockRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTraceBlockRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.txs = [];
                    if (options.defaults) {
                        object.trace_config = null;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.block_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_number = options.longs === String ? "0" : 0;
                        object.block_hash = "";
                        object.block_time = null;
                        if (options.bytes === String)
                            object.proposer_address = "";
                        else {
                            object.proposer_address = [];
                            if (options.bytes !== Array)
                                object.proposer_address = $util.newBuffer(object.proposer_address);
                        }
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.chain_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.chain_id = options.longs === String ? "0" : 0;
                    }
                    if (message.txs && message.txs.length) {
                        object.txs = [];
                        for (let j = 0; j < message.txs.length; ++j)
                            object.txs[j] = $root.ethermint.evm.v1.MsgEthereumTx.toObject(message.txs[j], options);
                    }
                    if (message.trace_config != null && message.hasOwnProperty("trace_config"))
                        object.trace_config = $root.ethermint.evm.v1.TraceConfig.toObject(message.trace_config, options);
                    if (message.block_number != null && message.hasOwnProperty("block_number"))
                        if (typeof message.block_number === "number")
                            object.block_number = options.longs === String ? String(message.block_number) : message.block_number;
                        else
                            object.block_number = options.longs === String ? $util.Long.prototype.toString.call(message.block_number) : options.longs === Number ? new $util.LongBits(message.block_number.low >>> 0, message.block_number.high >>> 0).toNumber() : message.block_number;
                    if (message.block_hash != null && message.hasOwnProperty("block_hash"))
                        object.block_hash = message.block_hash;
                    if (message.block_time != null && message.hasOwnProperty("block_time"))
                        object.block_time = $root.google.protobuf.Timestamp.toObject(message.block_time, options);
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        object.proposer_address = options.bytes === String ? $util.base64.encode(message.proposer_address, 0, message.proposer_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.proposer_address) : message.proposer_address;
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (typeof message.chain_id === "number")
                            object.chain_id = options.longs === String ? String(message.chain_id) : message.chain_id;
                        else
                            object.chain_id = options.longs === String ? $util.Long.prototype.toString.call(message.chain_id) : options.longs === Number ? new $util.LongBits(message.chain_id.low >>> 0, message.chain_id.high >>> 0).toNumber() : message.chain_id;
                    return object;
                };

                /**
                 * Converts this QueryTraceBlockRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryTraceBlockRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTraceBlockRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryTraceBlockRequest;
            })();

            v1.QueryTraceBlockResponse = (function() {

                /**
                 * Properties of a QueryTraceBlockResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryTraceBlockResponse
                 * @property {Uint8Array|null} [data] QueryTraceBlockResponse data
                 */

                /**
                 * Constructs a new QueryTraceBlockResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryTraceBlockResponse.
                 * @implements IQueryTraceBlockResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryTraceBlockResponse=} [properties] Properties to set
                 */
                function QueryTraceBlockResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryTraceBlockResponse data.
                 * @member {Uint8Array} data
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @instance
                 */
                QueryTraceBlockResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryTraceBlockResponse message. Does not implicitly {@link ethermint.evm.v1.QueryTraceBlockResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceBlockResponse} message QueryTraceBlockResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceBlockResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified QueryTraceBlockResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryTraceBlockResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryTraceBlockResponse} message QueryTraceBlockResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTraceBlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryTraceBlockResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryTraceBlockResponse} QueryTraceBlockResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceBlockResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryTraceBlockResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryTraceBlockResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryTraceBlockResponse} QueryTraceBlockResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTraceBlockResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryTraceBlockResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTraceBlockResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a QueryTraceBlockResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryTraceBlockResponse} QueryTraceBlockResponse
                 */
                QueryTraceBlockResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryTraceBlockResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryTraceBlockResponse();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a QueryTraceBlockResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryTraceBlockResponse} message QueryTraceBlockResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTraceBlockResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this QueryTraceBlockResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryTraceBlockResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTraceBlockResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryTraceBlockResponse;
            })();

            v1.QueryBaseFeeRequest = (function() {

                /**
                 * Properties of a QueryBaseFeeRequest.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryBaseFeeRequest
                 */

                /**
                 * Constructs a new QueryBaseFeeRequest.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryBaseFeeRequest.
                 * @implements IQueryBaseFeeRequest
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryBaseFeeRequest=} [properties] Properties to set
                 */
                function QueryBaseFeeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified QueryBaseFeeRequest message. Does not implicitly {@link ethermint.evm.v1.QueryBaseFeeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryBaseFeeRequest} message QueryBaseFeeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified QueryBaseFeeRequest message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryBaseFeeRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @static
                 * @param {ethermint.evm.v1.IQueryBaseFeeRequest} message QueryBaseFeeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBaseFeeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryBaseFeeRequest} QueryBaseFeeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryBaseFeeRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBaseFeeRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryBaseFeeRequest} QueryBaseFeeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBaseFeeRequest message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBaseFeeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a QueryBaseFeeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryBaseFeeRequest} QueryBaseFeeRequest
                 */
                QueryBaseFeeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryBaseFeeRequest)
                        return object;
                    return new $root.ethermint.evm.v1.QueryBaseFeeRequest();
                };

                /**
                 * Creates a plain object from a QueryBaseFeeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @static
                 * @param {ethermint.evm.v1.QueryBaseFeeRequest} message QueryBaseFeeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBaseFeeRequest.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this QueryBaseFeeRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryBaseFeeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBaseFeeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBaseFeeRequest;
            })();

            v1.QueryBaseFeeResponse = (function() {

                /**
                 * Properties of a QueryBaseFeeResponse.
                 * @memberof ethermint.evm.v1
                 * @interface IQueryBaseFeeResponse
                 * @property {string|null} [base_fee] QueryBaseFeeResponse base_fee
                 */

                /**
                 * Constructs a new QueryBaseFeeResponse.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a QueryBaseFeeResponse.
                 * @implements IQueryBaseFeeResponse
                 * @constructor
                 * @param {ethermint.evm.v1.IQueryBaseFeeResponse=} [properties] Properties to set
                 */
                function QueryBaseFeeResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryBaseFeeResponse base_fee.
                 * @member {string} base_fee
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @instance
                 */
                QueryBaseFeeResponse.prototype.base_fee = "";

                /**
                 * Encodes the specified QueryBaseFeeResponse message. Does not implicitly {@link ethermint.evm.v1.QueryBaseFeeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryBaseFeeResponse} message QueryBaseFeeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.base_fee != null && Object.hasOwnProperty.call(message, "base_fee"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.base_fee);
                    return writer;
                };

                /**
                 * Encodes the specified QueryBaseFeeResponse message, length delimited. Does not implicitly {@link ethermint.evm.v1.QueryBaseFeeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @static
                 * @param {ethermint.evm.v1.IQueryBaseFeeResponse} message QueryBaseFeeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBaseFeeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.QueryBaseFeeResponse} QueryBaseFeeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.QueryBaseFeeResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.base_fee = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBaseFeeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.QueryBaseFeeResponse} QueryBaseFeeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBaseFeeResponse message.
                 * @function verify
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBaseFeeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        if (!$util.isString(message.base_fee))
                            return "base_fee: string expected";
                    return null;
                };

                /**
                 * Creates a QueryBaseFeeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.QueryBaseFeeResponse} QueryBaseFeeResponse
                 */
                QueryBaseFeeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.QueryBaseFeeResponse)
                        return object;
                    let message = new $root.ethermint.evm.v1.QueryBaseFeeResponse();
                    if (object.base_fee != null)
                        message.base_fee = String(object.base_fee);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryBaseFeeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @static
                 * @param {ethermint.evm.v1.QueryBaseFeeResponse} message QueryBaseFeeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBaseFeeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.base_fee = "";
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        object.base_fee = message.base_fee;
                    return object;
                };

                /**
                 * Converts this QueryBaseFeeResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.QueryBaseFeeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBaseFeeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBaseFeeResponse;
            })();

            v1.GenesisState = (function() {

                /**
                 * Properties of a GenesisState.
                 * @memberof ethermint.evm.v1
                 * @interface IGenesisState
                 * @property {Array.<ethermint.evm.v1.IGenesisAccount>|null} [accounts] GenesisState accounts
                 * @property {ethermint.evm.v1.IParams|null} [params] GenesisState params
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {ethermint.evm.v1.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.accounts = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GenesisState accounts.
                 * @member {Array.<ethermint.evm.v1.IGenesisAccount>} accounts
                 * @memberof ethermint.evm.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.accounts = $util.emptyArray;

                /**
                 * GenesisState params.
                 * @member {ethermint.evm.v1.IParams|null|undefined} params
                 * @memberof ethermint.evm.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link ethermint.evm.v1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.GenesisState
                 * @static
                 * @param {ethermint.evm.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.accounts != null && message.accounts.length)
                        for (let i = 0; i < message.accounts.length; ++i)
                            $root.ethermint.evm.v1.GenesisAccount.encode(message.accounts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.ethermint.evm.v1.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ethermint.evm.v1.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.GenesisState
                 * @static
                 * @param {ethermint.evm.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.GenesisState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.accounts && message.accounts.length))
                                message.accounts = [];
                            message.accounts.push($root.ethermint.evm.v1.GenesisAccount.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.params = $root.ethermint.evm.v1.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof ethermint.evm.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.accounts != null && message.hasOwnProperty("accounts")) {
                        if (!Array.isArray(message.accounts))
                            return "accounts: array expected";
                        for (let i = 0; i < message.accounts.length; ++i) {
                            let error = $root.ethermint.evm.v1.GenesisAccount.verify(message.accounts[i]);
                            if (error)
                                return "accounts." + error;
                        }
                    }
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.ethermint.evm.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };

                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.GenesisState)
                        return object;
                    let message = new $root.ethermint.evm.v1.GenesisState();
                    if (object.accounts) {
                        if (!Array.isArray(object.accounts))
                            throw TypeError(".ethermint.evm.v1.GenesisState.accounts: array expected");
                        message.accounts = [];
                        for (let i = 0; i < object.accounts.length; ++i) {
                            if (typeof object.accounts[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.GenesisState.accounts: object expected");
                            message.accounts[i] = $root.ethermint.evm.v1.GenesisAccount.fromObject(object.accounts[i]);
                        }
                    }
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".ethermint.evm.v1.GenesisState.params: object expected");
                        message.params = $root.ethermint.evm.v1.Params.fromObject(object.params);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.GenesisState
                 * @static
                 * @param {ethermint.evm.v1.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.accounts = [];
                    if (options.defaults)
                        object.params = null;
                    if (message.accounts && message.accounts.length) {
                        object.accounts = [];
                        for (let j = 0; j < message.accounts.length; ++j)
                            object.accounts[j] = $root.ethermint.evm.v1.GenesisAccount.toObject(message.accounts[j], options);
                    }
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.ethermint.evm.v1.Params.toObject(message.params, options);
                    return object;
                };

                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GenesisState;
            })();

            v1.GenesisAccount = (function() {

                /**
                 * Properties of a GenesisAccount.
                 * @memberof ethermint.evm.v1
                 * @interface IGenesisAccount
                 * @property {string|null} [address] GenesisAccount address
                 * @property {string|null} [code] GenesisAccount code
                 * @property {Array.<ethermint.evm.v1.IState>|null} [storage] GenesisAccount storage
                 */

                /**
                 * Constructs a new GenesisAccount.
                 * @memberof ethermint.evm.v1
                 * @classdesc Represents a GenesisAccount.
                 * @implements IGenesisAccount
                 * @constructor
                 * @param {ethermint.evm.v1.IGenesisAccount=} [properties] Properties to set
                 */
                function GenesisAccount(properties) {
                    this.storage = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GenesisAccount address.
                 * @member {string} address
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @instance
                 */
                GenesisAccount.prototype.address = "";

                /**
                 * GenesisAccount code.
                 * @member {string} code
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @instance
                 */
                GenesisAccount.prototype.code = "";

                /**
                 * GenesisAccount storage.
                 * @member {Array.<ethermint.evm.v1.IState>} storage
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @instance
                 */
                GenesisAccount.prototype.storage = $util.emptyArray;

                /**
                 * Encodes the specified GenesisAccount message. Does not implicitly {@link ethermint.evm.v1.GenesisAccount.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @static
                 * @param {ethermint.evm.v1.IGenesisAccount} message GenesisAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisAccount.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
                    if (message.storage != null && message.storage.length)
                        for (let i = 0; i < message.storage.length; ++i)
                            $root.ethermint.evm.v1.State.encode(message.storage[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GenesisAccount message, length delimited. Does not implicitly {@link ethermint.evm.v1.GenesisAccount.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @static
                 * @param {ethermint.evm.v1.IGenesisAccount} message GenesisAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisAccount.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GenesisAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.evm.v1.GenesisAccount} GenesisAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisAccount.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.evm.v1.GenesisAccount();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.code = reader.string();
                            break;
                        case 3:
                            if (!(message.storage && message.storage.length))
                                message.storage = [];
                            message.storage.push($root.ethermint.evm.v1.State.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GenesisAccount message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.evm.v1.GenesisAccount} GenesisAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisAccount.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GenesisAccount message.
                 * @function verify
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisAccount.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isString(message.code))
                            return "code: string expected";
                    if (message.storage != null && message.hasOwnProperty("storage")) {
                        if (!Array.isArray(message.storage))
                            return "storage: array expected";
                        for (let i = 0; i < message.storage.length; ++i) {
                            let error = $root.ethermint.evm.v1.State.verify(message.storage[i]);
                            if (error)
                                return "storage." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a GenesisAccount message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.evm.v1.GenesisAccount} GenesisAccount
                 */
                GenesisAccount.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.evm.v1.GenesisAccount)
                        return object;
                    let message = new $root.ethermint.evm.v1.GenesisAccount();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.code != null)
                        message.code = String(object.code);
                    if (object.storage) {
                        if (!Array.isArray(object.storage))
                            throw TypeError(".ethermint.evm.v1.GenesisAccount.storage: array expected");
                        message.storage = [];
                        for (let i = 0; i < object.storage.length; ++i) {
                            if (typeof object.storage[i] !== "object")
                                throw TypeError(".ethermint.evm.v1.GenesisAccount.storage: object expected");
                            message.storage[i] = $root.ethermint.evm.v1.State.fromObject(object.storage[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GenesisAccount message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @static
                 * @param {ethermint.evm.v1.GenesisAccount} message GenesisAccount
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisAccount.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.storage = [];
                    if (options.defaults) {
                        object.address = "";
                        object.code = "";
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.storage && message.storage.length) {
                        object.storage = [];
                        for (let j = 0; j < message.storage.length; ++j)
                            object.storage[j] = $root.ethermint.evm.v1.State.toObject(message.storage[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this GenesisAccount to JSON.
                 * @function toJSON
                 * @memberof ethermint.evm.v1.GenesisAccount
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisAccount.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GenesisAccount;
            })();

            return v1;
        })();

        return evm;
    })();

    ethermint.feemarket = (function() {

        /**
         * Namespace feemarket.
         * @memberof ethermint
         * @namespace
         */
        const feemarket = {};

        feemarket.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof ethermint.feemarket
             * @namespace
             */
            const v1 = {};

            v1.Msg = (function() {

                /**
                 * Constructs a new Msg service.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                /**
                 * Callback as used by {@link ethermint.feemarket.v1.Msg#updateParams}.
                 * @memberof ethermint.feemarket.v1.Msg
                 * @typedef UpdateParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.feemarket.v1.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                 */

                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof ethermint.feemarket.v1.Msg
                 * @instance
                 * @param {ethermint.feemarket.v1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @param {ethermint.feemarket.v1.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                    return this.rpcCall(updateParams, $root.ethermint.feemarket.v1.MsgUpdateParams, $root.ethermint.feemarket.v1.MsgUpdateParamsResponse, request, callback);
                }, "name", { value: "UpdateParams" });

                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof ethermint.feemarket.v1.Msg
                 * @instance
                 * @param {ethermint.feemarket.v1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @returns {Promise<ethermint.feemarket.v1.MsgUpdateParamsResponse>} Promise
                 * @variation 2
                 */

                return Msg;
            })();

            v1.MsgUpdateParams = (function() {

                /**
                 * Properties of a MsgUpdateParams.
                 * @memberof ethermint.feemarket.v1
                 * @interface IMsgUpdateParams
                 * @property {string|null} [authority] MsgUpdateParams authority
                 * @property {ethermint.feemarket.v1.IParams|null} [params] MsgUpdateParams params
                 */

                /**
                 * Constructs a new MsgUpdateParams.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a MsgUpdateParams.
                 * @implements IMsgUpdateParams
                 * @constructor
                 * @param {ethermint.feemarket.v1.IMsgUpdateParams=} [properties] Properties to set
                 */
                function MsgUpdateParams(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgUpdateParams authority.
                 * @member {string} authority
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.authority = "";

                /**
                 * MsgUpdateParams params.
                 * @member {ethermint.feemarket.v1.IParams|null|undefined} params
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.params = null;

                /**
                 * Encodes the specified MsgUpdateParams message. Does not implicitly {@link ethermint.feemarket.v1.MsgUpdateParams.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @static
                 * @param {ethermint.feemarket.v1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.ethermint.feemarket.v1.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.MsgUpdateParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @static
                 * @param {ethermint.feemarket.v1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.MsgUpdateParams();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.authority = reader.string();
                            break;
                        case 2:
                            message.params = $root.ethermint.feemarket.v1.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgUpdateParams message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        if (!$util.isString(message.authority))
                            return "authority: string expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.ethermint.feemarket.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };

                /**
                 * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.MsgUpdateParams} MsgUpdateParams
                 */
                MsgUpdateParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.MsgUpdateParams)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.MsgUpdateParams();
                    if (object.authority != null)
                        message.authority = String(object.authority);
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".ethermint.feemarket.v1.MsgUpdateParams.params: object expected");
                        message.params = $root.ethermint.feemarket.v1.Params.fromObject(object.params);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @static
                 * @param {ethermint.feemarket.v1.MsgUpdateParams} message MsgUpdateParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.authority = "";
                        object.params = null;
                    }
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        object.authority = message.authority;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.ethermint.feemarket.v1.Params.toObject(message.params, options);
                    return object;
                };

                /**
                 * Converts this MsgUpdateParams to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.MsgUpdateParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgUpdateParams;
            })();

            v1.MsgUpdateParamsResponse = (function() {

                /**
                 * Properties of a MsgUpdateParamsResponse.
                 * @memberof ethermint.feemarket.v1
                 * @interface IMsgUpdateParamsResponse
                 */

                /**
                 * Constructs a new MsgUpdateParamsResponse.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a MsgUpdateParamsResponse.
                 * @implements IMsgUpdateParamsResponse
                 * @constructor
                 * @param {ethermint.feemarket.v1.IMsgUpdateParamsResponse=} [properties] Properties to set
                 */
                function MsgUpdateParamsResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link ethermint.feemarket.v1.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.MsgUpdateParamsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgUpdateParamsResponse message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 */
                MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.MsgUpdateParamsResponse)
                        return object;
                    return new $root.ethermint.feemarket.v1.MsgUpdateParamsResponse();
                };

                /**
                 * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @static
                 * @param {ethermint.feemarket.v1.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParamsResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgUpdateParamsResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.MsgUpdateParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgUpdateParamsResponse;
            })();

            v1.Params = (function() {

                /**
                 * Properties of a Params.
                 * @memberof ethermint.feemarket.v1
                 * @interface IParams
                 * @property {boolean|null} [no_base_fee] Params no_base_fee
                 * @property {number|null} [base_fee_change_denominator] Params base_fee_change_denominator
                 * @property {number|null} [elasticity_multiplier] Params elasticity_multiplier
                 * @property {number|null} [enable_height] Params enable_height
                 * @property {string|null} [base_fee] Params base_fee
                 * @property {string|null} [min_gas_price] Params min_gas_price
                 * @property {string|null} [min_gas_multiplier] Params min_gas_multiplier
                 */

                /**
                 * Constructs a new Params.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {ethermint.feemarket.v1.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Params no_base_fee.
                 * @member {boolean} no_base_fee
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 */
                Params.prototype.no_base_fee = false;

                /**
                 * Params base_fee_change_denominator.
                 * @member {number} base_fee_change_denominator
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 */
                Params.prototype.base_fee_change_denominator = 0;

                /**
                 * Params elasticity_multiplier.
                 * @member {number} elasticity_multiplier
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 */
                Params.prototype.elasticity_multiplier = 0;

                /**
                 * Params enable_height.
                 * @member {number} enable_height
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 */
                Params.prototype.enable_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Params base_fee.
                 * @member {string} base_fee
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 */
                Params.prototype.base_fee = "";

                /**
                 * Params min_gas_price.
                 * @member {string} min_gas_price
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 */
                Params.prototype.min_gas_price = "";

                /**
                 * Params min_gas_multiplier.
                 * @member {string} min_gas_multiplier
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 */
                Params.prototype.min_gas_multiplier = "";

                /**
                 * Encodes the specified Params message. Does not implicitly {@link ethermint.feemarket.v1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.Params
                 * @static
                 * @param {ethermint.feemarket.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.no_base_fee != null && Object.hasOwnProperty.call(message, "no_base_fee"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.no_base_fee);
                    if (message.base_fee_change_denominator != null && Object.hasOwnProperty.call(message, "base_fee_change_denominator"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.base_fee_change_denominator);
                    if (message.elasticity_multiplier != null && Object.hasOwnProperty.call(message, "elasticity_multiplier"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.elasticity_multiplier);
                    if (message.enable_height != null && Object.hasOwnProperty.call(message, "enable_height"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.enable_height);
                    if (message.base_fee != null && Object.hasOwnProperty.call(message, "base_fee"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.base_fee);
                    if (message.min_gas_price != null && Object.hasOwnProperty.call(message, "min_gas_price"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.min_gas_price);
                    if (message.min_gas_multiplier != null && Object.hasOwnProperty.call(message, "min_gas_multiplier"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.min_gas_multiplier);
                    return writer;
                };

                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.Params
                 * @static
                 * @param {ethermint.feemarket.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.Params();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.no_base_fee = reader.bool();
                            break;
                        case 2:
                            message.base_fee_change_denominator = reader.uint32();
                            break;
                        case 3:
                            message.elasticity_multiplier = reader.uint32();
                            break;
                        case 5:
                            message.enable_height = reader.int64();
                            break;
                        case 6:
                            message.base_fee = reader.string();
                            break;
                        case 7:
                            message.min_gas_price = reader.string();
                            break;
                        case 8:
                            message.min_gas_multiplier = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.no_base_fee != null && message.hasOwnProperty("no_base_fee"))
                        if (typeof message.no_base_fee !== "boolean")
                            return "no_base_fee: boolean expected";
                    if (message.base_fee_change_denominator != null && message.hasOwnProperty("base_fee_change_denominator"))
                        if (!$util.isInteger(message.base_fee_change_denominator))
                            return "base_fee_change_denominator: integer expected";
                    if (message.elasticity_multiplier != null && message.hasOwnProperty("elasticity_multiplier"))
                        if (!$util.isInteger(message.elasticity_multiplier))
                            return "elasticity_multiplier: integer expected";
                    if (message.enable_height != null && message.hasOwnProperty("enable_height"))
                        if (!$util.isInteger(message.enable_height) && !(message.enable_height && $util.isInteger(message.enable_height.low) && $util.isInteger(message.enable_height.high)))
                            return "enable_height: integer|Long expected";
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        if (!$util.isString(message.base_fee))
                            return "base_fee: string expected";
                    if (message.min_gas_price != null && message.hasOwnProperty("min_gas_price"))
                        if (!$util.isString(message.min_gas_price))
                            return "min_gas_price: string expected";
                    if (message.min_gas_multiplier != null && message.hasOwnProperty("min_gas_multiplier"))
                        if (!$util.isString(message.min_gas_multiplier))
                            return "min_gas_multiplier: string expected";
                    return null;
                };

                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.Params)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.Params();
                    if (object.no_base_fee != null)
                        message.no_base_fee = Boolean(object.no_base_fee);
                    if (object.base_fee_change_denominator != null)
                        message.base_fee_change_denominator = object.base_fee_change_denominator >>> 0;
                    if (object.elasticity_multiplier != null)
                        message.elasticity_multiplier = object.elasticity_multiplier >>> 0;
                    if (object.enable_height != null)
                        if ($util.Long)
                            (message.enable_height = $util.Long.fromValue(object.enable_height)).unsigned = false;
                        else if (typeof object.enable_height === "string")
                            message.enable_height = parseInt(object.enable_height, 10);
                        else if (typeof object.enable_height === "number")
                            message.enable_height = object.enable_height;
                        else if (typeof object.enable_height === "object")
                            message.enable_height = new $util.LongBits(object.enable_height.low >>> 0, object.enable_height.high >>> 0).toNumber();
                    if (object.base_fee != null)
                        message.base_fee = String(object.base_fee);
                    if (object.min_gas_price != null)
                        message.min_gas_price = String(object.min_gas_price);
                    if (object.min_gas_multiplier != null)
                        message.min_gas_multiplier = String(object.min_gas_multiplier);
                    return message;
                };

                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.Params
                 * @static
                 * @param {ethermint.feemarket.v1.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.no_base_fee = false;
                        object.base_fee_change_denominator = 0;
                        object.elasticity_multiplier = 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.enable_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.enable_height = options.longs === String ? "0" : 0;
                        object.base_fee = "";
                        object.min_gas_price = "";
                        object.min_gas_multiplier = "";
                    }
                    if (message.no_base_fee != null && message.hasOwnProperty("no_base_fee"))
                        object.no_base_fee = message.no_base_fee;
                    if (message.base_fee_change_denominator != null && message.hasOwnProperty("base_fee_change_denominator"))
                        object.base_fee_change_denominator = message.base_fee_change_denominator;
                    if (message.elasticity_multiplier != null && message.hasOwnProperty("elasticity_multiplier"))
                        object.elasticity_multiplier = message.elasticity_multiplier;
                    if (message.enable_height != null && message.hasOwnProperty("enable_height"))
                        if (typeof message.enable_height === "number")
                            object.enable_height = options.longs === String ? String(message.enable_height) : message.enable_height;
                        else
                            object.enable_height = options.longs === String ? $util.Long.prototype.toString.call(message.enable_height) : options.longs === Number ? new $util.LongBits(message.enable_height.low >>> 0, message.enable_height.high >>> 0).toNumber() : message.enable_height;
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        object.base_fee = message.base_fee;
                    if (message.min_gas_price != null && message.hasOwnProperty("min_gas_price"))
                        object.min_gas_price = message.min_gas_price;
                    if (message.min_gas_multiplier != null && message.hasOwnProperty("min_gas_multiplier"))
                        object.min_gas_multiplier = message.min_gas_multiplier;
                    return object;
                };

                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Params;
            })();

            v1.EventFeeMarket = (function() {

                /**
                 * Properties of an EventFeeMarket.
                 * @memberof ethermint.feemarket.v1
                 * @interface IEventFeeMarket
                 * @property {string|null} [base_fee] EventFeeMarket base_fee
                 */

                /**
                 * Constructs a new EventFeeMarket.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents an EventFeeMarket.
                 * @implements IEventFeeMarket
                 * @constructor
                 * @param {ethermint.feemarket.v1.IEventFeeMarket=} [properties] Properties to set
                 */
                function EventFeeMarket(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventFeeMarket base_fee.
                 * @member {string} base_fee
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @instance
                 */
                EventFeeMarket.prototype.base_fee = "";

                /**
                 * Encodes the specified EventFeeMarket message. Does not implicitly {@link ethermint.feemarket.v1.EventFeeMarket.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @static
                 * @param {ethermint.feemarket.v1.IEventFeeMarket} message EventFeeMarket message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventFeeMarket.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.base_fee != null && Object.hasOwnProperty.call(message, "base_fee"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.base_fee);
                    return writer;
                };

                /**
                 * Encodes the specified EventFeeMarket message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.EventFeeMarket.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @static
                 * @param {ethermint.feemarket.v1.IEventFeeMarket} message EventFeeMarket message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventFeeMarket.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventFeeMarket message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.EventFeeMarket} EventFeeMarket
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventFeeMarket.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.EventFeeMarket();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.base_fee = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventFeeMarket message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.EventFeeMarket} EventFeeMarket
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventFeeMarket.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventFeeMarket message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventFeeMarket.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        if (!$util.isString(message.base_fee))
                            return "base_fee: string expected";
                    return null;
                };

                /**
                 * Creates an EventFeeMarket message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.EventFeeMarket} EventFeeMarket
                 */
                EventFeeMarket.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.EventFeeMarket)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.EventFeeMarket();
                    if (object.base_fee != null)
                        message.base_fee = String(object.base_fee);
                    return message;
                };

                /**
                 * Creates a plain object from an EventFeeMarket message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @static
                 * @param {ethermint.feemarket.v1.EventFeeMarket} message EventFeeMarket
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventFeeMarket.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.base_fee = "";
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        object.base_fee = message.base_fee;
                    return object;
                };

                /**
                 * Converts this EventFeeMarket to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.EventFeeMarket
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventFeeMarket.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventFeeMarket;
            })();

            v1.EventBlockGas = (function() {

                /**
                 * Properties of an EventBlockGas.
                 * @memberof ethermint.feemarket.v1
                 * @interface IEventBlockGas
                 * @property {string|null} [height] EventBlockGas height
                 * @property {string|null} [amount] EventBlockGas amount
                 */

                /**
                 * Constructs a new EventBlockGas.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents an EventBlockGas.
                 * @implements IEventBlockGas
                 * @constructor
                 * @param {ethermint.feemarket.v1.IEventBlockGas=} [properties] Properties to set
                 */
                function EventBlockGas(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventBlockGas height.
                 * @member {string} height
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @instance
                 */
                EventBlockGas.prototype.height = "";

                /**
                 * EventBlockGas amount.
                 * @member {string} amount
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @instance
                 */
                EventBlockGas.prototype.amount = "";

                /**
                 * Encodes the specified EventBlockGas message. Does not implicitly {@link ethermint.feemarket.v1.EventBlockGas.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @static
                 * @param {ethermint.feemarket.v1.IEventBlockGas} message EventBlockGas message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventBlockGas.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.height);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified EventBlockGas message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.EventBlockGas.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @static
                 * @param {ethermint.feemarket.v1.IEventBlockGas} message EventBlockGas message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventBlockGas.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventBlockGas message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.EventBlockGas} EventBlockGas
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventBlockGas.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.EventBlockGas();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventBlockGas message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.EventBlockGas} EventBlockGas
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventBlockGas.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventBlockGas message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventBlockGas.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isString(message.height))
                            return "height: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates an EventBlockGas message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.EventBlockGas} EventBlockGas
                 */
                EventBlockGas.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.EventBlockGas)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.EventBlockGas();
                    if (object.height != null)
                        message.height = String(object.height);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from an EventBlockGas message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @static
                 * @param {ethermint.feemarket.v1.EventBlockGas} message EventBlockGas
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventBlockGas.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.height = "";
                        object.amount = "";
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        object.height = message.height;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this EventBlockGas to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.EventBlockGas
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventBlockGas.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventBlockGas;
            })();

            v1.Query = (function() {

                /**
                 * Constructs a new Query service.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                /**
                 * Callback as used by {@link ethermint.feemarket.v1.Query#params}.
                 * @memberof ethermint.feemarket.v1.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.feemarket.v1.QueryParamsResponse} [response] QueryParamsResponse
                 */

                /**
                 * Calls Params.
                 * @function params
                 * @memberof ethermint.feemarket.v1.Query
                 * @instance
                 * @param {ethermint.feemarket.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {ethermint.feemarket.v1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.ethermint.feemarket.v1.QueryParamsRequest, $root.ethermint.feemarket.v1.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });

                /**
                 * Calls Params.
                 * @function params
                 * @memberof ethermint.feemarket.v1.Query
                 * @instance
                 * @param {ethermint.feemarket.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<ethermint.feemarket.v1.QueryParamsResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.feemarket.v1.Query#baseFee}.
                 * @memberof ethermint.feemarket.v1.Query
                 * @typedef BaseFeeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.feemarket.v1.QueryBaseFeeResponse} [response] QueryBaseFeeResponse
                 */

                /**
                 * Calls BaseFee.
                 * @function baseFee
                 * @memberof ethermint.feemarket.v1.Query
                 * @instance
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeRequest} request QueryBaseFeeRequest message or plain object
                 * @param {ethermint.feemarket.v1.Query.BaseFeeCallback} callback Node-style callback called with the error, if any, and QueryBaseFeeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.baseFee = function baseFee(request, callback) {
                    return this.rpcCall(baseFee, $root.ethermint.feemarket.v1.QueryBaseFeeRequest, $root.ethermint.feemarket.v1.QueryBaseFeeResponse, request, callback);
                }, "name", { value: "BaseFee" });

                /**
                 * Calls BaseFee.
                 * @function baseFee
                 * @memberof ethermint.feemarket.v1.Query
                 * @instance
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeRequest} request QueryBaseFeeRequest message or plain object
                 * @returns {Promise<ethermint.feemarket.v1.QueryBaseFeeResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link ethermint.feemarket.v1.Query#blockGas}.
                 * @memberof ethermint.feemarket.v1.Query
                 * @typedef BlockGasCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ethermint.feemarket.v1.QueryBlockGasResponse} [response] QueryBlockGasResponse
                 */

                /**
                 * Calls BlockGas.
                 * @function blockGas
                 * @memberof ethermint.feemarket.v1.Query
                 * @instance
                 * @param {ethermint.feemarket.v1.IQueryBlockGasRequest} request QueryBlockGasRequest message or plain object
                 * @param {ethermint.feemarket.v1.Query.BlockGasCallback} callback Node-style callback called with the error, if any, and QueryBlockGasResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.blockGas = function blockGas(request, callback) {
                    return this.rpcCall(blockGas, $root.ethermint.feemarket.v1.QueryBlockGasRequest, $root.ethermint.feemarket.v1.QueryBlockGasResponse, request, callback);
                }, "name", { value: "BlockGas" });

                /**
                 * Calls BlockGas.
                 * @function blockGas
                 * @memberof ethermint.feemarket.v1.Query
                 * @instance
                 * @param {ethermint.feemarket.v1.IQueryBlockGasRequest} request QueryBlockGasRequest message or plain object
                 * @returns {Promise<ethermint.feemarket.v1.QueryBlockGasResponse>} Promise
                 * @variation 2
                 */

                return Query;
            })();

            v1.QueryParamsRequest = (function() {

                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof ethermint.feemarket.v1
                 * @interface IQueryParamsRequest
                 */

                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {ethermint.feemarket.v1.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link ethermint.feemarket.v1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.QueryParamsRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.QueryParamsRequest)
                        return object;
                    return new $root.ethermint.feemarket.v1.QueryParamsRequest();
                };

                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @static
                 * @param {ethermint.feemarket.v1.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryParamsRequest;
            })();

            v1.QueryParamsResponse = (function() {

                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof ethermint.feemarket.v1
                 * @interface IQueryParamsResponse
                 * @property {ethermint.feemarket.v1.IParams|null} [params] QueryParamsResponse params
                 */

                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {ethermint.feemarket.v1.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryParamsResponse params.
                 * @member {ethermint.feemarket.v1.IParams|null|undefined} params
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;

                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link ethermint.feemarket.v1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.ethermint.feemarket.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.QueryParamsResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.ethermint.feemarket.v1.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.ethermint.feemarket.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.QueryParamsResponse)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".ethermint.feemarket.v1.QueryParamsResponse.params: object expected");
                        message.params = $root.ethermint.feemarket.v1.Params.fromObject(object.params);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @static
                 * @param {ethermint.feemarket.v1.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.ethermint.feemarket.v1.Params.toObject(message.params, options);
                    return object;
                };

                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryParamsResponse;
            })();

            v1.QueryBaseFeeRequest = (function() {

                /**
                 * Properties of a QueryBaseFeeRequest.
                 * @memberof ethermint.feemarket.v1
                 * @interface IQueryBaseFeeRequest
                 */

                /**
                 * Constructs a new QueryBaseFeeRequest.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a QueryBaseFeeRequest.
                 * @implements IQueryBaseFeeRequest
                 * @constructor
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeRequest=} [properties] Properties to set
                 */
                function QueryBaseFeeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified QueryBaseFeeRequest message. Does not implicitly {@link ethermint.feemarket.v1.QueryBaseFeeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeRequest} message QueryBaseFeeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified QueryBaseFeeRequest message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.QueryBaseFeeRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeRequest} message QueryBaseFeeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBaseFeeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.QueryBaseFeeRequest} QueryBaseFeeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.QueryBaseFeeRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBaseFeeRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.QueryBaseFeeRequest} QueryBaseFeeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBaseFeeRequest message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBaseFeeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a QueryBaseFeeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.QueryBaseFeeRequest} QueryBaseFeeRequest
                 */
                QueryBaseFeeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.QueryBaseFeeRequest)
                        return object;
                    return new $root.ethermint.feemarket.v1.QueryBaseFeeRequest();
                };

                /**
                 * Creates a plain object from a QueryBaseFeeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @static
                 * @param {ethermint.feemarket.v1.QueryBaseFeeRequest} message QueryBaseFeeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBaseFeeRequest.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this QueryBaseFeeRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBaseFeeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBaseFeeRequest;
            })();

            v1.QueryBaseFeeResponse = (function() {

                /**
                 * Properties of a QueryBaseFeeResponse.
                 * @memberof ethermint.feemarket.v1
                 * @interface IQueryBaseFeeResponse
                 * @property {string|null} [base_fee] QueryBaseFeeResponse base_fee
                 */

                /**
                 * Constructs a new QueryBaseFeeResponse.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a QueryBaseFeeResponse.
                 * @implements IQueryBaseFeeResponse
                 * @constructor
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeResponse=} [properties] Properties to set
                 */
                function QueryBaseFeeResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryBaseFeeResponse base_fee.
                 * @member {string} base_fee
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @instance
                 */
                QueryBaseFeeResponse.prototype.base_fee = "";

                /**
                 * Encodes the specified QueryBaseFeeResponse message. Does not implicitly {@link ethermint.feemarket.v1.QueryBaseFeeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeResponse} message QueryBaseFeeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.base_fee != null && Object.hasOwnProperty.call(message, "base_fee"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.base_fee);
                    return writer;
                };

                /**
                 * Encodes the specified QueryBaseFeeResponse message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.QueryBaseFeeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBaseFeeResponse} message QueryBaseFeeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBaseFeeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBaseFeeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.QueryBaseFeeResponse} QueryBaseFeeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.QueryBaseFeeResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.base_fee = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBaseFeeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.QueryBaseFeeResponse} QueryBaseFeeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBaseFeeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBaseFeeResponse message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBaseFeeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        if (!$util.isString(message.base_fee))
                            return "base_fee: string expected";
                    return null;
                };

                /**
                 * Creates a QueryBaseFeeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.QueryBaseFeeResponse} QueryBaseFeeResponse
                 */
                QueryBaseFeeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.QueryBaseFeeResponse)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.QueryBaseFeeResponse();
                    if (object.base_fee != null)
                        message.base_fee = String(object.base_fee);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryBaseFeeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @static
                 * @param {ethermint.feemarket.v1.QueryBaseFeeResponse} message QueryBaseFeeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBaseFeeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.base_fee = "";
                    if (message.base_fee != null && message.hasOwnProperty("base_fee"))
                        object.base_fee = message.base_fee;
                    return object;
                };

                /**
                 * Converts this QueryBaseFeeResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.QueryBaseFeeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBaseFeeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBaseFeeResponse;
            })();

            v1.QueryBlockGasRequest = (function() {

                /**
                 * Properties of a QueryBlockGasRequest.
                 * @memberof ethermint.feemarket.v1
                 * @interface IQueryBlockGasRequest
                 */

                /**
                 * Constructs a new QueryBlockGasRequest.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a QueryBlockGasRequest.
                 * @implements IQueryBlockGasRequest
                 * @constructor
                 * @param {ethermint.feemarket.v1.IQueryBlockGasRequest=} [properties] Properties to set
                 */
                function QueryBlockGasRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified QueryBlockGasRequest message. Does not implicitly {@link ethermint.feemarket.v1.QueryBlockGasRequest.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBlockGasRequest} message QueryBlockGasRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBlockGasRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified QueryBlockGasRequest message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.QueryBlockGasRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBlockGasRequest} message QueryBlockGasRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBlockGasRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBlockGasRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.QueryBlockGasRequest} QueryBlockGasRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBlockGasRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.QueryBlockGasRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBlockGasRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.QueryBlockGasRequest} QueryBlockGasRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBlockGasRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBlockGasRequest message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBlockGasRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a QueryBlockGasRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.QueryBlockGasRequest} QueryBlockGasRequest
                 */
                QueryBlockGasRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.QueryBlockGasRequest)
                        return object;
                    return new $root.ethermint.feemarket.v1.QueryBlockGasRequest();
                };

                /**
                 * Creates a plain object from a QueryBlockGasRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @static
                 * @param {ethermint.feemarket.v1.QueryBlockGasRequest} message QueryBlockGasRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBlockGasRequest.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this QueryBlockGasRequest to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.QueryBlockGasRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBlockGasRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBlockGasRequest;
            })();

            v1.QueryBlockGasResponse = (function() {

                /**
                 * Properties of a QueryBlockGasResponse.
                 * @memberof ethermint.feemarket.v1
                 * @interface IQueryBlockGasResponse
                 * @property {number|null} [gas] QueryBlockGasResponse gas
                 */

                /**
                 * Constructs a new QueryBlockGasResponse.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a QueryBlockGasResponse.
                 * @implements IQueryBlockGasResponse
                 * @constructor
                 * @param {ethermint.feemarket.v1.IQueryBlockGasResponse=} [properties] Properties to set
                 */
                function QueryBlockGasResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryBlockGasResponse gas.
                 * @member {number} gas
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @instance
                 */
                QueryBlockGasResponse.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Encodes the specified QueryBlockGasResponse message. Does not implicitly {@link ethermint.feemarket.v1.QueryBlockGasResponse.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBlockGasResponse} message QueryBlockGasResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBlockGasResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.gas != null && Object.hasOwnProperty.call(message, "gas"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gas);
                    return writer;
                };

                /**
                 * Encodes the specified QueryBlockGasResponse message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.QueryBlockGasResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @static
                 * @param {ethermint.feemarket.v1.IQueryBlockGasResponse} message QueryBlockGasResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryBlockGasResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryBlockGasResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.QueryBlockGasResponse} QueryBlockGasResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBlockGasResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.QueryBlockGasResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.gas = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryBlockGasResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.QueryBlockGasResponse} QueryBlockGasResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryBlockGasResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryBlockGasResponse message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryBlockGasResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (!$util.isInteger(message.gas) && !(message.gas && $util.isInteger(message.gas.low) && $util.isInteger(message.gas.high)))
                            return "gas: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryBlockGasResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.QueryBlockGasResponse} QueryBlockGasResponse
                 */
                QueryBlockGasResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.QueryBlockGasResponse)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.QueryBlockGasResponse();
                    if (object.gas != null)
                        if ($util.Long)
                            (message.gas = $util.Long.fromValue(object.gas)).unsigned = false;
                        else if (typeof object.gas === "string")
                            message.gas = parseInt(object.gas, 10);
                        else if (typeof object.gas === "number")
                            message.gas = object.gas;
                        else if (typeof object.gas === "object")
                            message.gas = new $util.LongBits(object.gas.low >>> 0, object.gas.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a QueryBlockGasResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @static
                 * @param {ethermint.feemarket.v1.QueryBlockGasResponse} message QueryBlockGasResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryBlockGasResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas = options.longs === String ? "0" : 0;
                    if (message.gas != null && message.hasOwnProperty("gas"))
                        if (typeof message.gas === "number")
                            object.gas = options.longs === String ? String(message.gas) : message.gas;
                        else
                            object.gas = options.longs === String ? $util.Long.prototype.toString.call(message.gas) : options.longs === Number ? new $util.LongBits(message.gas.low >>> 0, message.gas.high >>> 0).toNumber() : message.gas;
                    return object;
                };

                /**
                 * Converts this QueryBlockGasResponse to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.QueryBlockGasResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryBlockGasResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryBlockGasResponse;
            })();

            v1.GenesisState = (function() {

                /**
                 * Properties of a GenesisState.
                 * @memberof ethermint.feemarket.v1
                 * @interface IGenesisState
                 * @property {ethermint.feemarket.v1.IParams|null} [params] GenesisState params
                 * @property {number|null} [block_gas] GenesisState block_gas
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof ethermint.feemarket.v1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {ethermint.feemarket.v1.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GenesisState params.
                 * @member {ethermint.feemarket.v1.IParams|null|undefined} params
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState block_gas.
                 * @member {number} block_gas
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.block_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link ethermint.feemarket.v1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @static
                 * @param {ethermint.feemarket.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.ethermint.feemarket.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.block_gas != null && Object.hasOwnProperty.call(message, "block_gas"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.block_gas);
                    return writer;
                };

                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ethermint.feemarket.v1.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @static
                 * @param {ethermint.feemarket.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.feemarket.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.feemarket.v1.GenesisState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.ethermint.feemarket.v1.Params.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.block_gas = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.feemarket.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.ethermint.feemarket.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.block_gas != null && message.hasOwnProperty("block_gas"))
                        if (!$util.isInteger(message.block_gas) && !(message.block_gas && $util.isInteger(message.block_gas.low) && $util.isInteger(message.block_gas.high)))
                            return "block_gas: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.feemarket.v1.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.feemarket.v1.GenesisState)
                        return object;
                    let message = new $root.ethermint.feemarket.v1.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".ethermint.feemarket.v1.GenesisState.params: object expected");
                        message.params = $root.ethermint.feemarket.v1.Params.fromObject(object.params);
                    }
                    if (object.block_gas != null)
                        if ($util.Long)
                            (message.block_gas = $util.Long.fromValue(object.block_gas)).unsigned = true;
                        else if (typeof object.block_gas === "string")
                            message.block_gas = parseInt(object.block_gas, 10);
                        else if (typeof object.block_gas === "number")
                            message.block_gas = object.block_gas;
                        else if (typeof object.block_gas === "object")
                            message.block_gas = new $util.LongBits(object.block_gas.low >>> 0, object.block_gas.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @static
                 * @param {ethermint.feemarket.v1.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.params = null;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.block_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_gas = options.longs === String ? "0" : 0;
                    }
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.ethermint.feemarket.v1.Params.toObject(message.params, options);
                    if (message.block_gas != null && message.hasOwnProperty("block_gas"))
                        if (typeof message.block_gas === "number")
                            object.block_gas = options.longs === String ? String(message.block_gas) : message.block_gas;
                        else
                            object.block_gas = options.longs === String ? $util.Long.prototype.toString.call(message.block_gas) : options.longs === Number ? new $util.LongBits(message.block_gas.low >>> 0, message.block_gas.high >>> 0).toNumber(true) : message.block_gas;
                    return object;
                };

                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof ethermint.feemarket.v1.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GenesisState;
            })();

            return v1;
        })();

        return feemarket;
    })();

    ethermint.types = (function() {

        /**
         * Namespace types.
         * @memberof ethermint
         * @namespace
         */
        const types = {};

        types.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof ethermint.types
             * @namespace
             */
            const v1 = {};

            v1.ExtensionOptionDynamicFeeTx = (function() {

                /**
                 * Properties of an ExtensionOptionDynamicFeeTx.
                 * @memberof ethermint.types.v1
                 * @interface IExtensionOptionDynamicFeeTx
                 * @property {string|null} [max_priority_price] ExtensionOptionDynamicFeeTx max_priority_price
                 */

                /**
                 * Constructs a new ExtensionOptionDynamicFeeTx.
                 * @memberof ethermint.types.v1
                 * @classdesc Represents an ExtensionOptionDynamicFeeTx.
                 * @implements IExtensionOptionDynamicFeeTx
                 * @constructor
                 * @param {ethermint.types.v1.IExtensionOptionDynamicFeeTx=} [properties] Properties to set
                 */
                function ExtensionOptionDynamicFeeTx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionOptionDynamicFeeTx max_priority_price.
                 * @member {string} max_priority_price
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @instance
                 */
                ExtensionOptionDynamicFeeTx.prototype.max_priority_price = "";

                /**
                 * Encodes the specified ExtensionOptionDynamicFeeTx message. Does not implicitly {@link ethermint.types.v1.ExtensionOptionDynamicFeeTx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @static
                 * @param {ethermint.types.v1.IExtensionOptionDynamicFeeTx} message ExtensionOptionDynamicFeeTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionOptionDynamicFeeTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.max_priority_price != null && Object.hasOwnProperty.call(message, "max_priority_price"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.max_priority_price);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionOptionDynamicFeeTx message, length delimited. Does not implicitly {@link ethermint.types.v1.ExtensionOptionDynamicFeeTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @static
                 * @param {ethermint.types.v1.IExtensionOptionDynamicFeeTx} message ExtensionOptionDynamicFeeTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionOptionDynamicFeeTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionOptionDynamicFeeTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.types.v1.ExtensionOptionDynamicFeeTx} ExtensionOptionDynamicFeeTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionOptionDynamicFeeTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.types.v1.ExtensionOptionDynamicFeeTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.max_priority_price = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionOptionDynamicFeeTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.types.v1.ExtensionOptionDynamicFeeTx} ExtensionOptionDynamicFeeTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionOptionDynamicFeeTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionOptionDynamicFeeTx message.
                 * @function verify
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionOptionDynamicFeeTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.max_priority_price != null && message.hasOwnProperty("max_priority_price"))
                        if (!$util.isString(message.max_priority_price))
                            return "max_priority_price: string expected";
                    return null;
                };

                /**
                 * Creates an ExtensionOptionDynamicFeeTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.types.v1.ExtensionOptionDynamicFeeTx} ExtensionOptionDynamicFeeTx
                 */
                ExtensionOptionDynamicFeeTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.types.v1.ExtensionOptionDynamicFeeTx)
                        return object;
                    let message = new $root.ethermint.types.v1.ExtensionOptionDynamicFeeTx();
                    if (object.max_priority_price != null)
                        message.max_priority_price = String(object.max_priority_price);
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionOptionDynamicFeeTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @static
                 * @param {ethermint.types.v1.ExtensionOptionDynamicFeeTx} message ExtensionOptionDynamicFeeTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionOptionDynamicFeeTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.max_priority_price = "";
                    if (message.max_priority_price != null && message.hasOwnProperty("max_priority_price"))
                        object.max_priority_price = message.max_priority_price;
                    return object;
                };

                /**
                 * Converts this ExtensionOptionDynamicFeeTx to JSON.
                 * @function toJSON
                 * @memberof ethermint.types.v1.ExtensionOptionDynamicFeeTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionOptionDynamicFeeTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionOptionDynamicFeeTx;
            })();

            v1.EthAccount = (function() {

                /**
                 * Properties of an EthAccount.
                 * @memberof ethermint.types.v1
                 * @interface IEthAccount
                 * @property {cosmos.auth.v1beta1.IBaseAccount|null} [base_account] EthAccount base_account
                 * @property {string|null} [code_hash] EthAccount code_hash
                 */

                /**
                 * Constructs a new EthAccount.
                 * @memberof ethermint.types.v1
                 * @classdesc Represents an EthAccount.
                 * @implements IEthAccount
                 * @constructor
                 * @param {ethermint.types.v1.IEthAccount=} [properties] Properties to set
                 */
                function EthAccount(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EthAccount base_account.
                 * @member {cosmos.auth.v1beta1.IBaseAccount|null|undefined} base_account
                 * @memberof ethermint.types.v1.EthAccount
                 * @instance
                 */
                EthAccount.prototype.base_account = null;

                /**
                 * EthAccount code_hash.
                 * @member {string} code_hash
                 * @memberof ethermint.types.v1.EthAccount
                 * @instance
                 */
                EthAccount.prototype.code_hash = "";

                /**
                 * Encodes the specified EthAccount message. Does not implicitly {@link ethermint.types.v1.EthAccount.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.types.v1.EthAccount
                 * @static
                 * @param {ethermint.types.v1.IEthAccount} message EthAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EthAccount.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.base_account != null && Object.hasOwnProperty.call(message, "base_account"))
                        $root.cosmos.auth.v1beta1.BaseAccount.encode(message.base_account, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.code_hash != null && Object.hasOwnProperty.call(message, "code_hash"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.code_hash);
                    return writer;
                };

                /**
                 * Encodes the specified EthAccount message, length delimited. Does not implicitly {@link ethermint.types.v1.EthAccount.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.types.v1.EthAccount
                 * @static
                 * @param {ethermint.types.v1.IEthAccount} message EthAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EthAccount.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EthAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.types.v1.EthAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.types.v1.EthAccount} EthAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EthAccount.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.types.v1.EthAccount();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.base_account = $root.cosmos.auth.v1beta1.BaseAccount.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.code_hash = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EthAccount message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.types.v1.EthAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.types.v1.EthAccount} EthAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EthAccount.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EthAccount message.
                 * @function verify
                 * @memberof ethermint.types.v1.EthAccount
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EthAccount.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.base_account != null && message.hasOwnProperty("base_account")) {
                        let error = $root.cosmos.auth.v1beta1.BaseAccount.verify(message.base_account);
                        if (error)
                            return "base_account." + error;
                    }
                    if (message.code_hash != null && message.hasOwnProperty("code_hash"))
                        if (!$util.isString(message.code_hash))
                            return "code_hash: string expected";
                    return null;
                };

                /**
                 * Creates an EthAccount message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.types.v1.EthAccount
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.types.v1.EthAccount} EthAccount
                 */
                EthAccount.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.types.v1.EthAccount)
                        return object;
                    let message = new $root.ethermint.types.v1.EthAccount();
                    if (object.base_account != null) {
                        if (typeof object.base_account !== "object")
                            throw TypeError(".ethermint.types.v1.EthAccount.base_account: object expected");
                        message.base_account = $root.cosmos.auth.v1beta1.BaseAccount.fromObject(object.base_account);
                    }
                    if (object.code_hash != null)
                        message.code_hash = String(object.code_hash);
                    return message;
                };

                /**
                 * Creates a plain object from an EthAccount message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.types.v1.EthAccount
                 * @static
                 * @param {ethermint.types.v1.EthAccount} message EthAccount
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EthAccount.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.base_account = null;
                        object.code_hash = "";
                    }
                    if (message.base_account != null && message.hasOwnProperty("base_account"))
                        object.base_account = $root.cosmos.auth.v1beta1.BaseAccount.toObject(message.base_account, options);
                    if (message.code_hash != null && message.hasOwnProperty("code_hash"))
                        object.code_hash = message.code_hash;
                    return object;
                };

                /**
                 * Converts this EthAccount to JSON.
                 * @function toJSON
                 * @memberof ethermint.types.v1.EthAccount
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EthAccount.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EthAccount;
            })();

            v1.ExtensionOptionsWeb3Tx = (function() {

                /**
                 * Properties of an ExtensionOptionsWeb3Tx.
                 * @memberof ethermint.types.v1
                 * @interface IExtensionOptionsWeb3Tx
                 * @property {number|null} [typed_data_chain_id] ExtensionOptionsWeb3Tx typed_data_chain_id
                 * @property {string|null} [fee_payer] ExtensionOptionsWeb3Tx fee_payer
                 * @property {Uint8Array|null} [fee_payer_sig] ExtensionOptionsWeb3Tx fee_payer_sig
                 */

                /**
                 * Constructs a new ExtensionOptionsWeb3Tx.
                 * @memberof ethermint.types.v1
                 * @classdesc Represents an ExtensionOptionsWeb3Tx.
                 * @implements IExtensionOptionsWeb3Tx
                 * @constructor
                 * @param {ethermint.types.v1.IExtensionOptionsWeb3Tx=} [properties] Properties to set
                 */
                function ExtensionOptionsWeb3Tx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionOptionsWeb3Tx typed_data_chain_id.
                 * @member {number} typed_data_chain_id
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @instance
                 */
                ExtensionOptionsWeb3Tx.prototype.typed_data_chain_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * ExtensionOptionsWeb3Tx fee_payer.
                 * @member {string} fee_payer
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @instance
                 */
                ExtensionOptionsWeb3Tx.prototype.fee_payer = "";

                /**
                 * ExtensionOptionsWeb3Tx fee_payer_sig.
                 * @member {Uint8Array} fee_payer_sig
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @instance
                 */
                ExtensionOptionsWeb3Tx.prototype.fee_payer_sig = $util.newBuffer([]);

                /**
                 * Encodes the specified ExtensionOptionsWeb3Tx message. Does not implicitly {@link ethermint.types.v1.ExtensionOptionsWeb3Tx.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @static
                 * @param {ethermint.types.v1.IExtensionOptionsWeb3Tx} message ExtensionOptionsWeb3Tx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionOptionsWeb3Tx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.typed_data_chain_id != null && Object.hasOwnProperty.call(message, "typed_data_chain_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.typed_data_chain_id);
                    if (message.fee_payer != null && Object.hasOwnProperty.call(message, "fee_payer"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.fee_payer);
                    if (message.fee_payer_sig != null && Object.hasOwnProperty.call(message, "fee_payer_sig"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.fee_payer_sig);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionOptionsWeb3Tx message, length delimited. Does not implicitly {@link ethermint.types.v1.ExtensionOptionsWeb3Tx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @static
                 * @param {ethermint.types.v1.IExtensionOptionsWeb3Tx} message ExtensionOptionsWeb3Tx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionOptionsWeb3Tx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionOptionsWeb3Tx message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.types.v1.ExtensionOptionsWeb3Tx} ExtensionOptionsWeb3Tx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionOptionsWeb3Tx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.types.v1.ExtensionOptionsWeb3Tx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.typed_data_chain_id = reader.uint64();
                            break;
                        case 2:
                            message.fee_payer = reader.string();
                            break;
                        case 3:
                            message.fee_payer_sig = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionOptionsWeb3Tx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.types.v1.ExtensionOptionsWeb3Tx} ExtensionOptionsWeb3Tx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionOptionsWeb3Tx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionOptionsWeb3Tx message.
                 * @function verify
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionOptionsWeb3Tx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.typed_data_chain_id != null && message.hasOwnProperty("typed_data_chain_id"))
                        if (!$util.isInteger(message.typed_data_chain_id) && !(message.typed_data_chain_id && $util.isInteger(message.typed_data_chain_id.low) && $util.isInteger(message.typed_data_chain_id.high)))
                            return "typed_data_chain_id: integer|Long expected";
                    if (message.fee_payer != null && message.hasOwnProperty("fee_payer"))
                        if (!$util.isString(message.fee_payer))
                            return "fee_payer: string expected";
                    if (message.fee_payer_sig != null && message.hasOwnProperty("fee_payer_sig"))
                        if (!(message.fee_payer_sig && typeof message.fee_payer_sig.length === "number" || $util.isString(message.fee_payer_sig)))
                            return "fee_payer_sig: buffer expected";
                    return null;
                };

                /**
                 * Creates an ExtensionOptionsWeb3Tx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.types.v1.ExtensionOptionsWeb3Tx} ExtensionOptionsWeb3Tx
                 */
                ExtensionOptionsWeb3Tx.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.types.v1.ExtensionOptionsWeb3Tx)
                        return object;
                    let message = new $root.ethermint.types.v1.ExtensionOptionsWeb3Tx();
                    if (object.typed_data_chain_id != null)
                        if ($util.Long)
                            (message.typed_data_chain_id = $util.Long.fromValue(object.typed_data_chain_id)).unsigned = true;
                        else if (typeof object.typed_data_chain_id === "string")
                            message.typed_data_chain_id = parseInt(object.typed_data_chain_id, 10);
                        else if (typeof object.typed_data_chain_id === "number")
                            message.typed_data_chain_id = object.typed_data_chain_id;
                        else if (typeof object.typed_data_chain_id === "object")
                            message.typed_data_chain_id = new $util.LongBits(object.typed_data_chain_id.low >>> 0, object.typed_data_chain_id.high >>> 0).toNumber(true);
                    if (object.fee_payer != null)
                        message.fee_payer = String(object.fee_payer);
                    if (object.fee_payer_sig != null)
                        if (typeof object.fee_payer_sig === "string")
                            $util.base64.decode(object.fee_payer_sig, message.fee_payer_sig = $util.newBuffer($util.base64.length(object.fee_payer_sig)), 0);
                        else if (object.fee_payer_sig.length)
                            message.fee_payer_sig = object.fee_payer_sig;
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionOptionsWeb3Tx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @static
                 * @param {ethermint.types.v1.ExtensionOptionsWeb3Tx} message ExtensionOptionsWeb3Tx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionOptionsWeb3Tx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.typed_data_chain_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.typed_data_chain_id = options.longs === String ? "0" : 0;
                        object.fee_payer = "";
                        if (options.bytes === String)
                            object.fee_payer_sig = "";
                        else {
                            object.fee_payer_sig = [];
                            if (options.bytes !== Array)
                                object.fee_payer_sig = $util.newBuffer(object.fee_payer_sig);
                        }
                    }
                    if (message.typed_data_chain_id != null && message.hasOwnProperty("typed_data_chain_id"))
                        if (typeof message.typed_data_chain_id === "number")
                            object.typed_data_chain_id = options.longs === String ? String(message.typed_data_chain_id) : message.typed_data_chain_id;
                        else
                            object.typed_data_chain_id = options.longs === String ? $util.Long.prototype.toString.call(message.typed_data_chain_id) : options.longs === Number ? new $util.LongBits(message.typed_data_chain_id.low >>> 0, message.typed_data_chain_id.high >>> 0).toNumber(true) : message.typed_data_chain_id;
                    if (message.fee_payer != null && message.hasOwnProperty("fee_payer"))
                        object.fee_payer = message.fee_payer;
                    if (message.fee_payer_sig != null && message.hasOwnProperty("fee_payer_sig"))
                        object.fee_payer_sig = options.bytes === String ? $util.base64.encode(message.fee_payer_sig, 0, message.fee_payer_sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.fee_payer_sig) : message.fee_payer_sig;
                    return object;
                };

                /**
                 * Converts this ExtensionOptionsWeb3Tx to JSON.
                 * @function toJSON
                 * @memberof ethermint.types.v1.ExtensionOptionsWeb3Tx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionOptionsWeb3Tx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionOptionsWeb3Tx;
            })();

            v1.TxResult = (function() {

                /**
                 * Properties of a TxResult.
                 * @memberof ethermint.types.v1
                 * @interface ITxResult
                 * @property {number|null} [height] TxResult height
                 * @property {number|null} [tx_index] TxResult tx_index
                 * @property {number|null} [msg_index] TxResult msg_index
                 * @property {number|null} [eth_tx_index] TxResult eth_tx_index
                 * @property {boolean|null} [failed] TxResult failed
                 * @property {number|null} [gas_used] TxResult gas_used
                 * @property {number|null} [cumulative_gas_used] TxResult cumulative_gas_used
                 */

                /**
                 * Constructs a new TxResult.
                 * @memberof ethermint.types.v1
                 * @classdesc Represents a TxResult.
                 * @implements ITxResult
                 * @constructor
                 * @param {ethermint.types.v1.ITxResult=} [properties] Properties to set
                 */
                function TxResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TxResult height.
                 * @member {number} height
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TxResult tx_index.
                 * @member {number} tx_index
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.tx_index = 0;

                /**
                 * TxResult msg_index.
                 * @member {number} msg_index
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.msg_index = 0;

                /**
                 * TxResult eth_tx_index.
                 * @member {number} eth_tx_index
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.eth_tx_index = 0;

                /**
                 * TxResult failed.
                 * @member {boolean} failed
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.failed = false;

                /**
                 * TxResult gas_used.
                 * @member {number} gas_used
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * TxResult cumulative_gas_used.
                 * @member {number} cumulative_gas_used
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 */
                TxResult.prototype.cumulative_gas_used = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified TxResult message. Does not implicitly {@link ethermint.types.v1.TxResult.verify|verify} messages.
                 * @function encode
                 * @memberof ethermint.types.v1.TxResult
                 * @static
                 * @param {ethermint.types.v1.ITxResult} message TxResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                    if (message.tx_index != null && Object.hasOwnProperty.call(message, "tx_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tx_index);
                    if (message.msg_index != null && Object.hasOwnProperty.call(message, "msg_index"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.msg_index);
                    if (message.eth_tx_index != null && Object.hasOwnProperty.call(message, "eth_tx_index"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.eth_tx_index);
                    if (message.failed != null && Object.hasOwnProperty.call(message, "failed"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.failed);
                    if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.gas_used);
                    if (message.cumulative_gas_used != null && Object.hasOwnProperty.call(message, "cumulative_gas_used"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.cumulative_gas_used);
                    return writer;
                };

                /**
                 * Encodes the specified TxResult message, length delimited. Does not implicitly {@link ethermint.types.v1.TxResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ethermint.types.v1.TxResult
                 * @static
                 * @param {ethermint.types.v1.ITxResult} message TxResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TxResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof ethermint.types.v1.TxResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ethermint.types.v1.TxResult} TxResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ethermint.types.v1.TxResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.int64();
                            break;
                        case 2:
                            message.tx_index = reader.uint32();
                            break;
                        case 3:
                            message.msg_index = reader.uint32();
                            break;
                        case 4:
                            message.eth_tx_index = reader.int32();
                            break;
                        case 5:
                            message.failed = reader.bool();
                            break;
                        case 6:
                            message.gas_used = reader.uint64();
                            break;
                        case 7:
                            message.cumulative_gas_used = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TxResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ethermint.types.v1.TxResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ethermint.types.v1.TxResult} TxResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TxResult message.
                 * @function verify
                 * @memberof ethermint.types.v1.TxResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TxResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                        if (!$util.isInteger(message.tx_index))
                            return "tx_index: integer expected";
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        if (!$util.isInteger(message.msg_index))
                            return "msg_index: integer expected";
                    if (message.eth_tx_index != null && message.hasOwnProperty("eth_tx_index"))
                        if (!$util.isInteger(message.eth_tx_index))
                            return "eth_tx_index: integer expected";
                    if (message.failed != null && message.hasOwnProperty("failed"))
                        if (typeof message.failed !== "boolean")
                            return "failed: boolean expected";
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                            return "gas_used: integer|Long expected";
                    if (message.cumulative_gas_used != null && message.hasOwnProperty("cumulative_gas_used"))
                        if (!$util.isInteger(message.cumulative_gas_used) && !(message.cumulative_gas_used && $util.isInteger(message.cumulative_gas_used.low) && $util.isInteger(message.cumulative_gas_used.high)))
                            return "cumulative_gas_used: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a TxResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ethermint.types.v1.TxResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ethermint.types.v1.TxResult} TxResult
                 */
                TxResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.ethermint.types.v1.TxResult)
                        return object;
                    let message = new $root.ethermint.types.v1.TxResult();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.tx_index != null)
                        message.tx_index = object.tx_index >>> 0;
                    if (object.msg_index != null)
                        message.msg_index = object.msg_index >>> 0;
                    if (object.eth_tx_index != null)
                        message.eth_tx_index = object.eth_tx_index | 0;
                    if (object.failed != null)
                        message.failed = Boolean(object.failed);
                    if (object.gas_used != null)
                        if ($util.Long)
                            (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = true;
                        else if (typeof object.gas_used === "string")
                            message.gas_used = parseInt(object.gas_used, 10);
                        else if (typeof object.gas_used === "number")
                            message.gas_used = object.gas_used;
                        else if (typeof object.gas_used === "object")
                            message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber(true);
                    if (object.cumulative_gas_used != null)
                        if ($util.Long)
                            (message.cumulative_gas_used = $util.Long.fromValue(object.cumulative_gas_used)).unsigned = true;
                        else if (typeof object.cumulative_gas_used === "string")
                            message.cumulative_gas_used = parseInt(object.cumulative_gas_used, 10);
                        else if (typeof object.cumulative_gas_used === "number")
                            message.cumulative_gas_used = object.cumulative_gas_used;
                        else if (typeof object.cumulative_gas_used === "object")
                            message.cumulative_gas_used = new $util.LongBits(object.cumulative_gas_used.low >>> 0, object.cumulative_gas_used.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a TxResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ethermint.types.v1.TxResult
                 * @static
                 * @param {ethermint.types.v1.TxResult} message TxResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TxResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.tx_index = 0;
                        object.msg_index = 0;
                        object.eth_tx_index = 0;
                        object.failed = false;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_used = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.cumulative_gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.cumulative_gas_used = options.longs === String ? "0" : 0;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                        object.tx_index = message.tx_index;
                    if (message.msg_index != null && message.hasOwnProperty("msg_index"))
                        object.msg_index = message.msg_index;
                    if (message.eth_tx_index != null && message.hasOwnProperty("eth_tx_index"))
                        object.eth_tx_index = message.eth_tx_index;
                    if (message.failed != null && message.hasOwnProperty("failed"))
                        object.failed = message.failed;
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (typeof message.gas_used === "number")
                            object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                        else
                            object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber(true) : message.gas_used;
                    if (message.cumulative_gas_used != null && message.hasOwnProperty("cumulative_gas_used"))
                        if (typeof message.cumulative_gas_used === "number")
                            object.cumulative_gas_used = options.longs === String ? String(message.cumulative_gas_used) : message.cumulative_gas_used;
                        else
                            object.cumulative_gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.cumulative_gas_used) : options.longs === Number ? new $util.LongBits(message.cumulative_gas_used.low >>> 0, message.cumulative_gas_used.high >>> 0).toNumber(true) : message.cumulative_gas_used;
                    return object;
                };

                /**
                 * Converts this TxResult to JSON.
                 * @function toJSON
                 * @memberof ethermint.types.v1.TxResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TxResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TxResult;
            })();

            return v1;
        })();

        return types;
    })();

    return ethermint;
})();

export const cosmos = $root.cosmos = (() => {

    /**
     * Namespace cosmos.
     * @exports cosmos
     * @namespace
     */
    const cosmos = {};

    cosmos.msg = (function() {

        /**
         * Namespace msg.
         * @memberof cosmos
         * @namespace
         */
        const msg = {};

        msg.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof cosmos.msg
             * @namespace
             */
            const v1 = {};

            return v1;
        })();

        return msg;
    })();

    cosmos.base = (function() {

        /**
         * Namespace base.
         * @memberof cosmos
         * @namespace
         */
        const base = {};

        base.query = (function() {

            /**
             * Namespace query.
             * @memberof cosmos.base
             * @namespace
             */
            const query = {};

            query.v1beta1 = (function() {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.query
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.PageRequest = (function() {

                    /**
                     * Properties of a PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageRequest
                     * @property {Uint8Array|null} [key] PageRequest key
                     * @property {number|null} [offset] PageRequest offset
                     * @property {number|null} [limit] PageRequest limit
                     * @property {boolean|null} [count_total] PageRequest count_total
                     * @property {boolean|null} [reverse] PageRequest reverse
                     */

                    /**
                     * Constructs a new PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageRequest.
                     * @implements IPageRequest
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageRequest=} [properties] Properties to set
                     */
                    function PageRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageRequest key.
                     * @member {Uint8Array} key
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.key = $util.newBuffer([]);

                    /**
                     * PageRequest offset.
                     * @member {number} offset
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest limit.
                     * @member {number} limit
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest count_total.
                     * @member {boolean} count_total
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.count_total = false;

                    /**
                     * PageRequest reverse.
                     * @member {boolean} reverse
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.reverse = false;

                    /**
                     * Encodes the specified PageRequest message. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.offset);
                        if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.limit);
                        if (message.count_total != null && Object.hasOwnProperty.call(message, "count_total"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.count_total);
                        if (message.reverse != null && Object.hasOwnProperty.call(message, "reverse"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reverse);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageRequest message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            case 2:
                                message.offset = reader.uint64();
                                break;
                            case 3:
                                message.limit = reader.uint64();
                                break;
                            case 4:
                                message.count_total = reader.bool();
                                break;
                            case 5:
                                message.reverse = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageRequest message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (!$util.isInteger(message.offset) && !(message.offset && $util.isInteger(message.offset.low) && $util.isInteger(message.offset.high)))
                                return "offset: integer|Long expected";
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                                return "limit: integer|Long expected";
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            if (typeof message.count_total !== "boolean")
                                return "count_total: boolean expected";
                        if (message.reverse != null && message.hasOwnProperty("reverse"))
                            if (typeof message.reverse !== "boolean")
                                return "reverse: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a PageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     */
                    PageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageRequest)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        if (object.offset != null)
                            if ($util.Long)
                                (message.offset = $util.Long.fromValue(object.offset)).unsigned = true;
                            else if (typeof object.offset === "string")
                                message.offset = parseInt(object.offset, 10);
                            else if (typeof object.offset === "number")
                                message.offset = object.offset;
                            else if (typeof object.offset === "object")
                                message.offset = new $util.LongBits(object.offset.low >>> 0, object.offset.high >>> 0).toNumber(true);
                        if (object.limit != null)
                            if ($util.Long)
                                (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                            else if (typeof object.limit === "string")
                                message.limit = parseInt(object.limit, 10);
                            else if (typeof object.limit === "number")
                                message.limit = object.limit;
                            else if (typeof object.limit === "object")
                                message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                        if (object.count_total != null)
                            message.count_total = Boolean(object.count_total);
                        if (object.reverse != null)
                            message.reverse = Boolean(object.reverse);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageRequest} message PageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.offset = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.limit = options.longs === String ? "0" : 0;
                            object.count_total = false;
                            object.reverse = false;
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (typeof message.offset === "number")
                                object.offset = options.longs === String ? String(message.offset) : message.offset;
                            else
                                object.offset = options.longs === String ? $util.Long.prototype.toString.call(message.offset) : options.longs === Number ? new $util.LongBits(message.offset.low >>> 0, message.offset.high >>> 0).toNumber(true) : message.offset;
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (typeof message.limit === "number")
                                object.limit = options.longs === String ? String(message.limit) : message.limit;
                            else
                                object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            object.count_total = message.count_total;
                        if (message.reverse != null && message.hasOwnProperty("reverse"))
                            object.reverse = message.reverse;
                        return object;
                    };

                    /**
                     * Converts this PageRequest to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageRequest;
                })();

                v1beta1.PageResponse = (function() {

                    /**
                     * Properties of a PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageResponse
                     * @property {Uint8Array|null} [next_key] PageResponse next_key
                     * @property {number|null} [total] PageResponse total
                     */

                    /**
                     * Constructs a new PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageResponse.
                     * @implements IPageResponse
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageResponse=} [properties] Properties to set
                     */
                    function PageResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageResponse next_key.
                     * @member {Uint8Array} next_key
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.next_key = $util.newBuffer([]);

                    /**
                     * PageResponse total.
                     * @member {number} total
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.total = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified PageResponse message. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.next_key != null && Object.hasOwnProperty.call(message, "next_key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.next_key);
                        if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.total);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageResponse message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.next_key = reader.bytes();
                                break;
                            case 2:
                                message.total = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageResponse message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            if (!(message.next_key && typeof message.next_key.length === "number" || $util.isString(message.next_key)))
                                return "next_key: buffer expected";
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                                return "total: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a PageResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     */
                    PageResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageResponse)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        if (object.next_key != null)
                            if (typeof object.next_key === "string")
                                $util.base64.decode(object.next_key, message.next_key = $util.newBuffer($util.base64.length(object.next_key)), 0);
                            else if (object.next_key.length)
                                message.next_key = object.next_key;
                        if (object.total != null)
                            if ($util.Long)
                                (message.total = $util.Long.fromValue(object.total)).unsigned = true;
                            else if (typeof object.total === "string")
                                message.total = parseInt(object.total, 10);
                            else if (typeof object.total === "number")
                                message.total = object.total;
                            else if (typeof object.total === "object")
                                message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageResponse} message PageResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.next_key = "";
                            else {
                                object.next_key = [];
                                if (options.bytes !== Array)
                                    object.next_key = $util.newBuffer(object.next_key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.total = options.longs === String ? "0" : 0;
                        }
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            object.next_key = options.bytes === String ? $util.base64.encode(message.next_key, 0, message.next_key.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_key) : message.next_key;
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (typeof message.total === "number")
                                object.total = options.longs === String ? String(message.total) : message.total;
                            else
                                object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber(true) : message.total;
                        return object;
                    };

                    /**
                     * Converts this PageResponse to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageResponse;
                })();

                return v1beta1;
            })();

            return query;
        })();

        return base;
    })();

    cosmos.auth = (function() {

        /**
         * Namespace auth.
         * @memberof cosmos
         * @namespace
         */
        const auth = {};

        auth.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.auth
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.BaseAccount = (function() {

                /**
                 * Properties of a BaseAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IBaseAccount
                 * @property {string|null} [address] BaseAccount address
                 * @property {google.protobuf.IAny|null} [pub_key] BaseAccount pub_key
                 * @property {number|null} [account_number] BaseAccount account_number
                 * @property {number|null} [sequence] BaseAccount sequence
                 */

                /**
                 * Constructs a new BaseAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a BaseAccount.
                 * @implements IBaseAccount
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IBaseAccount=} [properties] Properties to set
                 */
                function BaseAccount(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BaseAccount address.
                 * @member {string} address
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.address = "";

                /**
                 * BaseAccount pub_key.
                 * @member {google.protobuf.IAny|null|undefined} pub_key
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.pub_key = null;

                /**
                 * BaseAccount account_number.
                 * @member {number} account_number
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.account_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * BaseAccount sequence.
                 * @member {number} sequence
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 */
                BaseAccount.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified BaseAccount message. Does not implicitly {@link cosmos.auth.v1beta1.BaseAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.IBaseAccount} message BaseAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BaseAccount.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                        $root.google.protobuf.Any.encode(message.pub_key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.account_number != null && Object.hasOwnProperty.call(message, "account_number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.account_number);
                    if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sequence);
                    return writer;
                };

                /**
                 * Encodes the specified BaseAccount message, length delimited. Does not implicitly {@link cosmos.auth.v1beta1.BaseAccount.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.IBaseAccount} message BaseAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BaseAccount.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BaseAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.BaseAccount} BaseAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BaseAccount.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.auth.v1beta1.BaseAccount();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.pub_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.account_number = reader.uint64();
                            break;
                        case 4:
                            message.sequence = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BaseAccount message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.auth.v1beta1.BaseAccount} BaseAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BaseAccount.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BaseAccount message.
                 * @function verify
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BaseAccount.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                        let error = $root.google.protobuf.Any.verify(message.pub_key);
                        if (error)
                            return "pub_key." + error;
                    }
                    if (message.account_number != null && message.hasOwnProperty("account_number"))
                        if (!$util.isInteger(message.account_number) && !(message.account_number && $util.isInteger(message.account_number.low) && $util.isInteger(message.account_number.high)))
                            return "account_number: integer|Long expected";
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                            return "sequence: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a BaseAccount message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.auth.v1beta1.BaseAccount} BaseAccount
                 */
                BaseAccount.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.auth.v1beta1.BaseAccount)
                        return object;
                    let message = new $root.cosmos.auth.v1beta1.BaseAccount();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.pub_key != null) {
                        if (typeof object.pub_key !== "object")
                            throw TypeError(".cosmos.auth.v1beta1.BaseAccount.pub_key: object expected");
                        message.pub_key = $root.google.protobuf.Any.fromObject(object.pub_key);
                    }
                    if (object.account_number != null)
                        if ($util.Long)
                            (message.account_number = $util.Long.fromValue(object.account_number)).unsigned = true;
                        else if (typeof object.account_number === "string")
                            message.account_number = parseInt(object.account_number, 10);
                        else if (typeof object.account_number === "number")
                            message.account_number = object.account_number;
                        else if (typeof object.account_number === "object")
                            message.account_number = new $util.LongBits(object.account_number.low >>> 0, object.account_number.high >>> 0).toNumber(true);
                    if (object.sequence != null)
                        if ($util.Long)
                            (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                        else if (typeof object.sequence === "string")
                            message.sequence = parseInt(object.sequence, 10);
                        else if (typeof object.sequence === "number")
                            message.sequence = object.sequence;
                        else if (typeof object.sequence === "object")
                            message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a BaseAccount message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.BaseAccount} message BaseAccount
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BaseAccount.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        object.pub_key = null;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.account_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.account_number = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sequence = options.longs === String ? "0" : 0;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                        object.pub_key = $root.google.protobuf.Any.toObject(message.pub_key, options);
                    if (message.account_number != null && message.hasOwnProperty("account_number"))
                        if (typeof message.account_number === "number")
                            object.account_number = options.longs === String ? String(message.account_number) : message.account_number;
                        else
                            object.account_number = options.longs === String ? $util.Long.prototype.toString.call(message.account_number) : options.longs === Number ? new $util.LongBits(message.account_number.low >>> 0, message.account_number.high >>> 0).toNumber(true) : message.account_number;
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (typeof message.sequence === "number")
                            object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                        else
                            object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                    return object;
                };

                /**
                 * Converts this BaseAccount to JSON.
                 * @function toJSON
                 * @memberof cosmos.auth.v1beta1.BaseAccount
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BaseAccount.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BaseAccount;
            })();

            v1beta1.ModuleAccount = (function() {

                /**
                 * Properties of a ModuleAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IModuleAccount
                 * @property {cosmos.auth.v1beta1.IBaseAccount|null} [base_account] ModuleAccount base_account
                 * @property {string|null} [name] ModuleAccount name
                 * @property {Array.<string>|null} [permissions] ModuleAccount permissions
                 */

                /**
                 * Constructs a new ModuleAccount.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a ModuleAccount.
                 * @implements IModuleAccount
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IModuleAccount=} [properties] Properties to set
                 */
                function ModuleAccount(properties) {
                    this.permissions = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ModuleAccount base_account.
                 * @member {cosmos.auth.v1beta1.IBaseAccount|null|undefined} base_account
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @instance
                 */
                ModuleAccount.prototype.base_account = null;

                /**
                 * ModuleAccount name.
                 * @member {string} name
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @instance
                 */
                ModuleAccount.prototype.name = "";

                /**
                 * ModuleAccount permissions.
                 * @member {Array.<string>} permissions
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @instance
                 */
                ModuleAccount.prototype.permissions = $util.emptyArray;

                /**
                 * Encodes the specified ModuleAccount message. Does not implicitly {@link cosmos.auth.v1beta1.ModuleAccount.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.IModuleAccount} message ModuleAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ModuleAccount.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.base_account != null && Object.hasOwnProperty.call(message, "base_account"))
                        $root.cosmos.auth.v1beta1.BaseAccount.encode(message.base_account, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.permissions != null && message.permissions.length)
                        for (let i = 0; i < message.permissions.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.permissions[i]);
                    return writer;
                };

                /**
                 * Encodes the specified ModuleAccount message, length delimited. Does not implicitly {@link cosmos.auth.v1beta1.ModuleAccount.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.IModuleAccount} message ModuleAccount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ModuleAccount.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ModuleAccount message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.ModuleAccount} ModuleAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ModuleAccount.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.auth.v1beta1.ModuleAccount();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.base_account = $root.cosmos.auth.v1beta1.BaseAccount.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            if (!(message.permissions && message.permissions.length))
                                message.permissions = [];
                            message.permissions.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ModuleAccount message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.auth.v1beta1.ModuleAccount} ModuleAccount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ModuleAccount.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ModuleAccount message.
                 * @function verify
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ModuleAccount.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.base_account != null && message.hasOwnProperty("base_account")) {
                        let error = $root.cosmos.auth.v1beta1.BaseAccount.verify(message.base_account);
                        if (error)
                            return "base_account." + error;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.permissions != null && message.hasOwnProperty("permissions")) {
                        if (!Array.isArray(message.permissions))
                            return "permissions: array expected";
                        for (let i = 0; i < message.permissions.length; ++i)
                            if (!$util.isString(message.permissions[i]))
                                return "permissions: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a ModuleAccount message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.auth.v1beta1.ModuleAccount} ModuleAccount
                 */
                ModuleAccount.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.auth.v1beta1.ModuleAccount)
                        return object;
                    let message = new $root.cosmos.auth.v1beta1.ModuleAccount();
                    if (object.base_account != null) {
                        if (typeof object.base_account !== "object")
                            throw TypeError(".cosmos.auth.v1beta1.ModuleAccount.base_account: object expected");
                        message.base_account = $root.cosmos.auth.v1beta1.BaseAccount.fromObject(object.base_account);
                    }
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.permissions) {
                        if (!Array.isArray(object.permissions))
                            throw TypeError(".cosmos.auth.v1beta1.ModuleAccount.permissions: array expected");
                        message.permissions = [];
                        for (let i = 0; i < object.permissions.length; ++i)
                            message.permissions[i] = String(object.permissions[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ModuleAccount message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @static
                 * @param {cosmos.auth.v1beta1.ModuleAccount} message ModuleAccount
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ModuleAccount.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.permissions = [];
                    if (options.defaults) {
                        object.base_account = null;
                        object.name = "";
                    }
                    if (message.base_account != null && message.hasOwnProperty("base_account"))
                        object.base_account = $root.cosmos.auth.v1beta1.BaseAccount.toObject(message.base_account, options);
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.permissions && message.permissions.length) {
                        object.permissions = [];
                        for (let j = 0; j < message.permissions.length; ++j)
                            object.permissions[j] = message.permissions[j];
                    }
                    return object;
                };

                /**
                 * Converts this ModuleAccount to JSON.
                 * @function toJSON
                 * @memberof cosmos.auth.v1beta1.ModuleAccount
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ModuleAccount.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ModuleAccount;
            })();

            v1beta1.Params = (function() {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.auth.v1beta1
                 * @interface IParams
                 * @property {number|null} [max_memo_characters] Params max_memo_characters
                 * @property {number|null} [tx_sig_limit] Params tx_sig_limit
                 * @property {number|null} [tx_size_cost_per_byte] Params tx_size_cost_per_byte
                 * @property {number|null} [sig_verify_cost_ed25519] Params sig_verify_cost_ed25519
                 * @property {number|null} [sig_verify_cost_secp256k1] Params sig_verify_cost_secp256k1
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.auth.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.auth.v1beta1.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Params max_memo_characters.
                 * @member {number} max_memo_characters
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.max_memo_characters = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Params tx_sig_limit.
                 * @member {number} tx_sig_limit
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.tx_sig_limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Params tx_size_cost_per_byte.
                 * @member {number} tx_size_cost_per_byte
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.tx_size_cost_per_byte = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Params sig_verify_cost_ed25519.
                 * @member {number} sig_verify_cost_ed25519
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.sig_verify_cost_ed25519 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Params sig_verify_cost_secp256k1.
                 * @member {number} sig_verify_cost_secp256k1
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 */
                Params.prototype.sig_verify_cost_secp256k1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.auth.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {cosmos.auth.v1beta1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.max_memo_characters != null && Object.hasOwnProperty.call(message, "max_memo_characters"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.max_memo_characters);
                    if (message.tx_sig_limit != null && Object.hasOwnProperty.call(message, "tx_sig_limit"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.tx_sig_limit);
                    if (message.tx_size_cost_per_byte != null && Object.hasOwnProperty.call(message, "tx_size_cost_per_byte"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.tx_size_cost_per_byte);
                    if (message.sig_verify_cost_ed25519 != null && Object.hasOwnProperty.call(message, "sig_verify_cost_ed25519"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sig_verify_cost_ed25519);
                    if (message.sig_verify_cost_secp256k1 != null && Object.hasOwnProperty.call(message, "sig_verify_cost_secp256k1"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.sig_verify_cost_secp256k1);
                    return writer;
                };

                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link cosmos.auth.v1beta1.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {cosmos.auth.v1beta1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.auth.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.auth.v1beta1.Params();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.max_memo_characters = reader.uint64();
                            break;
                        case 2:
                            message.tx_sig_limit = reader.uint64();
                            break;
                        case 3:
                            message.tx_size_cost_per_byte = reader.uint64();
                            break;
                        case 4:
                            message.sig_verify_cost_ed25519 = reader.uint64();
                            break;
                        case 5:
                            message.sig_verify_cost_secp256k1 = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.auth.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.max_memo_characters != null && message.hasOwnProperty("max_memo_characters"))
                        if (!$util.isInteger(message.max_memo_characters) && !(message.max_memo_characters && $util.isInteger(message.max_memo_characters.low) && $util.isInteger(message.max_memo_characters.high)))
                            return "max_memo_characters: integer|Long expected";
                    if (message.tx_sig_limit != null && message.hasOwnProperty("tx_sig_limit"))
                        if (!$util.isInteger(message.tx_sig_limit) && !(message.tx_sig_limit && $util.isInteger(message.tx_sig_limit.low) && $util.isInteger(message.tx_sig_limit.high)))
                            return "tx_sig_limit: integer|Long expected";
                    if (message.tx_size_cost_per_byte != null && message.hasOwnProperty("tx_size_cost_per_byte"))
                        if (!$util.isInteger(message.tx_size_cost_per_byte) && !(message.tx_size_cost_per_byte && $util.isInteger(message.tx_size_cost_per_byte.low) && $util.isInteger(message.tx_size_cost_per_byte.high)))
                            return "tx_size_cost_per_byte: integer|Long expected";
                    if (message.sig_verify_cost_ed25519 != null && message.hasOwnProperty("sig_verify_cost_ed25519"))
                        if (!$util.isInteger(message.sig_verify_cost_ed25519) && !(message.sig_verify_cost_ed25519 && $util.isInteger(message.sig_verify_cost_ed25519.low) && $util.isInteger(message.sig_verify_cost_ed25519.high)))
                            return "sig_verify_cost_ed25519: integer|Long expected";
                    if (message.sig_verify_cost_secp256k1 != null && message.hasOwnProperty("sig_verify_cost_secp256k1"))
                        if (!$util.isInteger(message.sig_verify_cost_secp256k1) && !(message.sig_verify_cost_secp256k1 && $util.isInteger(message.sig_verify_cost_secp256k1.low) && $util.isInteger(message.sig_verify_cost_secp256k1.high)))
                            return "sig_verify_cost_secp256k1: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.auth.v1beta1.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.auth.v1beta1.Params)
                        return object;
                    let message = new $root.cosmos.auth.v1beta1.Params();
                    if (object.max_memo_characters != null)
                        if ($util.Long)
                            (message.max_memo_characters = $util.Long.fromValue(object.max_memo_characters)).unsigned = true;
                        else if (typeof object.max_memo_characters === "string")
                            message.max_memo_characters = parseInt(object.max_memo_characters, 10);
                        else if (typeof object.max_memo_characters === "number")
                            message.max_memo_characters = object.max_memo_characters;
                        else if (typeof object.max_memo_characters === "object")
                            message.max_memo_characters = new $util.LongBits(object.max_memo_characters.low >>> 0, object.max_memo_characters.high >>> 0).toNumber(true);
                    if (object.tx_sig_limit != null)
                        if ($util.Long)
                            (message.tx_sig_limit = $util.Long.fromValue(object.tx_sig_limit)).unsigned = true;
                        else if (typeof object.tx_sig_limit === "string")
                            message.tx_sig_limit = parseInt(object.tx_sig_limit, 10);
                        else if (typeof object.tx_sig_limit === "number")
                            message.tx_sig_limit = object.tx_sig_limit;
                        else if (typeof object.tx_sig_limit === "object")
                            message.tx_sig_limit = new $util.LongBits(object.tx_sig_limit.low >>> 0, object.tx_sig_limit.high >>> 0).toNumber(true);
                    if (object.tx_size_cost_per_byte != null)
                        if ($util.Long)
                            (message.tx_size_cost_per_byte = $util.Long.fromValue(object.tx_size_cost_per_byte)).unsigned = true;
                        else if (typeof object.tx_size_cost_per_byte === "string")
                            message.tx_size_cost_per_byte = parseInt(object.tx_size_cost_per_byte, 10);
                        else if (typeof object.tx_size_cost_per_byte === "number")
                            message.tx_size_cost_per_byte = object.tx_size_cost_per_byte;
                        else if (typeof object.tx_size_cost_per_byte === "object")
                            message.tx_size_cost_per_byte = new $util.LongBits(object.tx_size_cost_per_byte.low >>> 0, object.tx_size_cost_per_byte.high >>> 0).toNumber(true);
                    if (object.sig_verify_cost_ed25519 != null)
                        if ($util.Long)
                            (message.sig_verify_cost_ed25519 = $util.Long.fromValue(object.sig_verify_cost_ed25519)).unsigned = true;
                        else if (typeof object.sig_verify_cost_ed25519 === "string")
                            message.sig_verify_cost_ed25519 = parseInt(object.sig_verify_cost_ed25519, 10);
                        else if (typeof object.sig_verify_cost_ed25519 === "number")
                            message.sig_verify_cost_ed25519 = object.sig_verify_cost_ed25519;
                        else if (typeof object.sig_verify_cost_ed25519 === "object")
                            message.sig_verify_cost_ed25519 = new $util.LongBits(object.sig_verify_cost_ed25519.low >>> 0, object.sig_verify_cost_ed25519.high >>> 0).toNumber(true);
                    if (object.sig_verify_cost_secp256k1 != null)
                        if ($util.Long)
                            (message.sig_verify_cost_secp256k1 = $util.Long.fromValue(object.sig_verify_cost_secp256k1)).unsigned = true;
                        else if (typeof object.sig_verify_cost_secp256k1 === "string")
                            message.sig_verify_cost_secp256k1 = parseInt(object.sig_verify_cost_secp256k1, 10);
                        else if (typeof object.sig_verify_cost_secp256k1 === "number")
                            message.sig_verify_cost_secp256k1 = object.sig_verify_cost_secp256k1;
                        else if (typeof object.sig_verify_cost_secp256k1 === "object")
                            message.sig_verify_cost_secp256k1 = new $util.LongBits(object.sig_verify_cost_secp256k1.low >>> 0, object.sig_verify_cost_secp256k1.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.auth.v1beta1.Params
                 * @static
                 * @param {cosmos.auth.v1beta1.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.max_memo_characters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_memo_characters = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.tx_sig_limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.tx_sig_limit = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.tx_size_cost_per_byte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.tx_size_cost_per_byte = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.sig_verify_cost_ed25519 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sig_verify_cost_ed25519 = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.sig_verify_cost_secp256k1 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sig_verify_cost_secp256k1 = options.longs === String ? "0" : 0;
                    }
                    if (message.max_memo_characters != null && message.hasOwnProperty("max_memo_characters"))
                        if (typeof message.max_memo_characters === "number")
                            object.max_memo_characters = options.longs === String ? String(message.max_memo_characters) : message.max_memo_characters;
                        else
                            object.max_memo_characters = options.longs === String ? $util.Long.prototype.toString.call(message.max_memo_characters) : options.longs === Number ? new $util.LongBits(message.max_memo_characters.low >>> 0, message.max_memo_characters.high >>> 0).toNumber(true) : message.max_memo_characters;
                    if (message.tx_sig_limit != null && message.hasOwnProperty("tx_sig_limit"))
                        if (typeof message.tx_sig_limit === "number")
                            object.tx_sig_limit = options.longs === String ? String(message.tx_sig_limit) : message.tx_sig_limit;
                        else
                            object.tx_sig_limit = options.longs === String ? $util.Long.prototype.toString.call(message.tx_sig_limit) : options.longs === Number ? new $util.LongBits(message.tx_sig_limit.low >>> 0, message.tx_sig_limit.high >>> 0).toNumber(true) : message.tx_sig_limit;
                    if (message.tx_size_cost_per_byte != null && message.hasOwnProperty("tx_size_cost_per_byte"))
                        if (typeof message.tx_size_cost_per_byte === "number")
                            object.tx_size_cost_per_byte = options.longs === String ? String(message.tx_size_cost_per_byte) : message.tx_size_cost_per_byte;
                        else
                            object.tx_size_cost_per_byte = options.longs === String ? $util.Long.prototype.toString.call(message.tx_size_cost_per_byte) : options.longs === Number ? new $util.LongBits(message.tx_size_cost_per_byte.low >>> 0, message.tx_size_cost_per_byte.high >>> 0).toNumber(true) : message.tx_size_cost_per_byte;
                    if (message.sig_verify_cost_ed25519 != null && message.hasOwnProperty("sig_verify_cost_ed25519"))
                        if (typeof message.sig_verify_cost_ed25519 === "number")
                            object.sig_verify_cost_ed25519 = options.longs === String ? String(message.sig_verify_cost_ed25519) : message.sig_verify_cost_ed25519;
                        else
                            object.sig_verify_cost_ed25519 = options.longs === String ? $util.Long.prototype.toString.call(message.sig_verify_cost_ed25519) : options.longs === Number ? new $util.LongBits(message.sig_verify_cost_ed25519.low >>> 0, message.sig_verify_cost_ed25519.high >>> 0).toNumber(true) : message.sig_verify_cost_ed25519;
                    if (message.sig_verify_cost_secp256k1 != null && message.hasOwnProperty("sig_verify_cost_secp256k1"))
                        if (typeof message.sig_verify_cost_secp256k1 === "number")
                            object.sig_verify_cost_secp256k1 = options.longs === String ? String(message.sig_verify_cost_secp256k1) : message.sig_verify_cost_secp256k1;
                        else
                            object.sig_verify_cost_secp256k1 = options.longs === String ? $util.Long.prototype.toString.call(message.sig_verify_cost_secp256k1) : options.longs === Number ? new $util.LongBits(message.sig_verify_cost_secp256k1.low >>> 0, message.sig_verify_cost_secp256k1.high >>> 0).toNumber(true) : message.sig_verify_cost_secp256k1;
                    return object;
                };

                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof cosmos.auth.v1beta1.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Params;
            })();

            return v1beta1;
        })();

        return auth;
    })();

    return cosmos;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (let i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.public_dependency = [];
                this.weak_dependency = [];
                this.message_type = [];
                this.enum_type = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto public_dependency.
             * @member {Array.<number>} public_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto weak_dependency.
             * @member {Array.<number>} weak_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto message_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} message_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.message_type = $util.emptyArray;

            /**
             * FileDescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto source_code_info.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.source_code_info = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (let i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.message_type != null && message.message_type.length)
                    for (let i = 0; i < message.message_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (let i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.public_dependency != null && message.public_dependency.length)
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                if (message.weak_dependency != null && message.weak_dependency.length)
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.public_dependency && message.public_dependency.length))
                            message.public_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.public_dependency.push(reader.int32());
                        } else
                            message.public_dependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weak_dependency && message.weak_dependency.length))
                            message.weak_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weak_dependency.push(reader.int32());
                        } else
                            message.weak_dependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.message_type && message.message_type.length))
                            message.message_type = [];
                        message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                    if (!Array.isArray(message.public_dependency))
                        return "public_dependency: array expected";
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        if (!$util.isInteger(message.public_dependency[i]))
                            return "public_dependency: integer[] expected";
                }
                if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                    if (!Array.isArray(message.weak_dependency))
                        return "weak_dependency: array expected";
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        if (!$util.isInteger(message.weak_dependency[i]))
                            return "weak_dependency: integer[] expected";
                }
                if (message.message_type != null && message.hasOwnProperty("message_type")) {
                    if (!Array.isArray(message.message_type))
                        return "message_type: array expected";
                    for (let i = 0; i < message.message_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                        if (error)
                            return "message_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                    if (error)
                        return "source_code_info." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.public_dependency) {
                    if (!Array.isArray(object.public_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                    message.public_dependency = [];
                    for (let i = 0; i < object.public_dependency.length; ++i)
                        message.public_dependency[i] = object.public_dependency[i] | 0;
                }
                if (object.weak_dependency) {
                    if (!Array.isArray(object.weak_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                    message.weak_dependency = [];
                    for (let i = 0; i < object.weak_dependency.length; ++i)
                        message.weak_dependency[i] = object.weak_dependency[i] | 0;
                }
                if (object.message_type) {
                    if (!Array.isArray(object.message_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                    message.message_type = [];
                    for (let i = 0; i < object.message_type.length; ++i) {
                        if (typeof object.message_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                        message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.source_code_info != null) {
                    if (typeof object.source_code_info !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                    message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.message_type = [];
                    object.enum_type = [];
                    object.service = [];
                    object.extension = [];
                    object.public_dependency = [];
                    object.weak_dependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.source_code_info = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.message_type && message.message_type.length) {
                    object.message_type = [];
                    for (let j = 0; j < message.message_type.length; ++j)
                        object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                    object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                if (message.public_dependency && message.public_dependency.length) {
                    object.public_dependency = [];
                    for (let j = 0; j < message.public_dependency.length; ++j)
                        object.public_dependency[j] = message.public_dependency[j];
                }
                if (message.weak_dependency && message.weak_dependency.length) {
                    object.weak_dependency = [];
                    for (let j = 0; j < message.weak_dependency.length; ++j)
                        object.weak_dependency[j] = message.weak_dependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nested_type = [];
                this.enum_type = [];
                this.extension_range = [];
                this.oneof_decl = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nested_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nested_type = $util.emptyArray;

            /**
             * DescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * DescriptorProto extension_range.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension_range = $util.emptyArray;

            /**
             * DescriptorProto oneof_decl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneof_decl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reserved_range.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * DescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (let i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nested_type != null && message.nested_type.length)
                    for (let i = 0; i < message.nested_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extension_range != null && message.extension_range.length)
                    for (let i = 0; i < message.extension_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneof_decl != null && message.oneof_decl.length)
                    for (let i = 0; i < message.oneof_decl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reserved_range != null && message.reserved_range.length)
                    for (let i = 0; i < message.reserved_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reserved_name != null && message.reserved_name.length)
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nested_type && message.nested_type.length))
                            message.nested_type = [];
                        message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extension_range && message.extension_range.length))
                            message.extension_range = [];
                        message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneof_decl && message.oneof_decl.length))
                            message.oneof_decl = [];
                        message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reserved_range && message.reserved_range.length))
                            message.reserved_range = [];
                        message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reserved_name && message.reserved_name.length))
                            message.reserved_name = [];
                        message.reserved_name.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                    if (!Array.isArray(message.nested_type))
                        return "nested_type: array expected";
                    for (let i = 0; i < message.nested_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                        if (error)
                            return "nested_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                    if (!Array.isArray(message.extension_range))
                        return "extension_range: array expected";
                    for (let i = 0; i < message.extension_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                        if (error)
                            return "extension_range." + error;
                    }
                }
                if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                    if (!Array.isArray(message.oneof_decl))
                        return "oneof_decl: array expected";
                    for (let i = 0; i < message.oneof_decl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                        if (error)
                            return "oneof_decl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                    if (!Array.isArray(message.reserved_range))
                        return "reserved_range: array expected";
                    for (let i = 0; i < message.reserved_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                        if (error)
                            return "reserved_range." + error;
                    }
                }
                if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                    if (!Array.isArray(message.reserved_name))
                        return "reserved_name: array expected";
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        if (!$util.isString(message.reserved_name[i]))
                            return "reserved_name: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nested_type) {
                    if (!Array.isArray(object.nested_type))
                        throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                    message.nested_type = [];
                    for (let i = 0; i < object.nested_type.length; ++i) {
                        if (typeof object.nested_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                        message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.extension_range) {
                    if (!Array.isArray(object.extension_range))
                        throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                    message.extension_range = [];
                    for (let i = 0; i < object.extension_range.length; ++i) {
                        if (typeof object.extension_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                        message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                    }
                }
                if (object.oneof_decl) {
                    if (!Array.isArray(object.oneof_decl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                    message.oneof_decl = [];
                    for (let i = 0; i < object.oneof_decl.length; ++i) {
                        if (typeof object.oneof_decl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                        message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reserved_range) {
                    if (!Array.isArray(object.reserved_range))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                    message.reserved_range = [];
                    for (let i = 0; i < object.reserved_range.length; ++i) {
                        if (typeof object.reserved_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                        message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                    }
                }
                if (object.reserved_name) {
                    if (!Array.isArray(object.reserved_name))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                    message.reserved_name = [];
                    for (let i = 0; i < object.reserved_name.length; ++i)
                        message.reserved_name[i] = String(object.reserved_name[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nested_type = [];
                    object.enum_type = [];
                    object.extension_range = [];
                    object.extension = [];
                    object.oneof_decl = [];
                    object.reserved_range = [];
                    object.reserved_name = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nested_type && message.nested_type.length) {
                    object.nested_type = [];
                    for (let j = 0; j < message.nested_type.length; ++j)
                        object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.extension_range && message.extension_range.length) {
                    object.extension_range = [];
                    for (let j = 0; j < message.extension_range.length; ++j)
                        object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneof_decl && message.oneof_decl.length) {
                    object.oneof_decl = [];
                    for (let j = 0; j < message.oneof_decl.length; ++j)
                        object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                }
                if (message.reserved_range && message.reserved_range.length) {
                    object.reserved_range = [];
                    for (let j = 0; j < message.reserved_range.length; ++j)
                        object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                }
                if (message.reserved_name && message.reserved_name.length) {
                    object.reserved_name = [];
                    for (let j = 0; j < message.reserved_name.length; ++j)
                        object.reserved_name[j] = message.reserved_name[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [type_name] FieldDescriptorProto type_name
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [default_value] FieldDescriptorProto default_value
             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
             * @property {string|null} [json_name] FieldDescriptorProto json_name
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto type_name.
             * @member {string} type_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type_name = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto default_value.
             * @member {string} default_value
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.default_value = "";

            /**
             * FieldDescriptorProto oneof_index.
             * @member {number} oneof_index
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneof_index = 0;

            /**
             * FieldDescriptorProto json_name.
             * @member {string} json_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.json_name = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.type_name = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.default_value = reader.string();
                        break;
                    case 9:
                        message.oneof_index = reader.int32();
                        break;
                    case 10:
                        message.json_name = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    if (!$util.isString(message.type_name))
                        return "type_name: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    if (!$util.isString(message.default_value))
                        return "default_value: string expected";
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    if (!$util.isInteger(message.oneof_index))
                        return "oneof_index: integer expected";
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    if (!$util.isString(message.json_name))
                        return "json_name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.type_name != null)
                    message.type_name = String(object.type_name);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.default_value != null)
                    message.default_value = String(object.default_value);
                if (object.oneof_index != null)
                    message.oneof_index = object.oneof_index | 0;
                if (object.json_name != null)
                    message.json_name = String(object.json_name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.type_name = "";
                    object.default_value = "";
                    object.options = null;
                    object.oneof_index = 0;
                    object.json_name = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    object.type_name = message.type_name;
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    object.default_value = message.default_value;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    object.oneof_index = message.oneof_index;
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    object.json_name = message.json_name;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (let i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (let i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [input_type] MethodDescriptorProto input_type
             * @property {string|null} [output_type] MethodDescriptorProto output_type
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto input_type.
             * @member {string} input_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.input_type = "";

            /**
             * MethodDescriptorProto output_type.
             * @member {string} output_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.output_type = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto client_streaming.
             * @member {boolean} client_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.client_streaming = false;

            /**
             * MethodDescriptorProto server_streaming.
             * @member {boolean} server_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.server_streaming = false;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.input_type = reader.string();
                        break;
                    case 3:
                        message.output_type = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.client_streaming = reader.bool();
                        break;
                    case 6:
                        message.server_streaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    if (!$util.isString(message.input_type))
                        return "input_type: string expected";
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    if (!$util.isString(message.output_type))
                        return "output_type: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    if (typeof message.client_streaming !== "boolean")
                        return "client_streaming: boolean expected";
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    if (typeof message.server_streaming !== "boolean")
                        return "server_streaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.input_type != null)
                    message.input_type = String(object.input_type);
                if (object.output_type != null)
                    message.output_type = String(object.output_type);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.client_streaming != null)
                    message.client_streaming = Boolean(object.client_streaming);
                if (object.server_streaming != null)
                    message.server_streaming = Boolean(object.server_streaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.input_type = "";
                    object.output_type = "";
                    object.options = null;
                    object.client_streaming = false;
                    object.server_streaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    object.input_type = message.input_type;
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    object.output_type = message.output_type;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    object.client_streaming = message.client_streaming;
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    object.server_streaming = message.server_streaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [java_package] FileOptions java_package
             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
             * @property {string|null} [go_package] FileOptions go_package
             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions java_package.
             * @member {string} java_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_package = "";

            /**
             * FileOptions java_outer_classname.
             * @member {string} java_outer_classname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_outer_classname = "";

            /**
             * FileOptions java_multiple_files.
             * @member {boolean} java_multiple_files
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_multiple_files = false;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @member {boolean} java_generate_equals_and_hash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generate_equals_and_hash = false;

            /**
             * FileOptions java_string_check_utf8.
             * @member {boolean} java_string_check_utf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_string_check_utf8 = false;

            /**
             * FileOptions optimize_for.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimize_for = 1;

            /**
             * FileOptions go_package.
             * @member {string} go_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.go_package = "";

            /**
             * FileOptions cc_generic_services.
             * @member {boolean} cc_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_generic_services = false;

            /**
             * FileOptions java_generic_services.
             * @member {boolean} java_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generic_services = false;

            /**
             * FileOptions py_generic_services.
             * @member {boolean} py_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.py_generic_services = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions cc_enable_arenas.
             * @member {boolean} cc_enable_arenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_enable_arenas = false;

            /**
             * FileOptions objc_class_prefix.
             * @member {string} objc_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objc_class_prefix = "";

            /**
             * FileOptions csharp_namespace.
             * @member {string} csharp_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharp_namespace = "";

            /**
             * FileOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.java_package = reader.string();
                        break;
                    case 8:
                        message.java_outer_classname = reader.string();
                        break;
                    case 10:
                        message.java_multiple_files = reader.bool();
                        break;
                    case 20:
                        message.java_generate_equals_and_hash = reader.bool();
                        break;
                    case 27:
                        message.java_string_check_utf8 = reader.bool();
                        break;
                    case 9:
                        message.optimize_for = reader.int32();
                        break;
                    case 11:
                        message.go_package = reader.string();
                        break;
                    case 16:
                        message.cc_generic_services = reader.bool();
                        break;
                    case 17:
                        message.java_generic_services = reader.bool();
                        break;
                    case 18:
                        message.py_generic_services = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.cc_enable_arenas = reader.bool();
                        break;
                    case 36:
                        message.objc_class_prefix = reader.string();
                        break;
                    case 37:
                        message.csharp_namespace = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    if (!$util.isString(message.java_package))
                        return "java_package: string expected";
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    if (!$util.isString(message.java_outer_classname))
                        return "java_outer_classname: string expected";
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    if (typeof message.java_multiple_files !== "boolean")
                        return "java_multiple_files: boolean expected";
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    if (typeof message.java_generate_equals_and_hash !== "boolean")
                        return "java_generate_equals_and_hash: boolean expected";
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    if (typeof message.java_string_check_utf8 !== "boolean")
                        return "java_string_check_utf8: boolean expected";
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    switch (message.optimize_for) {
                    default:
                        return "optimize_for: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    if (!$util.isString(message.go_package))
                        return "go_package: string expected";
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    if (typeof message.cc_generic_services !== "boolean")
                        return "cc_generic_services: boolean expected";
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    if (typeof message.java_generic_services !== "boolean")
                        return "java_generic_services: boolean expected";
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    if (typeof message.py_generic_services !== "boolean")
                        return "py_generic_services: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    if (typeof message.cc_enable_arenas !== "boolean")
                        return "cc_enable_arenas: boolean expected";
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    if (!$util.isString(message.objc_class_prefix))
                        return "objc_class_prefix: string expected";
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    if (!$util.isString(message.csharp_namespace))
                        return "csharp_namespace: string expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.java_package != null)
                    message.java_package = String(object.java_package);
                if (object.java_outer_classname != null)
                    message.java_outer_classname = String(object.java_outer_classname);
                if (object.java_multiple_files != null)
                    message.java_multiple_files = Boolean(object.java_multiple_files);
                if (object.java_generate_equals_and_hash != null)
                    message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                if (object.java_string_check_utf8 != null)
                    message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                switch (object.optimize_for) {
                case "SPEED":
                case 1:
                    message.optimize_for = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimize_for = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimize_for = 3;
                    break;
                }
                if (object.go_package != null)
                    message.go_package = String(object.go_package);
                if (object.cc_generic_services != null)
                    message.cc_generic_services = Boolean(object.cc_generic_services);
                if (object.java_generic_services != null)
                    message.java_generic_services = Boolean(object.java_generic_services);
                if (object.py_generic_services != null)
                    message.py_generic_services = Boolean(object.py_generic_services);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.cc_enable_arenas != null)
                    message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                if (object.objc_class_prefix != null)
                    message.objc_class_prefix = String(object.objc_class_prefix);
                if (object.csharp_namespace != null)
                    message.csharp_namespace = String(object.csharp_namespace);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.java_package = "";
                    object.java_outer_classname = "";
                    object.optimize_for = options.enums === String ? "SPEED" : 1;
                    object.java_multiple_files = false;
                    object.go_package = "";
                    object.cc_generic_services = false;
                    object.java_generic_services = false;
                    object.py_generic_services = false;
                    object.java_generate_equals_and_hash = false;
                    object.deprecated = false;
                    object.java_string_check_utf8 = false;
                    object.cc_enable_arenas = false;
                    object.objc_class_prefix = "";
                    object.csharp_namespace = "";
                }
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    object.java_package = message.java_package;
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    object.java_outer_classname = message.java_outer_classname;
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    object.java_multiple_files = message.java_multiple_files;
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    object.go_package = message.go_package;
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    object.cc_generic_services = message.cc_generic_services;
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    object.java_generic_services = message.java_generic_services;
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    object.py_generic_services = message.py_generic_services;
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    object.java_string_check_utf8 = message.java_string_check_utf8;
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    object.cc_enable_arenas = message.cc_enable_arenas;
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    object.objc_class_prefix = message.objc_class_prefix;
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    object.csharp_namespace = message.csharp_namespace;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [map_entry] MessageOptions map_entry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
             * @property {Array.<string>|null} [".cosmos.msg.v1.signer"] MessageOptions .cosmos.msg.v1.signer
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpreted_option = [];
                this[".cosmos.msg.v1.signer"] = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions message_set_wire_format.
             * @member {boolean} message_set_wire_format
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.message_set_wire_format = false;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @member {boolean} no_standard_descriptor_accessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_standard_descriptor_accessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions map_entry.
             * @member {boolean} map_entry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.map_entry = false;

            /**
             * MessageOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MessageOptions .cosmos.msg.v1.signer.
             * @member {Array.<string>} .cosmos.msg.v1.signer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".cosmos.msg.v1.signer"] = $util.emptyArray;

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".cosmos.msg.v1.signer"] != null && message[".cosmos.msg.v1.signer"].length)
                    for (let i = 0; i < message[".cosmos.msg.v1.signer"].length; ++i)
                        writer.uint32(/* id 11110000, wireType 2 =*/88880002).string(message[".cosmos.msg.v1.signer"][i]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message_set_wire_format = reader.bool();
                        break;
                    case 2:
                        message.no_standard_descriptor_accessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.map_entry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 11110000:
                        if (!(message[".cosmos.msg.v1.signer"] && message[".cosmos.msg.v1.signer"].length))
                            message[".cosmos.msg.v1.signer"] = [];
                        message[".cosmos.msg.v1.signer"].push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    if (typeof message.message_set_wire_format !== "boolean")
                        return "message_set_wire_format: boolean expected";
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    if (typeof message.no_standard_descriptor_accessor !== "boolean")
                        return "no_standard_descriptor_accessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    if (typeof message.map_entry !== "boolean")
                        return "map_entry: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".cosmos.msg.v1.signer"] != null && message.hasOwnProperty(".cosmos.msg.v1.signer")) {
                    if (!Array.isArray(message[".cosmos.msg.v1.signer"]))
                        return ".cosmos.msg.v1.signer: array expected";
                    for (let i = 0; i < message[".cosmos.msg.v1.signer"].length; ++i)
                        if (!$util.isString(message[".cosmos.msg.v1.signer"][i]))
                            return ".cosmos.msg.v1.signer: string[] expected";
                }
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.message_set_wire_format != null)
                    message.message_set_wire_format = Boolean(object.message_set_wire_format);
                if (object.no_standard_descriptor_accessor != null)
                    message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.map_entry != null)
                    message.map_entry = Boolean(object.map_entry);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".cosmos.msg.v1.signer"]) {
                    if (!Array.isArray(object[".cosmos.msg.v1.signer"]))
                        throw TypeError(".google.protobuf.MessageOptions..cosmos.msg.v1.signer: array expected");
                    message[".cosmos.msg.v1.signer"] = [];
                    for (let i = 0; i < object[".cosmos.msg.v1.signer"].length; ++i)
                        message[".cosmos.msg.v1.signer"][i] = String(object[".cosmos.msg.v1.signer"][i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.uninterpreted_option = [];
                    object[".cosmos.msg.v1.signer"] = [];
                }
                if (options.defaults) {
                    object.message_set_wire_format = false;
                    object.no_standard_descriptor_accessor = false;
                    object.deprecated = false;
                    object.map_entry = false;
                }
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    object.message_set_wire_format = message.message_set_wire_format;
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    object.map_entry = message.map_entry;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".cosmos.msg.v1.signer"] && message[".cosmos.msg.v1.signer"].length) {
                    object[".cosmos.msg.v1.signer"] = [];
                    for (let j = 0; j < message[".cosmos.msg.v1.signer"].length; ++j)
                        object[".cosmos.msg.v1.signer"][j] = message[".cosmos.msg.v1.signer"][j];
                }
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allow_alias] EnumOptions allow_alias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allow_alias.
             * @member {boolean} allow_alias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allow_alias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allow_alias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    if (typeof message.allow_alias !== "boolean")
                        return "allow_alias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allow_alias != null)
                    message.allow_alias = Boolean(object.allow_alias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.allow_alias = false;
                    object.deprecated = false;
                }
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    object.allow_alias = message.allow_alias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                    $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 72295728:
                        message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifier_value] UninterpretedOption identifier_value
             * @property {number|null} [positive_int_value] UninterpretedOption positive_int_value
             * @property {number|null} [negative_int_value] UninterpretedOption negative_int_value
             * @property {number|null} [double_value] UninterpretedOption double_value
             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifier_value.
             * @member {string} identifier_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifier_value = "";

            /**
             * UninterpretedOption positive_int_value.
             * @member {number} positive_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negative_int_value.
             * @member {number} negative_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption double_value.
             * @member {number} double_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.double_value = 0;

            /**
             * UninterpretedOption string_value.
             * @member {Uint8Array} string_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.string_value = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregate_value.
             * @member {string} aggregate_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregate_value = "";

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (let i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifier_value = reader.string();
                        break;
                    case 4:
                        message.positive_int_value = reader.uint64();
                        break;
                    case 5:
                        message.negative_int_value = reader.int64();
                        break;
                    case 6:
                        message.double_value = reader.double();
                        break;
                    case 7:
                        message.string_value = reader.bytes();
                        break;
                    case 8:
                        message.aggregate_value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    if (!$util.isString(message.identifier_value))
                        return "identifier_value: string expected";
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                        return "positive_int_value: integer|Long expected";
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                        return "negative_int_value: integer|Long expected";
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    if (typeof message.double_value !== "number")
                        return "double_value: number expected";
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                        return "string_value: buffer expected";
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    if (!$util.isString(message.aggregate_value))
                        return "aggregate_value: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifier_value != null)
                    message.identifier_value = String(object.identifier_value);
                if (object.positive_int_value != null)
                    if ($util.Long)
                        (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                    else if (typeof object.positive_int_value === "string")
                        message.positive_int_value = parseInt(object.positive_int_value, 10);
                    else if (typeof object.positive_int_value === "number")
                        message.positive_int_value = object.positive_int_value;
                    else if (typeof object.positive_int_value === "object")
                        message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                if (object.negative_int_value != null)
                    if ($util.Long)
                        (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                    else if (typeof object.negative_int_value === "string")
                        message.negative_int_value = parseInt(object.negative_int_value, 10);
                    else if (typeof object.negative_int_value === "number")
                        message.negative_int_value = object.negative_int_value;
                    else if (typeof object.negative_int_value === "object")
                        message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                if (object.double_value != null)
                    message.double_value = Number(object.double_value);
                if (object.string_value != null)
                    if (typeof object.string_value === "string")
                        $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                    else if (object.string_value.length)
                        message.string_value = object.string_value;
                if (object.aggregate_value != null)
                    message.aggregate_value = String(object.aggregate_value);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifier_value = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positive_int_value = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negative_int_value = options.longs === String ? "0" : 0;
                    object.double_value = 0;
                    if (options.bytes === String)
                        object.string_value = "";
                    else {
                        object.string_value = [];
                        if (options.bytes !== Array)
                            object.string_value = $util.newBuffer(object.string_value);
                    }
                    object.aggregate_value = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    object.identifier_value = message.identifier_value;
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (typeof message.positive_int_value === "number")
                        object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                    else
                        object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (typeof message.negative_int_value === "number")
                        object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                    else
                        object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    object.aggregate_value = message.aggregate_value;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} name_part NamePart name_part
                 * @property {boolean} is_extension NamePart is_extension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart name_part.
                 * @member {string} name_part
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.name_part = "";

                /**
                 * NamePart is_extension.
                 * @member {boolean} is_extension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.is_extension = false;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name_part = reader.string();
                            break;
                        case 2:
                            message.is_extension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name_part"))
                        throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                    if (!message.hasOwnProperty("is_extension"))
                        throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name_part))
                        return "name_part: string expected";
                    if (typeof message.is_extension !== "boolean")
                        return "is_extension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.name_part != null)
                        message.name_part = String(object.name_part);
                    if (object.is_extension != null)
                        message.is_extension = Boolean(object.is_extension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name_part = "";
                        object.is_extension = false;
                    }
                    if (message.name_part != null && message.hasOwnProperty("name_part"))
                        object.name_part = message.name_part;
                    if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                        object.is_extension = message.is_extension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (let i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leading_comments] Location leading_comments
                 * @property {string|null} [trailing_comments] Location trailing_comments
                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leading_detached_comments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leading_comments.
                 * @member {string} leading_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_comments = "";

                /**
                 * Location trailing_comments.
                 * @member {string} trailing_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailing_comments = "";

                /**
                 * Location leading_detached_comments.
                 * @member {Array.<string>} leading_detached_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_detached_comments = $util.emptyArray;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                    if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                    if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leading_comments = reader.string();
                            break;
                        case 4:
                            message.trailing_comments = reader.string();
                            break;
                        case 6:
                            if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                message.leading_detached_comments = [];
                            message.leading_detached_comments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        if (!$util.isString(message.leading_comments))
                            return "leading_comments: string expected";
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        if (!$util.isString(message.trailing_comments))
                            return "trailing_comments: string expected";
                    if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                        if (!Array.isArray(message.leading_detached_comments))
                            return "leading_detached_comments: array expected";
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            if (!$util.isString(message.leading_detached_comments[i]))
                                return "leading_detached_comments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leading_comments != null)
                        message.leading_comments = String(object.leading_comments);
                    if (object.trailing_comments != null)
                        message.trailing_comments = String(object.trailing_comments);
                    if (object.leading_detached_comments) {
                        if (!Array.isArray(object.leading_detached_comments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                        message.leading_detached_comments = [];
                        for (let i = 0; i < object.leading_detached_comments.length; ++i)
                            message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leading_detached_comments = [];
                    }
                    if (options.defaults) {
                        object.leading_comments = "";
                        object.trailing_comments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        object.leading_comments = message.leading_comments;
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        object.trailing_comments = message.trailing_comments;
                    if (message.leading_detached_comments && message.leading_detached_comments.length) {
                        object.leading_detached_comments = [];
                        for (let j = 0; j < message.leading_detached_comments.length; ++j)
                            object.leading_detached_comments[j] = message.leading_detached_comments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (let i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [source_file] Annotation source_file
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation source_file.
                 * @member {string} source_file
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.source_file = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.source_file = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        if (!$util.isString(message.source_file))
                            return "source_file: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.source_file != null)
                        message.source_file = String(object.source_file);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.source_file = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        object.source_file = message.source_file;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                let message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {number|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {number} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                let message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        return protobuf;
    })();

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rules != null && message.rules.length)
                    for (let i = 0; i < message.rules.length; ++i)
                        $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.rules && message.rules.length))
                            message.rules = [];
                        message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [body] HttpRule body
             * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additional_bindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule additional_bindings.
             * @member {Array.<google.api.IHttpRule>} additional_bindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additional_bindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                    $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.additional_bindings != null && message.additional_bindings.length)
                    for (let i = 0; i < message.additional_bindings.length; ++i)
                        $root.google.api.HttpRule.encode(message.additional_bindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.get = reader.string();
                        break;
                    case 3:
                        message.put = reader.string();
                        break;
                    case 4:
                        message.post = reader.string();
                        break;
                    case 5:
                        message["delete"] = reader.string();
                        break;
                    case 6:
                        message.patch = reader.string();
                        break;
                    case 8:
                        message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                        break;
                    case 1:
                        message.selector = reader.string();
                        break;
                    case 7:
                        message.body = reader.string();
                        break;
                    case 11:
                        if (!(message.additional_bindings && message.additional_bindings.length))
                            message.additional_bindings = [];
                        message.additional_bindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.additional_bindings != null && message.hasOwnProperty("additional_bindings")) {
                    if (!Array.isArray(message.additional_bindings))
                        return "additional_bindings: array expected";
                    for (let i = 0; i < message.additional_bindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additional_bindings[i]);
                        if (error)
                            return "additional_bindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.body != null)
                    message.body = String(object.body);
                if (object.additional_bindings) {
                    if (!Array.isArray(object.additional_bindings))
                        throw TypeError(".google.api.HttpRule.additional_bindings: array expected");
                    message.additional_bindings = [];
                    for (let i = 0; i < object.additional_bindings.length; ++i) {
                        if (typeof object.additional_bindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additional_bindings: object expected");
                        message.additional_bindings[i] = $root.google.api.HttpRule.fromObject(object.additional_bindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additional_bindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additional_bindings && message.additional_bindings.length) {
                    object.additional_bindings = [];
                    for (let j = 0; j < message.additional_bindings.length; ++j)
                        object.additional_bindings[j] = $root.google.api.HttpRule.toObject(message.additional_bindings[j], options);
                }
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                return writer;
            };

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.kind = reader.string();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    return google;
})();

export { $root as default };
