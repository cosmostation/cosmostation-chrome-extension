/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots.cosmwasm || ($protobuf.roots.cosmwasm = {});

export const cosmwasm = $root.cosmwasm = (() => {

    /**
     * Namespace cosmwasm.
     * @exports cosmwasm
     * @namespace
     */
    const cosmwasm = {};

    cosmwasm.wasm = (function() {

        /**
         * Namespace wasm.
         * @memberof cosmwasm
         * @namespace
         */
        const wasm = {};

        wasm.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof cosmwasm.wasm
             * @namespace
             */
            const v1 = {};

            v1.Msg = (function() {

                /**
                 * Constructs a new Msg service.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Msg#storeCode}.
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @typedef StoreCodeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.MsgStoreCodeResponse} [response] MsgStoreCodeResponse
                 */

                /**
                 * Calls StoreCode.
                 * @function storeCode
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgStoreCode} request MsgStoreCode message or plain object
                 * @param {cosmwasm.wasm.v1.Msg.StoreCodeCallback} callback Node-style callback called with the error, if any, and MsgStoreCodeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.storeCode = function storeCode(request, callback) {
                    return this.rpcCall(storeCode, $root.cosmwasm.wasm.v1.MsgStoreCode, $root.cosmwasm.wasm.v1.MsgStoreCodeResponse, request, callback);
                }, "name", { value: "StoreCode" });

                /**
                 * Calls StoreCode.
                 * @function storeCode
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgStoreCode} request MsgStoreCode message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.MsgStoreCodeResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Msg#instantiateContract}.
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @typedef InstantiateContractCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.MsgInstantiateContractResponse} [response] MsgInstantiateContractResponse
                 */

                /**
                 * Calls InstantiateContract.
                 * @function instantiateContract
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContract} request MsgInstantiateContract message or plain object
                 * @param {cosmwasm.wasm.v1.Msg.InstantiateContractCallback} callback Node-style callback called with the error, if any, and MsgInstantiateContractResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.instantiateContract = function instantiateContract(request, callback) {
                    return this.rpcCall(instantiateContract, $root.cosmwasm.wasm.v1.MsgInstantiateContract, $root.cosmwasm.wasm.v1.MsgInstantiateContractResponse, request, callback);
                }, "name", { value: "InstantiateContract" });

                /**
                 * Calls InstantiateContract.
                 * @function instantiateContract
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContract} request MsgInstantiateContract message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.MsgInstantiateContractResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Msg#executeContract}.
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @typedef ExecuteContractCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.MsgExecuteContractResponse} [response] MsgExecuteContractResponse
                 */

                /**
                 * Calls ExecuteContract.
                 * @function executeContract
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContract} request MsgExecuteContract message or plain object
                 * @param {cosmwasm.wasm.v1.Msg.ExecuteContractCallback} callback Node-style callback called with the error, if any, and MsgExecuteContractResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.executeContract = function executeContract(request, callback) {
                    return this.rpcCall(executeContract, $root.cosmwasm.wasm.v1.MsgExecuteContract, $root.cosmwasm.wasm.v1.MsgExecuteContractResponse, request, callback);
                }, "name", { value: "ExecuteContract" });

                /**
                 * Calls ExecuteContract.
                 * @function executeContract
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContract} request MsgExecuteContract message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.MsgExecuteContractResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Msg#migrateContract}.
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @typedef MigrateContractCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.MsgMigrateContractResponse} [response] MsgMigrateContractResponse
                 */

                /**
                 * Calls MigrateContract.
                 * @function migrateContract
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContract} request MsgMigrateContract message or plain object
                 * @param {cosmwasm.wasm.v1.Msg.MigrateContractCallback} callback Node-style callback called with the error, if any, and MsgMigrateContractResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.migrateContract = function migrateContract(request, callback) {
                    return this.rpcCall(migrateContract, $root.cosmwasm.wasm.v1.MsgMigrateContract, $root.cosmwasm.wasm.v1.MsgMigrateContractResponse, request, callback);
                }, "name", { value: "MigrateContract" });

                /**
                 * Calls MigrateContract.
                 * @function migrateContract
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContract} request MsgMigrateContract message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.MsgMigrateContractResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Msg#updateAdmin}.
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @typedef UpdateAdminCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.MsgUpdateAdminResponse} [response] MsgUpdateAdminResponse
                 */

                /**
                 * Calls UpdateAdmin.
                 * @function updateAdmin
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdmin} request MsgUpdateAdmin message or plain object
                 * @param {cosmwasm.wasm.v1.Msg.UpdateAdminCallback} callback Node-style callback called with the error, if any, and MsgUpdateAdminResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateAdmin = function updateAdmin(request, callback) {
                    return this.rpcCall(updateAdmin, $root.cosmwasm.wasm.v1.MsgUpdateAdmin, $root.cosmwasm.wasm.v1.MsgUpdateAdminResponse, request, callback);
                }, "name", { value: "UpdateAdmin" });

                /**
                 * Calls UpdateAdmin.
                 * @function updateAdmin
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdmin} request MsgUpdateAdmin message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.MsgUpdateAdminResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Msg#clearAdmin}.
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @typedef ClearAdminCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.MsgClearAdminResponse} [response] MsgClearAdminResponse
                 */

                /**
                 * Calls ClearAdmin.
                 * @function clearAdmin
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgClearAdmin} request MsgClearAdmin message or plain object
                 * @param {cosmwasm.wasm.v1.Msg.ClearAdminCallback} callback Node-style callback called with the error, if any, and MsgClearAdminResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.clearAdmin = function clearAdmin(request, callback) {
                    return this.rpcCall(clearAdmin, $root.cosmwasm.wasm.v1.MsgClearAdmin, $root.cosmwasm.wasm.v1.MsgClearAdminResponse, request, callback);
                }, "name", { value: "ClearAdmin" });

                /**
                 * Calls ClearAdmin.
                 * @function clearAdmin
                 * @memberof cosmwasm.wasm.v1.Msg
                 * @instance
                 * @param {cosmwasm.wasm.v1.IMsgClearAdmin} request MsgClearAdmin message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.MsgClearAdminResponse>} Promise
                 * @variation 2
                 */

                return Msg;
            })();

            v1.MsgStoreCode = (function() {

                /**
                 * Properties of a MsgStoreCode.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgStoreCode
                 * @property {string|null} [sender] MsgStoreCode sender
                 * @property {Uint8Array|null} [wasm_byte_code] MsgStoreCode wasm_byte_code
                 * @property {cosmwasm.wasm.v1.IAccessConfig|null} [instantiate_permission] MsgStoreCode instantiate_permission
                 */

                /**
                 * Constructs a new MsgStoreCode.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgStoreCode.
                 * @implements IMsgStoreCode
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgStoreCode=} [properties] Properties to set
                 */
                function MsgStoreCode(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgStoreCode sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.sender = "";

                /**
                 * MsgStoreCode wasm_byte_code.
                 * @member {Uint8Array} wasm_byte_code
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.wasm_byte_code = $util.newBuffer([]);

                /**
                 * MsgStoreCode instantiate_permission.
                 * @member {cosmwasm.wasm.v1.IAccessConfig|null|undefined} instantiate_permission
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @instance
                 */
                MsgStoreCode.prototype.instantiate_permission = null;

                /**
                 * Encodes the specified MsgStoreCode message. Does not implicitly {@link cosmwasm.wasm.v1.MsgStoreCode.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgStoreCode} message MsgStoreCode message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgStoreCode.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                    if (message.wasm_byte_code != null && Object.hasOwnProperty.call(message, "wasm_byte_code"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.wasm_byte_code);
                    if (message.instantiate_permission != null && Object.hasOwnProperty.call(message, "instantiate_permission"))
                        $root.cosmwasm.wasm.v1.AccessConfig.encode(message.instantiate_permission, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgStoreCode message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgStoreCode.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgStoreCode} message MsgStoreCode message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgStoreCode.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgStoreCode message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgStoreCode} MsgStoreCode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgStoreCode.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgStoreCode();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sender = reader.string();
                            break;
                        case 2:
                            message.wasm_byte_code = reader.bytes();
                            break;
                        case 5:
                            message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgStoreCode message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgStoreCode} MsgStoreCode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgStoreCode.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgStoreCode message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgStoreCode.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.wasm_byte_code != null && message.hasOwnProperty("wasm_byte_code"))
                        if (!(message.wasm_byte_code && typeof message.wasm_byte_code.length === "number" || $util.isString(message.wasm_byte_code)))
                            return "wasm_byte_code: buffer expected";
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission")) {
                        let error = $root.cosmwasm.wasm.v1.AccessConfig.verify(message.instantiate_permission);
                        if (error)
                            return "instantiate_permission." + error;
                    }
                    return null;
                };

                /**
                 * Creates a MsgStoreCode message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgStoreCode} MsgStoreCode
                 */
                MsgStoreCode.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgStoreCode)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgStoreCode();
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.wasm_byte_code != null)
                        if (typeof object.wasm_byte_code === "string")
                            $util.base64.decode(object.wasm_byte_code, message.wasm_byte_code = $util.newBuffer($util.base64.length(object.wasm_byte_code)), 0);
                        else if (object.wasm_byte_code.length)
                            message.wasm_byte_code = object.wasm_byte_code;
                    if (object.instantiate_permission != null) {
                        if (typeof object.instantiate_permission !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.MsgStoreCode.instantiate_permission: object expected");
                        message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.fromObject(object.instantiate_permission);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgStoreCode message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgStoreCode} message MsgStoreCode
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgStoreCode.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.sender = "";
                        if (options.bytes === String)
                            object.wasm_byte_code = "";
                        else {
                            object.wasm_byte_code = [];
                            if (options.bytes !== Array)
                                object.wasm_byte_code = $util.newBuffer(object.wasm_byte_code);
                        }
                        object.instantiate_permission = null;
                    }
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.wasm_byte_code != null && message.hasOwnProperty("wasm_byte_code"))
                        object.wasm_byte_code = options.bytes === String ? $util.base64.encode(message.wasm_byte_code, 0, message.wasm_byte_code.length) : options.bytes === Array ? Array.prototype.slice.call(message.wasm_byte_code) : message.wasm_byte_code;
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission"))
                        object.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.toObject(message.instantiate_permission, options);
                    return object;
                };

                /**
                 * Converts this MsgStoreCode to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgStoreCode
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgStoreCode.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgStoreCode;
            })();

            v1.MsgStoreCodeResponse = (function() {

                /**
                 * Properties of a MsgStoreCodeResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgStoreCodeResponse
                 * @property {number|null} [code_id] MsgStoreCodeResponse code_id
                 */

                /**
                 * Constructs a new MsgStoreCodeResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgStoreCodeResponse.
                 * @implements IMsgStoreCodeResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgStoreCodeResponse=} [properties] Properties to set
                 */
                function MsgStoreCodeResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgStoreCodeResponse code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @instance
                 */
                MsgStoreCodeResponse.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified MsgStoreCodeResponse message. Does not implicitly {@link cosmwasm.wasm.v1.MsgStoreCodeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgStoreCodeResponse} message MsgStoreCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgStoreCodeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.code_id);
                    return writer;
                };

                /**
                 * Encodes the specified MsgStoreCodeResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgStoreCodeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgStoreCodeResponse} message MsgStoreCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgStoreCodeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgStoreCodeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgStoreCodeResponse} MsgStoreCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgStoreCodeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgStoreCodeResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgStoreCodeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgStoreCodeResponse} MsgStoreCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgStoreCodeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgStoreCodeResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgStoreCodeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a MsgStoreCodeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgStoreCodeResponse} MsgStoreCodeResponse
                 */
                MsgStoreCodeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgStoreCodeResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgStoreCodeResponse();
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a MsgStoreCodeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgStoreCodeResponse} message MsgStoreCodeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgStoreCodeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    return object;
                };

                /**
                 * Converts this MsgStoreCodeResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgStoreCodeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgStoreCodeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgStoreCodeResponse;
            })();

            v1.MsgInstantiateContract = (function() {

                /**
                 * Properties of a MsgInstantiateContract.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgInstantiateContract
                 * @property {string|null} [sender] MsgInstantiateContract sender
                 * @property {string|null} [admin] MsgInstantiateContract admin
                 * @property {number|null} [code_id] MsgInstantiateContract code_id
                 * @property {string|null} [label] MsgInstantiateContract label
                 * @property {Uint8Array|null} [msg] MsgInstantiateContract msg
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [funds] MsgInstantiateContract funds
                 */

                /**
                 * Constructs a new MsgInstantiateContract.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgInstantiateContract.
                 * @implements IMsgInstantiateContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContract=} [properties] Properties to set
                 */
                function MsgInstantiateContract(properties) {
                    this.funds = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgInstantiateContract sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.sender = "";

                /**
                 * MsgInstantiateContract admin.
                 * @member {string} admin
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.admin = "";

                /**
                 * MsgInstantiateContract code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MsgInstantiateContract label.
                 * @member {string} label
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.label = "";

                /**
                 * MsgInstantiateContract msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.msg = $util.newBuffer([]);

                /**
                 * MsgInstantiateContract funds.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} funds
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @instance
                 */
                MsgInstantiateContract.prototype.funds = $util.emptyArray;

                /**
                 * Encodes the specified MsgInstantiateContract message. Does not implicitly {@link cosmwasm.wasm.v1.MsgInstantiateContract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContract} message MsgInstantiateContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgInstantiateContract.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                    if (message.admin != null && Object.hasOwnProperty.call(message, "admin"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.admin);
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.code_id);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.label);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.msg);
                    if (message.funds != null && message.funds.length)
                        for (let i = 0; i < message.funds.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.funds[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgInstantiateContract message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgInstantiateContract.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContract} message MsgInstantiateContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgInstantiateContract.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgInstantiateContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgInstantiateContract} MsgInstantiateContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgInstantiateContract.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgInstantiateContract();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sender = reader.string();
                            break;
                        case 2:
                            message.admin = reader.string();
                            break;
                        case 3:
                            message.code_id = reader.uint64();
                            break;
                        case 4:
                            message.label = reader.string();
                            break;
                        case 5:
                            message.msg = reader.bytes();
                            break;
                        case 6:
                            if (!(message.funds && message.funds.length))
                                message.funds = [];
                            message.funds.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgInstantiateContract message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgInstantiateContract} MsgInstantiateContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgInstantiateContract.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgInstantiateContract message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgInstantiateContract.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.admin != null && message.hasOwnProperty("admin"))
                        if (!$util.isString(message.admin))
                            return "admin: string expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        if (!$util.isString(message.label))
                            return "label: string expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    if (message.funds != null && message.hasOwnProperty("funds")) {
                        if (!Array.isArray(message.funds))
                            return "funds: array expected";
                        for (let i = 0; i < message.funds.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.funds[i]);
                            if (error)
                                return "funds." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a MsgInstantiateContract message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgInstantiateContract} MsgInstantiateContract
                 */
                MsgInstantiateContract.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgInstantiateContract)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgInstantiateContract();
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.admin != null)
                        message.admin = String(object.admin);
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.label != null)
                        message.label = String(object.label);
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    if (object.funds) {
                        if (!Array.isArray(object.funds))
                            throw TypeError(".cosmwasm.wasm.v1.MsgInstantiateContract.funds: array expected");
                        message.funds = [];
                        for (let i = 0; i < object.funds.length; ++i) {
                            if (typeof object.funds[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.MsgInstantiateContract.funds: object expected");
                            message.funds[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.funds[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgInstantiateContract message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgInstantiateContract} message MsgInstantiateContract
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgInstantiateContract.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.funds = [];
                    if (options.defaults) {
                        object.sender = "";
                        object.admin = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.label = "";
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.admin != null && message.hasOwnProperty("admin"))
                        object.admin = message.admin;
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = message.label;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    if (message.funds && message.funds.length) {
                        object.funds = [];
                        for (let j = 0; j < message.funds.length; ++j)
                            object.funds[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.funds[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this MsgInstantiateContract to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContract
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgInstantiateContract.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgInstantiateContract;
            })();

            v1.MsgInstantiateContractResponse = (function() {

                /**
                 * Properties of a MsgInstantiateContractResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgInstantiateContractResponse
                 * @property {string|null} [address] MsgInstantiateContractResponse address
                 * @property {Uint8Array|null} [data] MsgInstantiateContractResponse data
                 */

                /**
                 * Constructs a new MsgInstantiateContractResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgInstantiateContractResponse.
                 * @implements IMsgInstantiateContractResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContractResponse=} [properties] Properties to set
                 */
                function MsgInstantiateContractResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgInstantiateContractResponse address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @instance
                 */
                MsgInstantiateContractResponse.prototype.address = "";

                /**
                 * MsgInstantiateContractResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @instance
                 */
                MsgInstantiateContractResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgInstantiateContractResponse message. Does not implicitly {@link cosmwasm.wasm.v1.MsgInstantiateContractResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContractResponse} message MsgInstantiateContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgInstantiateContractResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified MsgInstantiateContractResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgInstantiateContractResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgInstantiateContractResponse} message MsgInstantiateContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgInstantiateContractResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgInstantiateContractResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgInstantiateContractResponse} MsgInstantiateContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgInstantiateContractResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgInstantiateContractResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgInstantiateContractResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgInstantiateContractResponse} MsgInstantiateContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgInstantiateContractResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgInstantiateContractResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgInstantiateContractResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a MsgInstantiateContractResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgInstantiateContractResponse} MsgInstantiateContractResponse
                 */
                MsgInstantiateContractResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgInstantiateContractResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgInstantiateContractResponse();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a MsgInstantiateContractResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgInstantiateContractResponse} message MsgInstantiateContractResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgInstantiateContractResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this MsgInstantiateContractResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgInstantiateContractResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgInstantiateContractResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgInstantiateContractResponse;
            })();

            v1.MsgExecuteContract = (function() {

                /**
                 * Properties of a MsgExecuteContract.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgExecuteContract
                 * @property {string|null} [sender] MsgExecuteContract sender
                 * @property {string|null} [contract] MsgExecuteContract contract
                 * @property {Uint8Array|null} [msg] MsgExecuteContract msg
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [funds] MsgExecuteContract funds
                 */

                /**
                 * Constructs a new MsgExecuteContract.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgExecuteContract.
                 * @implements IMsgExecuteContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContract=} [properties] Properties to set
                 */
                function MsgExecuteContract(properties) {
                    this.funds = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgExecuteContract sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.sender = "";

                /**
                 * MsgExecuteContract contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.contract = "";

                /**
                 * MsgExecuteContract msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.msg = $util.newBuffer([]);

                /**
                 * MsgExecuteContract funds.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} funds
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.funds = $util.emptyArray;

                /**
                 * Encodes the specified MsgExecuteContract message. Does not implicitly {@link cosmwasm.wasm.v1.MsgExecuteContract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContract} message MsgExecuteContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContract.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.contract);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.msg);
                    if (message.funds != null && message.funds.length)
                        for (let i = 0; i < message.funds.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.funds[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MsgExecuteContract message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgExecuteContract.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContract} message MsgExecuteContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContract.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgExecuteContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgExecuteContract} MsgExecuteContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContract.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgExecuteContract();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sender = reader.string();
                            break;
                        case 2:
                            message.contract = reader.string();
                            break;
                        case 3:
                            message.msg = reader.bytes();
                            break;
                        case 5:
                            if (!(message.funds && message.funds.length))
                                message.funds = [];
                            message.funds.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgExecuteContract message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgExecuteContract} MsgExecuteContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContract.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgExecuteContract message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgExecuteContract.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    if (message.funds != null && message.hasOwnProperty("funds")) {
                        if (!Array.isArray(message.funds))
                            return "funds: array expected";
                        for (let i = 0; i < message.funds.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.funds[i]);
                            if (error)
                                return "funds." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a MsgExecuteContract message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgExecuteContract} MsgExecuteContract
                 */
                MsgExecuteContract.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgExecuteContract)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgExecuteContract();
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    if (object.funds) {
                        if (!Array.isArray(object.funds))
                            throw TypeError(".cosmwasm.wasm.v1.MsgExecuteContract.funds: array expected");
                        message.funds = [];
                        for (let i = 0; i < object.funds.length; ++i) {
                            if (typeof object.funds[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.MsgExecuteContract.funds: object expected");
                            message.funds[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.funds[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MsgExecuteContract message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgExecuteContract} message MsgExecuteContract
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgExecuteContract.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.funds = [];
                    if (options.defaults) {
                        object.sender = "";
                        object.contract = "";
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    if (message.funds && message.funds.length) {
                        object.funds = [];
                        for (let j = 0; j < message.funds.length; ++j)
                            object.funds[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.funds[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this MsgExecuteContract to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContract
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgExecuteContract.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgExecuteContract;
            })();

            v1.MsgExecuteContractResponse = (function() {

                /**
                 * Properties of a MsgExecuteContractResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgExecuteContractResponse
                 * @property {Uint8Array|null} [data] MsgExecuteContractResponse data
                 */

                /**
                 * Constructs a new MsgExecuteContractResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgExecuteContractResponse.
                 * @implements IMsgExecuteContractResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContractResponse=} [properties] Properties to set
                 */
                function MsgExecuteContractResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgExecuteContractResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @instance
                 */
                MsgExecuteContractResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgExecuteContractResponse message. Does not implicitly {@link cosmwasm.wasm.v1.MsgExecuteContractResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContractResponse} message MsgExecuteContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContractResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified MsgExecuteContractResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgExecuteContractResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgExecuteContractResponse} message MsgExecuteContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContractResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgExecuteContractResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgExecuteContractResponse} MsgExecuteContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContractResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgExecuteContractResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgExecuteContractResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgExecuteContractResponse} MsgExecuteContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContractResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgExecuteContractResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgExecuteContractResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a MsgExecuteContractResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgExecuteContractResponse} MsgExecuteContractResponse
                 */
                MsgExecuteContractResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgExecuteContractResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgExecuteContractResponse();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a MsgExecuteContractResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgExecuteContractResponse} message MsgExecuteContractResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgExecuteContractResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this MsgExecuteContractResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgExecuteContractResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgExecuteContractResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgExecuteContractResponse;
            })();

            v1.MsgMigrateContract = (function() {

                /**
                 * Properties of a MsgMigrateContract.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgMigrateContract
                 * @property {string|null} [sender] MsgMigrateContract sender
                 * @property {string|null} [contract] MsgMigrateContract contract
                 * @property {number|null} [code_id] MsgMigrateContract code_id
                 * @property {Uint8Array|null} [msg] MsgMigrateContract msg
                 */

                /**
                 * Constructs a new MsgMigrateContract.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgMigrateContract.
                 * @implements IMsgMigrateContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContract=} [properties] Properties to set
                 */
                function MsgMigrateContract(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgMigrateContract sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.sender = "";

                /**
                 * MsgMigrateContract contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.contract = "";

                /**
                 * MsgMigrateContract code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MsgMigrateContract msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @instance
                 */
                MsgMigrateContract.prototype.msg = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgMigrateContract message. Does not implicitly {@link cosmwasm.wasm.v1.MsgMigrateContract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContract} message MsgMigrateContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMigrateContract.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.contract);
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.code_id);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.msg);
                    return writer;
                };

                /**
                 * Encodes the specified MsgMigrateContract message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgMigrateContract.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContract} message MsgMigrateContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMigrateContract.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgMigrateContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgMigrateContract} MsgMigrateContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMigrateContract.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgMigrateContract();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sender = reader.string();
                            break;
                        case 2:
                            message.contract = reader.string();
                            break;
                        case 3:
                            message.code_id = reader.uint64();
                            break;
                        case 4:
                            message.msg = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgMigrateContract message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgMigrateContract} MsgMigrateContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMigrateContract.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgMigrateContract message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgMigrateContract.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    return null;
                };

                /**
                 * Creates a MsgMigrateContract message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgMigrateContract} MsgMigrateContract
                 */
                MsgMigrateContract.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgMigrateContract)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgMigrateContract();
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    return message;
                };

                /**
                 * Creates a plain object from a MsgMigrateContract message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgMigrateContract} message MsgMigrateContract
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgMigrateContract.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.sender = "";
                        object.contract = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    return object;
                };

                /**
                 * Converts this MsgMigrateContract to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContract
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgMigrateContract.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgMigrateContract;
            })();

            v1.MsgMigrateContractResponse = (function() {

                /**
                 * Properties of a MsgMigrateContractResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgMigrateContractResponse
                 * @property {Uint8Array|null} [data] MsgMigrateContractResponse data
                 */

                /**
                 * Constructs a new MsgMigrateContractResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgMigrateContractResponse.
                 * @implements IMsgMigrateContractResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContractResponse=} [properties] Properties to set
                 */
                function MsgMigrateContractResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgMigrateContractResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @instance
                 */
                MsgMigrateContractResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgMigrateContractResponse message. Does not implicitly {@link cosmwasm.wasm.v1.MsgMigrateContractResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContractResponse} message MsgMigrateContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMigrateContractResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified MsgMigrateContractResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgMigrateContractResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgMigrateContractResponse} message MsgMigrateContractResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgMigrateContractResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgMigrateContractResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgMigrateContractResponse} MsgMigrateContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMigrateContractResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgMigrateContractResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgMigrateContractResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgMigrateContractResponse} MsgMigrateContractResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgMigrateContractResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgMigrateContractResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgMigrateContractResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a MsgMigrateContractResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgMigrateContractResponse} MsgMigrateContractResponse
                 */
                MsgMigrateContractResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgMigrateContractResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgMigrateContractResponse();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a MsgMigrateContractResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgMigrateContractResponse} message MsgMigrateContractResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgMigrateContractResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this MsgMigrateContractResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgMigrateContractResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgMigrateContractResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgMigrateContractResponse;
            })();

            v1.MsgUpdateAdmin = (function() {

                /**
                 * Properties of a MsgUpdateAdmin.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgUpdateAdmin
                 * @property {string|null} [sender] MsgUpdateAdmin sender
                 * @property {string|null} [new_admin] MsgUpdateAdmin new_admin
                 * @property {string|null} [contract] MsgUpdateAdmin contract
                 */

                /**
                 * Constructs a new MsgUpdateAdmin.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgUpdateAdmin.
                 * @implements IMsgUpdateAdmin
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdmin=} [properties] Properties to set
                 */
                function MsgUpdateAdmin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgUpdateAdmin sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @instance
                 */
                MsgUpdateAdmin.prototype.sender = "";

                /**
                 * MsgUpdateAdmin new_admin.
                 * @member {string} new_admin
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @instance
                 */
                MsgUpdateAdmin.prototype.new_admin = "";

                /**
                 * MsgUpdateAdmin contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @instance
                 */
                MsgUpdateAdmin.prototype.contract = "";

                /**
                 * Encodes the specified MsgUpdateAdmin message. Does not implicitly {@link cosmwasm.wasm.v1.MsgUpdateAdmin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdmin} message MsgUpdateAdmin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateAdmin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                    if (message.new_admin != null && Object.hasOwnProperty.call(message, "new_admin"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.new_admin);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.contract);
                    return writer;
                };

                /**
                 * Encodes the specified MsgUpdateAdmin message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgUpdateAdmin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdmin} message MsgUpdateAdmin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateAdmin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgUpdateAdmin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgUpdateAdmin} MsgUpdateAdmin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateAdmin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgUpdateAdmin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sender = reader.string();
                            break;
                        case 2:
                            message.new_admin = reader.string();
                            break;
                        case 3:
                            message.contract = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgUpdateAdmin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgUpdateAdmin} MsgUpdateAdmin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateAdmin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgUpdateAdmin message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateAdmin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.new_admin != null && message.hasOwnProperty("new_admin"))
                        if (!$util.isString(message.new_admin))
                            return "new_admin: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    return null;
                };

                /**
                 * Creates a MsgUpdateAdmin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgUpdateAdmin} MsgUpdateAdmin
                 */
                MsgUpdateAdmin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgUpdateAdmin)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgUpdateAdmin();
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.new_admin != null)
                        message.new_admin = String(object.new_admin);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    return message;
                };

                /**
                 * Creates a plain object from a MsgUpdateAdmin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgUpdateAdmin} message MsgUpdateAdmin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateAdmin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.sender = "";
                        object.new_admin = "";
                        object.contract = "";
                    }
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.new_admin != null && message.hasOwnProperty("new_admin"))
                        object.new_admin = message.new_admin;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    return object;
                };

                /**
                 * Converts this MsgUpdateAdmin to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdmin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateAdmin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgUpdateAdmin;
            })();

            v1.MsgUpdateAdminResponse = (function() {

                /**
                 * Properties of a MsgUpdateAdminResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgUpdateAdminResponse
                 */

                /**
                 * Constructs a new MsgUpdateAdminResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgUpdateAdminResponse.
                 * @implements IMsgUpdateAdminResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdminResponse=} [properties] Properties to set
                 */
                function MsgUpdateAdminResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgUpdateAdminResponse message. Does not implicitly {@link cosmwasm.wasm.v1.MsgUpdateAdminResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdminResponse} message MsgUpdateAdminResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateAdminResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgUpdateAdminResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgUpdateAdminResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgUpdateAdminResponse} message MsgUpdateAdminResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateAdminResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgUpdateAdminResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgUpdateAdminResponse} MsgUpdateAdminResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateAdminResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgUpdateAdminResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgUpdateAdminResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgUpdateAdminResponse} MsgUpdateAdminResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateAdminResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgUpdateAdminResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateAdminResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgUpdateAdminResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgUpdateAdminResponse} MsgUpdateAdminResponse
                 */
                MsgUpdateAdminResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgUpdateAdminResponse)
                        return object;
                    return new $root.cosmwasm.wasm.v1.MsgUpdateAdminResponse();
                };

                /**
                 * Creates a plain object from a MsgUpdateAdminResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgUpdateAdminResponse} message MsgUpdateAdminResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateAdminResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgUpdateAdminResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgUpdateAdminResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateAdminResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgUpdateAdminResponse;
            })();

            v1.MsgClearAdmin = (function() {

                /**
                 * Properties of a MsgClearAdmin.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgClearAdmin
                 * @property {string|null} [sender] MsgClearAdmin sender
                 * @property {string|null} [contract] MsgClearAdmin contract
                 */

                /**
                 * Constructs a new MsgClearAdmin.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgClearAdmin.
                 * @implements IMsgClearAdmin
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgClearAdmin=} [properties] Properties to set
                 */
                function MsgClearAdmin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgClearAdmin sender.
                 * @member {string} sender
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @instance
                 */
                MsgClearAdmin.prototype.sender = "";

                /**
                 * MsgClearAdmin contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @instance
                 */
                MsgClearAdmin.prototype.contract = "";

                /**
                 * Encodes the specified MsgClearAdmin message. Does not implicitly {@link cosmwasm.wasm.v1.MsgClearAdmin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgClearAdmin} message MsgClearAdmin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgClearAdmin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.contract);
                    return writer;
                };

                /**
                 * Encodes the specified MsgClearAdmin message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgClearAdmin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgClearAdmin} message MsgClearAdmin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgClearAdmin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgClearAdmin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgClearAdmin} MsgClearAdmin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgClearAdmin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgClearAdmin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sender = reader.string();
                            break;
                        case 3:
                            message.contract = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgClearAdmin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgClearAdmin} MsgClearAdmin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgClearAdmin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgClearAdmin message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgClearAdmin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    return null;
                };

                /**
                 * Creates a MsgClearAdmin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgClearAdmin} MsgClearAdmin
                 */
                MsgClearAdmin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgClearAdmin)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgClearAdmin();
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    return message;
                };

                /**
                 * Creates a plain object from a MsgClearAdmin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgClearAdmin} message MsgClearAdmin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgClearAdmin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.sender = "";
                        object.contract = "";
                    }
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    return object;
                };

                /**
                 * Converts this MsgClearAdmin to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgClearAdmin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgClearAdmin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgClearAdmin;
            })();

            v1.MsgClearAdminResponse = (function() {

                /**
                 * Properties of a MsgClearAdminResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgClearAdminResponse
                 */

                /**
                 * Constructs a new MsgClearAdminResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgClearAdminResponse.
                 * @implements IMsgClearAdminResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgClearAdminResponse=} [properties] Properties to set
                 */
                function MsgClearAdminResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified MsgClearAdminResponse message. Does not implicitly {@link cosmwasm.wasm.v1.MsgClearAdminResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgClearAdminResponse} message MsgClearAdminResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgClearAdminResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified MsgClearAdminResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgClearAdminResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgClearAdminResponse} message MsgClearAdminResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgClearAdminResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgClearAdminResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgClearAdminResponse} MsgClearAdminResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgClearAdminResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgClearAdminResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgClearAdminResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgClearAdminResponse} MsgClearAdminResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgClearAdminResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgClearAdminResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgClearAdminResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a MsgClearAdminResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgClearAdminResponse} MsgClearAdminResponse
                 */
                MsgClearAdminResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgClearAdminResponse)
                        return object;
                    return new $root.cosmwasm.wasm.v1.MsgClearAdminResponse();
                };

                /**
                 * Creates a plain object from a MsgClearAdminResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgClearAdminResponse} message MsgClearAdminResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgClearAdminResponse.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this MsgClearAdminResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgClearAdminResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgClearAdminResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgClearAdminResponse;
            })();

            /**
             * AccessType enum.
             * @name cosmwasm.wasm.v1.AccessType
             * @enum {number}
             * @property {number} ACCESS_TYPE_UNSPECIFIED=0 ACCESS_TYPE_UNSPECIFIED value
             * @property {number} ACCESS_TYPE_NOBODY=1 ACCESS_TYPE_NOBODY value
             * @property {number} ACCESS_TYPE_ONLY_ADDRESS=2 ACCESS_TYPE_ONLY_ADDRESS value
             * @property {number} ACCESS_TYPE_EVERYBODY=3 ACCESS_TYPE_EVERYBODY value
             */
            v1.AccessType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ACCESS_TYPE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "ACCESS_TYPE_NOBODY"] = 1;
                values[valuesById[2] = "ACCESS_TYPE_ONLY_ADDRESS"] = 2;
                values[valuesById[3] = "ACCESS_TYPE_EVERYBODY"] = 3;
                return values;
            })();

            v1.AccessTypeParam = (function() {

                /**
                 * Properties of an AccessTypeParam.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IAccessTypeParam
                 * @property {cosmwasm.wasm.v1.AccessType|null} [value] AccessTypeParam value
                 */

                /**
                 * Constructs a new AccessTypeParam.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an AccessTypeParam.
                 * @implements IAccessTypeParam
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IAccessTypeParam=} [properties] Properties to set
                 */
                function AccessTypeParam(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AccessTypeParam value.
                 * @member {cosmwasm.wasm.v1.AccessType} value
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @instance
                 */
                AccessTypeParam.prototype.value = 0;

                /**
                 * Encodes the specified AccessTypeParam message. Does not implicitly {@link cosmwasm.wasm.v1.AccessTypeParam.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @static
                 * @param {cosmwasm.wasm.v1.IAccessTypeParam} message AccessTypeParam message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessTypeParam.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                    return writer;
                };

                /**
                 * Encodes the specified AccessTypeParam message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.AccessTypeParam.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @static
                 * @param {cosmwasm.wasm.v1.IAccessTypeParam} message AccessTypeParam message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessTypeParam.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AccessTypeParam message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.AccessTypeParam} AccessTypeParam
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessTypeParam.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.AccessTypeParam();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AccessTypeParam message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.AccessTypeParam} AccessTypeParam
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessTypeParam.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AccessTypeParam message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AccessTypeParam.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        switch (message.value) {
                        default:
                            return "value: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates an AccessTypeParam message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.AccessTypeParam} AccessTypeParam
                 */
                AccessTypeParam.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.AccessTypeParam)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.AccessTypeParam();
                    switch (object.value) {
                    case "ACCESS_TYPE_UNSPECIFIED":
                    case 0:
                        message.value = 0;
                        break;
                    case "ACCESS_TYPE_NOBODY":
                    case 1:
                        message.value = 1;
                        break;
                    case "ACCESS_TYPE_ONLY_ADDRESS":
                    case 2:
                        message.value = 2;
                        break;
                    case "ACCESS_TYPE_EVERYBODY":
                    case 3:
                        message.value = 3;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AccessTypeParam message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @static
                 * @param {cosmwasm.wasm.v1.AccessTypeParam} message AccessTypeParam
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AccessTypeParam.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.value = options.enums === String ? "ACCESS_TYPE_UNSPECIFIED" : 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.enums === String ? $root.cosmwasm.wasm.v1.AccessType[message.value] : message.value;
                    return object;
                };

                /**
                 * Converts this AccessTypeParam to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.AccessTypeParam
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AccessTypeParam.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AccessTypeParam;
            })();

            v1.AccessConfig = (function() {

                /**
                 * Properties of an AccessConfig.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IAccessConfig
                 * @property {cosmwasm.wasm.v1.AccessType|null} [permission] AccessConfig permission
                 * @property {string|null} [address] AccessConfig address
                 */

                /**
                 * Constructs a new AccessConfig.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an AccessConfig.
                 * @implements IAccessConfig
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IAccessConfig=} [properties] Properties to set
                 */
                function AccessConfig(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AccessConfig permission.
                 * @member {cosmwasm.wasm.v1.AccessType} permission
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @instance
                 */
                AccessConfig.prototype.permission = 0;

                /**
                 * AccessConfig address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @instance
                 */
                AccessConfig.prototype.address = "";

                /**
                 * Encodes the specified AccessConfig message. Does not implicitly {@link cosmwasm.wasm.v1.AccessConfig.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @static
                 * @param {cosmwasm.wasm.v1.IAccessConfig} message AccessConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.permission != null && Object.hasOwnProperty.call(message, "permission"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.permission);
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                    return writer;
                };

                /**
                 * Encodes the specified AccessConfig message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.AccessConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @static
                 * @param {cosmwasm.wasm.v1.IAccessConfig} message AccessConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AccessConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.AccessConfig} AccessConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.AccessConfig();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.permission = reader.int32();
                            break;
                        case 2:
                            message.address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AccessConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.AccessConfig} AccessConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AccessConfig message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AccessConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.permission != null && message.hasOwnProperty("permission"))
                        switch (message.permission) {
                        default:
                            return "permission: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    return null;
                };

                /**
                 * Creates an AccessConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.AccessConfig} AccessConfig
                 */
                AccessConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.AccessConfig)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.AccessConfig();
                    switch (object.permission) {
                    case "ACCESS_TYPE_UNSPECIFIED":
                    case 0:
                        message.permission = 0;
                        break;
                    case "ACCESS_TYPE_NOBODY":
                    case 1:
                        message.permission = 1;
                        break;
                    case "ACCESS_TYPE_ONLY_ADDRESS":
                    case 2:
                        message.permission = 2;
                        break;
                    case "ACCESS_TYPE_EVERYBODY":
                    case 3:
                        message.permission = 3;
                        break;
                    }
                    if (object.address != null)
                        message.address = String(object.address);
                    return message;
                };

                /**
                 * Creates a plain object from an AccessConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @static
                 * @param {cosmwasm.wasm.v1.AccessConfig} message AccessConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AccessConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.permission = options.enums === String ? "ACCESS_TYPE_UNSPECIFIED" : 0;
                        object.address = "";
                    }
                    if (message.permission != null && message.hasOwnProperty("permission"))
                        object.permission = options.enums === String ? $root.cosmwasm.wasm.v1.AccessType[message.permission] : message.permission;
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    return object;
                };

                /**
                 * Converts this AccessConfig to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.AccessConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AccessConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AccessConfig;
            })();

            v1.Params = (function() {

                /**
                 * Properties of a Params.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IParams
                 * @property {cosmwasm.wasm.v1.IAccessConfig|null} [code_upload_access] Params code_upload_access
                 * @property {cosmwasm.wasm.v1.AccessType|null} [instantiate_default_permission] Params instantiate_default_permission
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Params code_upload_access.
                 * @member {cosmwasm.wasm.v1.IAccessConfig|null|undefined} code_upload_access
                 * @memberof cosmwasm.wasm.v1.Params
                 * @instance
                 */
                Params.prototype.code_upload_access = null;

                /**
                 * Params instantiate_default_permission.
                 * @member {cosmwasm.wasm.v1.AccessType} instantiate_default_permission
                 * @memberof cosmwasm.wasm.v1.Params
                 * @instance
                 */
                Params.prototype.instantiate_default_permission = 0;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmwasm.wasm.v1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.Params
                 * @static
                 * @param {cosmwasm.wasm.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_upload_access != null && Object.hasOwnProperty.call(message, "code_upload_access"))
                        $root.cosmwasm.wasm.v1.AccessConfig.encode(message.code_upload_access, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.instantiate_default_permission != null && Object.hasOwnProperty.call(message, "instantiate_default_permission"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.instantiate_default_permission);
                    return writer;
                };

                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.Params
                 * @static
                 * @param {cosmwasm.wasm.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.Params();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_upload_access = $root.cosmwasm.wasm.v1.AccessConfig.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.instantiate_default_permission = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_upload_access != null && message.hasOwnProperty("code_upload_access")) {
                        let error = $root.cosmwasm.wasm.v1.AccessConfig.verify(message.code_upload_access);
                        if (error)
                            return "code_upload_access." + error;
                    }
                    if (message.instantiate_default_permission != null && message.hasOwnProperty("instantiate_default_permission"))
                        switch (message.instantiate_default_permission) {
                        default:
                            return "instantiate_default_permission: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.Params)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.Params();
                    if (object.code_upload_access != null) {
                        if (typeof object.code_upload_access !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.Params.code_upload_access: object expected");
                        message.code_upload_access = $root.cosmwasm.wasm.v1.AccessConfig.fromObject(object.code_upload_access);
                    }
                    switch (object.instantiate_default_permission) {
                    case "ACCESS_TYPE_UNSPECIFIED":
                    case 0:
                        message.instantiate_default_permission = 0;
                        break;
                    case "ACCESS_TYPE_NOBODY":
                    case 1:
                        message.instantiate_default_permission = 1;
                        break;
                    case "ACCESS_TYPE_ONLY_ADDRESS":
                    case 2:
                        message.instantiate_default_permission = 2;
                        break;
                    case "ACCESS_TYPE_EVERYBODY":
                    case 3:
                        message.instantiate_default_permission = 3;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.Params
                 * @static
                 * @param {cosmwasm.wasm.v1.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code_upload_access = null;
                        object.instantiate_default_permission = options.enums === String ? "ACCESS_TYPE_UNSPECIFIED" : 0;
                    }
                    if (message.code_upload_access != null && message.hasOwnProperty("code_upload_access"))
                        object.code_upload_access = $root.cosmwasm.wasm.v1.AccessConfig.toObject(message.code_upload_access, options);
                    if (message.instantiate_default_permission != null && message.hasOwnProperty("instantiate_default_permission"))
                        object.instantiate_default_permission = options.enums === String ? $root.cosmwasm.wasm.v1.AccessType[message.instantiate_default_permission] : message.instantiate_default_permission;
                    return object;
                };

                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Params;
            })();

            v1.CodeInfo = (function() {

                /**
                 * Properties of a CodeInfo.
                 * @memberof cosmwasm.wasm.v1
                 * @interface ICodeInfo
                 * @property {Uint8Array|null} [code_hash] CodeInfo code_hash
                 * @property {string|null} [creator] CodeInfo creator
                 * @property {cosmwasm.wasm.v1.IAccessConfig|null} [instantiate_config] CodeInfo instantiate_config
                 */

                /**
                 * Constructs a new CodeInfo.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a CodeInfo.
                 * @implements ICodeInfo
                 * @constructor
                 * @param {cosmwasm.wasm.v1.ICodeInfo=} [properties] Properties to set
                 */
                function CodeInfo(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CodeInfo code_hash.
                 * @member {Uint8Array} code_hash
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.code_hash = $util.newBuffer([]);

                /**
                 * CodeInfo creator.
                 * @member {string} creator
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.creator = "";

                /**
                 * CodeInfo instantiate_config.
                 * @member {cosmwasm.wasm.v1.IAccessConfig|null|undefined} instantiate_config
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @instance
                 */
                CodeInfo.prototype.instantiate_config = null;

                /**
                 * Encodes the specified CodeInfo message. Does not implicitly {@link cosmwasm.wasm.v1.CodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @static
                 * @param {cosmwasm.wasm.v1.ICodeInfo} message CodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_hash != null && Object.hasOwnProperty.call(message, "code_hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.code_hash);
                    if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.creator);
                    if (message.instantiate_config != null && Object.hasOwnProperty.call(message, "instantiate_config"))
                        $root.cosmwasm.wasm.v1.AccessConfig.encode(message.instantiate_config, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified CodeInfo message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.CodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @static
                 * @param {cosmwasm.wasm.v1.ICodeInfo} message CodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.CodeInfo} CodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.CodeInfo();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_hash = reader.bytes();
                            break;
                        case 2:
                            message.creator = reader.string();
                            break;
                        case 5:
                            message.instantiate_config = $root.cosmwasm.wasm.v1.AccessConfig.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.CodeInfo} CodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CodeInfo message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_hash != null && message.hasOwnProperty("code_hash"))
                        if (!(message.code_hash && typeof message.code_hash.length === "number" || $util.isString(message.code_hash)))
                            return "code_hash: buffer expected";
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        if (!$util.isString(message.creator))
                            return "creator: string expected";
                    if (message.instantiate_config != null && message.hasOwnProperty("instantiate_config")) {
                        let error = $root.cosmwasm.wasm.v1.AccessConfig.verify(message.instantiate_config);
                        if (error)
                            return "instantiate_config." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.CodeInfo} CodeInfo
                 */
                CodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.CodeInfo)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.CodeInfo();
                    if (object.code_hash != null)
                        if (typeof object.code_hash === "string")
                            $util.base64.decode(object.code_hash, message.code_hash = $util.newBuffer($util.base64.length(object.code_hash)), 0);
                        else if (object.code_hash.length)
                            message.code_hash = object.code_hash;
                    if (object.creator != null)
                        message.creator = String(object.creator);
                    if (object.instantiate_config != null) {
                        if (typeof object.instantiate_config !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.CodeInfo.instantiate_config: object expected");
                        message.instantiate_config = $root.cosmwasm.wasm.v1.AccessConfig.fromObject(object.instantiate_config);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @static
                 * @param {cosmwasm.wasm.v1.CodeInfo} message CodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.code_hash = "";
                        else {
                            object.code_hash = [];
                            if (options.bytes !== Array)
                                object.code_hash = $util.newBuffer(object.code_hash);
                        }
                        object.creator = "";
                        object.instantiate_config = null;
                    }
                    if (message.code_hash != null && message.hasOwnProperty("code_hash"))
                        object.code_hash = options.bytes === String ? $util.base64.encode(message.code_hash, 0, message.code_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.code_hash) : message.code_hash;
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        object.creator = message.creator;
                    if (message.instantiate_config != null && message.hasOwnProperty("instantiate_config"))
                        object.instantiate_config = $root.cosmwasm.wasm.v1.AccessConfig.toObject(message.instantiate_config, options);
                    return object;
                };

                /**
                 * Converts this CodeInfo to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.CodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CodeInfo;
            })();

            v1.ContractInfo = (function() {

                /**
                 * Properties of a ContractInfo.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IContractInfo
                 * @property {number|null} [code_id] ContractInfo code_id
                 * @property {string|null} [creator] ContractInfo creator
                 * @property {string|null} [admin] ContractInfo admin
                 * @property {string|null} [label] ContractInfo label
                 * @property {cosmwasm.wasm.v1.IAbsoluteTxPosition|null} [created] ContractInfo created
                 * @property {string|null} [ibc_port_id] ContractInfo ibc_port_id
                 * @property {google.protobuf.IAny|null} [extension] ContractInfo extension
                 */

                /**
                 * Constructs a new ContractInfo.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a ContractInfo.
                 * @implements IContractInfo
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IContractInfo=} [properties] Properties to set
                 */
                function ContractInfo(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ContractInfo code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * ContractInfo creator.
                 * @member {string} creator
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.creator = "";

                /**
                 * ContractInfo admin.
                 * @member {string} admin
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.admin = "";

                /**
                 * ContractInfo label.
                 * @member {string} label
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.label = "";

                /**
                 * ContractInfo created.
                 * @member {cosmwasm.wasm.v1.IAbsoluteTxPosition|null|undefined} created
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.created = null;

                /**
                 * ContractInfo ibc_port_id.
                 * @member {string} ibc_port_id
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.ibc_port_id = "";

                /**
                 * ContractInfo extension.
                 * @member {google.protobuf.IAny|null|undefined} extension
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 */
                ContractInfo.prototype.extension = null;

                /**
                 * Encodes the specified ContractInfo message. Does not implicitly {@link cosmwasm.wasm.v1.ContractInfo.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @static
                 * @param {cosmwasm.wasm.v1.IContractInfo} message ContractInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.code_id);
                    if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.creator);
                    if (message.admin != null && Object.hasOwnProperty.call(message, "admin"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.admin);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.label);
                    if (message.created != null && Object.hasOwnProperty.call(message, "created"))
                        $root.cosmwasm.wasm.v1.AbsoluteTxPosition.encode(message.created, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.ibc_port_id != null && Object.hasOwnProperty.call(message, "ibc_port_id"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.ibc_port_id);
                    if (message.extension != null && Object.hasOwnProperty.call(message, "extension"))
                        $root.google.protobuf.Any.encode(message.extension, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ContractInfo message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.ContractInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @static
                 * @param {cosmwasm.wasm.v1.IContractInfo} message ContractInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ContractInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.ContractInfo} ContractInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.ContractInfo();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_id = reader.uint64();
                            break;
                        case 2:
                            message.creator = reader.string();
                            break;
                        case 3:
                            message.admin = reader.string();
                            break;
                        case 4:
                            message.label = reader.string();
                            break;
                        case 5:
                            message.created = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.ibc_port_id = reader.string();
                            break;
                        case 7:
                            message.extension = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ContractInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.ContractInfo} ContractInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ContractInfo message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ContractInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        if (!$util.isString(message.creator))
                            return "creator: string expected";
                    if (message.admin != null && message.hasOwnProperty("admin"))
                        if (!$util.isString(message.admin))
                            return "admin: string expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        if (!$util.isString(message.label))
                            return "label: string expected";
                    if (message.created != null && message.hasOwnProperty("created")) {
                        let error = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.verify(message.created);
                        if (error)
                            return "created." + error;
                    }
                    if (message.ibc_port_id != null && message.hasOwnProperty("ibc_port_id"))
                        if (!$util.isString(message.ibc_port_id))
                            return "ibc_port_id: string expected";
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        let error = $root.google.protobuf.Any.verify(message.extension);
                        if (error)
                            return "extension." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ContractInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.ContractInfo} ContractInfo
                 */
                ContractInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.ContractInfo)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.ContractInfo();
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.creator != null)
                        message.creator = String(object.creator);
                    if (object.admin != null)
                        message.admin = String(object.admin);
                    if (object.label != null)
                        message.label = String(object.label);
                    if (object.created != null) {
                        if (typeof object.created !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.ContractInfo.created: object expected");
                        message.created = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.fromObject(object.created);
                    }
                    if (object.ibc_port_id != null)
                        message.ibc_port_id = String(object.ibc_port_id);
                    if (object.extension != null) {
                        if (typeof object.extension !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.ContractInfo.extension: object expected");
                        message.extension = $root.google.protobuf.Any.fromObject(object.extension);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ContractInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @static
                 * @param {cosmwasm.wasm.v1.ContractInfo} message ContractInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ContractInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.creator = "";
                        object.admin = "";
                        object.label = "";
                        object.created = null;
                        object.ibc_port_id = "";
                        object.extension = null;
                    }
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        object.creator = message.creator;
                    if (message.admin != null && message.hasOwnProperty("admin"))
                        object.admin = message.admin;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = message.label;
                    if (message.created != null && message.hasOwnProperty("created"))
                        object.created = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.toObject(message.created, options);
                    if (message.ibc_port_id != null && message.hasOwnProperty("ibc_port_id"))
                        object.ibc_port_id = message.ibc_port_id;
                    if (message.extension != null && message.hasOwnProperty("extension"))
                        object.extension = $root.google.protobuf.Any.toObject(message.extension, options);
                    return object;
                };

                /**
                 * Converts this ContractInfo to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.ContractInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ContractInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ContractInfo;
            })();

            /**
             * ContractCodeHistoryOperationType enum.
             * @name cosmwasm.wasm.v1.ContractCodeHistoryOperationType
             * @enum {number}
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED=0 CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED value
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT=1 CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT value
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE=2 CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE value
             * @property {number} CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS=3 CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS value
             */
            v1.ContractCodeHistoryOperationType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT"] = 1;
                values[valuesById[2] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE"] = 2;
                values[valuesById[3] = "CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS"] = 3;
                return values;
            })();

            v1.ContractCodeHistoryEntry = (function() {

                /**
                 * Properties of a ContractCodeHistoryEntry.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IContractCodeHistoryEntry
                 * @property {cosmwasm.wasm.v1.ContractCodeHistoryOperationType|null} [operation] ContractCodeHistoryEntry operation
                 * @property {number|null} [code_id] ContractCodeHistoryEntry code_id
                 * @property {cosmwasm.wasm.v1.IAbsoluteTxPosition|null} [updated] ContractCodeHistoryEntry updated
                 * @property {Uint8Array|null} [msg] ContractCodeHistoryEntry msg
                 */

                /**
                 * Constructs a new ContractCodeHistoryEntry.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a ContractCodeHistoryEntry.
                 * @implements IContractCodeHistoryEntry
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IContractCodeHistoryEntry=} [properties] Properties to set
                 */
                function ContractCodeHistoryEntry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ContractCodeHistoryEntry operation.
                 * @member {cosmwasm.wasm.v1.ContractCodeHistoryOperationType} operation
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.operation = 0;

                /**
                 * ContractCodeHistoryEntry code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * ContractCodeHistoryEntry updated.
                 * @member {cosmwasm.wasm.v1.IAbsoluteTxPosition|null|undefined} updated
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.updated = null;

                /**
                 * ContractCodeHistoryEntry msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @instance
                 */
                ContractCodeHistoryEntry.prototype.msg = $util.newBuffer([]);

                /**
                 * Encodes the specified ContractCodeHistoryEntry message. Does not implicitly {@link cosmwasm.wasm.v1.ContractCodeHistoryEntry.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @static
                 * @param {cosmwasm.wasm.v1.IContractCodeHistoryEntry} message ContractCodeHistoryEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractCodeHistoryEntry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operation != null && Object.hasOwnProperty.call(message, "operation"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.operation);
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.code_id);
                    if (message.updated != null && Object.hasOwnProperty.call(message, "updated"))
                        $root.cosmwasm.wasm.v1.AbsoluteTxPosition.encode(message.updated, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.msg);
                    return writer;
                };

                /**
                 * Encodes the specified ContractCodeHistoryEntry message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.ContractCodeHistoryEntry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @static
                 * @param {cosmwasm.wasm.v1.IContractCodeHistoryEntry} message ContractCodeHistoryEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractCodeHistoryEntry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ContractCodeHistoryEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.ContractCodeHistoryEntry} ContractCodeHistoryEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractCodeHistoryEntry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.ContractCodeHistoryEntry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.operation = reader.int32();
                            break;
                        case 2:
                            message.code_id = reader.uint64();
                            break;
                        case 3:
                            message.updated = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.msg = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ContractCodeHistoryEntry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.ContractCodeHistoryEntry} ContractCodeHistoryEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractCodeHistoryEntry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ContractCodeHistoryEntry message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ContractCodeHistoryEntry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operation != null && message.hasOwnProperty("operation"))
                        switch (message.operation) {
                        default:
                            return "operation: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.updated != null && message.hasOwnProperty("updated")) {
                        let error = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.verify(message.updated);
                        if (error)
                            return "updated." + error;
                    }
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    return null;
                };

                /**
                 * Creates a ContractCodeHistoryEntry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.ContractCodeHistoryEntry} ContractCodeHistoryEntry
                 */
                ContractCodeHistoryEntry.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.ContractCodeHistoryEntry)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.ContractCodeHistoryEntry();
                    switch (object.operation) {
                    case "CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED":
                    case 0:
                        message.operation = 0;
                        break;
                    case "CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT":
                    case 1:
                        message.operation = 1;
                        break;
                    case "CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE":
                    case 2:
                        message.operation = 2;
                        break;
                    case "CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS":
                    case 3:
                        message.operation = 3;
                        break;
                    }
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.updated != null) {
                        if (typeof object.updated !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.ContractCodeHistoryEntry.updated: object expected");
                        message.updated = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.fromObject(object.updated);
                    }
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    return message;
                };

                /**
                 * Creates a plain object from a ContractCodeHistoryEntry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @static
                 * @param {cosmwasm.wasm.v1.ContractCodeHistoryEntry} message ContractCodeHistoryEntry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ContractCodeHistoryEntry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.operation = options.enums === String ? "CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.updated = null;
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.operation != null && message.hasOwnProperty("operation"))
                        object.operation = options.enums === String ? $root.cosmwasm.wasm.v1.ContractCodeHistoryOperationType[message.operation] : message.operation;
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.updated != null && message.hasOwnProperty("updated"))
                        object.updated = $root.cosmwasm.wasm.v1.AbsoluteTxPosition.toObject(message.updated, options);
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    return object;
                };

                /**
                 * Converts this ContractCodeHistoryEntry to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.ContractCodeHistoryEntry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ContractCodeHistoryEntry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ContractCodeHistoryEntry;
            })();

            v1.AbsoluteTxPosition = (function() {

                /**
                 * Properties of an AbsoluteTxPosition.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IAbsoluteTxPosition
                 * @property {number|null} [block_height] AbsoluteTxPosition block_height
                 * @property {number|null} [tx_index] AbsoluteTxPosition tx_index
                 */

                /**
                 * Constructs a new AbsoluteTxPosition.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an AbsoluteTxPosition.
                 * @implements IAbsoluteTxPosition
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IAbsoluteTxPosition=} [properties] Properties to set
                 */
                function AbsoluteTxPosition(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AbsoluteTxPosition block_height.
                 * @member {number} block_height
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @instance
                 */
                AbsoluteTxPosition.prototype.block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * AbsoluteTxPosition tx_index.
                 * @member {number} tx_index
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @instance
                 */
                AbsoluteTxPosition.prototype.tx_index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified AbsoluteTxPosition message. Does not implicitly {@link cosmwasm.wasm.v1.AbsoluteTxPosition.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @static
                 * @param {cosmwasm.wasm.v1.IAbsoluteTxPosition} message AbsoluteTxPosition message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AbsoluteTxPosition.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.block_height != null && Object.hasOwnProperty.call(message, "block_height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.block_height);
                    if (message.tx_index != null && Object.hasOwnProperty.call(message, "tx_index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.tx_index);
                    return writer;
                };

                /**
                 * Encodes the specified AbsoluteTxPosition message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.AbsoluteTxPosition.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @static
                 * @param {cosmwasm.wasm.v1.IAbsoluteTxPosition} message AbsoluteTxPosition message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AbsoluteTxPosition.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AbsoluteTxPosition message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.AbsoluteTxPosition} AbsoluteTxPosition
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AbsoluteTxPosition.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.AbsoluteTxPosition();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.block_height = reader.uint64();
                            break;
                        case 2:
                            message.tx_index = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AbsoluteTxPosition message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.AbsoluteTxPosition} AbsoluteTxPosition
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AbsoluteTxPosition.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AbsoluteTxPosition message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AbsoluteTxPosition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.block_height != null && message.hasOwnProperty("block_height"))
                        if (!$util.isInteger(message.block_height) && !(message.block_height && $util.isInteger(message.block_height.low) && $util.isInteger(message.block_height.high)))
                            return "block_height: integer|Long expected";
                    if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                        if (!$util.isInteger(message.tx_index) && !(message.tx_index && $util.isInteger(message.tx_index.low) && $util.isInteger(message.tx_index.high)))
                            return "tx_index: integer|Long expected";
                    return null;
                };

                /**
                 * Creates an AbsoluteTxPosition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.AbsoluteTxPosition} AbsoluteTxPosition
                 */
                AbsoluteTxPosition.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.AbsoluteTxPosition)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.AbsoluteTxPosition();
                    if (object.block_height != null)
                        if ($util.Long)
                            (message.block_height = $util.Long.fromValue(object.block_height)).unsigned = true;
                        else if (typeof object.block_height === "string")
                            message.block_height = parseInt(object.block_height, 10);
                        else if (typeof object.block_height === "number")
                            message.block_height = object.block_height;
                        else if (typeof object.block_height === "object")
                            message.block_height = new $util.LongBits(object.block_height.low >>> 0, object.block_height.high >>> 0).toNumber(true);
                    if (object.tx_index != null)
                        if ($util.Long)
                            (message.tx_index = $util.Long.fromValue(object.tx_index)).unsigned = true;
                        else if (typeof object.tx_index === "string")
                            message.tx_index = parseInt(object.tx_index, 10);
                        else if (typeof object.tx_index === "number")
                            message.tx_index = object.tx_index;
                        else if (typeof object.tx_index === "object")
                            message.tx_index = new $util.LongBits(object.tx_index.low >>> 0, object.tx_index.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from an AbsoluteTxPosition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @static
                 * @param {cosmwasm.wasm.v1.AbsoluteTxPosition} message AbsoluteTxPosition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AbsoluteTxPosition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.tx_index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.tx_index = options.longs === String ? "0" : 0;
                    }
                    if (message.block_height != null && message.hasOwnProperty("block_height"))
                        if (typeof message.block_height === "number")
                            object.block_height = options.longs === String ? String(message.block_height) : message.block_height;
                        else
                            object.block_height = options.longs === String ? $util.Long.prototype.toString.call(message.block_height) : options.longs === Number ? new $util.LongBits(message.block_height.low >>> 0, message.block_height.high >>> 0).toNumber(true) : message.block_height;
                    if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                        if (typeof message.tx_index === "number")
                            object.tx_index = options.longs === String ? String(message.tx_index) : message.tx_index;
                        else
                            object.tx_index = options.longs === String ? $util.Long.prototype.toString.call(message.tx_index) : options.longs === Number ? new $util.LongBits(message.tx_index.low >>> 0, message.tx_index.high >>> 0).toNumber(true) : message.tx_index;
                    return object;
                };

                /**
                 * Converts this AbsoluteTxPosition to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.AbsoluteTxPosition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AbsoluteTxPosition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AbsoluteTxPosition;
            })();

            v1.Model = (function() {

                /**
                 * Properties of a Model.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IModel
                 * @property {Uint8Array|null} [key] Model key
                 * @property {Uint8Array|null} [value] Model value
                 */

                /**
                 * Constructs a new Model.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a Model.
                 * @implements IModel
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IModel=} [properties] Properties to set
                 */
                function Model(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Model key.
                 * @member {Uint8Array} key
                 * @memberof cosmwasm.wasm.v1.Model
                 * @instance
                 */
                Model.prototype.key = $util.newBuffer([]);

                /**
                 * Model value.
                 * @member {Uint8Array} value
                 * @memberof cosmwasm.wasm.v1.Model
                 * @instance
                 */
                Model.prototype.value = $util.newBuffer([]);

                /**
                 * Encodes the specified Model message. Does not implicitly {@link cosmwasm.wasm.v1.Model.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.Model
                 * @static
                 * @param {cosmwasm.wasm.v1.IModel} message Model message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Model.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };

                /**
                 * Encodes the specified Model message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.Model.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.Model
                 * @static
                 * @param {cosmwasm.wasm.v1.IModel} message Model message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Model.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Model message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.Model
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.Model} Model
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Model.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.Model();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = reader.bytes();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Model message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.Model
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.Model} Model
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Model.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Model message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.Model
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Model.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                            return "key: buffer expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };

                /**
                 * Creates a Model message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.Model
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.Model} Model
                 */
                Model.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.Model)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.Model();
                    if (object.key != null)
                        if (typeof object.key === "string")
                            $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                        else if (object.key.length)
                            message.key = object.key;
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };

                /**
                 * Creates a plain object from a Model message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.Model
                 * @static
                 * @param {cosmwasm.wasm.v1.Model} message Model
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Model.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.key = "";
                        else {
                            object.key = [];
                            if (options.bytes !== Array)
                                object.key = $util.newBuffer(object.key);
                        }
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };

                /**
                 * Converts this Model to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.Model
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Model.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Model;
            })();

            v1.Query = (function() {

                /**
                 * Constructs a new Query service.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#contractInfo}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef ContractInfoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryContractInfoResponse} [response] QueryContractInfoResponse
                 */

                /**
                 * Calls ContractInfo.
                 * @function contractInfo
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoRequest} request QueryContractInfoRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.ContractInfoCallback} callback Node-style callback called with the error, if any, and QueryContractInfoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.contractInfo = function contractInfo(request, callback) {
                    return this.rpcCall(contractInfo, $root.cosmwasm.wasm.v1.QueryContractInfoRequest, $root.cosmwasm.wasm.v1.QueryContractInfoResponse, request, callback);
                }, "name", { value: "ContractInfo" });

                /**
                 * Calls ContractInfo.
                 * @function contractInfo
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoRequest} request QueryContractInfoRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryContractInfoResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#contractHistory}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef ContractHistoryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryContractHistoryResponse} [response] QueryContractHistoryResponse
                 */

                /**
                 * Calls ContractHistory.
                 * @function contractHistory
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryRequest} request QueryContractHistoryRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.ContractHistoryCallback} callback Node-style callback called with the error, if any, and QueryContractHistoryResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.contractHistory = function contractHistory(request, callback) {
                    return this.rpcCall(contractHistory, $root.cosmwasm.wasm.v1.QueryContractHistoryRequest, $root.cosmwasm.wasm.v1.QueryContractHistoryResponse, request, callback);
                }, "name", { value: "ContractHistory" });

                /**
                 * Calls ContractHistory.
                 * @function contractHistory
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryRequest} request QueryContractHistoryRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryContractHistoryResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#contractsByCode}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef ContractsByCodeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryContractsByCodeResponse} [response] QueryContractsByCodeResponse
                 */

                /**
                 * Calls ContractsByCode.
                 * @function contractsByCode
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeRequest} request QueryContractsByCodeRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.ContractsByCodeCallback} callback Node-style callback called with the error, if any, and QueryContractsByCodeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.contractsByCode = function contractsByCode(request, callback) {
                    return this.rpcCall(contractsByCode, $root.cosmwasm.wasm.v1.QueryContractsByCodeRequest, $root.cosmwasm.wasm.v1.QueryContractsByCodeResponse, request, callback);
                }, "name", { value: "ContractsByCode" });

                /**
                 * Calls ContractsByCode.
                 * @function contractsByCode
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeRequest} request QueryContractsByCodeRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryContractsByCodeResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#allContractState}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef AllContractStateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryAllContractStateResponse} [response] QueryAllContractStateResponse
                 */

                /**
                 * Calls AllContractState.
                 * @function allContractState
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateRequest} request QueryAllContractStateRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.AllContractStateCallback} callback Node-style callback called with the error, if any, and QueryAllContractStateResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.allContractState = function allContractState(request, callback) {
                    return this.rpcCall(allContractState, $root.cosmwasm.wasm.v1.QueryAllContractStateRequest, $root.cosmwasm.wasm.v1.QueryAllContractStateResponse, request, callback);
                }, "name", { value: "AllContractState" });

                /**
                 * Calls AllContractState.
                 * @function allContractState
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateRequest} request QueryAllContractStateRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryAllContractStateResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#rawContractState}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef RawContractStateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryRawContractStateResponse} [response] QueryRawContractStateResponse
                 */

                /**
                 * Calls RawContractState.
                 * @function rawContractState
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateRequest} request QueryRawContractStateRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.RawContractStateCallback} callback Node-style callback called with the error, if any, and QueryRawContractStateResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.rawContractState = function rawContractState(request, callback) {
                    return this.rpcCall(rawContractState, $root.cosmwasm.wasm.v1.QueryRawContractStateRequest, $root.cosmwasm.wasm.v1.QueryRawContractStateResponse, request, callback);
                }, "name", { value: "RawContractState" });

                /**
                 * Calls RawContractState.
                 * @function rawContractState
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateRequest} request QueryRawContractStateRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryRawContractStateResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#smartContractState}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef SmartContractStateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QuerySmartContractStateResponse} [response] QuerySmartContractStateResponse
                 */

                /**
                 * Calls SmartContractState.
                 * @function smartContractState
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateRequest} request QuerySmartContractStateRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.SmartContractStateCallback} callback Node-style callback called with the error, if any, and QuerySmartContractStateResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.smartContractState = function smartContractState(request, callback) {
                    return this.rpcCall(smartContractState, $root.cosmwasm.wasm.v1.QuerySmartContractStateRequest, $root.cosmwasm.wasm.v1.QuerySmartContractStateResponse, request, callback);
                }, "name", { value: "SmartContractState" });

                /**
                 * Calls SmartContractState.
                 * @function smartContractState
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateRequest} request QuerySmartContractStateRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QuerySmartContractStateResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#code}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef CodeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryCodeResponse} [response] QueryCodeResponse
                 */

                /**
                 * Calls Code.
                 * @function code
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryCodeRequest} request QueryCodeRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.CodeCallback} callback Node-style callback called with the error, if any, and QueryCodeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.code = function code(request, callback) {
                    return this.rpcCall(code, $root.cosmwasm.wasm.v1.QueryCodeRequest, $root.cosmwasm.wasm.v1.QueryCodeResponse, request, callback);
                }, "name", { value: "Code" });

                /**
                 * Calls Code.
                 * @function code
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryCodeRequest} request QueryCodeRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryCodeResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#codes}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef CodesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryCodesResponse} [response] QueryCodesResponse
                 */

                /**
                 * Calls Codes.
                 * @function codes
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryCodesRequest} request QueryCodesRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.CodesCallback} callback Node-style callback called with the error, if any, and QueryCodesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.codes = function codes(request, callback) {
                    return this.rpcCall(codes, $root.cosmwasm.wasm.v1.QueryCodesRequest, $root.cosmwasm.wasm.v1.QueryCodesResponse, request, callback);
                }, "name", { value: "Codes" });

                /**
                 * Calls Codes.
                 * @function codes
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryCodesRequest} request QueryCodesRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryCodesResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link cosmwasm.wasm.v1.Query#pinnedCodes}.
                 * @memberof cosmwasm.wasm.v1.Query
                 * @typedef PinnedCodesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {cosmwasm.wasm.v1.QueryPinnedCodesResponse} [response] QueryPinnedCodesResponse
                 */

                /**
                 * Calls PinnedCodes.
                 * @function pinnedCodes
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesRequest} request QueryPinnedCodesRequest message or plain object
                 * @param {cosmwasm.wasm.v1.Query.PinnedCodesCallback} callback Node-style callback called with the error, if any, and QueryPinnedCodesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.pinnedCodes = function pinnedCodes(request, callback) {
                    return this.rpcCall(pinnedCodes, $root.cosmwasm.wasm.v1.QueryPinnedCodesRequest, $root.cosmwasm.wasm.v1.QueryPinnedCodesResponse, request, callback);
                }, "name", { value: "PinnedCodes" });

                /**
                 * Calls PinnedCodes.
                 * @function pinnedCodes
                 * @memberof cosmwasm.wasm.v1.Query
                 * @instance
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesRequest} request QueryPinnedCodesRequest message or plain object
                 * @returns {Promise<cosmwasm.wasm.v1.QueryPinnedCodesResponse>} Promise
                 * @variation 2
                 */

                return Query;
            })();

            v1.QueryContractInfoRequest = (function() {

                /**
                 * Properties of a QueryContractInfoRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryContractInfoRequest
                 * @property {string|null} [address] QueryContractInfoRequest address
                 */

                /**
                 * Constructs a new QueryContractInfoRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryContractInfoRequest.
                 * @implements IQueryContractInfoRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoRequest=} [properties] Properties to set
                 */
                function QueryContractInfoRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryContractInfoRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @instance
                 */
                QueryContractInfoRequest.prototype.address = "";

                /**
                 * Encodes the specified QueryContractInfoRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractInfoRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoRequest} message QueryContractInfoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractInfoRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    return writer;
                };

                /**
                 * Encodes the specified QueryContractInfoRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractInfoRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoRequest} message QueryContractInfoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryContractInfoRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryContractInfoRequest} QueryContractInfoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractInfoRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryContractInfoRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryContractInfoRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryContractInfoRequest} QueryContractInfoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryContractInfoRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryContractInfoRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    return null;
                };

                /**
                 * Creates a QueryContractInfoRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryContractInfoRequest} QueryContractInfoRequest
                 */
                QueryContractInfoRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryContractInfoRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryContractInfoRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryContractInfoRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryContractInfoRequest} message QueryContractInfoRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryContractInfoRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    return object;
                };

                /**
                 * Converts this QueryContractInfoRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryContractInfoRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryContractInfoRequest;
            })();

            v1.QueryContractInfoResponse = (function() {

                /**
                 * Properties of a QueryContractInfoResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryContractInfoResponse
                 * @property {string|null} [address] QueryContractInfoResponse address
                 * @property {cosmwasm.wasm.v1.IContractInfo|null} [contract_info] QueryContractInfoResponse contract_info
                 */

                /**
                 * Constructs a new QueryContractInfoResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryContractInfoResponse.
                 * @implements IQueryContractInfoResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoResponse=} [properties] Properties to set
                 */
                function QueryContractInfoResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryContractInfoResponse address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @instance
                 */
                QueryContractInfoResponse.prototype.address = "";

                /**
                 * QueryContractInfoResponse contract_info.
                 * @member {cosmwasm.wasm.v1.IContractInfo|null|undefined} contract_info
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @instance
                 */
                QueryContractInfoResponse.prototype.contract_info = null;

                /**
                 * Encodes the specified QueryContractInfoResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoResponse} message QueryContractInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractInfoResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.contract_info != null && Object.hasOwnProperty.call(message, "contract_info"))
                        $root.cosmwasm.wasm.v1.ContractInfo.encode(message.contract_info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryContractInfoResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractInfoResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractInfoResponse} message QueryContractInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryContractInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryContractInfoResponse} QueryContractInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractInfoResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryContractInfoResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.contract_info = $root.cosmwasm.wasm.v1.ContractInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryContractInfoResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryContractInfoResponse} QueryContractInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryContractInfoResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryContractInfoResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.contract_info != null && message.hasOwnProperty("contract_info")) {
                        let error = $root.cosmwasm.wasm.v1.ContractInfo.verify(message.contract_info);
                        if (error)
                            return "contract_info." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryContractInfoResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryContractInfoResponse} QueryContractInfoResponse
                 */
                QueryContractInfoResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryContractInfoResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryContractInfoResponse();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.contract_info != null) {
                        if (typeof object.contract_info !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryContractInfoResponse.contract_info: object expected");
                        message.contract_info = $root.cosmwasm.wasm.v1.ContractInfo.fromObject(object.contract_info);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryContractInfoResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryContractInfoResponse} message QueryContractInfoResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryContractInfoResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        object.contract_info = null;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.contract_info != null && message.hasOwnProperty("contract_info"))
                        object.contract_info = $root.cosmwasm.wasm.v1.ContractInfo.toObject(message.contract_info, options);
                    return object;
                };

                /**
                 * Converts this QueryContractInfoResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryContractInfoResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryContractInfoResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryContractInfoResponse;
            })();

            v1.QueryContractHistoryRequest = (function() {

                /**
                 * Properties of a QueryContractHistoryRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryContractHistoryRequest
                 * @property {string|null} [address] QueryContractHistoryRequest address
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryContractHistoryRequest pagination
                 */

                /**
                 * Constructs a new QueryContractHistoryRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryContractHistoryRequest.
                 * @implements IQueryContractHistoryRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryRequest=} [properties] Properties to set
                 */
                function QueryContractHistoryRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryContractHistoryRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @instance
                 */
                QueryContractHistoryRequest.prototype.address = "";

                /**
                 * QueryContractHistoryRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @instance
                 */
                QueryContractHistoryRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractHistoryRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractHistoryRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryRequest} message QueryContractHistoryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractHistoryRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryContractHistoryRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractHistoryRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryRequest} message QueryContractHistoryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractHistoryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryContractHistoryRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryContractHistoryRequest} QueryContractHistoryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractHistoryRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryContractHistoryRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryContractHistoryRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryContractHistoryRequest} QueryContractHistoryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractHistoryRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryContractHistoryRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryContractHistoryRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryContractHistoryRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryContractHistoryRequest} QueryContractHistoryRequest
                 */
                QueryContractHistoryRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryContractHistoryRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryContractHistoryRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryContractHistoryRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryContractHistoryRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryContractHistoryRequest} message QueryContractHistoryRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryContractHistoryRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        object.pagination = null;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryContractHistoryRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryContractHistoryRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryContractHistoryRequest;
            })();

            v1.QueryContractHistoryResponse = (function() {

                /**
                 * Properties of a QueryContractHistoryResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryContractHistoryResponse
                 * @property {Array.<cosmwasm.wasm.v1.IContractCodeHistoryEntry>|null} [entries] QueryContractHistoryResponse entries
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryContractHistoryResponse pagination
                 */

                /**
                 * Constructs a new QueryContractHistoryResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryContractHistoryResponse.
                 * @implements IQueryContractHistoryResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryResponse=} [properties] Properties to set
                 */
                function QueryContractHistoryResponse(properties) {
                    this.entries = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryContractHistoryResponse entries.
                 * @member {Array.<cosmwasm.wasm.v1.IContractCodeHistoryEntry>} entries
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @instance
                 */
                QueryContractHistoryResponse.prototype.entries = $util.emptyArray;

                /**
                 * QueryContractHistoryResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @instance
                 */
                QueryContractHistoryResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractHistoryResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractHistoryResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryResponse} message QueryContractHistoryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractHistoryResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.entries != null && message.entries.length)
                        for (let i = 0; i < message.entries.length; ++i)
                            $root.cosmwasm.wasm.v1.ContractCodeHistoryEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryContractHistoryResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractHistoryResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractHistoryResponse} message QueryContractHistoryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractHistoryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryContractHistoryResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryContractHistoryResponse} QueryContractHistoryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractHistoryResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryContractHistoryResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.entries && message.entries.length))
                                message.entries = [];
                            message.entries.push($root.cosmwasm.wasm.v1.ContractCodeHistoryEntry.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryContractHistoryResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryContractHistoryResponse} QueryContractHistoryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractHistoryResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryContractHistoryResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryContractHistoryResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.entries != null && message.hasOwnProperty("entries")) {
                        if (!Array.isArray(message.entries))
                            return "entries: array expected";
                        for (let i = 0; i < message.entries.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.ContractCodeHistoryEntry.verify(message.entries[i]);
                            if (error)
                                return "entries." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryContractHistoryResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryContractHistoryResponse} QueryContractHistoryResponse
                 */
                QueryContractHistoryResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryContractHistoryResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryContractHistoryResponse();
                    if (object.entries) {
                        if (!Array.isArray(object.entries))
                            throw TypeError(".cosmwasm.wasm.v1.QueryContractHistoryResponse.entries: array expected");
                        message.entries = [];
                        for (let i = 0; i < object.entries.length; ++i) {
                            if (typeof object.entries[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.QueryContractHistoryResponse.entries: object expected");
                            message.entries[i] = $root.cosmwasm.wasm.v1.ContractCodeHistoryEntry.fromObject(object.entries[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryContractHistoryResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryContractHistoryResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryContractHistoryResponse} message QueryContractHistoryResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryContractHistoryResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.entries = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.entries && message.entries.length) {
                        object.entries = [];
                        for (let j = 0; j < message.entries.length; ++j)
                            object.entries[j] = $root.cosmwasm.wasm.v1.ContractCodeHistoryEntry.toObject(message.entries[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryContractHistoryResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryContractHistoryResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryContractHistoryResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryContractHistoryResponse;
            })();

            v1.QueryContractsByCodeRequest = (function() {

                /**
                 * Properties of a QueryContractsByCodeRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryContractsByCodeRequest
                 * @property {number|null} [code_id] QueryContractsByCodeRequest code_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryContractsByCodeRequest pagination
                 */

                /**
                 * Constructs a new QueryContractsByCodeRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryContractsByCodeRequest.
                 * @implements IQueryContractsByCodeRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeRequest=} [properties] Properties to set
                 */
                function QueryContractsByCodeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryContractsByCodeRequest code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @instance
                 */
                QueryContractsByCodeRequest.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * QueryContractsByCodeRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @instance
                 */
                QueryContractsByCodeRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractsByCodeRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractsByCodeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeRequest} message QueryContractsByCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractsByCodeRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.code_id);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryContractsByCodeRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractsByCodeRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeRequest} message QueryContractsByCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractsByCodeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryContractsByCodeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryContractsByCodeRequest} QueryContractsByCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractsByCodeRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryContractsByCodeRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_id = reader.uint64();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryContractsByCodeRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryContractsByCodeRequest} QueryContractsByCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractsByCodeRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryContractsByCodeRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryContractsByCodeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryContractsByCodeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryContractsByCodeRequest} QueryContractsByCodeRequest
                 */
                QueryContractsByCodeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryContractsByCodeRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryContractsByCodeRequest();
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryContractsByCodeRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryContractsByCodeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryContractsByCodeRequest} message QueryContractsByCodeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryContractsByCodeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.pagination = null;
                    }
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryContractsByCodeRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryContractsByCodeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryContractsByCodeRequest;
            })();

            v1.QueryContractsByCodeResponse = (function() {

                /**
                 * Properties of a QueryContractsByCodeResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryContractsByCodeResponse
                 * @property {Array.<string>|null} [contracts] QueryContractsByCodeResponse contracts
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryContractsByCodeResponse pagination
                 */

                /**
                 * Constructs a new QueryContractsByCodeResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryContractsByCodeResponse.
                 * @implements IQueryContractsByCodeResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeResponse=} [properties] Properties to set
                 */
                function QueryContractsByCodeResponse(properties) {
                    this.contracts = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryContractsByCodeResponse contracts.
                 * @member {Array.<string>} contracts
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @instance
                 */
                QueryContractsByCodeResponse.prototype.contracts = $util.emptyArray;

                /**
                 * QueryContractsByCodeResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @instance
                 */
                QueryContractsByCodeResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryContractsByCodeResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractsByCodeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeResponse} message QueryContractsByCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractsByCodeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contracts != null && message.contracts.length)
                        for (let i = 0; i < message.contracts.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.contracts[i]);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryContractsByCodeResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryContractsByCodeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryContractsByCodeResponse} message QueryContractsByCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryContractsByCodeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryContractsByCodeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryContractsByCodeResponse} QueryContractsByCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractsByCodeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryContractsByCodeResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.contracts && message.contracts.length))
                                message.contracts = [];
                            message.contracts.push(reader.string());
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryContractsByCodeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryContractsByCodeResponse} QueryContractsByCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryContractsByCodeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryContractsByCodeResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryContractsByCodeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.contracts != null && message.hasOwnProperty("contracts")) {
                        if (!Array.isArray(message.contracts))
                            return "contracts: array expected";
                        for (let i = 0; i < message.contracts.length; ++i)
                            if (!$util.isString(message.contracts[i]))
                                return "contracts: string[] expected";
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryContractsByCodeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryContractsByCodeResponse} QueryContractsByCodeResponse
                 */
                QueryContractsByCodeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryContractsByCodeResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryContractsByCodeResponse();
                    if (object.contracts) {
                        if (!Array.isArray(object.contracts))
                            throw TypeError(".cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts: array expected");
                        message.contracts = [];
                        for (let i = 0; i < object.contracts.length; ++i)
                            message.contracts[i] = String(object.contracts[i]);
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryContractsByCodeResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryContractsByCodeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryContractsByCodeResponse} message QueryContractsByCodeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryContractsByCodeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.contracts = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.contracts && message.contracts.length) {
                        object.contracts = [];
                        for (let j = 0; j < message.contracts.length; ++j)
                            object.contracts[j] = message.contracts[j];
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryContractsByCodeResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryContractsByCodeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryContractsByCodeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryContractsByCodeResponse;
            })();

            v1.QueryAllContractStateRequest = (function() {

                /**
                 * Properties of a QueryAllContractStateRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryAllContractStateRequest
                 * @property {string|null} [address] QueryAllContractStateRequest address
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryAllContractStateRequest pagination
                 */

                /**
                 * Constructs a new QueryAllContractStateRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryAllContractStateRequest.
                 * @implements IQueryAllContractStateRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateRequest=} [properties] Properties to set
                 */
                function QueryAllContractStateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryAllContractStateRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @instance
                 */
                QueryAllContractStateRequest.prototype.address = "";

                /**
                 * QueryAllContractStateRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @instance
                 */
                QueryAllContractStateRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllContractStateRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryAllContractStateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateRequest} message QueryAllContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllContractStateRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryAllContractStateRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryAllContractStateRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateRequest} message QueryAllContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllContractStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryAllContractStateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryAllContractStateRequest} QueryAllContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllContractStateRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryAllContractStateRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryAllContractStateRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryAllContractStateRequest} QueryAllContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllContractStateRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryAllContractStateRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryAllContractStateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryAllContractStateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryAllContractStateRequest} QueryAllContractStateRequest
                 */
                QueryAllContractStateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryAllContractStateRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryAllContractStateRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryAllContractStateRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryAllContractStateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryAllContractStateRequest} message QueryAllContractStateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryAllContractStateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        object.pagination = null;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryAllContractStateRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryAllContractStateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryAllContractStateRequest;
            })();

            v1.QueryAllContractStateResponse = (function() {

                /**
                 * Properties of a QueryAllContractStateResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryAllContractStateResponse
                 * @property {Array.<cosmwasm.wasm.v1.IModel>|null} [models] QueryAllContractStateResponse models
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryAllContractStateResponse pagination
                 */

                /**
                 * Constructs a new QueryAllContractStateResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryAllContractStateResponse.
                 * @implements IQueryAllContractStateResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateResponse=} [properties] Properties to set
                 */
                function QueryAllContractStateResponse(properties) {
                    this.models = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryAllContractStateResponse models.
                 * @member {Array.<cosmwasm.wasm.v1.IModel>} models
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @instance
                 */
                QueryAllContractStateResponse.prototype.models = $util.emptyArray;

                /**
                 * QueryAllContractStateResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @instance
                 */
                QueryAllContractStateResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryAllContractStateResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryAllContractStateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateResponse} message QueryAllContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllContractStateResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.models != null && message.models.length)
                        for (let i = 0; i < message.models.length; ++i)
                            $root.cosmwasm.wasm.v1.Model.encode(message.models[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryAllContractStateResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryAllContractStateResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryAllContractStateResponse} message QueryAllContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryAllContractStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryAllContractStateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryAllContractStateResponse} QueryAllContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllContractStateResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryAllContractStateResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.models && message.models.length))
                                message.models = [];
                            message.models.push($root.cosmwasm.wasm.v1.Model.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryAllContractStateResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryAllContractStateResponse} QueryAllContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryAllContractStateResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryAllContractStateResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryAllContractStateResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.models != null && message.hasOwnProperty("models")) {
                        if (!Array.isArray(message.models))
                            return "models: array expected";
                        for (let i = 0; i < message.models.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.Model.verify(message.models[i]);
                            if (error)
                                return "models." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryAllContractStateResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryAllContractStateResponse} QueryAllContractStateResponse
                 */
                QueryAllContractStateResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryAllContractStateResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryAllContractStateResponse();
                    if (object.models) {
                        if (!Array.isArray(object.models))
                            throw TypeError(".cosmwasm.wasm.v1.QueryAllContractStateResponse.models: array expected");
                        message.models = [];
                        for (let i = 0; i < object.models.length; ++i) {
                            if (typeof object.models[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.QueryAllContractStateResponse.models: object expected");
                            message.models[i] = $root.cosmwasm.wasm.v1.Model.fromObject(object.models[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryAllContractStateResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryAllContractStateResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryAllContractStateResponse} message QueryAllContractStateResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryAllContractStateResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.models = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.models && message.models.length) {
                        object.models = [];
                        for (let j = 0; j < message.models.length; ++j)
                            object.models[j] = $root.cosmwasm.wasm.v1.Model.toObject(message.models[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryAllContractStateResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryAllContractStateResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryAllContractStateResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryAllContractStateResponse;
            })();

            v1.QueryRawContractStateRequest = (function() {

                /**
                 * Properties of a QueryRawContractStateRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryRawContractStateRequest
                 * @property {string|null} [address] QueryRawContractStateRequest address
                 * @property {Uint8Array|null} [query_data] QueryRawContractStateRequest query_data
                 */

                /**
                 * Constructs a new QueryRawContractStateRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryRawContractStateRequest.
                 * @implements IQueryRawContractStateRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateRequest=} [properties] Properties to set
                 */
                function QueryRawContractStateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryRawContractStateRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @instance
                 */
                QueryRawContractStateRequest.prototype.address = "";

                /**
                 * QueryRawContractStateRequest query_data.
                 * @member {Uint8Array} query_data
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @instance
                 */
                QueryRawContractStateRequest.prototype.query_data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryRawContractStateRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryRawContractStateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateRequest} message QueryRawContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRawContractStateRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.query_data != null && Object.hasOwnProperty.call(message, "query_data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.query_data);
                    return writer;
                };

                /**
                 * Encodes the specified QueryRawContractStateRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryRawContractStateRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateRequest} message QueryRawContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRawContractStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryRawContractStateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryRawContractStateRequest} QueryRawContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRawContractStateRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryRawContractStateRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.query_data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryRawContractStateRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryRawContractStateRequest} QueryRawContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRawContractStateRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryRawContractStateRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRawContractStateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.query_data != null && message.hasOwnProperty("query_data"))
                        if (!(message.query_data && typeof message.query_data.length === "number" || $util.isString(message.query_data)))
                            return "query_data: buffer expected";
                    return null;
                };

                /**
                 * Creates a QueryRawContractStateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryRawContractStateRequest} QueryRawContractStateRequest
                 */
                QueryRawContractStateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryRawContractStateRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryRawContractStateRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.query_data != null)
                        if (typeof object.query_data === "string")
                            $util.base64.decode(object.query_data, message.query_data = $util.newBuffer($util.base64.length(object.query_data)), 0);
                        else if (object.query_data.length)
                            message.query_data = object.query_data;
                    return message;
                };

                /**
                 * Creates a plain object from a QueryRawContractStateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryRawContractStateRequest} message QueryRawContractStateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRawContractStateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        if (options.bytes === String)
                            object.query_data = "";
                        else {
                            object.query_data = [];
                            if (options.bytes !== Array)
                                object.query_data = $util.newBuffer(object.query_data);
                        }
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.query_data != null && message.hasOwnProperty("query_data"))
                        object.query_data = options.bytes === String ? $util.base64.encode(message.query_data, 0, message.query_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.query_data) : message.query_data;
                    return object;
                };

                /**
                 * Converts this QueryRawContractStateRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRawContractStateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryRawContractStateRequest;
            })();

            v1.QueryRawContractStateResponse = (function() {

                /**
                 * Properties of a QueryRawContractStateResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryRawContractStateResponse
                 * @property {Uint8Array|null} [data] QueryRawContractStateResponse data
                 */

                /**
                 * Constructs a new QueryRawContractStateResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryRawContractStateResponse.
                 * @implements IQueryRawContractStateResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateResponse=} [properties] Properties to set
                 */
                function QueryRawContractStateResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryRawContractStateResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @instance
                 */
                QueryRawContractStateResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryRawContractStateResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryRawContractStateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateResponse} message QueryRawContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRawContractStateResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified QueryRawContractStateResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryRawContractStateResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryRawContractStateResponse} message QueryRawContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRawContractStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryRawContractStateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryRawContractStateResponse} QueryRawContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRawContractStateResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryRawContractStateResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryRawContractStateResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryRawContractStateResponse} QueryRawContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRawContractStateResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryRawContractStateResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRawContractStateResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a QueryRawContractStateResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryRawContractStateResponse} QueryRawContractStateResponse
                 */
                QueryRawContractStateResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryRawContractStateResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryRawContractStateResponse();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a QueryRawContractStateResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryRawContractStateResponse} message QueryRawContractStateResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRawContractStateResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this QueryRawContractStateResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryRawContractStateResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRawContractStateResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryRawContractStateResponse;
            })();

            v1.QuerySmartContractStateRequest = (function() {

                /**
                 * Properties of a QuerySmartContractStateRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQuerySmartContractStateRequest
                 * @property {string|null} [address] QuerySmartContractStateRequest address
                 * @property {Uint8Array|null} [query_data] QuerySmartContractStateRequest query_data
                 */

                /**
                 * Constructs a new QuerySmartContractStateRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QuerySmartContractStateRequest.
                 * @implements IQuerySmartContractStateRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateRequest=} [properties] Properties to set
                 */
                function QuerySmartContractStateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QuerySmartContractStateRequest address.
                 * @member {string} address
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @instance
                 */
                QuerySmartContractStateRequest.prototype.address = "";

                /**
                 * QuerySmartContractStateRequest query_data.
                 * @member {Uint8Array} query_data
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @instance
                 */
                QuerySmartContractStateRequest.prototype.query_data = $util.newBuffer([]);

                /**
                 * Encodes the specified QuerySmartContractStateRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QuerySmartContractStateRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateRequest} message QuerySmartContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySmartContractStateRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.query_data != null && Object.hasOwnProperty.call(message, "query_data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.query_data);
                    return writer;
                };

                /**
                 * Encodes the specified QuerySmartContractStateRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QuerySmartContractStateRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateRequest} message QuerySmartContractStateRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySmartContractStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QuerySmartContractStateRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QuerySmartContractStateRequest} QuerySmartContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySmartContractStateRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QuerySmartContractStateRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.query_data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QuerySmartContractStateRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QuerySmartContractStateRequest} QuerySmartContractStateRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySmartContractStateRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QuerySmartContractStateRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QuerySmartContractStateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.query_data != null && message.hasOwnProperty("query_data"))
                        if (!(message.query_data && typeof message.query_data.length === "number" || $util.isString(message.query_data)))
                            return "query_data: buffer expected";
                    return null;
                };

                /**
                 * Creates a QuerySmartContractStateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QuerySmartContractStateRequest} QuerySmartContractStateRequest
                 */
                QuerySmartContractStateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QuerySmartContractStateRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QuerySmartContractStateRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.query_data != null)
                        if (typeof object.query_data === "string")
                            $util.base64.decode(object.query_data, message.query_data = $util.newBuffer($util.base64.length(object.query_data)), 0);
                        else if (object.query_data.length)
                            message.query_data = object.query_data;
                    return message;
                };

                /**
                 * Creates a plain object from a QuerySmartContractStateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QuerySmartContractStateRequest} message QuerySmartContractStateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QuerySmartContractStateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.address = "";
                        if (options.bytes === String)
                            object.query_data = "";
                        else {
                            object.query_data = [];
                            if (options.bytes !== Array)
                                object.query_data = $util.newBuffer(object.query_data);
                        }
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.query_data != null && message.hasOwnProperty("query_data"))
                        object.query_data = options.bytes === String ? $util.base64.encode(message.query_data, 0, message.query_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.query_data) : message.query_data;
                    return object;
                };

                /**
                 * Converts this QuerySmartContractStateRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QuerySmartContractStateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QuerySmartContractStateRequest;
            })();

            v1.QuerySmartContractStateResponse = (function() {

                /**
                 * Properties of a QuerySmartContractStateResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQuerySmartContractStateResponse
                 * @property {Uint8Array|null} [data] QuerySmartContractStateResponse data
                 */

                /**
                 * Constructs a new QuerySmartContractStateResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QuerySmartContractStateResponse.
                 * @implements IQuerySmartContractStateResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateResponse=} [properties] Properties to set
                 */
                function QuerySmartContractStateResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QuerySmartContractStateResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @instance
                 */
                QuerySmartContractStateResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QuerySmartContractStateResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QuerySmartContractStateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateResponse} message QuerySmartContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySmartContractStateResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified QuerySmartContractStateResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QuerySmartContractStateResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQuerySmartContractStateResponse} message QuerySmartContractStateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySmartContractStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QuerySmartContractStateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QuerySmartContractStateResponse} QuerySmartContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySmartContractStateResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QuerySmartContractStateResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QuerySmartContractStateResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QuerySmartContractStateResponse} QuerySmartContractStateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySmartContractStateResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QuerySmartContractStateResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QuerySmartContractStateResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a QuerySmartContractStateResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QuerySmartContractStateResponse} QuerySmartContractStateResponse
                 */
                QuerySmartContractStateResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QuerySmartContractStateResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QuerySmartContractStateResponse();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a QuerySmartContractStateResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QuerySmartContractStateResponse} message QuerySmartContractStateResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QuerySmartContractStateResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this QuerySmartContractStateResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QuerySmartContractStateResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QuerySmartContractStateResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QuerySmartContractStateResponse;
            })();

            v1.QueryCodeRequest = (function() {

                /**
                 * Properties of a QueryCodeRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryCodeRequest
                 * @property {number|null} [code_id] QueryCodeRequest code_id
                 */

                /**
                 * Constructs a new QueryCodeRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryCodeRequest.
                 * @implements IQueryCodeRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryCodeRequest=} [properties] Properties to set
                 */
                function QueryCodeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCodeRequest code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @instance
                 */
                QueryCodeRequest.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified QueryCodeRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodeRequest} message QueryCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.code_id);
                    return writer;
                };

                /**
                 * Encodes the specified QueryCodeRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodeRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodeRequest} message QueryCodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCodeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryCodeRequest} QueryCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryCodeRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCodeRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryCodeRequest} QueryCodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCodeRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCodeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a QueryCodeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryCodeRequest} QueryCodeRequest
                 */
                QueryCodeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryCodeRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryCodeRequest();
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCodeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryCodeRequest} message QueryCodeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCodeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    return object;
                };

                /**
                 * Converts this QueryCodeRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryCodeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCodeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCodeRequest;
            })();

            v1.CodeInfoResponse = (function() {

                /**
                 * Properties of a CodeInfoResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface ICodeInfoResponse
                 * @property {number|null} [code_id] CodeInfoResponse code_id
                 * @property {string|null} [creator] CodeInfoResponse creator
                 * @property {Uint8Array|null} [data_hash] CodeInfoResponse data_hash
                 * @property {cosmwasm.wasm.v1.IAccessConfig|null} [instantiate_permission] CodeInfoResponse instantiate_permission
                 */

                /**
                 * Constructs a new CodeInfoResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a CodeInfoResponse.
                 * @implements ICodeInfoResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.ICodeInfoResponse=} [properties] Properties to set
                 */
                function CodeInfoResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CodeInfoResponse code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * CodeInfoResponse creator.
                 * @member {string} creator
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.creator = "";

                /**
                 * CodeInfoResponse data_hash.
                 * @member {Uint8Array} data_hash
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.data_hash = $util.newBuffer([]);

                /**
                 * CodeInfoResponse instantiate_permission.
                 * @member {cosmwasm.wasm.v1.IAccessConfig|null|undefined} instantiate_permission
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @instance
                 */
                CodeInfoResponse.prototype.instantiate_permission = null;

                /**
                 * Encodes the specified CodeInfoResponse message. Does not implicitly {@link cosmwasm.wasm.v1.CodeInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.ICodeInfoResponse} message CodeInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CodeInfoResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.code_id);
                    if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.creator);
                    if (message.data_hash != null && Object.hasOwnProperty.call(message, "data_hash"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data_hash);
                    if (message.instantiate_permission != null && Object.hasOwnProperty.call(message, "instantiate_permission"))
                        $root.cosmwasm.wasm.v1.AccessConfig.encode(message.instantiate_permission, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified CodeInfoResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.CodeInfoResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.ICodeInfoResponse} message CodeInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CodeInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CodeInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.CodeInfoResponse} CodeInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CodeInfoResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.CodeInfoResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_id = reader.uint64();
                            break;
                        case 2:
                            message.creator = reader.string();
                            break;
                        case 3:
                            message.data_hash = reader.bytes();
                            break;
                        case 6:
                            message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CodeInfoResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.CodeInfoResponse} CodeInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CodeInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CodeInfoResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CodeInfoResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        if (!$util.isString(message.creator))
                            return "creator: string expected";
                    if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                        if (!(message.data_hash && typeof message.data_hash.length === "number" || $util.isString(message.data_hash)))
                            return "data_hash: buffer expected";
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission")) {
                        let error = $root.cosmwasm.wasm.v1.AccessConfig.verify(message.instantiate_permission);
                        if (error)
                            return "instantiate_permission." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CodeInfoResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.CodeInfoResponse} CodeInfoResponse
                 */
                CodeInfoResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.CodeInfoResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.CodeInfoResponse();
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.creator != null)
                        message.creator = String(object.creator);
                    if (object.data_hash != null)
                        if (typeof object.data_hash === "string")
                            $util.base64.decode(object.data_hash, message.data_hash = $util.newBuffer($util.base64.length(object.data_hash)), 0);
                        else if (object.data_hash.length)
                            message.data_hash = object.data_hash;
                    if (object.instantiate_permission != null) {
                        if (typeof object.instantiate_permission !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.CodeInfoResponse.instantiate_permission: object expected");
                        message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.fromObject(object.instantiate_permission);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CodeInfoResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.CodeInfoResponse} message CodeInfoResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CodeInfoResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.creator = "";
                        if (options.bytes === String)
                            object.data_hash = "";
                        else {
                            object.data_hash = [];
                            if (options.bytes !== Array)
                                object.data_hash = $util.newBuffer(object.data_hash);
                        }
                        object.instantiate_permission = null;
                    }
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        object.creator = message.creator;
                    if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                        object.data_hash = options.bytes === String ? $util.base64.encode(message.data_hash, 0, message.data_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.data_hash) : message.data_hash;
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission"))
                        object.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.toObject(message.instantiate_permission, options);
                    return object;
                };

                /**
                 * Converts this CodeInfoResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.CodeInfoResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CodeInfoResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CodeInfoResponse;
            })();

            v1.QueryCodeResponse = (function() {

                /**
                 * Properties of a QueryCodeResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryCodeResponse
                 * @property {cosmwasm.wasm.v1.ICodeInfoResponse|null} [code_info] QueryCodeResponse code_info
                 * @property {Uint8Array|null} [data] QueryCodeResponse data
                 */

                /**
                 * Constructs a new QueryCodeResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryCodeResponse.
                 * @implements IQueryCodeResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryCodeResponse=} [properties] Properties to set
                 */
                function QueryCodeResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCodeResponse code_info.
                 * @member {cosmwasm.wasm.v1.ICodeInfoResponse|null|undefined} code_info
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @instance
                 */
                QueryCodeResponse.prototype.code_info = null;

                /**
                 * QueryCodeResponse data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @instance
                 */
                QueryCodeResponse.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified QueryCodeResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodeResponse} message QueryCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_info != null && Object.hasOwnProperty.call(message, "code_info"))
                        $root.cosmwasm.wasm.v1.CodeInfoResponse.encode(message.code_info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified QueryCodeResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodeResponse} message QueryCodeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCodeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryCodeResponse} QueryCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryCodeResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_info = $root.cosmwasm.wasm.v1.CodeInfoResponse.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCodeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryCodeResponse} QueryCodeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCodeResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCodeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_info != null && message.hasOwnProperty("code_info")) {
                        let error = $root.cosmwasm.wasm.v1.CodeInfoResponse.verify(message.code_info);
                        if (error)
                            return "code_info." + error;
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a QueryCodeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryCodeResponse} QueryCodeResponse
                 */
                QueryCodeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryCodeResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryCodeResponse();
                    if (object.code_info != null) {
                        if (typeof object.code_info !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryCodeResponse.code_info: object expected");
                        message.code_info = $root.cosmwasm.wasm.v1.CodeInfoResponse.fromObject(object.code_info);
                    }
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCodeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryCodeResponse} message QueryCodeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCodeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code_info = null;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.code_info != null && message.hasOwnProperty("code_info"))
                        object.code_info = $root.cosmwasm.wasm.v1.CodeInfoResponse.toObject(message.code_info, options);
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this QueryCodeResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryCodeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCodeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCodeResponse;
            })();

            v1.QueryCodesRequest = (function() {

                /**
                 * Properties of a QueryCodesRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryCodesRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryCodesRequest pagination
                 */

                /**
                 * Constructs a new QueryCodesRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryCodesRequest.
                 * @implements IQueryCodesRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryCodesRequest=} [properties] Properties to set
                 */
                function QueryCodesRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCodesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @instance
                 */
                QueryCodesRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryCodesRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodesRequest} message QueryCodesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryCodesRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodesRequest} message QueryCodesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCodesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryCodesRequest} QueryCodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryCodesRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCodesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryCodesRequest} QueryCodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCodesRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCodesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryCodesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryCodesRequest} QueryCodesRequest
                 */
                QueryCodesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryCodesRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryCodesRequest();
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryCodesRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCodesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryCodesRequest} message QueryCodesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCodesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.pagination = null;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryCodesRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryCodesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCodesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCodesRequest;
            })();

            v1.QueryCodesResponse = (function() {

                /**
                 * Properties of a QueryCodesResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryCodesResponse
                 * @property {Array.<cosmwasm.wasm.v1.ICodeInfoResponse>|null} [code_infos] QueryCodesResponse code_infos
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryCodesResponse pagination
                 */

                /**
                 * Constructs a new QueryCodesResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryCodesResponse.
                 * @implements IQueryCodesResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryCodesResponse=} [properties] Properties to set
                 */
                function QueryCodesResponse(properties) {
                    this.code_infos = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryCodesResponse code_infos.
                 * @member {Array.<cosmwasm.wasm.v1.ICodeInfoResponse>} code_infos
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @instance
                 */
                QueryCodesResponse.prototype.code_infos = $util.emptyArray;

                /**
                 * QueryCodesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @instance
                 */
                QueryCodesResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryCodesResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodesResponse} message QueryCodesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_infos != null && message.code_infos.length)
                        for (let i = 0; i < message.code_infos.length; ++i)
                            $root.cosmwasm.wasm.v1.CodeInfoResponse.encode(message.code_infos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryCodesResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryCodesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryCodesResponse} message QueryCodesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCodesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryCodesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryCodesResponse} QueryCodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryCodesResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.code_infos && message.code_infos.length))
                                message.code_infos = [];
                            message.code_infos.push($root.cosmwasm.wasm.v1.CodeInfoResponse.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryCodesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryCodesResponse} QueryCodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCodesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryCodesResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCodesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_infos != null && message.hasOwnProperty("code_infos")) {
                        if (!Array.isArray(message.code_infos))
                            return "code_infos: array expected";
                        for (let i = 0; i < message.code_infos.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.CodeInfoResponse.verify(message.code_infos[i]);
                            if (error)
                                return "code_infos." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryCodesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryCodesResponse} QueryCodesResponse
                 */
                QueryCodesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryCodesResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryCodesResponse();
                    if (object.code_infos) {
                        if (!Array.isArray(object.code_infos))
                            throw TypeError(".cosmwasm.wasm.v1.QueryCodesResponse.code_infos: array expected");
                        message.code_infos = [];
                        for (let i = 0; i < object.code_infos.length; ++i) {
                            if (typeof object.code_infos[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.QueryCodesResponse.code_infos: object expected");
                            message.code_infos[i] = $root.cosmwasm.wasm.v1.CodeInfoResponse.fromObject(object.code_infos[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryCodesResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryCodesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryCodesResponse} message QueryCodesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCodesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.code_infos = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.code_infos && message.code_infos.length) {
                        object.code_infos = [];
                        for (let j = 0; j < message.code_infos.length; ++j)
                            object.code_infos[j] = $root.cosmwasm.wasm.v1.CodeInfoResponse.toObject(message.code_infos[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryCodesResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryCodesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCodesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryCodesResponse;
            })();

            v1.QueryPinnedCodesRequest = (function() {

                /**
                 * Properties of a QueryPinnedCodesRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryPinnedCodesRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPinnedCodesRequest pagination
                 */

                /**
                 * Constructs a new QueryPinnedCodesRequest.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryPinnedCodesRequest.
                 * @implements IQueryPinnedCodesRequest
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesRequest=} [properties] Properties to set
                 */
                function QueryPinnedCodesRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPinnedCodesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @instance
                 */
                QueryPinnedCodesRequest.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPinnedCodesRequest message. Does not implicitly {@link cosmwasm.wasm.v1.QueryPinnedCodesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesRequest} message QueryPinnedCodesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPinnedCodesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPinnedCodesRequest message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryPinnedCodesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesRequest} message QueryPinnedCodesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPinnedCodesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPinnedCodesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryPinnedCodesRequest} QueryPinnedCodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPinnedCodesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryPinnedCodesRequest();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPinnedCodesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryPinnedCodesRequest} QueryPinnedCodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPinnedCodesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPinnedCodesRequest message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPinnedCodesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPinnedCodesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryPinnedCodesRequest} QueryPinnedCodesRequest
                 */
                QueryPinnedCodesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryPinnedCodesRequest)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryPinnedCodesRequest();
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryPinnedCodesRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPinnedCodesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryPinnedCodesRequest} message QueryPinnedCodesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPinnedCodesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.pagination = null;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPinnedCodesRequest to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPinnedCodesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPinnedCodesRequest;
            })();

            v1.QueryPinnedCodesResponse = (function() {

                /**
                 * Properties of a QueryPinnedCodesResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IQueryPinnedCodesResponse
                 * @property {Array.<number>|null} [code_ids] QueryPinnedCodesResponse code_ids
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPinnedCodesResponse pagination
                 */

                /**
                 * Constructs a new QueryPinnedCodesResponse.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a QueryPinnedCodesResponse.
                 * @implements IQueryPinnedCodesResponse
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesResponse=} [properties] Properties to set
                 */
                function QueryPinnedCodesResponse(properties) {
                    this.code_ids = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPinnedCodesResponse code_ids.
                 * @member {Array.<number>} code_ids
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @instance
                 */
                QueryPinnedCodesResponse.prototype.code_ids = $util.emptyArray;

                /**
                 * QueryPinnedCodesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @instance
                 */
                QueryPinnedCodesResponse.prototype.pagination = null;

                /**
                 * Encodes the specified QueryPinnedCodesResponse message. Does not implicitly {@link cosmwasm.wasm.v1.QueryPinnedCodesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesResponse} message QueryPinnedCodesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPinnedCodesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_ids != null && message.code_ids.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.code_ids.length; ++i)
                            writer.uint64(message.code_ids[i]);
                        writer.ldelim();
                    }
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified QueryPinnedCodesResponse message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.QueryPinnedCodesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.IQueryPinnedCodesResponse} message QueryPinnedCodesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPinnedCodesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a QueryPinnedCodesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.QueryPinnedCodesResponse} QueryPinnedCodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPinnedCodesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.QueryPinnedCodesResponse();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.code_ids && message.code_ids.length))
                                message.code_ids = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.code_ids.push(reader.uint64());
                            } else
                                message.code_ids.push(reader.uint64());
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a QueryPinnedCodesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.QueryPinnedCodesResponse} QueryPinnedCodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPinnedCodesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a QueryPinnedCodesResponse message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPinnedCodesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_ids != null && message.hasOwnProperty("code_ids")) {
                        if (!Array.isArray(message.code_ids))
                            return "code_ids: array expected";
                        for (let i = 0; i < message.code_ids.length; ++i)
                            if (!$util.isInteger(message.code_ids[i]) && !(message.code_ids[i] && $util.isInteger(message.code_ids[i].low) && $util.isInteger(message.code_ids[i].high)))
                                return "code_ids: integer|Long[] expected";
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };

                /**
                 * Creates a QueryPinnedCodesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.QueryPinnedCodesResponse} QueryPinnedCodesResponse
                 */
                QueryPinnedCodesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.QueryPinnedCodesResponse)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.QueryPinnedCodesResponse();
                    if (object.code_ids) {
                        if (!Array.isArray(object.code_ids))
                            throw TypeError(".cosmwasm.wasm.v1.QueryPinnedCodesResponse.code_ids: array expected");
                        message.code_ids = [];
                        for (let i = 0; i < object.code_ids.length; ++i)
                            if ($util.Long)
                                (message.code_ids[i] = $util.Long.fromValue(object.code_ids[i])).unsigned = true;
                            else if (typeof object.code_ids[i] === "string")
                                message.code_ids[i] = parseInt(object.code_ids[i], 10);
                            else if (typeof object.code_ids[i] === "number")
                                message.code_ids[i] = object.code_ids[i];
                            else if (typeof object.code_ids[i] === "object")
                                message.code_ids[i] = new $util.LongBits(object.code_ids[i].low >>> 0, object.code_ids[i].high >>> 0).toNumber(true);
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.QueryPinnedCodesResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a QueryPinnedCodesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @static
                 * @param {cosmwasm.wasm.v1.QueryPinnedCodesResponse} message QueryPinnedCodesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPinnedCodesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.code_ids = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.code_ids && message.code_ids.length) {
                        object.code_ids = [];
                        for (let j = 0; j < message.code_ids.length; ++j)
                            if (typeof message.code_ids[j] === "number")
                                object.code_ids[j] = options.longs === String ? String(message.code_ids[j]) : message.code_ids[j];
                            else
                                object.code_ids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.code_ids[j]) : options.longs === Number ? new $util.LongBits(message.code_ids[j].low >>> 0, message.code_ids[j].high >>> 0).toNumber(true) : message.code_ids[j];
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };

                /**
                 * Converts this QueryPinnedCodesResponse to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.QueryPinnedCodesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPinnedCodesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return QueryPinnedCodesResponse;
            })();

            v1.GenesisState = (function() {

                /**
                 * Properties of a GenesisState.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IGenesisState
                 * @property {cosmwasm.wasm.v1.IParams|null} [params] GenesisState params
                 * @property {Array.<cosmwasm.wasm.v1.ICode>|null} [codes] GenesisState codes
                 * @property {Array.<cosmwasm.wasm.v1.IContract>|null} [contracts] GenesisState contracts
                 * @property {Array.<cosmwasm.wasm.v1.ISequence>|null} [sequences] GenesisState sequences
                 * @property {Array.<cosmwasm.wasm.v1.GenesisState.IGenMsgs>|null} [gen_msgs] GenesisState gen_msgs
                 */

                /**
                 * Constructs a new GenesisState.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.codes = [];
                    this.contracts = [];
                    this.sequences = [];
                    this.gen_msgs = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GenesisState params.
                 * @member {cosmwasm.wasm.v1.IParams|null|undefined} params
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;

                /**
                 * GenesisState codes.
                 * @member {Array.<cosmwasm.wasm.v1.ICode>} codes
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.codes = $util.emptyArray;

                /**
                 * GenesisState contracts.
                 * @member {Array.<cosmwasm.wasm.v1.IContract>} contracts
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.contracts = $util.emptyArray;

                /**
                 * GenesisState sequences.
                 * @member {Array.<cosmwasm.wasm.v1.ISequence>} sequences
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.sequences = $util.emptyArray;

                /**
                 * GenesisState gen_msgs.
                 * @member {Array.<cosmwasm.wasm.v1.GenesisState.IGenMsgs>} gen_msgs
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.gen_msgs = $util.emptyArray;

                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link cosmwasm.wasm.v1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @static
                 * @param {cosmwasm.wasm.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.cosmwasm.wasm.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.codes != null && message.codes.length)
                        for (let i = 0; i < message.codes.length; ++i)
                            $root.cosmwasm.wasm.v1.Code.encode(message.codes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.contracts != null && message.contracts.length)
                        for (let i = 0; i < message.contracts.length; ++i)
                            $root.cosmwasm.wasm.v1.Contract.encode(message.contracts[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.sequences != null && message.sequences.length)
                        for (let i = 0; i < message.sequences.length; ++i)
                            $root.cosmwasm.wasm.v1.Sequence.encode(message.sequences[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.gen_msgs != null && message.gen_msgs.length)
                        for (let i = 0; i < message.gen_msgs.length; ++i)
                            $root.cosmwasm.wasm.v1.GenesisState.GenMsgs.encode(message.gen_msgs[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @static
                 * @param {cosmwasm.wasm.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.GenesisState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.cosmwasm.wasm.v1.Params.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.codes && message.codes.length))
                                message.codes = [];
                            message.codes.push($root.cosmwasm.wasm.v1.Code.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.contracts && message.contracts.length))
                                message.contracts = [];
                            message.contracts.push($root.cosmwasm.wasm.v1.Contract.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.sequences && message.sequences.length))
                                message.sequences = [];
                            message.sequences.push($root.cosmwasm.wasm.v1.Sequence.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.gen_msgs && message.gen_msgs.length))
                                message.gen_msgs = [];
                            message.gen_msgs.push($root.cosmwasm.wasm.v1.GenesisState.GenMsgs.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        let error = $root.cosmwasm.wasm.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.codes != null && message.hasOwnProperty("codes")) {
                        if (!Array.isArray(message.codes))
                            return "codes: array expected";
                        for (let i = 0; i < message.codes.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.Code.verify(message.codes[i]);
                            if (error)
                                return "codes." + error;
                        }
                    }
                    if (message.contracts != null && message.hasOwnProperty("contracts")) {
                        if (!Array.isArray(message.contracts))
                            return "contracts: array expected";
                        for (let i = 0; i < message.contracts.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.Contract.verify(message.contracts[i]);
                            if (error)
                                return "contracts." + error;
                        }
                    }
                    if (message.sequences != null && message.hasOwnProperty("sequences")) {
                        if (!Array.isArray(message.sequences))
                            return "sequences: array expected";
                        for (let i = 0; i < message.sequences.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.Sequence.verify(message.sequences[i]);
                            if (error)
                                return "sequences." + error;
                        }
                    }
                    if (message.gen_msgs != null && message.hasOwnProperty("gen_msgs")) {
                        if (!Array.isArray(message.gen_msgs))
                            return "gen_msgs: array expected";
                        for (let i = 0; i < message.gen_msgs.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.GenesisState.GenMsgs.verify(message.gen_msgs[i]);
                            if (error)
                                return "gen_msgs." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.GenesisState)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.GenesisState.params: object expected");
                        message.params = $root.cosmwasm.wasm.v1.Params.fromObject(object.params);
                    }
                    if (object.codes) {
                        if (!Array.isArray(object.codes))
                            throw TypeError(".cosmwasm.wasm.v1.GenesisState.codes: array expected");
                        message.codes = [];
                        for (let i = 0; i < object.codes.length; ++i) {
                            if (typeof object.codes[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.GenesisState.codes: object expected");
                            message.codes[i] = $root.cosmwasm.wasm.v1.Code.fromObject(object.codes[i]);
                        }
                    }
                    if (object.contracts) {
                        if (!Array.isArray(object.contracts))
                            throw TypeError(".cosmwasm.wasm.v1.GenesisState.contracts: array expected");
                        message.contracts = [];
                        for (let i = 0; i < object.contracts.length; ++i) {
                            if (typeof object.contracts[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.GenesisState.contracts: object expected");
                            message.contracts[i] = $root.cosmwasm.wasm.v1.Contract.fromObject(object.contracts[i]);
                        }
                    }
                    if (object.sequences) {
                        if (!Array.isArray(object.sequences))
                            throw TypeError(".cosmwasm.wasm.v1.GenesisState.sequences: array expected");
                        message.sequences = [];
                        for (let i = 0; i < object.sequences.length; ++i) {
                            if (typeof object.sequences[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.GenesisState.sequences: object expected");
                            message.sequences[i] = $root.cosmwasm.wasm.v1.Sequence.fromObject(object.sequences[i]);
                        }
                    }
                    if (object.gen_msgs) {
                        if (!Array.isArray(object.gen_msgs))
                            throw TypeError(".cosmwasm.wasm.v1.GenesisState.gen_msgs: array expected");
                        message.gen_msgs = [];
                        for (let i = 0; i < object.gen_msgs.length; ++i) {
                            if (typeof object.gen_msgs[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.GenesisState.gen_msgs: object expected");
                            message.gen_msgs[i] = $root.cosmwasm.wasm.v1.GenesisState.GenMsgs.fromObject(object.gen_msgs[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @static
                 * @param {cosmwasm.wasm.v1.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.codes = [];
                        object.contracts = [];
                        object.sequences = [];
                        object.gen_msgs = [];
                    }
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.cosmwasm.wasm.v1.Params.toObject(message.params, options);
                    if (message.codes && message.codes.length) {
                        object.codes = [];
                        for (let j = 0; j < message.codes.length; ++j)
                            object.codes[j] = $root.cosmwasm.wasm.v1.Code.toObject(message.codes[j], options);
                    }
                    if (message.contracts && message.contracts.length) {
                        object.contracts = [];
                        for (let j = 0; j < message.contracts.length; ++j)
                            object.contracts[j] = $root.cosmwasm.wasm.v1.Contract.toObject(message.contracts[j], options);
                    }
                    if (message.sequences && message.sequences.length) {
                        object.sequences = [];
                        for (let j = 0; j < message.sequences.length; ++j)
                            object.sequences[j] = $root.cosmwasm.wasm.v1.Sequence.toObject(message.sequences[j], options);
                    }
                    if (message.gen_msgs && message.gen_msgs.length) {
                        object.gen_msgs = [];
                        for (let j = 0; j < message.gen_msgs.length; ++j)
                            object.gen_msgs[j] = $root.cosmwasm.wasm.v1.GenesisState.GenMsgs.toObject(message.gen_msgs[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                GenesisState.GenMsgs = (function() {

                    /**
                     * Properties of a GenMsgs.
                     * @memberof cosmwasm.wasm.v1.GenesisState
                     * @interface IGenMsgs
                     * @property {cosmwasm.wasm.v1.IMsgStoreCode|null} [store_code] GenMsgs store_code
                     * @property {cosmwasm.wasm.v1.IMsgInstantiateContract|null} [instantiate_contract] GenMsgs instantiate_contract
                     * @property {cosmwasm.wasm.v1.IMsgExecuteContract|null} [execute_contract] GenMsgs execute_contract
                     */

                    /**
                     * Constructs a new GenMsgs.
                     * @memberof cosmwasm.wasm.v1.GenesisState
                     * @classdesc Represents a GenMsgs.
                     * @implements IGenMsgs
                     * @constructor
                     * @param {cosmwasm.wasm.v1.GenesisState.IGenMsgs=} [properties] Properties to set
                     */
                    function GenMsgs(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenMsgs store_code.
                     * @member {cosmwasm.wasm.v1.IMsgStoreCode|null|undefined} store_code
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @instance
                     */
                    GenMsgs.prototype.store_code = null;

                    /**
                     * GenMsgs instantiate_contract.
                     * @member {cosmwasm.wasm.v1.IMsgInstantiateContract|null|undefined} instantiate_contract
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @instance
                     */
                    GenMsgs.prototype.instantiate_contract = null;

                    /**
                     * GenMsgs execute_contract.
                     * @member {cosmwasm.wasm.v1.IMsgExecuteContract|null|undefined} execute_contract
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @instance
                     */
                    GenMsgs.prototype.execute_contract = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * GenMsgs sum.
                     * @member {"store_code"|"instantiate_contract"|"execute_contract"|undefined} sum
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @instance
                     */
                    Object.defineProperty(GenMsgs.prototype, "sum", {
                        get: $util.oneOfGetter($oneOfFields = ["store_code", "instantiate_contract", "execute_contract"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Encodes the specified GenMsgs message. Does not implicitly {@link cosmwasm.wasm.v1.GenesisState.GenMsgs.verify|verify} messages.
                     * @function encode
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @static
                     * @param {cosmwasm.wasm.v1.GenesisState.IGenMsgs} message GenMsgs message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenMsgs.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.store_code != null && Object.hasOwnProperty.call(message, "store_code"))
                            $root.cosmwasm.wasm.v1.MsgStoreCode.encode(message.store_code, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.instantiate_contract != null && Object.hasOwnProperty.call(message, "instantiate_contract"))
                            $root.cosmwasm.wasm.v1.MsgInstantiateContract.encode(message.instantiate_contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.execute_contract != null && Object.hasOwnProperty.call(message, "execute_contract"))
                            $root.cosmwasm.wasm.v1.MsgExecuteContract.encode(message.execute_contract, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenMsgs message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.GenesisState.GenMsgs.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @static
                     * @param {cosmwasm.wasm.v1.GenesisState.IGenMsgs} message GenMsgs message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenMsgs.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenMsgs message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmwasm.wasm.v1.GenesisState.GenMsgs} GenMsgs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenMsgs.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.GenesisState.GenMsgs();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.store_code = $root.cosmwasm.wasm.v1.MsgStoreCode.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.instantiate_contract = $root.cosmwasm.wasm.v1.MsgInstantiateContract.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.execute_contract = $root.cosmwasm.wasm.v1.MsgExecuteContract.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenMsgs message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmwasm.wasm.v1.GenesisState.GenMsgs} GenMsgs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenMsgs.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenMsgs message.
                     * @function verify
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenMsgs.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        let properties = {};
                        if (message.store_code != null && message.hasOwnProperty("store_code")) {
                            properties.sum = 1;
                            {
                                let error = $root.cosmwasm.wasm.v1.MsgStoreCode.verify(message.store_code);
                                if (error)
                                    return "store_code." + error;
                            }
                        }
                        if (message.instantiate_contract != null && message.hasOwnProperty("instantiate_contract")) {
                            if (properties.sum === 1)
                                return "sum: multiple values";
                            properties.sum = 1;
                            {
                                let error = $root.cosmwasm.wasm.v1.MsgInstantiateContract.verify(message.instantiate_contract);
                                if (error)
                                    return "instantiate_contract." + error;
                            }
                        }
                        if (message.execute_contract != null && message.hasOwnProperty("execute_contract")) {
                            if (properties.sum === 1)
                                return "sum: multiple values";
                            properties.sum = 1;
                            {
                                let error = $root.cosmwasm.wasm.v1.MsgExecuteContract.verify(message.execute_contract);
                                if (error)
                                    return "execute_contract." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a GenMsgs message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmwasm.wasm.v1.GenesisState.GenMsgs} GenMsgs
                     */
                    GenMsgs.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmwasm.wasm.v1.GenesisState.GenMsgs)
                            return object;
                        let message = new $root.cosmwasm.wasm.v1.GenesisState.GenMsgs();
                        if (object.store_code != null) {
                            if (typeof object.store_code !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.GenesisState.GenMsgs.store_code: object expected");
                            message.store_code = $root.cosmwasm.wasm.v1.MsgStoreCode.fromObject(object.store_code);
                        }
                        if (object.instantiate_contract != null) {
                            if (typeof object.instantiate_contract !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.GenesisState.GenMsgs.instantiate_contract: object expected");
                            message.instantiate_contract = $root.cosmwasm.wasm.v1.MsgInstantiateContract.fromObject(object.instantiate_contract);
                        }
                        if (object.execute_contract != null) {
                            if (typeof object.execute_contract !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.GenesisState.GenMsgs.execute_contract: object expected");
                            message.execute_contract = $root.cosmwasm.wasm.v1.MsgExecuteContract.fromObject(object.execute_contract);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenMsgs message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @static
                     * @param {cosmwasm.wasm.v1.GenesisState.GenMsgs} message GenMsgs
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenMsgs.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (message.store_code != null && message.hasOwnProperty("store_code")) {
                            object.store_code = $root.cosmwasm.wasm.v1.MsgStoreCode.toObject(message.store_code, options);
                            if (options.oneofs)
                                object.sum = "store_code";
                        }
                        if (message.instantiate_contract != null && message.hasOwnProperty("instantiate_contract")) {
                            object.instantiate_contract = $root.cosmwasm.wasm.v1.MsgInstantiateContract.toObject(message.instantiate_contract, options);
                            if (options.oneofs)
                                object.sum = "instantiate_contract";
                        }
                        if (message.execute_contract != null && message.hasOwnProperty("execute_contract")) {
                            object.execute_contract = $root.cosmwasm.wasm.v1.MsgExecuteContract.toObject(message.execute_contract, options);
                            if (options.oneofs)
                                object.sum = "execute_contract";
                        }
                        return object;
                    };

                    /**
                     * Converts this GenMsgs to JSON.
                     * @function toJSON
                     * @memberof cosmwasm.wasm.v1.GenesisState.GenMsgs
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenMsgs.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenMsgs;
                })();

                return GenesisState;
            })();

            v1.Code = (function() {

                /**
                 * Properties of a Code.
                 * @memberof cosmwasm.wasm.v1
                 * @interface ICode
                 * @property {number|null} [code_id] Code code_id
                 * @property {cosmwasm.wasm.v1.ICodeInfo|null} [code_info] Code code_info
                 * @property {Uint8Array|null} [code_bytes] Code code_bytes
                 * @property {boolean|null} [pinned] Code pinned
                 */

                /**
                 * Constructs a new Code.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a Code.
                 * @implements ICode
                 * @constructor
                 * @param {cosmwasm.wasm.v1.ICode=} [properties] Properties to set
                 */
                function Code(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Code code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.Code
                 * @instance
                 */
                Code.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Code code_info.
                 * @member {cosmwasm.wasm.v1.ICodeInfo|null|undefined} code_info
                 * @memberof cosmwasm.wasm.v1.Code
                 * @instance
                 */
                Code.prototype.code_info = null;

                /**
                 * Code code_bytes.
                 * @member {Uint8Array} code_bytes
                 * @memberof cosmwasm.wasm.v1.Code
                 * @instance
                 */
                Code.prototype.code_bytes = $util.newBuffer([]);

                /**
                 * Code pinned.
                 * @member {boolean} pinned
                 * @memberof cosmwasm.wasm.v1.Code
                 * @instance
                 */
                Code.prototype.pinned = false;

                /**
                 * Encodes the specified Code message. Does not implicitly {@link cosmwasm.wasm.v1.Code.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.Code
                 * @static
                 * @param {cosmwasm.wasm.v1.ICode} message Code message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Code.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.code_id);
                    if (message.code_info != null && Object.hasOwnProperty.call(message, "code_info"))
                        $root.cosmwasm.wasm.v1.CodeInfo.encode(message.code_info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.code_bytes != null && Object.hasOwnProperty.call(message, "code_bytes"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.code_bytes);
                    if (message.pinned != null && Object.hasOwnProperty.call(message, "pinned"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.pinned);
                    return writer;
                };

                /**
                 * Encodes the specified Code message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.Code.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.Code
                 * @static
                 * @param {cosmwasm.wasm.v1.ICode} message Code message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Code.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Code message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.Code
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.Code} Code
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Code.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.Code();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_id = reader.uint64();
                            break;
                        case 2:
                            message.code_info = $root.cosmwasm.wasm.v1.CodeInfo.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.code_bytes = reader.bytes();
                            break;
                        case 4:
                            message.pinned = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Code message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.Code
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.Code} Code
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Code.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Code message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.Code
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Code.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.code_info != null && message.hasOwnProperty("code_info")) {
                        let error = $root.cosmwasm.wasm.v1.CodeInfo.verify(message.code_info);
                        if (error)
                            return "code_info." + error;
                    }
                    if (message.code_bytes != null && message.hasOwnProperty("code_bytes"))
                        if (!(message.code_bytes && typeof message.code_bytes.length === "number" || $util.isString(message.code_bytes)))
                            return "code_bytes: buffer expected";
                    if (message.pinned != null && message.hasOwnProperty("pinned"))
                        if (typeof message.pinned !== "boolean")
                            return "pinned: boolean expected";
                    return null;
                };

                /**
                 * Creates a Code message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.Code
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.Code} Code
                 */
                Code.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.Code)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.Code();
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.code_info != null) {
                        if (typeof object.code_info !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.Code.code_info: object expected");
                        message.code_info = $root.cosmwasm.wasm.v1.CodeInfo.fromObject(object.code_info);
                    }
                    if (object.code_bytes != null)
                        if (typeof object.code_bytes === "string")
                            $util.base64.decode(object.code_bytes, message.code_bytes = $util.newBuffer($util.base64.length(object.code_bytes)), 0);
                        else if (object.code_bytes.length)
                            message.code_bytes = object.code_bytes;
                    if (object.pinned != null)
                        message.pinned = Boolean(object.pinned);
                    return message;
                };

                /**
                 * Creates a plain object from a Code message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.Code
                 * @static
                 * @param {cosmwasm.wasm.v1.Code} message Code
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Code.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.code_info = null;
                        if (options.bytes === String)
                            object.code_bytes = "";
                        else {
                            object.code_bytes = [];
                            if (options.bytes !== Array)
                                object.code_bytes = $util.newBuffer(object.code_bytes);
                        }
                        object.pinned = false;
                    }
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.code_info != null && message.hasOwnProperty("code_info"))
                        object.code_info = $root.cosmwasm.wasm.v1.CodeInfo.toObject(message.code_info, options);
                    if (message.code_bytes != null && message.hasOwnProperty("code_bytes"))
                        object.code_bytes = options.bytes === String ? $util.base64.encode(message.code_bytes, 0, message.code_bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.code_bytes) : message.code_bytes;
                    if (message.pinned != null && message.hasOwnProperty("pinned"))
                        object.pinned = message.pinned;
                    return object;
                };

                /**
                 * Converts this Code to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.Code
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Code.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Code;
            })();

            v1.Contract = (function() {

                /**
                 * Properties of a Contract.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IContract
                 * @property {string|null} [contract_address] Contract contract_address
                 * @property {cosmwasm.wasm.v1.IContractInfo|null} [contract_info] Contract contract_info
                 * @property {Array.<cosmwasm.wasm.v1.IModel>|null} [contract_state] Contract contract_state
                 */

                /**
                 * Constructs a new Contract.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a Contract.
                 * @implements IContract
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IContract=} [properties] Properties to set
                 */
                function Contract(properties) {
                    this.contract_state = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Contract contract_address.
                 * @member {string} contract_address
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @instance
                 */
                Contract.prototype.contract_address = "";

                /**
                 * Contract contract_info.
                 * @member {cosmwasm.wasm.v1.IContractInfo|null|undefined} contract_info
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @instance
                 */
                Contract.prototype.contract_info = null;

                /**
                 * Contract contract_state.
                 * @member {Array.<cosmwasm.wasm.v1.IModel>} contract_state
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @instance
                 */
                Contract.prototype.contract_state = $util.emptyArray;

                /**
                 * Encodes the specified Contract message. Does not implicitly {@link cosmwasm.wasm.v1.Contract.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @static
                 * @param {cosmwasm.wasm.v1.IContract} message Contract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Contract.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contract_address != null && Object.hasOwnProperty.call(message, "contract_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.contract_address);
                    if (message.contract_info != null && Object.hasOwnProperty.call(message, "contract_info"))
                        $root.cosmwasm.wasm.v1.ContractInfo.encode(message.contract_info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.contract_state != null && message.contract_state.length)
                        for (let i = 0; i < message.contract_state.length; ++i)
                            $root.cosmwasm.wasm.v1.Model.encode(message.contract_state[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Contract message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.Contract.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @static
                 * @param {cosmwasm.wasm.v1.IContract} message Contract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Contract.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Contract message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.Contract} Contract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Contract.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.Contract();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contract_address = reader.string();
                            break;
                        case 2:
                            message.contract_info = $root.cosmwasm.wasm.v1.ContractInfo.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.contract_state && message.contract_state.length))
                                message.contract_state = [];
                            message.contract_state.push($root.cosmwasm.wasm.v1.Model.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Contract message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.Contract} Contract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Contract.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Contract message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Contract.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                        if (!$util.isString(message.contract_address))
                            return "contract_address: string expected";
                    if (message.contract_info != null && message.hasOwnProperty("contract_info")) {
                        let error = $root.cosmwasm.wasm.v1.ContractInfo.verify(message.contract_info);
                        if (error)
                            return "contract_info." + error;
                    }
                    if (message.contract_state != null && message.hasOwnProperty("contract_state")) {
                        if (!Array.isArray(message.contract_state))
                            return "contract_state: array expected";
                        for (let i = 0; i < message.contract_state.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.Model.verify(message.contract_state[i]);
                            if (error)
                                return "contract_state." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a Contract message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.Contract} Contract
                 */
                Contract.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.Contract)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.Contract();
                    if (object.contract_address != null)
                        message.contract_address = String(object.contract_address);
                    if (object.contract_info != null) {
                        if (typeof object.contract_info !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.Contract.contract_info: object expected");
                        message.contract_info = $root.cosmwasm.wasm.v1.ContractInfo.fromObject(object.contract_info);
                    }
                    if (object.contract_state) {
                        if (!Array.isArray(object.contract_state))
                            throw TypeError(".cosmwasm.wasm.v1.Contract.contract_state: array expected");
                        message.contract_state = [];
                        for (let i = 0; i < object.contract_state.length; ++i) {
                            if (typeof object.contract_state[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.Contract.contract_state: object expected");
                            message.contract_state[i] = $root.cosmwasm.wasm.v1.Model.fromObject(object.contract_state[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Contract message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @static
                 * @param {cosmwasm.wasm.v1.Contract} message Contract
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Contract.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.contract_state = [];
                    if (options.defaults) {
                        object.contract_address = "";
                        object.contract_info = null;
                    }
                    if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                        object.contract_address = message.contract_address;
                    if (message.contract_info != null && message.hasOwnProperty("contract_info"))
                        object.contract_info = $root.cosmwasm.wasm.v1.ContractInfo.toObject(message.contract_info, options);
                    if (message.contract_state && message.contract_state.length) {
                        object.contract_state = [];
                        for (let j = 0; j < message.contract_state.length; ++j)
                            object.contract_state[j] = $root.cosmwasm.wasm.v1.Model.toObject(message.contract_state[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Contract to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.Contract
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Contract.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Contract;
            })();

            v1.Sequence = (function() {

                /**
                 * Properties of a Sequence.
                 * @memberof cosmwasm.wasm.v1
                 * @interface ISequence
                 * @property {Uint8Array|null} [id_key] Sequence id_key
                 * @property {number|null} [value] Sequence value
                 */

                /**
                 * Constructs a new Sequence.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a Sequence.
                 * @implements ISequence
                 * @constructor
                 * @param {cosmwasm.wasm.v1.ISequence=} [properties] Properties to set
                 */
                function Sequence(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Sequence id_key.
                 * @member {Uint8Array} id_key
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @instance
                 */
                Sequence.prototype.id_key = $util.newBuffer([]);

                /**
                 * Sequence value.
                 * @member {number} value
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @instance
                 */
                Sequence.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * Encodes the specified Sequence message. Does not implicitly {@link cosmwasm.wasm.v1.Sequence.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @static
                 * @param {cosmwasm.wasm.v1.ISequence} message Sequence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Sequence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id_key != null && Object.hasOwnProperty.call(message, "id_key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.id_key);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.value);
                    return writer;
                };

                /**
                 * Encodes the specified Sequence message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.Sequence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @static
                 * @param {cosmwasm.wasm.v1.ISequence} message Sequence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Sequence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Sequence message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.Sequence} Sequence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Sequence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.Sequence();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id_key = reader.bytes();
                            break;
                        case 2:
                            message.value = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Sequence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.Sequence} Sequence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Sequence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Sequence message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Sequence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id_key != null && message.hasOwnProperty("id_key"))
                        if (!(message.id_key && typeof message.id_key.length === "number" || $util.isString(message.id_key)))
                            return "id_key: buffer expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                            return "value: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a Sequence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.Sequence} Sequence
                 */
                Sequence.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.Sequence)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.Sequence();
                    if (object.id_key != null)
                        if (typeof object.id_key === "string")
                            $util.base64.decode(object.id_key, message.id_key = $util.newBuffer($util.base64.length(object.id_key)), 0);
                        else if (object.id_key.length)
                            message.id_key = object.id_key;
                    if (object.value != null)
                        if ($util.Long)
                            (message.value = $util.Long.fromValue(object.value)).unsigned = true;
                        else if (typeof object.value === "string")
                            message.value = parseInt(object.value, 10);
                        else if (typeof object.value === "number")
                            message.value = object.value;
                        else if (typeof object.value === "object")
                            message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
                    return message;
                };

                /**
                 * Creates a plain object from a Sequence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @static
                 * @param {cosmwasm.wasm.v1.Sequence} message Sequence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Sequence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.id_key = "";
                        else {
                            object.id_key = [];
                            if (options.bytes !== Array)
                                object.id_key = $util.newBuffer(object.id_key);
                        }
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.value = options.longs === String ? "0" : 0;
                    }
                    if (message.id_key != null && message.hasOwnProperty("id_key"))
                        object.id_key = options.bytes === String ? $util.base64.encode(message.id_key, 0, message.id_key.length) : options.bytes === Array ? Array.prototype.slice.call(message.id_key) : message.id_key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value === "number")
                            object.value = options.longs === String ? String(message.value) : message.value;
                        else
                            object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
                    return object;
                };

                /**
                 * Converts this Sequence to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.Sequence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Sequence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Sequence;
            })();

            v1.StoreCodeProposal = (function() {

                /**
                 * Properties of a StoreCodeProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IStoreCodeProposal
                 * @property {string|null} [title] StoreCodeProposal title
                 * @property {string|null} [description] StoreCodeProposal description
                 * @property {string|null} [run_as] StoreCodeProposal run_as
                 * @property {Uint8Array|null} [wasm_byte_code] StoreCodeProposal wasm_byte_code
                 * @property {cosmwasm.wasm.v1.IAccessConfig|null} [instantiate_permission] StoreCodeProposal instantiate_permission
                 */

                /**
                 * Constructs a new StoreCodeProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a StoreCodeProposal.
                 * @implements IStoreCodeProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IStoreCodeProposal=} [properties] Properties to set
                 */
                function StoreCodeProposal(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StoreCodeProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.title = "";

                /**
                 * StoreCodeProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.description = "";

                /**
                 * StoreCodeProposal run_as.
                 * @member {string} run_as
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.run_as = "";

                /**
                 * StoreCodeProposal wasm_byte_code.
                 * @member {Uint8Array} wasm_byte_code
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.wasm_byte_code = $util.newBuffer([]);

                /**
                 * StoreCodeProposal instantiate_permission.
                 * @member {cosmwasm.wasm.v1.IAccessConfig|null|undefined} instantiate_permission
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @instance
                 */
                StoreCodeProposal.prototype.instantiate_permission = null;

                /**
                 * Encodes the specified StoreCodeProposal message. Does not implicitly {@link cosmwasm.wasm.v1.StoreCodeProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IStoreCodeProposal} message StoreCodeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoreCodeProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.run_as != null && Object.hasOwnProperty.call(message, "run_as"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.run_as);
                    if (message.wasm_byte_code != null && Object.hasOwnProperty.call(message, "wasm_byte_code"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.wasm_byte_code);
                    if (message.instantiate_permission != null && Object.hasOwnProperty.call(message, "instantiate_permission"))
                        $root.cosmwasm.wasm.v1.AccessConfig.encode(message.instantiate_permission, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified StoreCodeProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.StoreCodeProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IStoreCodeProposal} message StoreCodeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoreCodeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a StoreCodeProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.StoreCodeProposal} StoreCodeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoreCodeProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.StoreCodeProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.run_as = reader.string();
                            break;
                        case 4:
                            message.wasm_byte_code = reader.bytes();
                            break;
                        case 7:
                            message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a StoreCodeProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.StoreCodeProposal} StoreCodeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoreCodeProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a StoreCodeProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StoreCodeProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.run_as != null && message.hasOwnProperty("run_as"))
                        if (!$util.isString(message.run_as))
                            return "run_as: string expected";
                    if (message.wasm_byte_code != null && message.hasOwnProperty("wasm_byte_code"))
                        if (!(message.wasm_byte_code && typeof message.wasm_byte_code.length === "number" || $util.isString(message.wasm_byte_code)))
                            return "wasm_byte_code: buffer expected";
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission")) {
                        let error = $root.cosmwasm.wasm.v1.AccessConfig.verify(message.instantiate_permission);
                        if (error)
                            return "instantiate_permission." + error;
                    }
                    return null;
                };

                /**
                 * Creates a StoreCodeProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.StoreCodeProposal} StoreCodeProposal
                 */
                StoreCodeProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.StoreCodeProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.StoreCodeProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.run_as != null)
                        message.run_as = String(object.run_as);
                    if (object.wasm_byte_code != null)
                        if (typeof object.wasm_byte_code === "string")
                            $util.base64.decode(object.wasm_byte_code, message.wasm_byte_code = $util.newBuffer($util.base64.length(object.wasm_byte_code)), 0);
                        else if (object.wasm_byte_code.length)
                            message.wasm_byte_code = object.wasm_byte_code;
                    if (object.instantiate_permission != null) {
                        if (typeof object.instantiate_permission !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.StoreCodeProposal.instantiate_permission: object expected");
                        message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.fromObject(object.instantiate_permission);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a StoreCodeProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.StoreCodeProposal} message StoreCodeProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StoreCodeProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.run_as = "";
                        if (options.bytes === String)
                            object.wasm_byte_code = "";
                        else {
                            object.wasm_byte_code = [];
                            if (options.bytes !== Array)
                                object.wasm_byte_code = $util.newBuffer(object.wasm_byte_code);
                        }
                        object.instantiate_permission = null;
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.run_as != null && message.hasOwnProperty("run_as"))
                        object.run_as = message.run_as;
                    if (message.wasm_byte_code != null && message.hasOwnProperty("wasm_byte_code"))
                        object.wasm_byte_code = options.bytes === String ? $util.base64.encode(message.wasm_byte_code, 0, message.wasm_byte_code.length) : options.bytes === Array ? Array.prototype.slice.call(message.wasm_byte_code) : message.wasm_byte_code;
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission"))
                        object.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.toObject(message.instantiate_permission, options);
                    return object;
                };

                /**
                 * Converts this StoreCodeProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.StoreCodeProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StoreCodeProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return StoreCodeProposal;
            })();

            v1.InstantiateContractProposal = (function() {

                /**
                 * Properties of an InstantiateContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IInstantiateContractProposal
                 * @property {string|null} [title] InstantiateContractProposal title
                 * @property {string|null} [description] InstantiateContractProposal description
                 * @property {string|null} [run_as] InstantiateContractProposal run_as
                 * @property {string|null} [admin] InstantiateContractProposal admin
                 * @property {number|null} [code_id] InstantiateContractProposal code_id
                 * @property {string|null} [label] InstantiateContractProposal label
                 * @property {Uint8Array|null} [msg] InstantiateContractProposal msg
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [funds] InstantiateContractProposal funds
                 */

                /**
                 * Constructs a new InstantiateContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an InstantiateContractProposal.
                 * @implements IInstantiateContractProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IInstantiateContractProposal=} [properties] Properties to set
                 */
                function InstantiateContractProposal(properties) {
                    this.funds = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * InstantiateContractProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.title = "";

                /**
                 * InstantiateContractProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.description = "";

                /**
                 * InstantiateContractProposal run_as.
                 * @member {string} run_as
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.run_as = "";

                /**
                 * InstantiateContractProposal admin.
                 * @member {string} admin
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.admin = "";

                /**
                 * InstantiateContractProposal code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * InstantiateContractProposal label.
                 * @member {string} label
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.label = "";

                /**
                 * InstantiateContractProposal msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.msg = $util.newBuffer([]);

                /**
                 * InstantiateContractProposal funds.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} funds
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 */
                InstantiateContractProposal.prototype.funds = $util.emptyArray;

                /**
                 * Encodes the specified InstantiateContractProposal message. Does not implicitly {@link cosmwasm.wasm.v1.InstantiateContractProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IInstantiateContractProposal} message InstantiateContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                InstantiateContractProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.run_as != null && Object.hasOwnProperty.call(message, "run_as"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.run_as);
                    if (message.admin != null && Object.hasOwnProperty.call(message, "admin"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.admin);
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.code_id);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.label);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.msg);
                    if (message.funds != null && message.funds.length)
                        for (let i = 0; i < message.funds.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.funds[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified InstantiateContractProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.InstantiateContractProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IInstantiateContractProposal} message InstantiateContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                InstantiateContractProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an InstantiateContractProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.InstantiateContractProposal} InstantiateContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                InstantiateContractProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.InstantiateContractProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.run_as = reader.string();
                            break;
                        case 4:
                            message.admin = reader.string();
                            break;
                        case 5:
                            message.code_id = reader.uint64();
                            break;
                        case 6:
                            message.label = reader.string();
                            break;
                        case 7:
                            message.msg = reader.bytes();
                            break;
                        case 8:
                            if (!(message.funds && message.funds.length))
                                message.funds = [];
                            message.funds.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an InstantiateContractProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.InstantiateContractProposal} InstantiateContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                InstantiateContractProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an InstantiateContractProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                InstantiateContractProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.run_as != null && message.hasOwnProperty("run_as"))
                        if (!$util.isString(message.run_as))
                            return "run_as: string expected";
                    if (message.admin != null && message.hasOwnProperty("admin"))
                        if (!$util.isString(message.admin))
                            return "admin: string expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        if (!$util.isString(message.label))
                            return "label: string expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    if (message.funds != null && message.hasOwnProperty("funds")) {
                        if (!Array.isArray(message.funds))
                            return "funds: array expected";
                        for (let i = 0; i < message.funds.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.funds[i]);
                            if (error)
                                return "funds." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an InstantiateContractProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.InstantiateContractProposal} InstantiateContractProposal
                 */
                InstantiateContractProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.InstantiateContractProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.InstantiateContractProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.run_as != null)
                        message.run_as = String(object.run_as);
                    if (object.admin != null)
                        message.admin = String(object.admin);
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.label != null)
                        message.label = String(object.label);
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    if (object.funds) {
                        if (!Array.isArray(object.funds))
                            throw TypeError(".cosmwasm.wasm.v1.InstantiateContractProposal.funds: array expected");
                        message.funds = [];
                        for (let i = 0; i < object.funds.length; ++i) {
                            if (typeof object.funds[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.InstantiateContractProposal.funds: object expected");
                            message.funds[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.funds[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an InstantiateContractProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.InstantiateContractProposal} message InstantiateContractProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                InstantiateContractProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.funds = [];
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.run_as = "";
                        object.admin = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.label = "";
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.run_as != null && message.hasOwnProperty("run_as"))
                        object.run_as = message.run_as;
                    if (message.admin != null && message.hasOwnProperty("admin"))
                        object.admin = message.admin;
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = message.label;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    if (message.funds && message.funds.length) {
                        object.funds = [];
                        for (let j = 0; j < message.funds.length; ++j)
                            object.funds[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.funds[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this InstantiateContractProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.InstantiateContractProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                InstantiateContractProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return InstantiateContractProposal;
            })();

            v1.MigrateContractProposal = (function() {

                /**
                 * Properties of a MigrateContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMigrateContractProposal
                 * @property {string|null} [title] MigrateContractProposal title
                 * @property {string|null} [description] MigrateContractProposal description
                 * @property {string|null} [contract] MigrateContractProposal contract
                 * @property {number|null} [code_id] MigrateContractProposal code_id
                 * @property {Uint8Array|null} [msg] MigrateContractProposal msg
                 */

                /**
                 * Constructs a new MigrateContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MigrateContractProposal.
                 * @implements IMigrateContractProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMigrateContractProposal=} [properties] Properties to set
                 */
                function MigrateContractProposal(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MigrateContractProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.title = "";

                /**
                 * MigrateContractProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.description = "";

                /**
                 * MigrateContractProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.contract = "";

                /**
                 * MigrateContractProposal code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MigrateContractProposal msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @instance
                 */
                MigrateContractProposal.prototype.msg = $util.newBuffer([]);

                /**
                 * Encodes the specified MigrateContractProposal message. Does not implicitly {@link cosmwasm.wasm.v1.MigrateContractProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IMigrateContractProposal} message MigrateContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MigrateContractProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.contract);
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.code_id);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.msg);
                    return writer;
                };

                /**
                 * Encodes the specified MigrateContractProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MigrateContractProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IMigrateContractProposal} message MigrateContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MigrateContractProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MigrateContractProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MigrateContractProposal} MigrateContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MigrateContractProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MigrateContractProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.contract = reader.string();
                            break;
                        case 5:
                            message.code_id = reader.uint64();
                            break;
                        case 6:
                            message.msg = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MigrateContractProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MigrateContractProposal} MigrateContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MigrateContractProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MigrateContractProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MigrateContractProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    return null;
                };

                /**
                 * Creates a MigrateContractProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MigrateContractProposal} MigrateContractProposal
                 */
                MigrateContractProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MigrateContractProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MigrateContractProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    return message;
                };

                /**
                 * Creates a plain object from a MigrateContractProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.MigrateContractProposal} message MigrateContractProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MigrateContractProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.contract = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    return object;
                };

                /**
                 * Converts this MigrateContractProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MigrateContractProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MigrateContractProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MigrateContractProposal;
            })();

            v1.SudoContractProposal = (function() {

                /**
                 * Properties of a SudoContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface ISudoContractProposal
                 * @property {string|null} [title] SudoContractProposal title
                 * @property {string|null} [description] SudoContractProposal description
                 * @property {string|null} [contract] SudoContractProposal contract
                 * @property {Uint8Array|null} [msg] SudoContractProposal msg
                 */

                /**
                 * Constructs a new SudoContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a SudoContractProposal.
                 * @implements ISudoContractProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.ISudoContractProposal=} [properties] Properties to set
                 */
                function SudoContractProposal(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SudoContractProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @instance
                 */
                SudoContractProposal.prototype.title = "";

                /**
                 * SudoContractProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @instance
                 */
                SudoContractProposal.prototype.description = "";

                /**
                 * SudoContractProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @instance
                 */
                SudoContractProposal.prototype.contract = "";

                /**
                 * SudoContractProposal msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @instance
                 */
                SudoContractProposal.prototype.msg = $util.newBuffer([]);

                /**
                 * Encodes the specified SudoContractProposal message. Does not implicitly {@link cosmwasm.wasm.v1.SudoContractProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.ISudoContractProposal} message SudoContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SudoContractProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.contract);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.msg);
                    return writer;
                };

                /**
                 * Encodes the specified SudoContractProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.SudoContractProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.ISudoContractProposal} message SudoContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SudoContractProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SudoContractProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.SudoContractProposal} SudoContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SudoContractProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.SudoContractProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.contract = reader.string();
                            break;
                        case 4:
                            message.msg = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SudoContractProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.SudoContractProposal} SudoContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SudoContractProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SudoContractProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SudoContractProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    return null;
                };

                /**
                 * Creates a SudoContractProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.SudoContractProposal} SudoContractProposal
                 */
                SudoContractProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.SudoContractProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.SudoContractProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    return message;
                };

                /**
                 * Creates a plain object from a SudoContractProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.SudoContractProposal} message SudoContractProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SudoContractProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.contract = "";
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    return object;
                };

                /**
                 * Converts this SudoContractProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.SudoContractProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SudoContractProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SudoContractProposal;
            })();

            v1.ExecuteContractProposal = (function() {

                /**
                 * Properties of an ExecuteContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IExecuteContractProposal
                 * @property {string|null} [title] ExecuteContractProposal title
                 * @property {string|null} [description] ExecuteContractProposal description
                 * @property {string|null} [run_as] ExecuteContractProposal run_as
                 * @property {string|null} [contract] ExecuteContractProposal contract
                 * @property {Uint8Array|null} [msg] ExecuteContractProposal msg
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [funds] ExecuteContractProposal funds
                 */

                /**
                 * Constructs a new ExecuteContractProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an ExecuteContractProposal.
                 * @implements IExecuteContractProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IExecuteContractProposal=} [properties] Properties to set
                 */
                function ExecuteContractProposal(properties) {
                    this.funds = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExecuteContractProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @instance
                 */
                ExecuteContractProposal.prototype.title = "";

                /**
                 * ExecuteContractProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @instance
                 */
                ExecuteContractProposal.prototype.description = "";

                /**
                 * ExecuteContractProposal run_as.
                 * @member {string} run_as
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @instance
                 */
                ExecuteContractProposal.prototype.run_as = "";

                /**
                 * ExecuteContractProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @instance
                 */
                ExecuteContractProposal.prototype.contract = "";

                /**
                 * ExecuteContractProposal msg.
                 * @member {Uint8Array} msg
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @instance
                 */
                ExecuteContractProposal.prototype.msg = $util.newBuffer([]);

                /**
                 * ExecuteContractProposal funds.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} funds
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @instance
                 */
                ExecuteContractProposal.prototype.funds = $util.emptyArray;

                /**
                 * Encodes the specified ExecuteContractProposal message. Does not implicitly {@link cosmwasm.wasm.v1.ExecuteContractProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IExecuteContractProposal} message ExecuteContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExecuteContractProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.run_as != null && Object.hasOwnProperty.call(message, "run_as"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.run_as);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.contract);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.msg);
                    if (message.funds != null && message.funds.length)
                        for (let i = 0; i < message.funds.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.funds[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ExecuteContractProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.ExecuteContractProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IExecuteContractProposal} message ExecuteContractProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExecuteContractProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExecuteContractProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.ExecuteContractProposal} ExecuteContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExecuteContractProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.ExecuteContractProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.run_as = reader.string();
                            break;
                        case 4:
                            message.contract = reader.string();
                            break;
                        case 5:
                            message.msg = reader.bytes();
                            break;
                        case 6:
                            if (!(message.funds && message.funds.length))
                                message.funds = [];
                            message.funds.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExecuteContractProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.ExecuteContractProposal} ExecuteContractProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExecuteContractProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExecuteContractProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExecuteContractProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.run_as != null && message.hasOwnProperty("run_as"))
                        if (!$util.isString(message.run_as))
                            return "run_as: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!(message.msg && typeof message.msg.length === "number" || $util.isString(message.msg)))
                            return "msg: buffer expected";
                    if (message.funds != null && message.hasOwnProperty("funds")) {
                        if (!Array.isArray(message.funds))
                            return "funds: array expected";
                        for (let i = 0; i < message.funds.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.funds[i]);
                            if (error)
                                return "funds." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an ExecuteContractProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.ExecuteContractProposal} ExecuteContractProposal
                 */
                ExecuteContractProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.ExecuteContractProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.ExecuteContractProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.run_as != null)
                        message.run_as = String(object.run_as);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    if (object.msg != null)
                        if (typeof object.msg === "string")
                            $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0);
                        else if (object.msg.length)
                            message.msg = object.msg;
                    if (object.funds) {
                        if (!Array.isArray(object.funds))
                            throw TypeError(".cosmwasm.wasm.v1.ExecuteContractProposal.funds: array expected");
                        message.funds = [];
                        for (let i = 0; i < object.funds.length; ++i) {
                            if (typeof object.funds[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.ExecuteContractProposal.funds: object expected");
                            message.funds[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.funds[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExecuteContractProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.ExecuteContractProposal} message ExecuteContractProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExecuteContractProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.funds = [];
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.run_as = "";
                        object.contract = "";
                        if (options.bytes === String)
                            object.msg = "";
                        else {
                            object.msg = [];
                            if (options.bytes !== Array)
                                object.msg = $util.newBuffer(object.msg);
                        }
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.run_as != null && message.hasOwnProperty("run_as"))
                        object.run_as = message.run_as;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg;
                    if (message.funds && message.funds.length) {
                        object.funds = [];
                        for (let j = 0; j < message.funds.length; ++j)
                            object.funds[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.funds[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this ExecuteContractProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.ExecuteContractProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExecuteContractProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExecuteContractProposal;
            })();

            v1.UpdateAdminProposal = (function() {

                /**
                 * Properties of an UpdateAdminProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IUpdateAdminProposal
                 * @property {string|null} [title] UpdateAdminProposal title
                 * @property {string|null} [description] UpdateAdminProposal description
                 * @property {string|null} [new_admin] UpdateAdminProposal new_admin
                 * @property {string|null} [contract] UpdateAdminProposal contract
                 */

                /**
                 * Constructs a new UpdateAdminProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an UpdateAdminProposal.
                 * @implements IUpdateAdminProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IUpdateAdminProposal=} [properties] Properties to set
                 */
                function UpdateAdminProposal(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateAdminProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.title = "";

                /**
                 * UpdateAdminProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.description = "";

                /**
                 * UpdateAdminProposal new_admin.
                 * @member {string} new_admin
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.new_admin = "";

                /**
                 * UpdateAdminProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @instance
                 */
                UpdateAdminProposal.prototype.contract = "";

                /**
                 * Encodes the specified UpdateAdminProposal message. Does not implicitly {@link cosmwasm.wasm.v1.UpdateAdminProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IUpdateAdminProposal} message UpdateAdminProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateAdminProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.new_admin != null && Object.hasOwnProperty.call(message, "new_admin"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.new_admin);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.contract);
                    return writer;
                };

                /**
                 * Encodes the specified UpdateAdminProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.UpdateAdminProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IUpdateAdminProposal} message UpdateAdminProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateAdminProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an UpdateAdminProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.UpdateAdminProposal} UpdateAdminProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateAdminProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.UpdateAdminProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.new_admin = reader.string();
                            break;
                        case 4:
                            message.contract = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an UpdateAdminProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.UpdateAdminProposal} UpdateAdminProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateAdminProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an UpdateAdminProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateAdminProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.new_admin != null && message.hasOwnProperty("new_admin"))
                        if (!$util.isString(message.new_admin))
                            return "new_admin: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    return null;
                };

                /**
                 * Creates an UpdateAdminProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.UpdateAdminProposal} UpdateAdminProposal
                 */
                UpdateAdminProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.UpdateAdminProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.UpdateAdminProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.new_admin != null)
                        message.new_admin = String(object.new_admin);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateAdminProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.UpdateAdminProposal} message UpdateAdminProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateAdminProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.new_admin = "";
                        object.contract = "";
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.new_admin != null && message.hasOwnProperty("new_admin"))
                        object.new_admin = message.new_admin;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    return object;
                };

                /**
                 * Converts this UpdateAdminProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.UpdateAdminProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateAdminProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateAdminProposal;
            })();

            v1.ClearAdminProposal = (function() {

                /**
                 * Properties of a ClearAdminProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IClearAdminProposal
                 * @property {string|null} [title] ClearAdminProposal title
                 * @property {string|null} [description] ClearAdminProposal description
                 * @property {string|null} [contract] ClearAdminProposal contract
                 */

                /**
                 * Constructs a new ClearAdminProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a ClearAdminProposal.
                 * @implements IClearAdminProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IClearAdminProposal=} [properties] Properties to set
                 */
                function ClearAdminProposal(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ClearAdminProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @instance
                 */
                ClearAdminProposal.prototype.title = "";

                /**
                 * ClearAdminProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @instance
                 */
                ClearAdminProposal.prototype.description = "";

                /**
                 * ClearAdminProposal contract.
                 * @member {string} contract
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @instance
                 */
                ClearAdminProposal.prototype.contract = "";

                /**
                 * Encodes the specified ClearAdminProposal message. Does not implicitly {@link cosmwasm.wasm.v1.ClearAdminProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IClearAdminProposal} message ClearAdminProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClearAdminProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.contract);
                    return writer;
                };

                /**
                 * Encodes the specified ClearAdminProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.ClearAdminProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IClearAdminProposal} message ClearAdminProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClearAdminProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ClearAdminProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.ClearAdminProposal} ClearAdminProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClearAdminProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.ClearAdminProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.contract = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ClearAdminProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.ClearAdminProposal} ClearAdminProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClearAdminProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ClearAdminProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClearAdminProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    return null;
                };

                /**
                 * Creates a ClearAdminProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.ClearAdminProposal} ClearAdminProposal
                 */
                ClearAdminProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.ClearAdminProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.ClearAdminProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    return message;
                };

                /**
                 * Creates a plain object from a ClearAdminProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.ClearAdminProposal} message ClearAdminProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClearAdminProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.contract = "";
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    return object;
                };

                /**
                 * Converts this ClearAdminProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.ClearAdminProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClearAdminProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ClearAdminProposal;
            })();

            v1.PinCodesProposal = (function() {

                /**
                 * Properties of a PinCodesProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IPinCodesProposal
                 * @property {string|null} [title] PinCodesProposal title
                 * @property {string|null} [description] PinCodesProposal description
                 * @property {Array.<number>|null} [code_ids] PinCodesProposal code_ids
                 */

                /**
                 * Constructs a new PinCodesProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a PinCodesProposal.
                 * @implements IPinCodesProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IPinCodesProposal=} [properties] Properties to set
                 */
                function PinCodesProposal(properties) {
                    this.code_ids = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PinCodesProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @instance
                 */
                PinCodesProposal.prototype.title = "";

                /**
                 * PinCodesProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @instance
                 */
                PinCodesProposal.prototype.description = "";

                /**
                 * PinCodesProposal code_ids.
                 * @member {Array.<number>} code_ids
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @instance
                 */
                PinCodesProposal.prototype.code_ids = $util.emptyArray;

                /**
                 * Encodes the specified PinCodesProposal message. Does not implicitly {@link cosmwasm.wasm.v1.PinCodesProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IPinCodesProposal} message PinCodesProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PinCodesProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.code_ids != null && message.code_ids.length) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                        for (let i = 0; i < message.code_ids.length; ++i)
                            writer.uint64(message.code_ids[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified PinCodesProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.PinCodesProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IPinCodesProposal} message PinCodesProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PinCodesProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PinCodesProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.PinCodesProposal} PinCodesProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PinCodesProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.PinCodesProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            if (!(message.code_ids && message.code_ids.length))
                                message.code_ids = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.code_ids.push(reader.uint64());
                            } else
                                message.code_ids.push(reader.uint64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PinCodesProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.PinCodesProposal} PinCodesProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PinCodesProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PinCodesProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PinCodesProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.code_ids != null && message.hasOwnProperty("code_ids")) {
                        if (!Array.isArray(message.code_ids))
                            return "code_ids: array expected";
                        for (let i = 0; i < message.code_ids.length; ++i)
                            if (!$util.isInteger(message.code_ids[i]) && !(message.code_ids[i] && $util.isInteger(message.code_ids[i].low) && $util.isInteger(message.code_ids[i].high)))
                                return "code_ids: integer|Long[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a PinCodesProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.PinCodesProposal} PinCodesProposal
                 */
                PinCodesProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.PinCodesProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.PinCodesProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.code_ids) {
                        if (!Array.isArray(object.code_ids))
                            throw TypeError(".cosmwasm.wasm.v1.PinCodesProposal.code_ids: array expected");
                        message.code_ids = [];
                        for (let i = 0; i < object.code_ids.length; ++i)
                            if ($util.Long)
                                (message.code_ids[i] = $util.Long.fromValue(object.code_ids[i])).unsigned = true;
                            else if (typeof object.code_ids[i] === "string")
                                message.code_ids[i] = parseInt(object.code_ids[i], 10);
                            else if (typeof object.code_ids[i] === "number")
                                message.code_ids[i] = object.code_ids[i];
                            else if (typeof object.code_ids[i] === "object")
                                message.code_ids[i] = new $util.LongBits(object.code_ids[i].low >>> 0, object.code_ids[i].high >>> 0).toNumber(true);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PinCodesProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.PinCodesProposal} message PinCodesProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PinCodesProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.code_ids = [];
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.code_ids && message.code_ids.length) {
                        object.code_ids = [];
                        for (let j = 0; j < message.code_ids.length; ++j)
                            if (typeof message.code_ids[j] === "number")
                                object.code_ids[j] = options.longs === String ? String(message.code_ids[j]) : message.code_ids[j];
                            else
                                object.code_ids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.code_ids[j]) : options.longs === Number ? new $util.LongBits(message.code_ids[j].low >>> 0, message.code_ids[j].high >>> 0).toNumber(true) : message.code_ids[j];
                    }
                    return object;
                };

                /**
                 * Converts this PinCodesProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.PinCodesProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PinCodesProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PinCodesProposal;
            })();

            v1.UnpinCodesProposal = (function() {

                /**
                 * Properties of an UnpinCodesProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IUnpinCodesProposal
                 * @property {string|null} [title] UnpinCodesProposal title
                 * @property {string|null} [description] UnpinCodesProposal description
                 * @property {Array.<number>|null} [code_ids] UnpinCodesProposal code_ids
                 */

                /**
                 * Constructs a new UnpinCodesProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an UnpinCodesProposal.
                 * @implements IUnpinCodesProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IUnpinCodesProposal=} [properties] Properties to set
                 */
                function UnpinCodesProposal(properties) {
                    this.code_ids = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UnpinCodesProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @instance
                 */
                UnpinCodesProposal.prototype.title = "";

                /**
                 * UnpinCodesProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @instance
                 */
                UnpinCodesProposal.prototype.description = "";

                /**
                 * UnpinCodesProposal code_ids.
                 * @member {Array.<number>} code_ids
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @instance
                 */
                UnpinCodesProposal.prototype.code_ids = $util.emptyArray;

                /**
                 * Encodes the specified UnpinCodesProposal message. Does not implicitly {@link cosmwasm.wasm.v1.UnpinCodesProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IUnpinCodesProposal} message UnpinCodesProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UnpinCodesProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.code_ids != null && message.code_ids.length) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                        for (let i = 0; i < message.code_ids.length; ++i)
                            writer.uint64(message.code_ids[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified UnpinCodesProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.UnpinCodesProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IUnpinCodesProposal} message UnpinCodesProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UnpinCodesProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an UnpinCodesProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.UnpinCodesProposal} UnpinCodesProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UnpinCodesProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.UnpinCodesProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            if (!(message.code_ids && message.code_ids.length))
                                message.code_ids = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.code_ids.push(reader.uint64());
                            } else
                                message.code_ids.push(reader.uint64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an UnpinCodesProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.UnpinCodesProposal} UnpinCodesProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UnpinCodesProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an UnpinCodesProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UnpinCodesProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.code_ids != null && message.hasOwnProperty("code_ids")) {
                        if (!Array.isArray(message.code_ids))
                            return "code_ids: array expected";
                        for (let i = 0; i < message.code_ids.length; ++i)
                            if (!$util.isInteger(message.code_ids[i]) && !(message.code_ids[i] && $util.isInteger(message.code_ids[i].low) && $util.isInteger(message.code_ids[i].high)))
                                return "code_ids: integer|Long[] expected";
                    }
                    return null;
                };

                /**
                 * Creates an UnpinCodesProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.UnpinCodesProposal} UnpinCodesProposal
                 */
                UnpinCodesProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.UnpinCodesProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.UnpinCodesProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.code_ids) {
                        if (!Array.isArray(object.code_ids))
                            throw TypeError(".cosmwasm.wasm.v1.UnpinCodesProposal.code_ids: array expected");
                        message.code_ids = [];
                        for (let i = 0; i < object.code_ids.length; ++i)
                            if ($util.Long)
                                (message.code_ids[i] = $util.Long.fromValue(object.code_ids[i])).unsigned = true;
                            else if (typeof object.code_ids[i] === "string")
                                message.code_ids[i] = parseInt(object.code_ids[i], 10);
                            else if (typeof object.code_ids[i] === "number")
                                message.code_ids[i] = object.code_ids[i];
                            else if (typeof object.code_ids[i] === "object")
                                message.code_ids[i] = new $util.LongBits(object.code_ids[i].low >>> 0, object.code_ids[i].high >>> 0).toNumber(true);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UnpinCodesProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.UnpinCodesProposal} message UnpinCodesProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UnpinCodesProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.code_ids = [];
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.code_ids && message.code_ids.length) {
                        object.code_ids = [];
                        for (let j = 0; j < message.code_ids.length; ++j)
                            if (typeof message.code_ids[j] === "number")
                                object.code_ids[j] = options.longs === String ? String(message.code_ids[j]) : message.code_ids[j];
                            else
                                object.code_ids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.code_ids[j]) : options.longs === Number ? new $util.LongBits(message.code_ids[j].low >>> 0, message.code_ids[j].high >>> 0).toNumber(true) : message.code_ids[j];
                    }
                    return object;
                };

                /**
                 * Converts this UnpinCodesProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.UnpinCodesProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UnpinCodesProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UnpinCodesProposal;
            })();

            v1.AccessConfigUpdate = (function() {

                /**
                 * Properties of an AccessConfigUpdate.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IAccessConfigUpdate
                 * @property {number|null} [code_id] AccessConfigUpdate code_id
                 * @property {cosmwasm.wasm.v1.IAccessConfig|null} [instantiate_permission] AccessConfigUpdate instantiate_permission
                 */

                /**
                 * Constructs a new AccessConfigUpdate.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an AccessConfigUpdate.
                 * @implements IAccessConfigUpdate
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IAccessConfigUpdate=} [properties] Properties to set
                 */
                function AccessConfigUpdate(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AccessConfigUpdate code_id.
                 * @member {number} code_id
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @instance
                 */
                AccessConfigUpdate.prototype.code_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * AccessConfigUpdate instantiate_permission.
                 * @member {cosmwasm.wasm.v1.IAccessConfig|null|undefined} instantiate_permission
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @instance
                 */
                AccessConfigUpdate.prototype.instantiate_permission = null;

                /**
                 * Encodes the specified AccessConfigUpdate message. Does not implicitly {@link cosmwasm.wasm.v1.AccessConfigUpdate.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @static
                 * @param {cosmwasm.wasm.v1.IAccessConfigUpdate} message AccessConfigUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessConfigUpdate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code_id != null && Object.hasOwnProperty.call(message, "code_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.code_id);
                    if (message.instantiate_permission != null && Object.hasOwnProperty.call(message, "instantiate_permission"))
                        $root.cosmwasm.wasm.v1.AccessConfig.encode(message.instantiate_permission, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AccessConfigUpdate message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.AccessConfigUpdate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @static
                 * @param {cosmwasm.wasm.v1.IAccessConfigUpdate} message AccessConfigUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccessConfigUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AccessConfigUpdate message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.AccessConfigUpdate} AccessConfigUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessConfigUpdate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.AccessConfigUpdate();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code_id = reader.uint64();
                            break;
                        case 2:
                            message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AccessConfigUpdate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.AccessConfigUpdate} AccessConfigUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccessConfigUpdate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AccessConfigUpdate message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AccessConfigUpdate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (!$util.isInteger(message.code_id) && !(message.code_id && $util.isInteger(message.code_id.low) && $util.isInteger(message.code_id.high)))
                            return "code_id: integer|Long expected";
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission")) {
                        let error = $root.cosmwasm.wasm.v1.AccessConfig.verify(message.instantiate_permission);
                        if (error)
                            return "instantiate_permission." + error;
                    }
                    return null;
                };

                /**
                 * Creates an AccessConfigUpdate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.AccessConfigUpdate} AccessConfigUpdate
                 */
                AccessConfigUpdate.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.AccessConfigUpdate)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.AccessConfigUpdate();
                    if (object.code_id != null)
                        if ($util.Long)
                            (message.code_id = $util.Long.fromValue(object.code_id)).unsigned = true;
                        else if (typeof object.code_id === "string")
                            message.code_id = parseInt(object.code_id, 10);
                        else if (typeof object.code_id === "number")
                            message.code_id = object.code_id;
                        else if (typeof object.code_id === "object")
                            message.code_id = new $util.LongBits(object.code_id.low >>> 0, object.code_id.high >>> 0).toNumber(true);
                    if (object.instantiate_permission != null) {
                        if (typeof object.instantiate_permission !== "object")
                            throw TypeError(".cosmwasm.wasm.v1.AccessConfigUpdate.instantiate_permission: object expected");
                        message.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.fromObject(object.instantiate_permission);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AccessConfigUpdate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @static
                 * @param {cosmwasm.wasm.v1.AccessConfigUpdate} message AccessConfigUpdate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AccessConfigUpdate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.code_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.code_id = options.longs === String ? "0" : 0;
                        object.instantiate_permission = null;
                    }
                    if (message.code_id != null && message.hasOwnProperty("code_id"))
                        if (typeof message.code_id === "number")
                            object.code_id = options.longs === String ? String(message.code_id) : message.code_id;
                        else
                            object.code_id = options.longs === String ? $util.Long.prototype.toString.call(message.code_id) : options.longs === Number ? new $util.LongBits(message.code_id.low >>> 0, message.code_id.high >>> 0).toNumber(true) : message.code_id;
                    if (message.instantiate_permission != null && message.hasOwnProperty("instantiate_permission"))
                        object.instantiate_permission = $root.cosmwasm.wasm.v1.AccessConfig.toObject(message.instantiate_permission, options);
                    return object;
                };

                /**
                 * Converts this AccessConfigUpdate to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.AccessConfigUpdate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AccessConfigUpdate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AccessConfigUpdate;
            })();

            v1.UpdateInstantiateConfigProposal = (function() {

                /**
                 * Properties of an UpdateInstantiateConfigProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IUpdateInstantiateConfigProposal
                 * @property {string|null} [title] UpdateInstantiateConfigProposal title
                 * @property {string|null} [description] UpdateInstantiateConfigProposal description
                 * @property {Array.<cosmwasm.wasm.v1.IAccessConfigUpdate>|null} [access_config_updates] UpdateInstantiateConfigProposal access_config_updates
                 */

                /**
                 * Constructs a new UpdateInstantiateConfigProposal.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents an UpdateInstantiateConfigProposal.
                 * @implements IUpdateInstantiateConfigProposal
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IUpdateInstantiateConfigProposal=} [properties] Properties to set
                 */
                function UpdateInstantiateConfigProposal(properties) {
                    this.access_config_updates = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateInstantiateConfigProposal title.
                 * @member {string} title
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @instance
                 */
                UpdateInstantiateConfigProposal.prototype.title = "";

                /**
                 * UpdateInstantiateConfigProposal description.
                 * @member {string} description
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @instance
                 */
                UpdateInstantiateConfigProposal.prototype.description = "";

                /**
                 * UpdateInstantiateConfigProposal access_config_updates.
                 * @member {Array.<cosmwasm.wasm.v1.IAccessConfigUpdate>} access_config_updates
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @instance
                 */
                UpdateInstantiateConfigProposal.prototype.access_config_updates = $util.emptyArray;

                /**
                 * Encodes the specified UpdateInstantiateConfigProposal message. Does not implicitly {@link cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IUpdateInstantiateConfigProposal} message UpdateInstantiateConfigProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateInstantiateConfigProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.access_config_updates != null && message.access_config_updates.length)
                        for (let i = 0; i < message.access_config_updates.length; ++i)
                            $root.cosmwasm.wasm.v1.AccessConfigUpdate.encode(message.access_config_updates[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified UpdateInstantiateConfigProposal message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.IUpdateInstantiateConfigProposal} message UpdateInstantiateConfigProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateInstantiateConfigProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an UpdateInstantiateConfigProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.UpdateInstantiateConfigProposal} UpdateInstantiateConfigProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateInstantiateConfigProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.UpdateInstantiateConfigProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            if (!(message.access_config_updates && message.access_config_updates.length))
                                message.access_config_updates = [];
                            message.access_config_updates.push($root.cosmwasm.wasm.v1.AccessConfigUpdate.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an UpdateInstantiateConfigProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.UpdateInstantiateConfigProposal} UpdateInstantiateConfigProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateInstantiateConfigProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an UpdateInstantiateConfigProposal message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateInstantiateConfigProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.access_config_updates != null && message.hasOwnProperty("access_config_updates")) {
                        if (!Array.isArray(message.access_config_updates))
                            return "access_config_updates: array expected";
                        for (let i = 0; i < message.access_config_updates.length; ++i) {
                            let error = $root.cosmwasm.wasm.v1.AccessConfigUpdate.verify(message.access_config_updates[i]);
                            if (error)
                                return "access_config_updates." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an UpdateInstantiateConfigProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.UpdateInstantiateConfigProposal} UpdateInstantiateConfigProposal
                 */
                UpdateInstantiateConfigProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.UpdateInstantiateConfigProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.access_config_updates) {
                        if (!Array.isArray(object.access_config_updates))
                            throw TypeError(".cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.access_config_updates: array expected");
                        message.access_config_updates = [];
                        for (let i = 0; i < object.access_config_updates.length; ++i) {
                            if (typeof object.access_config_updates[i] !== "object")
                                throw TypeError(".cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.access_config_updates: object expected");
                            message.access_config_updates[i] = $root.cosmwasm.wasm.v1.AccessConfigUpdate.fromObject(object.access_config_updates[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateInstantiateConfigProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @static
                 * @param {cosmwasm.wasm.v1.UpdateInstantiateConfigProposal} message UpdateInstantiateConfigProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateInstantiateConfigProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.access_config_updates = [];
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.access_config_updates && message.access_config_updates.length) {
                        object.access_config_updates = [];
                        for (let j = 0; j < message.access_config_updates.length; ++j)
                            object.access_config_updates[j] = $root.cosmwasm.wasm.v1.AccessConfigUpdate.toObject(message.access_config_updates[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this UpdateInstantiateConfigProposal to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateInstantiateConfigProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateInstantiateConfigProposal;
            })();

            v1.MsgIBCSend = (function() {

                /**
                 * Properties of a MsgIBCSend.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgIBCSend
                 * @property {string|null} [channel] MsgIBCSend channel
                 * @property {number|null} [timeout_height] MsgIBCSend timeout_height
                 * @property {number|null} [timeout_timestamp] MsgIBCSend timeout_timestamp
                 * @property {Uint8Array|null} [data] MsgIBCSend data
                 */

                /**
                 * Constructs a new MsgIBCSend.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgIBCSend.
                 * @implements IMsgIBCSend
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgIBCSend=} [properties] Properties to set
                 */
                function MsgIBCSend(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgIBCSend channel.
                 * @member {string} channel
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @instance
                 */
                MsgIBCSend.prototype.channel = "";

                /**
                 * MsgIBCSend timeout_height.
                 * @member {number} timeout_height
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @instance
                 */
                MsgIBCSend.prototype.timeout_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MsgIBCSend timeout_timestamp.
                 * @member {number} timeout_timestamp
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @instance
                 */
                MsgIBCSend.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * MsgIBCSend data.
                 * @member {Uint8Array} data
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @instance
                 */
                MsgIBCSend.prototype.data = $util.newBuffer([]);

                /**
                 * Encodes the specified MsgIBCSend message. Does not implicitly {@link cosmwasm.wasm.v1.MsgIBCSend.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgIBCSend} message MsgIBCSend message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgIBCSend.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel);
                    if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.timeout_height);
                    if (message.timeout_timestamp != null && Object.hasOwnProperty.call(message, "timeout_timestamp"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.timeout_timestamp);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.data);
                    return writer;
                };

                /**
                 * Encodes the specified MsgIBCSend message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgIBCSend.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgIBCSend} message MsgIBCSend message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgIBCSend.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgIBCSend message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgIBCSend} MsgIBCSend
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgIBCSend.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgIBCSend();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.channel = reader.string();
                            break;
                        case 4:
                            message.timeout_height = reader.uint64();
                            break;
                        case 5:
                            message.timeout_timestamp = reader.uint64();
                            break;
                        case 6:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgIBCSend message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgIBCSend} MsgIBCSend
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgIBCSend.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgIBCSend message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgIBCSend.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.channel != null && message.hasOwnProperty("channel"))
                        if (!$util.isString(message.channel))
                            return "channel: string expected";
                    if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                        if (!$util.isInteger(message.timeout_height) && !(message.timeout_height && $util.isInteger(message.timeout_height.low) && $util.isInteger(message.timeout_height.high)))
                            return "timeout_height: integer|Long expected";
                    if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                        if (!$util.isInteger(message.timeout_timestamp) && !(message.timeout_timestamp && $util.isInteger(message.timeout_timestamp.low) && $util.isInteger(message.timeout_timestamp.high)))
                            return "timeout_timestamp: integer|Long expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };

                /**
                 * Creates a MsgIBCSend message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgIBCSend} MsgIBCSend
                 */
                MsgIBCSend.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgIBCSend)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgIBCSend();
                    if (object.channel != null)
                        message.channel = String(object.channel);
                    if (object.timeout_height != null)
                        if ($util.Long)
                            (message.timeout_height = $util.Long.fromValue(object.timeout_height)).unsigned = true;
                        else if (typeof object.timeout_height === "string")
                            message.timeout_height = parseInt(object.timeout_height, 10);
                        else if (typeof object.timeout_height === "number")
                            message.timeout_height = object.timeout_height;
                        else if (typeof object.timeout_height === "object")
                            message.timeout_height = new $util.LongBits(object.timeout_height.low >>> 0, object.timeout_height.high >>> 0).toNumber(true);
                    if (object.timeout_timestamp != null)
                        if ($util.Long)
                            (message.timeout_timestamp = $util.Long.fromValue(object.timeout_timestamp)).unsigned = true;
                        else if (typeof object.timeout_timestamp === "string")
                            message.timeout_timestamp = parseInt(object.timeout_timestamp, 10);
                        else if (typeof object.timeout_timestamp === "number")
                            message.timeout_timestamp = object.timeout_timestamp;
                        else if (typeof object.timeout_timestamp === "object")
                            message.timeout_timestamp = new $util.LongBits(object.timeout_timestamp.low >>> 0, object.timeout_timestamp.high >>> 0).toNumber(true);
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };

                /**
                 * Creates a plain object from a MsgIBCSend message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgIBCSend} message MsgIBCSend
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgIBCSend.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.channel = "";
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.timeout_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.timeout_height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.timeout_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.timeout_timestamp = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.channel != null && message.hasOwnProperty("channel"))
                        object.channel = message.channel;
                    if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                        if (typeof message.timeout_height === "number")
                            object.timeout_height = options.longs === String ? String(message.timeout_height) : message.timeout_height;
                        else
                            object.timeout_height = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_height) : options.longs === Number ? new $util.LongBits(message.timeout_height.low >>> 0, message.timeout_height.high >>> 0).toNumber(true) : message.timeout_height;
                    if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                        if (typeof message.timeout_timestamp === "number")
                            object.timeout_timestamp = options.longs === String ? String(message.timeout_timestamp) : message.timeout_timestamp;
                        else
                            object.timeout_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_timestamp) : options.longs === Number ? new $util.LongBits(message.timeout_timestamp.low >>> 0, message.timeout_timestamp.high >>> 0).toNumber(true) : message.timeout_timestamp;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };

                /**
                 * Converts this MsgIBCSend to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgIBCSend
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgIBCSend.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgIBCSend;
            })();

            v1.MsgIBCCloseChannel = (function() {

                /**
                 * Properties of a MsgIBCCloseChannel.
                 * @memberof cosmwasm.wasm.v1
                 * @interface IMsgIBCCloseChannel
                 * @property {string|null} [channel] MsgIBCCloseChannel channel
                 */

                /**
                 * Constructs a new MsgIBCCloseChannel.
                 * @memberof cosmwasm.wasm.v1
                 * @classdesc Represents a MsgIBCCloseChannel.
                 * @implements IMsgIBCCloseChannel
                 * @constructor
                 * @param {cosmwasm.wasm.v1.IMsgIBCCloseChannel=} [properties] Properties to set
                 */
                function MsgIBCCloseChannel(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MsgIBCCloseChannel channel.
                 * @member {string} channel
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @instance
                 */
                MsgIBCCloseChannel.prototype.channel = "";

                /**
                 * Encodes the specified MsgIBCCloseChannel message. Does not implicitly {@link cosmwasm.wasm.v1.MsgIBCCloseChannel.verify|verify} messages.
                 * @function encode
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgIBCCloseChannel} message MsgIBCCloseChannel message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgIBCCloseChannel.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel);
                    return writer;
                };

                /**
                 * Encodes the specified MsgIBCCloseChannel message, length delimited. Does not implicitly {@link cosmwasm.wasm.v1.MsgIBCCloseChannel.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @static
                 * @param {cosmwasm.wasm.v1.IMsgIBCCloseChannel} message MsgIBCCloseChannel message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgIBCCloseChannel.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MsgIBCCloseChannel message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmwasm.wasm.v1.MsgIBCCloseChannel} MsgIBCCloseChannel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgIBCCloseChannel.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmwasm.wasm.v1.MsgIBCCloseChannel();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.channel = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MsgIBCCloseChannel message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmwasm.wasm.v1.MsgIBCCloseChannel} MsgIBCCloseChannel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgIBCCloseChannel.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MsgIBCCloseChannel message.
                 * @function verify
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgIBCCloseChannel.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.channel != null && message.hasOwnProperty("channel"))
                        if (!$util.isString(message.channel))
                            return "channel: string expected";
                    return null;
                };

                /**
                 * Creates a MsgIBCCloseChannel message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmwasm.wasm.v1.MsgIBCCloseChannel} MsgIBCCloseChannel
                 */
                MsgIBCCloseChannel.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmwasm.wasm.v1.MsgIBCCloseChannel)
                        return object;
                    let message = new $root.cosmwasm.wasm.v1.MsgIBCCloseChannel();
                    if (object.channel != null)
                        message.channel = String(object.channel);
                    return message;
                };

                /**
                 * Creates a plain object from a MsgIBCCloseChannel message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @static
                 * @param {cosmwasm.wasm.v1.MsgIBCCloseChannel} message MsgIBCCloseChannel
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgIBCCloseChannel.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.channel = "";
                    if (message.channel != null && message.hasOwnProperty("channel"))
                        object.channel = message.channel;
                    return object;
                };

                /**
                 * Converts this MsgIBCCloseChannel to JSON.
                 * @function toJSON
                 * @memberof cosmwasm.wasm.v1.MsgIBCCloseChannel
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgIBCCloseChannel.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MsgIBCCloseChannel;
            })();

            return v1;
        })();

        return wasm;
    })();

    return cosmwasm;
})();

export const cosmos = $root.cosmos = (() => {

    /**
     * Namespace cosmos.
     * @exports cosmos
     * @namespace
     */
    const cosmos = {};

    cosmos.base = (function() {

        /**
         * Namespace base.
         * @memberof cosmos
         * @namespace
         */
        const base = {};

        base.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.base
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Coin = (function() {

                /**
                 * Properties of a Coin.
                 * @memberof cosmos.base.v1beta1
                 * @interface ICoin
                 * @property {string|null} [denom] Coin denom
                 * @property {string|null} [amount] Coin amount
                 */

                /**
                 * Constructs a new Coin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a Coin.
                 * @implements ICoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                 */
                function Coin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Coin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.denom = "";

                /**
                 * Coin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.amount = "";

                /**
                 * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.Coin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Coin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Coin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a Coin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 */
                Coin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.Coin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.Coin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a Coin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.Coin} message Coin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Coin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this Coin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Coin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Coin;
            })();

            v1beta1.DecCoin = (function() {

                /**
                 * Properties of a DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecCoin
                 * @property {string|null} [denom] DecCoin denom
                 * @property {string|null} [amount] DecCoin amount
                 */

                /**
                 * Constructs a new DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecCoin.
                 * @implements IDecCoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                 */
                function DecCoin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecCoin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.denom = "";

                /**
                 * DecCoin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.amount = "";

                /**
                 * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecCoin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecCoin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecCoin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 */
                DecCoin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecCoin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecCoin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a DecCoin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.DecCoin} message DecCoin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecCoin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this DecCoin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecCoin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecCoin;
            })();

            v1beta1.IntProto = (function() {

                /**
                 * Properties of an IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IIntProto
                 * @property {string|null} [int] IntProto int
                 */

                /**
                 * Constructs a new IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents an IntProto.
                 * @implements IIntProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                 */
                function IntProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * IntProto int.
                 * @member {string} int
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 */
                IntProto.prototype.int = "";

                /**
                 * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.int != null && Object.hasOwnProperty.call(message, "int"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.int);
                    return writer;
                };

                /**
                 * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.IntProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.int = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an IntProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                IntProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.int != null && message.hasOwnProperty("int"))
                        if (!$util.isString(message.int))
                            return "int: string expected";
                    return null;
                };

                /**
                 * Creates an IntProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 */
                IntProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.IntProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.IntProto();
                    if (object.int != null)
                        message.int = String(object.int);
                    return message;
                };

                /**
                 * Creates a plain object from an IntProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IntProto} message IntProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                IntProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.int = "";
                    if (message.int != null && message.hasOwnProperty("int"))
                        object.int = message.int;
                    return object;
                };

                /**
                 * Converts this IntProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                IntProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return IntProto;
            })();

            v1beta1.DecProto = (function() {

                /**
                 * Properties of a DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecProto
                 * @property {string|null} [dec] DecProto dec
                 */

                /**
                 * Constructs a new DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecProto.
                 * @implements IDecProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                 */
                function DecProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecProto dec.
                 * @member {string} dec
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 */
                DecProto.prototype.dec = "";

                /**
                 * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.dec != null && Object.hasOwnProperty.call(message, "dec"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.dec);
                    return writer;
                };

                /**
                 * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.dec = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        if (!$util.isString(message.dec))
                            return "dec: string expected";
                    return null;
                };

                /**
                 * Creates a DecProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 */
                DecProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecProto();
                    if (object.dec != null)
                        message.dec = String(object.dec);
                    return message;
                };

                /**
                 * Creates a plain object from a DecProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.DecProto} message DecProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.dec = "";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        object.dec = message.dec;
                    return object;
                };

                /**
                 * Converts this DecProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecProto;
            })();

            return v1beta1;
        })();

        base.query = (function() {

            /**
             * Namespace query.
             * @memberof cosmos.base
             * @namespace
             */
            const query = {};

            query.v1beta1 = (function() {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.query
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.PageRequest = (function() {

                    /**
                     * Properties of a PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageRequest
                     * @property {Uint8Array|null} [key] PageRequest key
                     * @property {number|null} [offset] PageRequest offset
                     * @property {number|null} [limit] PageRequest limit
                     * @property {boolean|null} [count_total] PageRequest count_total
                     * @property {boolean|null} [reverse] PageRequest reverse
                     */

                    /**
                     * Constructs a new PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageRequest.
                     * @implements IPageRequest
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageRequest=} [properties] Properties to set
                     */
                    function PageRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageRequest key.
                     * @member {Uint8Array} key
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.key = $util.newBuffer([]);

                    /**
                     * PageRequest offset.
                     * @member {number} offset
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest limit.
                     * @member {number} limit
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest count_total.
                     * @member {boolean} count_total
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.count_total = false;

                    /**
                     * PageRequest reverse.
                     * @member {boolean} reverse
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.reverse = false;

                    /**
                     * Encodes the specified PageRequest message. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.offset);
                        if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.limit);
                        if (message.count_total != null && Object.hasOwnProperty.call(message, "count_total"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.count_total);
                        if (message.reverse != null && Object.hasOwnProperty.call(message, "reverse"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reverse);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageRequest message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            case 2:
                                message.offset = reader.uint64();
                                break;
                            case 3:
                                message.limit = reader.uint64();
                                break;
                            case 4:
                                message.count_total = reader.bool();
                                break;
                            case 5:
                                message.reverse = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageRequest message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (!$util.isInteger(message.offset) && !(message.offset && $util.isInteger(message.offset.low) && $util.isInteger(message.offset.high)))
                                return "offset: integer|Long expected";
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                                return "limit: integer|Long expected";
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            if (typeof message.count_total !== "boolean")
                                return "count_total: boolean expected";
                        if (message.reverse != null && message.hasOwnProperty("reverse"))
                            if (typeof message.reverse !== "boolean")
                                return "reverse: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a PageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     */
                    PageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageRequest)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        if (object.offset != null)
                            if ($util.Long)
                                (message.offset = $util.Long.fromValue(object.offset)).unsigned = true;
                            else if (typeof object.offset === "string")
                                message.offset = parseInt(object.offset, 10);
                            else if (typeof object.offset === "number")
                                message.offset = object.offset;
                            else if (typeof object.offset === "object")
                                message.offset = new $util.LongBits(object.offset.low >>> 0, object.offset.high >>> 0).toNumber(true);
                        if (object.limit != null)
                            if ($util.Long)
                                (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                            else if (typeof object.limit === "string")
                                message.limit = parseInt(object.limit, 10);
                            else if (typeof object.limit === "number")
                                message.limit = object.limit;
                            else if (typeof object.limit === "object")
                                message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                        if (object.count_total != null)
                            message.count_total = Boolean(object.count_total);
                        if (object.reverse != null)
                            message.reverse = Boolean(object.reverse);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageRequest} message PageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.offset = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.limit = options.longs === String ? "0" : 0;
                            object.count_total = false;
                            object.reverse = false;
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (typeof message.offset === "number")
                                object.offset = options.longs === String ? String(message.offset) : message.offset;
                            else
                                object.offset = options.longs === String ? $util.Long.prototype.toString.call(message.offset) : options.longs === Number ? new $util.LongBits(message.offset.low >>> 0, message.offset.high >>> 0).toNumber(true) : message.offset;
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (typeof message.limit === "number")
                                object.limit = options.longs === String ? String(message.limit) : message.limit;
                            else
                                object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            object.count_total = message.count_total;
                        if (message.reverse != null && message.hasOwnProperty("reverse"))
                            object.reverse = message.reverse;
                        return object;
                    };

                    /**
                     * Converts this PageRequest to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageRequest;
                })();

                v1beta1.PageResponse = (function() {

                    /**
                     * Properties of a PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageResponse
                     * @property {Uint8Array|null} [next_key] PageResponse next_key
                     * @property {number|null} [total] PageResponse total
                     */

                    /**
                     * Constructs a new PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageResponse.
                     * @implements IPageResponse
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageResponse=} [properties] Properties to set
                     */
                    function PageResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageResponse next_key.
                     * @member {Uint8Array} next_key
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.next_key = $util.newBuffer([]);

                    /**
                     * PageResponse total.
                     * @member {number} total
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.total = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified PageResponse message. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.next_key != null && Object.hasOwnProperty.call(message, "next_key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.next_key);
                        if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.total);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageResponse message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.next_key = reader.bytes();
                                break;
                            case 2:
                                message.total = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageResponse message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            if (!(message.next_key && typeof message.next_key.length === "number" || $util.isString(message.next_key)))
                                return "next_key: buffer expected";
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                                return "total: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a PageResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     */
                    PageResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageResponse)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        if (object.next_key != null)
                            if (typeof object.next_key === "string")
                                $util.base64.decode(object.next_key, message.next_key = $util.newBuffer($util.base64.length(object.next_key)), 0);
                            else if (object.next_key.length)
                                message.next_key = object.next_key;
                        if (object.total != null)
                            if ($util.Long)
                                (message.total = $util.Long.fromValue(object.total)).unsigned = true;
                            else if (typeof object.total === "string")
                                message.total = parseInt(object.total, 10);
                            else if (typeof object.total === "number")
                                message.total = object.total;
                            else if (typeof object.total === "object")
                                message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageResponse} message PageResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.next_key = "";
                            else {
                                object.next_key = [];
                                if (options.bytes !== Array)
                                    object.next_key = $util.newBuffer(object.next_key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.total = options.longs === String ? "0" : 0;
                        }
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            object.next_key = options.bytes === String ? $util.base64.encode(message.next_key, 0, message.next_key.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_key) : message.next_key;
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (typeof message.total === "number")
                                object.total = options.longs === String ? String(message.total) : message.total;
                            else
                                object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber(true) : message.total;
                        return object;
                    };

                    /**
                     * Converts this PageResponse to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageResponse;
                })();

                return v1beta1;
            })();

            return query;
        })();

        return base;
    })();

    return cosmos;
})();

export const gogoproto = $root.gogoproto = (() => {

    /**
     * Namespace gogoproto.
     * @exports gogoproto
     * @namespace
     */
    const gogoproto = {};

    return gogoproto;
})();

export const cosmos_proto = $root.cosmos_proto = (() => {

    /**
     * Namespace cosmos_proto.
     * @exports cosmos_proto
     * @namespace
     */
    const cosmos_proto = {};

    return cosmos_proto;
})();

export const tendermint = $root.tendermint = (() => {

    /**
     * Namespace tendermint.
     * @exports tendermint
     * @namespace
     */
    const tendermint = {};

    tendermint.abci = (function() {

        /**
         * Namespace abci.
         * @memberof tendermint
         * @namespace
         */
        const abci = {};

        abci.Request = (function() {

            /**
             * Properties of a Request.
             * @memberof tendermint.abci
             * @interface IRequest
             * @property {tendermint.abci.IRequestEcho|null} [echo] Request echo
             * @property {tendermint.abci.IRequestFlush|null} [flush] Request flush
             * @property {tendermint.abci.IRequestInfo|null} [info] Request info
             * @property {tendermint.abci.IRequestSetOption|null} [set_option] Request set_option
             * @property {tendermint.abci.IRequestInitChain|null} [init_chain] Request init_chain
             * @property {tendermint.abci.IRequestQuery|null} [query] Request query
             * @property {tendermint.abci.IRequestBeginBlock|null} [begin_block] Request begin_block
             * @property {tendermint.abci.IRequestCheckTx|null} [check_tx] Request check_tx
             * @property {tendermint.abci.IRequestDeliverTx|null} [deliver_tx] Request deliver_tx
             * @property {tendermint.abci.IRequestEndBlock|null} [end_block] Request end_block
             * @property {tendermint.abci.IRequestCommit|null} [commit] Request commit
             * @property {tendermint.abci.IRequestListSnapshots|null} [list_snapshots] Request list_snapshots
             * @property {tendermint.abci.IRequestOfferSnapshot|null} [offer_snapshot] Request offer_snapshot
             * @property {tendermint.abci.IRequestLoadSnapshotChunk|null} [load_snapshot_chunk] Request load_snapshot_chunk
             * @property {tendermint.abci.IRequestApplySnapshotChunk|null} [apply_snapshot_chunk] Request apply_snapshot_chunk
             */

            /**
             * Constructs a new Request.
             * @memberof tendermint.abci
             * @classdesc Represents a Request.
             * @implements IRequest
             * @constructor
             * @param {tendermint.abci.IRequest=} [properties] Properties to set
             */
            function Request(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Request echo.
             * @member {tendermint.abci.IRequestEcho|null|undefined} echo
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.echo = null;

            /**
             * Request flush.
             * @member {tendermint.abci.IRequestFlush|null|undefined} flush
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.flush = null;

            /**
             * Request info.
             * @member {tendermint.abci.IRequestInfo|null|undefined} info
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.info = null;

            /**
             * Request set_option.
             * @member {tendermint.abci.IRequestSetOption|null|undefined} set_option
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.set_option = null;

            /**
             * Request init_chain.
             * @member {tendermint.abci.IRequestInitChain|null|undefined} init_chain
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.init_chain = null;

            /**
             * Request query.
             * @member {tendermint.abci.IRequestQuery|null|undefined} query
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.query = null;

            /**
             * Request begin_block.
             * @member {tendermint.abci.IRequestBeginBlock|null|undefined} begin_block
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.begin_block = null;

            /**
             * Request check_tx.
             * @member {tendermint.abci.IRequestCheckTx|null|undefined} check_tx
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.check_tx = null;

            /**
             * Request deliver_tx.
             * @member {tendermint.abci.IRequestDeliverTx|null|undefined} deliver_tx
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.deliver_tx = null;

            /**
             * Request end_block.
             * @member {tendermint.abci.IRequestEndBlock|null|undefined} end_block
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.end_block = null;

            /**
             * Request commit.
             * @member {tendermint.abci.IRequestCommit|null|undefined} commit
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.commit = null;

            /**
             * Request list_snapshots.
             * @member {tendermint.abci.IRequestListSnapshots|null|undefined} list_snapshots
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.list_snapshots = null;

            /**
             * Request offer_snapshot.
             * @member {tendermint.abci.IRequestOfferSnapshot|null|undefined} offer_snapshot
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.offer_snapshot = null;

            /**
             * Request load_snapshot_chunk.
             * @member {tendermint.abci.IRequestLoadSnapshotChunk|null|undefined} load_snapshot_chunk
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.load_snapshot_chunk = null;

            /**
             * Request apply_snapshot_chunk.
             * @member {tendermint.abci.IRequestApplySnapshotChunk|null|undefined} apply_snapshot_chunk
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.apply_snapshot_chunk = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Request value.
             * @member {"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
             * @memberof tendermint.abci.Request
             * @instance
             */
            Object.defineProperty(Request.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Request message. Does not implicitly {@link tendermint.abci.Request.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Request
             * @static
             * @param {tendermint.abci.IRequest} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Request.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                    $root.tendermint.abci.RequestEcho.encode(message.echo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.flush != null && Object.hasOwnProperty.call(message, "flush"))
                    $root.tendermint.abci.RequestFlush.encode(message.flush, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    $root.tendermint.abci.RequestInfo.encode(message.info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.set_option != null && Object.hasOwnProperty.call(message, "set_option"))
                    $root.tendermint.abci.RequestSetOption.encode(message.set_option, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.init_chain != null && Object.hasOwnProperty.call(message, "init_chain"))
                    $root.tendermint.abci.RequestInitChain.encode(message.init_chain, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                    $root.tendermint.abci.RequestQuery.encode(message.query, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.begin_block != null && Object.hasOwnProperty.call(message, "begin_block"))
                    $root.tendermint.abci.RequestBeginBlock.encode(message.begin_block, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.check_tx != null && Object.hasOwnProperty.call(message, "check_tx"))
                    $root.tendermint.abci.RequestCheckTx.encode(message.check_tx, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.deliver_tx != null && Object.hasOwnProperty.call(message, "deliver_tx"))
                    $root.tendermint.abci.RequestDeliverTx.encode(message.deliver_tx, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.end_block != null && Object.hasOwnProperty.call(message, "end_block"))
                    $root.tendermint.abci.RequestEndBlock.encode(message.end_block, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                    $root.tendermint.abci.RequestCommit.encode(message.commit, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.list_snapshots != null && Object.hasOwnProperty.call(message, "list_snapshots"))
                    $root.tendermint.abci.RequestListSnapshots.encode(message.list_snapshots, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.offer_snapshot != null && Object.hasOwnProperty.call(message, "offer_snapshot"))
                    $root.tendermint.abci.RequestOfferSnapshot.encode(message.offer_snapshot, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.load_snapshot_chunk != null && Object.hasOwnProperty.call(message, "load_snapshot_chunk"))
                    $root.tendermint.abci.RequestLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.apply_snapshot_chunk != null && Object.hasOwnProperty.call(message, "apply_snapshot_chunk"))
                    $root.tendermint.abci.RequestApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Request message, length delimited. Does not implicitly {@link tendermint.abci.Request.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Request
             * @static
             * @param {tendermint.abci.IRequest} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Request.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Request message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Request.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Request();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.echo = $root.tendermint.abci.RequestEcho.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.flush = $root.tendermint.abci.RequestFlush.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.info = $root.tendermint.abci.RequestInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.set_option = $root.tendermint.abci.RequestSetOption.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.init_chain = $root.tendermint.abci.RequestInitChain.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.query = $root.tendermint.abci.RequestQuery.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.begin_block = $root.tendermint.abci.RequestBeginBlock.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.check_tx = $root.tendermint.abci.RequestCheckTx.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.deliver_tx = $root.tendermint.abci.RequestDeliverTx.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.end_block = $root.tendermint.abci.RequestEndBlock.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.commit = $root.tendermint.abci.RequestCommit.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.list_snapshots = $root.tendermint.abci.RequestListSnapshots.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Request message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Request.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Request message.
             * @function verify
             * @memberof tendermint.abci.Request
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Request.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestEcho.verify(message.echo);
                        if (error)
                            return "echo." + error;
                    }
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestFlush.verify(message.flush);
                        if (error)
                            return "flush." + error;
                    }
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestInfo.verify(message.info);
                        if (error)
                            return "info." + error;
                    }
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestSetOption.verify(message.set_option);
                        if (error)
                            return "set_option." + error;
                    }
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestInitChain.verify(message.init_chain);
                        if (error)
                            return "init_chain." + error;
                    }
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestQuery.verify(message.query);
                        if (error)
                            return "query." + error;
                    }
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestBeginBlock.verify(message.begin_block);
                        if (error)
                            return "begin_block." + error;
                    }
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestCheckTx.verify(message.check_tx);
                        if (error)
                            return "check_tx." + error;
                    }
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestDeliverTx.verify(message.deliver_tx);
                        if (error)
                            return "deliver_tx." + error;
                    }
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestEndBlock.verify(message.end_block);
                        if (error)
                            return "end_block." + error;
                    }
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestCommit.verify(message.commit);
                        if (error)
                            return "commit." + error;
                    }
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestListSnapshots.verify(message.list_snapshots);
                        if (error)
                            return "list_snapshots." + error;
                    }
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestOfferSnapshot.verify(message.offer_snapshot);
                        if (error)
                            return "offer_snapshot." + error;
                    }
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestLoadSnapshotChunk.verify(message.load_snapshot_chunk);
                        if (error)
                            return "load_snapshot_chunk." + error;
                    }
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestApplySnapshotChunk.verify(message.apply_snapshot_chunk);
                        if (error)
                            return "apply_snapshot_chunk." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Request message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Request
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Request} Request
             */
            Request.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Request)
                    return object;
                let message = new $root.tendermint.abci.Request();
                if (object.echo != null) {
                    if (typeof object.echo !== "object")
                        throw TypeError(".tendermint.abci.Request.echo: object expected");
                    message.echo = $root.tendermint.abci.RequestEcho.fromObject(object.echo);
                }
                if (object.flush != null) {
                    if (typeof object.flush !== "object")
                        throw TypeError(".tendermint.abci.Request.flush: object expected");
                    message.flush = $root.tendermint.abci.RequestFlush.fromObject(object.flush);
                }
                if (object.info != null) {
                    if (typeof object.info !== "object")
                        throw TypeError(".tendermint.abci.Request.info: object expected");
                    message.info = $root.tendermint.abci.RequestInfo.fromObject(object.info);
                }
                if (object.set_option != null) {
                    if (typeof object.set_option !== "object")
                        throw TypeError(".tendermint.abci.Request.set_option: object expected");
                    message.set_option = $root.tendermint.abci.RequestSetOption.fromObject(object.set_option);
                }
                if (object.init_chain != null) {
                    if (typeof object.init_chain !== "object")
                        throw TypeError(".tendermint.abci.Request.init_chain: object expected");
                    message.init_chain = $root.tendermint.abci.RequestInitChain.fromObject(object.init_chain);
                }
                if (object.query != null) {
                    if (typeof object.query !== "object")
                        throw TypeError(".tendermint.abci.Request.query: object expected");
                    message.query = $root.tendermint.abci.RequestQuery.fromObject(object.query);
                }
                if (object.begin_block != null) {
                    if (typeof object.begin_block !== "object")
                        throw TypeError(".tendermint.abci.Request.begin_block: object expected");
                    message.begin_block = $root.tendermint.abci.RequestBeginBlock.fromObject(object.begin_block);
                }
                if (object.check_tx != null) {
                    if (typeof object.check_tx !== "object")
                        throw TypeError(".tendermint.abci.Request.check_tx: object expected");
                    message.check_tx = $root.tendermint.abci.RequestCheckTx.fromObject(object.check_tx);
                }
                if (object.deliver_tx != null) {
                    if (typeof object.deliver_tx !== "object")
                        throw TypeError(".tendermint.abci.Request.deliver_tx: object expected");
                    message.deliver_tx = $root.tendermint.abci.RequestDeliverTx.fromObject(object.deliver_tx);
                }
                if (object.end_block != null) {
                    if (typeof object.end_block !== "object")
                        throw TypeError(".tendermint.abci.Request.end_block: object expected");
                    message.end_block = $root.tendermint.abci.RequestEndBlock.fromObject(object.end_block);
                }
                if (object.commit != null) {
                    if (typeof object.commit !== "object")
                        throw TypeError(".tendermint.abci.Request.commit: object expected");
                    message.commit = $root.tendermint.abci.RequestCommit.fromObject(object.commit);
                }
                if (object.list_snapshots != null) {
                    if (typeof object.list_snapshots !== "object")
                        throw TypeError(".tendermint.abci.Request.list_snapshots: object expected");
                    message.list_snapshots = $root.tendermint.abci.RequestListSnapshots.fromObject(object.list_snapshots);
                }
                if (object.offer_snapshot != null) {
                    if (typeof object.offer_snapshot !== "object")
                        throw TypeError(".tendermint.abci.Request.offer_snapshot: object expected");
                    message.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.fromObject(object.offer_snapshot);
                }
                if (object.load_snapshot_chunk != null) {
                    if (typeof object.load_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Request.load_snapshot_chunk: object expected");
                    message.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.fromObject(object.load_snapshot_chunk);
                }
                if (object.apply_snapshot_chunk != null) {
                    if (typeof object.apply_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Request.apply_snapshot_chunk: object expected");
                    message.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.fromObject(object.apply_snapshot_chunk);
                }
                return message;
            };

            /**
             * Creates a plain object from a Request message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Request
             * @static
             * @param {tendermint.abci.Request} message Request
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Request.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    object.echo = $root.tendermint.abci.RequestEcho.toObject(message.echo, options);
                    if (options.oneofs)
                        object.value = "echo";
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    object.flush = $root.tendermint.abci.RequestFlush.toObject(message.flush, options);
                    if (options.oneofs)
                        object.value = "flush";
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    object.info = $root.tendermint.abci.RequestInfo.toObject(message.info, options);
                    if (options.oneofs)
                        object.value = "info";
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    object.set_option = $root.tendermint.abci.RequestSetOption.toObject(message.set_option, options);
                    if (options.oneofs)
                        object.value = "set_option";
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    object.init_chain = $root.tendermint.abci.RequestInitChain.toObject(message.init_chain, options);
                    if (options.oneofs)
                        object.value = "init_chain";
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    object.query = $root.tendermint.abci.RequestQuery.toObject(message.query, options);
                    if (options.oneofs)
                        object.value = "query";
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    object.begin_block = $root.tendermint.abci.RequestBeginBlock.toObject(message.begin_block, options);
                    if (options.oneofs)
                        object.value = "begin_block";
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    object.check_tx = $root.tendermint.abci.RequestCheckTx.toObject(message.check_tx, options);
                    if (options.oneofs)
                        object.value = "check_tx";
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    object.deliver_tx = $root.tendermint.abci.RequestDeliverTx.toObject(message.deliver_tx, options);
                    if (options.oneofs)
                        object.value = "deliver_tx";
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    object.end_block = $root.tendermint.abci.RequestEndBlock.toObject(message.end_block, options);
                    if (options.oneofs)
                        object.value = "end_block";
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    object.commit = $root.tendermint.abci.RequestCommit.toObject(message.commit, options);
                    if (options.oneofs)
                        object.value = "commit";
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    object.list_snapshots = $root.tendermint.abci.RequestListSnapshots.toObject(message.list_snapshots, options);
                    if (options.oneofs)
                        object.value = "list_snapshots";
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    object.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.toObject(message.offer_snapshot, options);
                    if (options.oneofs)
                        object.value = "offer_snapshot";
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    object.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.toObject(message.load_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "load_snapshot_chunk";
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    object.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.toObject(message.apply_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "apply_snapshot_chunk";
                }
                return object;
            };

            /**
             * Converts this Request to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Request
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Request.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Request;
        })();

        abci.RequestEcho = (function() {

            /**
             * Properties of a RequestEcho.
             * @memberof tendermint.abci
             * @interface IRequestEcho
             * @property {string|null} [message] RequestEcho message
             */

            /**
             * Constructs a new RequestEcho.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestEcho.
             * @implements IRequestEcho
             * @constructor
             * @param {tendermint.abci.IRequestEcho=} [properties] Properties to set
             */
            function RequestEcho(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestEcho message.
             * @member {string} message
             * @memberof tendermint.abci.RequestEcho
             * @instance
             */
            RequestEcho.prototype.message = "";

            /**
             * Encodes the specified RequestEcho message. Does not implicitly {@link tendermint.abci.RequestEcho.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {tendermint.abci.IRequestEcho} message RequestEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEcho.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                return writer;
            };

            /**
             * Encodes the specified RequestEcho message, length delimited. Does not implicitly {@link tendermint.abci.RequestEcho.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {tendermint.abci.IRequestEcho} message RequestEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEcho.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestEcho message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestEcho} RequestEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEcho.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestEcho();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestEcho message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestEcho} RequestEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEcho.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestEcho message.
             * @function verify
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestEcho.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                return null;
            };

            /**
             * Creates a RequestEcho message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestEcho} RequestEcho
             */
            RequestEcho.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestEcho)
                    return object;
                let message = new $root.tendermint.abci.RequestEcho();
                if (object.message != null)
                    message.message = String(object.message);
                return message;
            };

            /**
             * Creates a plain object from a RequestEcho message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {tendermint.abci.RequestEcho} message RequestEcho
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestEcho.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.message = "";
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                return object;
            };

            /**
             * Converts this RequestEcho to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestEcho
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestEcho.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestEcho;
        })();

        abci.RequestFlush = (function() {

            /**
             * Properties of a RequestFlush.
             * @memberof tendermint.abci
             * @interface IRequestFlush
             */

            /**
             * Constructs a new RequestFlush.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestFlush.
             * @implements IRequestFlush
             * @constructor
             * @param {tendermint.abci.IRequestFlush=} [properties] Properties to set
             */
            function RequestFlush(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified RequestFlush message. Does not implicitly {@link tendermint.abci.RequestFlush.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {tendermint.abci.IRequestFlush} message RequestFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestFlush.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RequestFlush message, length delimited. Does not implicitly {@link tendermint.abci.RequestFlush.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {tendermint.abci.IRequestFlush} message RequestFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestFlush.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestFlush message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestFlush} RequestFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestFlush.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestFlush();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestFlush message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestFlush} RequestFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestFlush.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestFlush message.
             * @function verify
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestFlush.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RequestFlush message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestFlush} RequestFlush
             */
            RequestFlush.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestFlush)
                    return object;
                return new $root.tendermint.abci.RequestFlush();
            };

            /**
             * Creates a plain object from a RequestFlush message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {tendermint.abci.RequestFlush} message RequestFlush
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestFlush.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RequestFlush to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestFlush
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestFlush.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestFlush;
        })();

        abci.RequestInfo = (function() {

            /**
             * Properties of a RequestInfo.
             * @memberof tendermint.abci
             * @interface IRequestInfo
             * @property {string|null} [version] RequestInfo version
             * @property {number|null} [block_version] RequestInfo block_version
             * @property {number|null} [p2p_version] RequestInfo p2p_version
             */

            /**
             * Constructs a new RequestInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestInfo.
             * @implements IRequestInfo
             * @constructor
             * @param {tendermint.abci.IRequestInfo=} [properties] Properties to set
             */
            function RequestInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestInfo version.
             * @member {string} version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.version = "";

            /**
             * RequestInfo block_version.
             * @member {number} block_version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.block_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * RequestInfo p2p_version.
             * @member {number} p2p_version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.p2p_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified RequestInfo message. Does not implicitly {@link tendermint.abci.RequestInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {tendermint.abci.IRequestInfo} message RequestInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                if (message.block_version != null && Object.hasOwnProperty.call(message, "block_version"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.block_version);
                if (message.p2p_version != null && Object.hasOwnProperty.call(message, "p2p_version"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.p2p_version);
                return writer;
            };

            /**
             * Encodes the specified RequestInfo message, length delimited. Does not implicitly {@link tendermint.abci.RequestInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {tendermint.abci.IRequestInfo} message RequestInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestInfo} RequestInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.version = reader.string();
                        break;
                    case 2:
                        message.block_version = reader.uint64();
                        break;
                    case 3:
                        message.p2p_version = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestInfo} RequestInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestInfo message.
             * @function verify
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.version != null && message.hasOwnProperty("version"))
                    if (!$util.isString(message.version))
                        return "version: string expected";
                if (message.block_version != null && message.hasOwnProperty("block_version"))
                    if (!$util.isInteger(message.block_version) && !(message.block_version && $util.isInteger(message.block_version.low) && $util.isInteger(message.block_version.high)))
                        return "block_version: integer|Long expected";
                if (message.p2p_version != null && message.hasOwnProperty("p2p_version"))
                    if (!$util.isInteger(message.p2p_version) && !(message.p2p_version && $util.isInteger(message.p2p_version.low) && $util.isInteger(message.p2p_version.high)))
                        return "p2p_version: integer|Long expected";
                return null;
            };

            /**
             * Creates a RequestInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestInfo} RequestInfo
             */
            RequestInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestInfo)
                    return object;
                let message = new $root.tendermint.abci.RequestInfo();
                if (object.version != null)
                    message.version = String(object.version);
                if (object.block_version != null)
                    if ($util.Long)
                        (message.block_version = $util.Long.fromValue(object.block_version)).unsigned = true;
                    else if (typeof object.block_version === "string")
                        message.block_version = parseInt(object.block_version, 10);
                    else if (typeof object.block_version === "number")
                        message.block_version = object.block_version;
                    else if (typeof object.block_version === "object")
                        message.block_version = new $util.LongBits(object.block_version.low >>> 0, object.block_version.high >>> 0).toNumber(true);
                if (object.p2p_version != null)
                    if ($util.Long)
                        (message.p2p_version = $util.Long.fromValue(object.p2p_version)).unsigned = true;
                    else if (typeof object.p2p_version === "string")
                        message.p2p_version = parseInt(object.p2p_version, 10);
                    else if (typeof object.p2p_version === "number")
                        message.p2p_version = object.p2p_version;
                    else if (typeof object.p2p_version === "object")
                        message.p2p_version = new $util.LongBits(object.p2p_version.low >>> 0, object.p2p_version.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a RequestInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {tendermint.abci.RequestInfo} message RequestInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.version = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.block_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_version = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.p2p_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.p2p_version = options.longs === String ? "0" : 0;
                }
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = message.version;
                if (message.block_version != null && message.hasOwnProperty("block_version"))
                    if (typeof message.block_version === "number")
                        object.block_version = options.longs === String ? String(message.block_version) : message.block_version;
                    else
                        object.block_version = options.longs === String ? $util.Long.prototype.toString.call(message.block_version) : options.longs === Number ? new $util.LongBits(message.block_version.low >>> 0, message.block_version.high >>> 0).toNumber(true) : message.block_version;
                if (message.p2p_version != null && message.hasOwnProperty("p2p_version"))
                    if (typeof message.p2p_version === "number")
                        object.p2p_version = options.longs === String ? String(message.p2p_version) : message.p2p_version;
                    else
                        object.p2p_version = options.longs === String ? $util.Long.prototype.toString.call(message.p2p_version) : options.longs === Number ? new $util.LongBits(message.p2p_version.low >>> 0, message.p2p_version.high >>> 0).toNumber(true) : message.p2p_version;
                return object;
            };

            /**
             * Converts this RequestInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestInfo;
        })();

        abci.RequestSetOption = (function() {

            /**
             * Properties of a RequestSetOption.
             * @memberof tendermint.abci
             * @interface IRequestSetOption
             * @property {string|null} [key] RequestSetOption key
             * @property {string|null} [value] RequestSetOption value
             */

            /**
             * Constructs a new RequestSetOption.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestSetOption.
             * @implements IRequestSetOption
             * @constructor
             * @param {tendermint.abci.IRequestSetOption=} [properties] Properties to set
             */
            function RequestSetOption(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestSetOption key.
             * @member {string} key
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             */
            RequestSetOption.prototype.key = "";

            /**
             * RequestSetOption value.
             * @member {string} value
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             */
            RequestSetOption.prototype.value = "";

            /**
             * Encodes the specified RequestSetOption message. Does not implicitly {@link tendermint.abci.RequestSetOption.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {tendermint.abci.IRequestSetOption} message RequestSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestSetOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };

            /**
             * Encodes the specified RequestSetOption message, length delimited. Does not implicitly {@link tendermint.abci.RequestSetOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {tendermint.abci.IRequestSetOption} message RequestSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestSetOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestSetOption message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestSetOption} RequestSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestSetOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestSetOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestSetOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestSetOption} RequestSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestSetOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestSetOption message.
             * @function verify
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestSetOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };

            /**
             * Creates a RequestSetOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestSetOption} RequestSetOption
             */
            RequestSetOption.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestSetOption)
                    return object;
                let message = new $root.tendermint.abci.RequestSetOption();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };

            /**
             * Creates a plain object from a RequestSetOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {tendermint.abci.RequestSetOption} message RequestSetOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestSetOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.key = "";
                    object.value = "";
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this RequestSetOption to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestSetOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestSetOption;
        })();

        abci.RequestInitChain = (function() {

            /**
             * Properties of a RequestInitChain.
             * @memberof tendermint.abci
             * @interface IRequestInitChain
             * @property {google.protobuf.ITimestamp|null} [time] RequestInitChain time
             * @property {string|null} [chain_id] RequestInitChain chain_id
             * @property {tendermint.abci.IConsensusParams|null} [consensus_params] RequestInitChain consensus_params
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] RequestInitChain validators
             * @property {Uint8Array|null} [app_state_bytes] RequestInitChain app_state_bytes
             * @property {number|null} [initial_height] RequestInitChain initial_height
             */

            /**
             * Constructs a new RequestInitChain.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestInitChain.
             * @implements IRequestInitChain
             * @constructor
             * @param {tendermint.abci.IRequestInitChain=} [properties] Properties to set
             */
            function RequestInitChain(properties) {
                this.validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestInitChain time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.time = null;

            /**
             * RequestInitChain chain_id.
             * @member {string} chain_id
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.chain_id = "";

            /**
             * RequestInitChain consensus_params.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.consensus_params = null;

            /**
             * RequestInitChain validators.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.validators = $util.emptyArray;

            /**
             * RequestInitChain app_state_bytes.
             * @member {Uint8Array} app_state_bytes
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.app_state_bytes = $util.newBuffer([]);

            /**
             * RequestInitChain initial_height.
             * @member {number} initial_height
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.initial_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified RequestInitChain message. Does not implicitly {@link tendermint.abci.RequestInitChain.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {tendermint.abci.IRequestInitChain} message RequestInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInitChain.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                    $root.tendermint.abci.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.validators != null && message.validators.length)
                    for (let i = 0; i < message.validators.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(message.validators[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.app_state_bytes != null && Object.hasOwnProperty.call(message, "app_state_bytes"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.app_state_bytes);
                if (message.initial_height != null && Object.hasOwnProperty.call(message, "initial_height"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.initial_height);
                return writer;
            };

            /**
             * Encodes the specified RequestInitChain message, length delimited. Does not implicitly {@link tendermint.abci.RequestInitChain.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {tendermint.abci.IRequestInitChain} message RequestInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInitChain.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestInitChain message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestInitChain} RequestInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInitChain.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestInitChain();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    case 3:
                        message.consensus_params = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.validators && message.validators.length))
                            message.validators = [];
                        message.validators.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.app_state_bytes = reader.bytes();
                        break;
                    case 6:
                        message.initial_height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestInitChain message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestInitChain} RequestInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInitChain.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestInitChain message.
             * @function verify
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestInitChain.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                    let error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_params);
                    if (error)
                        return "consensus_params." + error;
                }
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    if (!Array.isArray(message.validators))
                        return "validators: array expected";
                    for (let i = 0; i < message.validators.length; ++i) {
                        let error = $root.tendermint.abci.ValidatorUpdate.verify(message.validators[i]);
                        if (error)
                            return "validators." + error;
                    }
                }
                if (message.app_state_bytes != null && message.hasOwnProperty("app_state_bytes"))
                    if (!(message.app_state_bytes && typeof message.app_state_bytes.length === "number" || $util.isString(message.app_state_bytes)))
                        return "app_state_bytes: buffer expected";
                if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                    if (!$util.isInteger(message.initial_height) && !(message.initial_height && $util.isInteger(message.initial_height.low) && $util.isInteger(message.initial_height.high)))
                        return "initial_height: integer|Long expected";
                return null;
            };

            /**
             * Creates a RequestInitChain message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestInitChain} RequestInitChain
             */
            RequestInitChain.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestInitChain)
                    return object;
                let message = new $root.tendermint.abci.RequestInitChain();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.abci.RequestInitChain.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                if (object.consensus_params != null) {
                    if (typeof object.consensus_params !== "object")
                        throw TypeError(".tendermint.abci.RequestInitChain.consensus_params: object expected");
                    message.consensus_params = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_params);
                }
                if (object.validators) {
                    if (!Array.isArray(object.validators))
                        throw TypeError(".tendermint.abci.RequestInitChain.validators: array expected");
                    message.validators = [];
                    for (let i = 0; i < object.validators.length; ++i) {
                        if (typeof object.validators[i] !== "object")
                            throw TypeError(".tendermint.abci.RequestInitChain.validators: object expected");
                        message.validators[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validators[i]);
                    }
                }
                if (object.app_state_bytes != null)
                    if (typeof object.app_state_bytes === "string")
                        $util.base64.decode(object.app_state_bytes, message.app_state_bytes = $util.newBuffer($util.base64.length(object.app_state_bytes)), 0);
                    else if (object.app_state_bytes.length)
                        message.app_state_bytes = object.app_state_bytes;
                if (object.initial_height != null)
                    if ($util.Long)
                        (message.initial_height = $util.Long.fromValue(object.initial_height)).unsigned = false;
                    else if (typeof object.initial_height === "string")
                        message.initial_height = parseInt(object.initial_height, 10);
                    else if (typeof object.initial_height === "number")
                        message.initial_height = object.initial_height;
                    else if (typeof object.initial_height === "object")
                        message.initial_height = new $util.LongBits(object.initial_height.low >>> 0, object.initial_height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RequestInitChain message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {tendermint.abci.RequestInitChain} message RequestInitChain
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestInitChain.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.validators = [];
                if (options.defaults) {
                    object.time = null;
                    object.chain_id = "";
                    object.consensus_params = null;
                    if (options.bytes === String)
                        object.app_state_bytes = "";
                    else {
                        object.app_state_bytes = [];
                        if (options.bytes !== Array)
                            object.app_state_bytes = $util.newBuffer(object.app_state_bytes);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.initial_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.initial_height = options.longs === String ? "0" : 0;
                }
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                    object.consensus_params = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_params, options);
                if (message.validators && message.validators.length) {
                    object.validators = [];
                    for (let j = 0; j < message.validators.length; ++j)
                        object.validators[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validators[j], options);
                }
                if (message.app_state_bytes != null && message.hasOwnProperty("app_state_bytes"))
                    object.app_state_bytes = options.bytes === String ? $util.base64.encode(message.app_state_bytes, 0, message.app_state_bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_state_bytes) : message.app_state_bytes;
                if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                    if (typeof message.initial_height === "number")
                        object.initial_height = options.longs === String ? String(message.initial_height) : message.initial_height;
                    else
                        object.initial_height = options.longs === String ? $util.Long.prototype.toString.call(message.initial_height) : options.longs === Number ? new $util.LongBits(message.initial_height.low >>> 0, message.initial_height.high >>> 0).toNumber() : message.initial_height;
                return object;
            };

            /**
             * Converts this RequestInitChain to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestInitChain.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestInitChain;
        })();

        abci.RequestQuery = (function() {

            /**
             * Properties of a RequestQuery.
             * @memberof tendermint.abci
             * @interface IRequestQuery
             * @property {Uint8Array|null} [data] RequestQuery data
             * @property {string|null} [path] RequestQuery path
             * @property {number|null} [height] RequestQuery height
             * @property {boolean|null} [prove] RequestQuery prove
             */

            /**
             * Constructs a new RequestQuery.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestQuery.
             * @implements IRequestQuery
             * @constructor
             * @param {tendermint.abci.IRequestQuery=} [properties] Properties to set
             */
            function RequestQuery(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestQuery data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.data = $util.newBuffer([]);

            /**
             * RequestQuery path.
             * @member {string} path
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.path = "";

            /**
             * RequestQuery height.
             * @member {number} height
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RequestQuery prove.
             * @member {boolean} prove
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.prove = false;

            /**
             * Encodes the specified RequestQuery message. Does not implicitly {@link tendermint.abci.RequestQuery.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {tendermint.abci.IRequestQuery} message RequestQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                if (message.prove != null && Object.hasOwnProperty.call(message, "prove"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.prove);
                return writer;
            };

            /**
             * Encodes the specified RequestQuery message, length delimited. Does not implicitly {@link tendermint.abci.RequestQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {tendermint.abci.IRequestQuery} message RequestQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestQuery message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestQuery} RequestQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestQuery();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.data = reader.bytes();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    case 3:
                        message.height = reader.int64();
                        break;
                    case 4:
                        message.prove = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestQuery} RequestQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestQuery message.
             * @function verify
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.prove != null && message.hasOwnProperty("prove"))
                    if (typeof message.prove !== "boolean")
                        return "prove: boolean expected";
                return null;
            };

            /**
             * Creates a RequestQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestQuery} RequestQuery
             */
            RequestQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestQuery)
                    return object;
                let message = new $root.tendermint.abci.RequestQuery();
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.path != null)
                    message.path = String(object.path);
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.prove != null)
                    message.prove = Boolean(object.prove);
                return message;
            };

            /**
             * Creates a plain object from a RequestQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {tendermint.abci.RequestQuery} message RequestQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.path = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.prove = false;
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.prove != null && message.hasOwnProperty("prove"))
                    object.prove = message.prove;
                return object;
            };

            /**
             * Converts this RequestQuery to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestQuery;
        })();

        abci.RequestBeginBlock = (function() {

            /**
             * Properties of a RequestBeginBlock.
             * @memberof tendermint.abci
             * @interface IRequestBeginBlock
             * @property {Uint8Array|null} [hash] RequestBeginBlock hash
             * @property {tendermint.types.IHeader|null} [header] RequestBeginBlock header
             * @property {tendermint.abci.ILastCommitInfo|null} [last_commit_info] RequestBeginBlock last_commit_info
             * @property {Array.<tendermint.abci.IEvidence>|null} [byzantine_validators] RequestBeginBlock byzantine_validators
             */

            /**
             * Constructs a new RequestBeginBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestBeginBlock.
             * @implements IRequestBeginBlock
             * @constructor
             * @param {tendermint.abci.IRequestBeginBlock=} [properties] Properties to set
             */
            function RequestBeginBlock(properties) {
                this.byzantine_validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestBeginBlock hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.hash = $util.newBuffer([]);

            /**
             * RequestBeginBlock header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.header = null;

            /**
             * RequestBeginBlock last_commit_info.
             * @member {tendermint.abci.ILastCommitInfo|null|undefined} last_commit_info
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.last_commit_info = null;

            /**
             * RequestBeginBlock byzantine_validators.
             * @member {Array.<tendermint.abci.IEvidence>} byzantine_validators
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.byzantine_validators = $util.emptyArray;

            /**
             * Encodes the specified RequestBeginBlock message. Does not implicitly {@link tendermint.abci.RequestBeginBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {tendermint.abci.IRequestBeginBlock} message RequestBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestBeginBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.last_commit_info != null && Object.hasOwnProperty.call(message, "last_commit_info"))
                    $root.tendermint.abci.LastCommitInfo.encode(message.last_commit_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.byzantine_validators != null && message.byzantine_validators.length)
                    for (let i = 0; i < message.byzantine_validators.length; ++i)
                        $root.tendermint.abci.Evidence.encode(message.byzantine_validators[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RequestBeginBlock message, length delimited. Does not implicitly {@link tendermint.abci.RequestBeginBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {tendermint.abci.IRequestBeginBlock} message RequestBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestBeginBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestBeginBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestBeginBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestBeginBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    case 2:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.last_commit_info = $root.tendermint.abci.LastCommitInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.byzantine_validators && message.byzantine_validators.length))
                            message.byzantine_validators = [];
                        message.byzantine_validators.push($root.tendermint.abci.Evidence.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestBeginBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestBeginBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestBeginBlock message.
             * @function verify
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestBeginBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.last_commit_info != null && message.hasOwnProperty("last_commit_info")) {
                    let error = $root.tendermint.abci.LastCommitInfo.verify(message.last_commit_info);
                    if (error)
                        return "last_commit_info." + error;
                }
                if (message.byzantine_validators != null && message.hasOwnProperty("byzantine_validators")) {
                    if (!Array.isArray(message.byzantine_validators))
                        return "byzantine_validators: array expected";
                    for (let i = 0; i < message.byzantine_validators.length; ++i) {
                        let error = $root.tendermint.abci.Evidence.verify(message.byzantine_validators[i]);
                        if (error)
                            return "byzantine_validators." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a RequestBeginBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
             */
            RequestBeginBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestBeginBlock)
                    return object;
                let message = new $root.tendermint.abci.RequestBeginBlock();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.abci.RequestBeginBlock.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.last_commit_info != null) {
                    if (typeof object.last_commit_info !== "object")
                        throw TypeError(".tendermint.abci.RequestBeginBlock.last_commit_info: object expected");
                    message.last_commit_info = $root.tendermint.abci.LastCommitInfo.fromObject(object.last_commit_info);
                }
                if (object.byzantine_validators) {
                    if (!Array.isArray(object.byzantine_validators))
                        throw TypeError(".tendermint.abci.RequestBeginBlock.byzantine_validators: array expected");
                    message.byzantine_validators = [];
                    for (let i = 0; i < object.byzantine_validators.length; ++i) {
                        if (typeof object.byzantine_validators[i] !== "object")
                            throw TypeError(".tendermint.abci.RequestBeginBlock.byzantine_validators: object expected");
                        message.byzantine_validators[i] = $root.tendermint.abci.Evidence.fromObject(object.byzantine_validators[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a RequestBeginBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {tendermint.abci.RequestBeginBlock} message RequestBeginBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestBeginBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.byzantine_validators = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.header = null;
                    object.last_commit_info = null;
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.last_commit_info != null && message.hasOwnProperty("last_commit_info"))
                    object.last_commit_info = $root.tendermint.abci.LastCommitInfo.toObject(message.last_commit_info, options);
                if (message.byzantine_validators && message.byzantine_validators.length) {
                    object.byzantine_validators = [];
                    for (let j = 0; j < message.byzantine_validators.length; ++j)
                        object.byzantine_validators[j] = $root.tendermint.abci.Evidence.toObject(message.byzantine_validators[j], options);
                }
                return object;
            };

            /**
             * Converts this RequestBeginBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestBeginBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestBeginBlock;
        })();

        /**
         * CheckTxType enum.
         * @name tendermint.abci.CheckTxType
         * @enum {number}
         * @property {number} NEW=0 NEW value
         * @property {number} RECHECK=1 RECHECK value
         */
        abci.CheckTxType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NEW"] = 0;
            values[valuesById[1] = "RECHECK"] = 1;
            return values;
        })();

        abci.RequestCheckTx = (function() {

            /**
             * Properties of a RequestCheckTx.
             * @memberof tendermint.abci
             * @interface IRequestCheckTx
             * @property {Uint8Array|null} [tx] RequestCheckTx tx
             * @property {tendermint.abci.CheckTxType|null} [type] RequestCheckTx type
             */

            /**
             * Constructs a new RequestCheckTx.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestCheckTx.
             * @implements IRequestCheckTx
             * @constructor
             * @param {tendermint.abci.IRequestCheckTx=} [properties] Properties to set
             */
            function RequestCheckTx(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestCheckTx tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             */
            RequestCheckTx.prototype.tx = $util.newBuffer([]);

            /**
             * RequestCheckTx type.
             * @member {tendermint.abci.CheckTxType} type
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             */
            RequestCheckTx.prototype.type = 0;

            /**
             * Encodes the specified RequestCheckTx message. Does not implicitly {@link tendermint.abci.RequestCheckTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {tendermint.abci.IRequestCheckTx} message RequestCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCheckTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.tx);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                return writer;
            };

            /**
             * Encodes the specified RequestCheckTx message, length delimited. Does not implicitly {@link tendermint.abci.RequestCheckTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {tendermint.abci.IRequestCheckTx} message RequestCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCheckTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestCheckTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCheckTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestCheckTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tx = reader.bytes();
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestCheckTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCheckTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestCheckTx message.
             * @function verify
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestCheckTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tx != null && message.hasOwnProperty("tx"))
                    if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                        return "tx: buffer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a RequestCheckTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
             */
            RequestCheckTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestCheckTx)
                    return object;
                let message = new $root.tendermint.abci.RequestCheckTx();
                if (object.tx != null)
                    if (typeof object.tx === "string")
                        $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                    else if (object.tx.length)
                        message.tx = object.tx;
                switch (object.type) {
                case "NEW":
                case 0:
                    message.type = 0;
                    break;
                case "RECHECK":
                case 1:
                    message.type = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RequestCheckTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {tendermint.abci.RequestCheckTx} message RequestCheckTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestCheckTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.tx = "";
                    else {
                        object.tx = [];
                        if (options.bytes !== Array)
                            object.tx = $util.newBuffer(object.tx);
                    }
                    object.type = options.enums === String ? "NEW" : 0;
                }
                if (message.tx != null && message.hasOwnProperty("tx"))
                    object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.abci.CheckTxType[message.type] : message.type;
                return object;
            };

            /**
             * Converts this RequestCheckTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestCheckTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestCheckTx;
        })();

        abci.RequestDeliverTx = (function() {

            /**
             * Properties of a RequestDeliverTx.
             * @memberof tendermint.abci
             * @interface IRequestDeliverTx
             * @property {Uint8Array|null} [tx] RequestDeliverTx tx
             */

            /**
             * Constructs a new RequestDeliverTx.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestDeliverTx.
             * @implements IRequestDeliverTx
             * @constructor
             * @param {tendermint.abci.IRequestDeliverTx=} [properties] Properties to set
             */
            function RequestDeliverTx(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestDeliverTx tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.RequestDeliverTx
             * @instance
             */
            RequestDeliverTx.prototype.tx = $util.newBuffer([]);

            /**
             * Encodes the specified RequestDeliverTx message. Does not implicitly {@link tendermint.abci.RequestDeliverTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {tendermint.abci.IRequestDeliverTx} message RequestDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestDeliverTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.tx);
                return writer;
            };

            /**
             * Encodes the specified RequestDeliverTx message, length delimited. Does not implicitly {@link tendermint.abci.RequestDeliverTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {tendermint.abci.IRequestDeliverTx} message RequestDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestDeliverTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestDeliverTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestDeliverTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestDeliverTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tx = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestDeliverTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestDeliverTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestDeliverTx message.
             * @function verify
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestDeliverTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tx != null && message.hasOwnProperty("tx"))
                    if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                        return "tx: buffer expected";
                return null;
            };

            /**
             * Creates a RequestDeliverTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
             */
            RequestDeliverTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestDeliverTx)
                    return object;
                let message = new $root.tendermint.abci.RequestDeliverTx();
                if (object.tx != null)
                    if (typeof object.tx === "string")
                        $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                    else if (object.tx.length)
                        message.tx = object.tx;
                return message;
            };

            /**
             * Creates a plain object from a RequestDeliverTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {tendermint.abci.RequestDeliverTx} message RequestDeliverTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestDeliverTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.tx = "";
                    else {
                        object.tx = [];
                        if (options.bytes !== Array)
                            object.tx = $util.newBuffer(object.tx);
                    }
                if (message.tx != null && message.hasOwnProperty("tx"))
                    object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                return object;
            };

            /**
             * Converts this RequestDeliverTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestDeliverTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestDeliverTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestDeliverTx;
        })();

        abci.RequestEndBlock = (function() {

            /**
             * Properties of a RequestEndBlock.
             * @memberof tendermint.abci
             * @interface IRequestEndBlock
             * @property {number|null} [height] RequestEndBlock height
             */

            /**
             * Constructs a new RequestEndBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestEndBlock.
             * @implements IRequestEndBlock
             * @constructor
             * @param {tendermint.abci.IRequestEndBlock=} [properties] Properties to set
             */
            function RequestEndBlock(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestEndBlock height.
             * @member {number} height
             * @memberof tendermint.abci.RequestEndBlock
             * @instance
             */
            RequestEndBlock.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified RequestEndBlock message. Does not implicitly {@link tendermint.abci.RequestEndBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {tendermint.abci.IRequestEndBlock} message RequestEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEndBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                return writer;
            };

            /**
             * Encodes the specified RequestEndBlock message, length delimited. Does not implicitly {@link tendermint.abci.RequestEndBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {tendermint.abci.IRequestEndBlock} message RequestEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEndBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestEndBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEndBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestEndBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestEndBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEndBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestEndBlock message.
             * @function verify
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestEndBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                return null;
            };

            /**
             * Creates a RequestEndBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
             */
            RequestEndBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestEndBlock)
                    return object;
                let message = new $root.tendermint.abci.RequestEndBlock();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RequestEndBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {tendermint.abci.RequestEndBlock} message RequestEndBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestEndBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                return object;
            };

            /**
             * Converts this RequestEndBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestEndBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestEndBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestEndBlock;
        })();

        abci.RequestCommit = (function() {

            /**
             * Properties of a RequestCommit.
             * @memberof tendermint.abci
             * @interface IRequestCommit
             */

            /**
             * Constructs a new RequestCommit.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestCommit.
             * @implements IRequestCommit
             * @constructor
             * @param {tendermint.abci.IRequestCommit=} [properties] Properties to set
             */
            function RequestCommit(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified RequestCommit message. Does not implicitly {@link tendermint.abci.RequestCommit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {tendermint.abci.IRequestCommit} message RequestCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCommit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RequestCommit message, length delimited. Does not implicitly {@link tendermint.abci.RequestCommit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {tendermint.abci.IRequestCommit} message RequestCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCommit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestCommit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestCommit} RequestCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCommit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestCommit();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestCommit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestCommit} RequestCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCommit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestCommit message.
             * @function verify
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestCommit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RequestCommit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestCommit} RequestCommit
             */
            RequestCommit.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestCommit)
                    return object;
                return new $root.tendermint.abci.RequestCommit();
            };

            /**
             * Creates a plain object from a RequestCommit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {tendermint.abci.RequestCommit} message RequestCommit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestCommit.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RequestCommit to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestCommit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestCommit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestCommit;
        })();

        abci.RequestListSnapshots = (function() {

            /**
             * Properties of a RequestListSnapshots.
             * @memberof tendermint.abci
             * @interface IRequestListSnapshots
             */

            /**
             * Constructs a new RequestListSnapshots.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestListSnapshots.
             * @implements IRequestListSnapshots
             * @constructor
             * @param {tendermint.abci.IRequestListSnapshots=} [properties] Properties to set
             */
            function RequestListSnapshots(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified RequestListSnapshots message. Does not implicitly {@link tendermint.abci.RequestListSnapshots.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {tendermint.abci.IRequestListSnapshots} message RequestListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestListSnapshots.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RequestListSnapshots message, length delimited. Does not implicitly {@link tendermint.abci.RequestListSnapshots.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {tendermint.abci.IRequestListSnapshots} message RequestListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestListSnapshots.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestListSnapshots message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestListSnapshots.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestListSnapshots();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestListSnapshots message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestListSnapshots.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestListSnapshots message.
             * @function verify
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestListSnapshots.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RequestListSnapshots message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
             */
            RequestListSnapshots.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestListSnapshots)
                    return object;
                return new $root.tendermint.abci.RequestListSnapshots();
            };

            /**
             * Creates a plain object from a RequestListSnapshots message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {tendermint.abci.RequestListSnapshots} message RequestListSnapshots
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestListSnapshots.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RequestListSnapshots to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestListSnapshots
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestListSnapshots.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestListSnapshots;
        })();

        abci.RequestOfferSnapshot = (function() {

            /**
             * Properties of a RequestOfferSnapshot.
             * @memberof tendermint.abci
             * @interface IRequestOfferSnapshot
             * @property {tendermint.abci.ISnapshot|null} [snapshot] RequestOfferSnapshot snapshot
             * @property {Uint8Array|null} [app_hash] RequestOfferSnapshot app_hash
             */

            /**
             * Constructs a new RequestOfferSnapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestOfferSnapshot.
             * @implements IRequestOfferSnapshot
             * @constructor
             * @param {tendermint.abci.IRequestOfferSnapshot=} [properties] Properties to set
             */
            function RequestOfferSnapshot(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestOfferSnapshot snapshot.
             * @member {tendermint.abci.ISnapshot|null|undefined} snapshot
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             */
            RequestOfferSnapshot.prototype.snapshot = null;

            /**
             * RequestOfferSnapshot app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             */
            RequestOfferSnapshot.prototype.app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified RequestOfferSnapshot message. Does not implicitly {@link tendermint.abci.RequestOfferSnapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {tendermint.abci.IRequestOfferSnapshot} message RequestOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestOfferSnapshot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                    $root.tendermint.abci.Snapshot.encode(message.snapshot, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.app_hash);
                return writer;
            };

            /**
             * Encodes the specified RequestOfferSnapshot message, length delimited. Does not implicitly {@link tendermint.abci.RequestOfferSnapshot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {tendermint.abci.IRequestOfferSnapshot} message RequestOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestOfferSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestOfferSnapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestOfferSnapshot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestOfferSnapshot();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.snapshot = $root.tendermint.abci.Snapshot.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.app_hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestOfferSnapshot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestOfferSnapshot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestOfferSnapshot message.
             * @function verify
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestOfferSnapshot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                    let error = $root.tendermint.abci.Snapshot.verify(message.snapshot);
                    if (error)
                        return "snapshot." + error;
                }
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                return null;
            };

            /**
             * Creates a RequestOfferSnapshot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
             */
            RequestOfferSnapshot.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestOfferSnapshot)
                    return object;
                let message = new $root.tendermint.abci.RequestOfferSnapshot();
                if (object.snapshot != null) {
                    if (typeof object.snapshot !== "object")
                        throw TypeError(".tendermint.abci.RequestOfferSnapshot.snapshot: object expected");
                    message.snapshot = $root.tendermint.abci.Snapshot.fromObject(object.snapshot);
                }
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                return message;
            };

            /**
             * Creates a plain object from a RequestOfferSnapshot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {tendermint.abci.RequestOfferSnapshot} message RequestOfferSnapshot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestOfferSnapshot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.snapshot = null;
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                }
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    object.snapshot = $root.tendermint.abci.Snapshot.toObject(message.snapshot, options);
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                return object;
            };

            /**
             * Converts this RequestOfferSnapshot to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestOfferSnapshot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestOfferSnapshot;
        })();

        abci.RequestLoadSnapshotChunk = (function() {

            /**
             * Properties of a RequestLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @interface IRequestLoadSnapshotChunk
             * @property {number|null} [height] RequestLoadSnapshotChunk height
             * @property {number|null} [format] RequestLoadSnapshotChunk format
             * @property {number|null} [chunk] RequestLoadSnapshotChunk chunk
             */

            /**
             * Constructs a new RequestLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestLoadSnapshotChunk.
             * @implements IRequestLoadSnapshotChunk
             * @constructor
             * @param {tendermint.abci.IRequestLoadSnapshotChunk=} [properties] Properties to set
             */
            function RequestLoadSnapshotChunk(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestLoadSnapshotChunk height.
             * @member {number} height
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * RequestLoadSnapshotChunk format.
             * @member {number} format
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.format = 0;

            /**
             * RequestLoadSnapshotChunk chunk.
             * @member {number} chunk
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.chunk = 0;

            /**
             * Encodes the specified RequestLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestLoadSnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} message RequestLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestLoadSnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chunk);
                return writer;
            };

            /**
             * Encodes the specified RequestLoadSnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.RequestLoadSnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} message RequestLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestLoadSnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestLoadSnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestLoadSnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestLoadSnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.uint64();
                        break;
                    case 2:
                        message.format = reader.uint32();
                        break;
                    case 3:
                        message.chunk = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestLoadSnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestLoadSnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestLoadSnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestLoadSnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.format != null && message.hasOwnProperty("format"))
                    if (!$util.isInteger(message.format))
                        return "format: integer expected";
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    if (!$util.isInteger(message.chunk))
                        return "chunk: integer expected";
                return null;
            };

            /**
             * Creates a RequestLoadSnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
             */
            RequestLoadSnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestLoadSnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.RequestLoadSnapshotChunk();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.format != null)
                    message.format = object.format >>> 0;
                if (object.chunk != null)
                    message.chunk = object.chunk >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a RequestLoadSnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.RequestLoadSnapshotChunk} message RequestLoadSnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestLoadSnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.format = 0;
                    object.chunk = 0;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.format != null && message.hasOwnProperty("format"))
                    object.format = message.format;
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    object.chunk = message.chunk;
                return object;
            };

            /**
             * Converts this RequestLoadSnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestLoadSnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestLoadSnapshotChunk;
        })();

        abci.RequestApplySnapshotChunk = (function() {

            /**
             * Properties of a RequestApplySnapshotChunk.
             * @memberof tendermint.abci
             * @interface IRequestApplySnapshotChunk
             * @property {number|null} [index] RequestApplySnapshotChunk index
             * @property {Uint8Array|null} [chunk] RequestApplySnapshotChunk chunk
             * @property {string|null} [sender] RequestApplySnapshotChunk sender
             */

            /**
             * Constructs a new RequestApplySnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestApplySnapshotChunk.
             * @implements IRequestApplySnapshotChunk
             * @constructor
             * @param {tendermint.abci.IRequestApplySnapshotChunk=} [properties] Properties to set
             */
            function RequestApplySnapshotChunk(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestApplySnapshotChunk index.
             * @member {number} index
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.index = 0;

            /**
             * RequestApplySnapshotChunk chunk.
             * @member {Uint8Array} chunk
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.chunk = $util.newBuffer([]);

            /**
             * RequestApplySnapshotChunk sender.
             * @member {string} sender
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.sender = "";

            /**
             * Encodes the specified RequestApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestApplySnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestApplySnapshotChunk} message RequestApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestApplySnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.chunk);
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.sender);
                return writer;
            };

            /**
             * Encodes the specified RequestApplySnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.RequestApplySnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestApplySnapshotChunk} message RequestApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestApplySnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestApplySnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestApplySnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestApplySnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.chunk = reader.bytes();
                        break;
                    case 3:
                        message.sender = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestApplySnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestApplySnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestApplySnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestApplySnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    if (!(message.chunk && typeof message.chunk.length === "number" || $util.isString(message.chunk)))
                        return "chunk: buffer expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                return null;
            };

            /**
             * Creates a RequestApplySnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
             */
            RequestApplySnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestApplySnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.RequestApplySnapshotChunk();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.chunk != null)
                    if (typeof object.chunk === "string")
                        $util.base64.decode(object.chunk, message.chunk = $util.newBuffer($util.base64.length(object.chunk)), 0);
                    else if (object.chunk.length)
                        message.chunk = object.chunk;
                if (object.sender != null)
                    message.sender = String(object.sender);
                return message;
            };

            /**
             * Creates a plain object from a RequestApplySnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {tendermint.abci.RequestApplySnapshotChunk} message RequestApplySnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestApplySnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.index = 0;
                    if (options.bytes === String)
                        object.chunk = "";
                    else {
                        object.chunk = [];
                        if (options.bytes !== Array)
                            object.chunk = $util.newBuffer(object.chunk);
                    }
                    object.sender = "";
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    object.chunk = options.bytes === String ? $util.base64.encode(message.chunk, 0, message.chunk.length) : options.bytes === Array ? Array.prototype.slice.call(message.chunk) : message.chunk;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                return object;
            };

            /**
             * Converts this RequestApplySnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestApplySnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestApplySnapshotChunk;
        })();

        abci.Response = (function() {

            /**
             * Properties of a Response.
             * @memberof tendermint.abci
             * @interface IResponse
             * @property {tendermint.abci.IResponseException|null} [exception] Response exception
             * @property {tendermint.abci.IResponseEcho|null} [echo] Response echo
             * @property {tendermint.abci.IResponseFlush|null} [flush] Response flush
             * @property {tendermint.abci.IResponseInfo|null} [info] Response info
             * @property {tendermint.abci.IResponseSetOption|null} [set_option] Response set_option
             * @property {tendermint.abci.IResponseInitChain|null} [init_chain] Response init_chain
             * @property {tendermint.abci.IResponseQuery|null} [query] Response query
             * @property {tendermint.abci.IResponseBeginBlock|null} [begin_block] Response begin_block
             * @property {tendermint.abci.IResponseCheckTx|null} [check_tx] Response check_tx
             * @property {tendermint.abci.IResponseDeliverTx|null} [deliver_tx] Response deliver_tx
             * @property {tendermint.abci.IResponseEndBlock|null} [end_block] Response end_block
             * @property {tendermint.abci.IResponseCommit|null} [commit] Response commit
             * @property {tendermint.abci.IResponseListSnapshots|null} [list_snapshots] Response list_snapshots
             * @property {tendermint.abci.IResponseOfferSnapshot|null} [offer_snapshot] Response offer_snapshot
             * @property {tendermint.abci.IResponseLoadSnapshotChunk|null} [load_snapshot_chunk] Response load_snapshot_chunk
             * @property {tendermint.abci.IResponseApplySnapshotChunk|null} [apply_snapshot_chunk] Response apply_snapshot_chunk
             */

            /**
             * Constructs a new Response.
             * @memberof tendermint.abci
             * @classdesc Represents a Response.
             * @implements IResponse
             * @constructor
             * @param {tendermint.abci.IResponse=} [properties] Properties to set
             */
            function Response(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Response exception.
             * @member {tendermint.abci.IResponseException|null|undefined} exception
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.exception = null;

            /**
             * Response echo.
             * @member {tendermint.abci.IResponseEcho|null|undefined} echo
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.echo = null;

            /**
             * Response flush.
             * @member {tendermint.abci.IResponseFlush|null|undefined} flush
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.flush = null;

            /**
             * Response info.
             * @member {tendermint.abci.IResponseInfo|null|undefined} info
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.info = null;

            /**
             * Response set_option.
             * @member {tendermint.abci.IResponseSetOption|null|undefined} set_option
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.set_option = null;

            /**
             * Response init_chain.
             * @member {tendermint.abci.IResponseInitChain|null|undefined} init_chain
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.init_chain = null;

            /**
             * Response query.
             * @member {tendermint.abci.IResponseQuery|null|undefined} query
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.query = null;

            /**
             * Response begin_block.
             * @member {tendermint.abci.IResponseBeginBlock|null|undefined} begin_block
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.begin_block = null;

            /**
             * Response check_tx.
             * @member {tendermint.abci.IResponseCheckTx|null|undefined} check_tx
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.check_tx = null;

            /**
             * Response deliver_tx.
             * @member {tendermint.abci.IResponseDeliverTx|null|undefined} deliver_tx
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.deliver_tx = null;

            /**
             * Response end_block.
             * @member {tendermint.abci.IResponseEndBlock|null|undefined} end_block
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.end_block = null;

            /**
             * Response commit.
             * @member {tendermint.abci.IResponseCommit|null|undefined} commit
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.commit = null;

            /**
             * Response list_snapshots.
             * @member {tendermint.abci.IResponseListSnapshots|null|undefined} list_snapshots
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.list_snapshots = null;

            /**
             * Response offer_snapshot.
             * @member {tendermint.abci.IResponseOfferSnapshot|null|undefined} offer_snapshot
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.offer_snapshot = null;

            /**
             * Response load_snapshot_chunk.
             * @member {tendermint.abci.IResponseLoadSnapshotChunk|null|undefined} load_snapshot_chunk
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.load_snapshot_chunk = null;

            /**
             * Response apply_snapshot_chunk.
             * @member {tendermint.abci.IResponseApplySnapshotChunk|null|undefined} apply_snapshot_chunk
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.apply_snapshot_chunk = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Response value.
             * @member {"exception"|"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
             * @memberof tendermint.abci.Response
             * @instance
             */
            Object.defineProperty(Response.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["exception", "echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Response message. Does not implicitly {@link tendermint.abci.Response.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Response
             * @static
             * @param {tendermint.abci.IResponse} message Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Response.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.exception != null && Object.hasOwnProperty.call(message, "exception"))
                    $root.tendermint.abci.ResponseException.encode(message.exception, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                    $root.tendermint.abci.ResponseEcho.encode(message.echo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.flush != null && Object.hasOwnProperty.call(message, "flush"))
                    $root.tendermint.abci.ResponseFlush.encode(message.flush, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    $root.tendermint.abci.ResponseInfo.encode(message.info, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.set_option != null && Object.hasOwnProperty.call(message, "set_option"))
                    $root.tendermint.abci.ResponseSetOption.encode(message.set_option, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.init_chain != null && Object.hasOwnProperty.call(message, "init_chain"))
                    $root.tendermint.abci.ResponseInitChain.encode(message.init_chain, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                    $root.tendermint.abci.ResponseQuery.encode(message.query, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.begin_block != null && Object.hasOwnProperty.call(message, "begin_block"))
                    $root.tendermint.abci.ResponseBeginBlock.encode(message.begin_block, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.check_tx != null && Object.hasOwnProperty.call(message, "check_tx"))
                    $root.tendermint.abci.ResponseCheckTx.encode(message.check_tx, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.deliver_tx != null && Object.hasOwnProperty.call(message, "deliver_tx"))
                    $root.tendermint.abci.ResponseDeliverTx.encode(message.deliver_tx, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.end_block != null && Object.hasOwnProperty.call(message, "end_block"))
                    $root.tendermint.abci.ResponseEndBlock.encode(message.end_block, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                    $root.tendermint.abci.ResponseCommit.encode(message.commit, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.list_snapshots != null && Object.hasOwnProperty.call(message, "list_snapshots"))
                    $root.tendermint.abci.ResponseListSnapshots.encode(message.list_snapshots, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.offer_snapshot != null && Object.hasOwnProperty.call(message, "offer_snapshot"))
                    $root.tendermint.abci.ResponseOfferSnapshot.encode(message.offer_snapshot, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.load_snapshot_chunk != null && Object.hasOwnProperty.call(message, "load_snapshot_chunk"))
                    $root.tendermint.abci.ResponseLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                if (message.apply_snapshot_chunk != null && Object.hasOwnProperty.call(message, "apply_snapshot_chunk"))
                    $root.tendermint.abci.ResponseApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Response message, length delimited. Does not implicitly {@link tendermint.abci.Response.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Response
             * @static
             * @param {tendermint.abci.IResponse} message Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Response.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Response message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Response.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Response();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.exception = $root.tendermint.abci.ResponseException.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.echo = $root.tendermint.abci.ResponseEcho.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.flush = $root.tendermint.abci.ResponseFlush.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.info = $root.tendermint.abci.ResponseInfo.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.set_option = $root.tendermint.abci.ResponseSetOption.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.init_chain = $root.tendermint.abci.ResponseInitChain.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.query = $root.tendermint.abci.ResponseQuery.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.begin_block = $root.tendermint.abci.ResponseBeginBlock.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.check_tx = $root.tendermint.abci.ResponseCheckTx.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.end_block = $root.tendermint.abci.ResponseEndBlock.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.commit = $root.tendermint.abci.ResponseCommit.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.decode(reader, reader.uint32());
                        break;
                    case 16:
                        message.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Response message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Response.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Response message.
             * @function verify
             * @memberof tendermint.abci.Response
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Response.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.exception != null && message.hasOwnProperty("exception")) {
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseException.verify(message.exception);
                        if (error)
                            return "exception." + error;
                    }
                }
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseEcho.verify(message.echo);
                        if (error)
                            return "echo." + error;
                    }
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseFlush.verify(message.flush);
                        if (error)
                            return "flush." + error;
                    }
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseInfo.verify(message.info);
                        if (error)
                            return "info." + error;
                    }
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseSetOption.verify(message.set_option);
                        if (error)
                            return "set_option." + error;
                    }
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseInitChain.verify(message.init_chain);
                        if (error)
                            return "init_chain." + error;
                    }
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseQuery.verify(message.query);
                        if (error)
                            return "query." + error;
                    }
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseBeginBlock.verify(message.begin_block);
                        if (error)
                            return "begin_block." + error;
                    }
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseCheckTx.verify(message.check_tx);
                        if (error)
                            return "check_tx." + error;
                    }
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseDeliverTx.verify(message.deliver_tx);
                        if (error)
                            return "deliver_tx." + error;
                    }
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseEndBlock.verify(message.end_block);
                        if (error)
                            return "end_block." + error;
                    }
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseCommit.verify(message.commit);
                        if (error)
                            return "commit." + error;
                    }
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseListSnapshots.verify(message.list_snapshots);
                        if (error)
                            return "list_snapshots." + error;
                    }
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseOfferSnapshot.verify(message.offer_snapshot);
                        if (error)
                            return "offer_snapshot." + error;
                    }
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseLoadSnapshotChunk.verify(message.load_snapshot_chunk);
                        if (error)
                            return "load_snapshot_chunk." + error;
                    }
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseApplySnapshotChunk.verify(message.apply_snapshot_chunk);
                        if (error)
                            return "apply_snapshot_chunk." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Response message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Response
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Response} Response
             */
            Response.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Response)
                    return object;
                let message = new $root.tendermint.abci.Response();
                if (object.exception != null) {
                    if (typeof object.exception !== "object")
                        throw TypeError(".tendermint.abci.Response.exception: object expected");
                    message.exception = $root.tendermint.abci.ResponseException.fromObject(object.exception);
                }
                if (object.echo != null) {
                    if (typeof object.echo !== "object")
                        throw TypeError(".tendermint.abci.Response.echo: object expected");
                    message.echo = $root.tendermint.abci.ResponseEcho.fromObject(object.echo);
                }
                if (object.flush != null) {
                    if (typeof object.flush !== "object")
                        throw TypeError(".tendermint.abci.Response.flush: object expected");
                    message.flush = $root.tendermint.abci.ResponseFlush.fromObject(object.flush);
                }
                if (object.info != null) {
                    if (typeof object.info !== "object")
                        throw TypeError(".tendermint.abci.Response.info: object expected");
                    message.info = $root.tendermint.abci.ResponseInfo.fromObject(object.info);
                }
                if (object.set_option != null) {
                    if (typeof object.set_option !== "object")
                        throw TypeError(".tendermint.abci.Response.set_option: object expected");
                    message.set_option = $root.tendermint.abci.ResponseSetOption.fromObject(object.set_option);
                }
                if (object.init_chain != null) {
                    if (typeof object.init_chain !== "object")
                        throw TypeError(".tendermint.abci.Response.init_chain: object expected");
                    message.init_chain = $root.tendermint.abci.ResponseInitChain.fromObject(object.init_chain);
                }
                if (object.query != null) {
                    if (typeof object.query !== "object")
                        throw TypeError(".tendermint.abci.Response.query: object expected");
                    message.query = $root.tendermint.abci.ResponseQuery.fromObject(object.query);
                }
                if (object.begin_block != null) {
                    if (typeof object.begin_block !== "object")
                        throw TypeError(".tendermint.abci.Response.begin_block: object expected");
                    message.begin_block = $root.tendermint.abci.ResponseBeginBlock.fromObject(object.begin_block);
                }
                if (object.check_tx != null) {
                    if (typeof object.check_tx !== "object")
                        throw TypeError(".tendermint.abci.Response.check_tx: object expected");
                    message.check_tx = $root.tendermint.abci.ResponseCheckTx.fromObject(object.check_tx);
                }
                if (object.deliver_tx != null) {
                    if (typeof object.deliver_tx !== "object")
                        throw TypeError(".tendermint.abci.Response.deliver_tx: object expected");
                    message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.deliver_tx);
                }
                if (object.end_block != null) {
                    if (typeof object.end_block !== "object")
                        throw TypeError(".tendermint.abci.Response.end_block: object expected");
                    message.end_block = $root.tendermint.abci.ResponseEndBlock.fromObject(object.end_block);
                }
                if (object.commit != null) {
                    if (typeof object.commit !== "object")
                        throw TypeError(".tendermint.abci.Response.commit: object expected");
                    message.commit = $root.tendermint.abci.ResponseCommit.fromObject(object.commit);
                }
                if (object.list_snapshots != null) {
                    if (typeof object.list_snapshots !== "object")
                        throw TypeError(".tendermint.abci.Response.list_snapshots: object expected");
                    message.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.fromObject(object.list_snapshots);
                }
                if (object.offer_snapshot != null) {
                    if (typeof object.offer_snapshot !== "object")
                        throw TypeError(".tendermint.abci.Response.offer_snapshot: object expected");
                    message.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.fromObject(object.offer_snapshot);
                }
                if (object.load_snapshot_chunk != null) {
                    if (typeof object.load_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Response.load_snapshot_chunk: object expected");
                    message.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.fromObject(object.load_snapshot_chunk);
                }
                if (object.apply_snapshot_chunk != null) {
                    if (typeof object.apply_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Response.apply_snapshot_chunk: object expected");
                    message.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.fromObject(object.apply_snapshot_chunk);
                }
                return message;
            };

            /**
             * Creates a plain object from a Response message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Response
             * @static
             * @param {tendermint.abci.Response} message Response
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Response.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.exception != null && message.hasOwnProperty("exception")) {
                    object.exception = $root.tendermint.abci.ResponseException.toObject(message.exception, options);
                    if (options.oneofs)
                        object.value = "exception";
                }
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    object.echo = $root.tendermint.abci.ResponseEcho.toObject(message.echo, options);
                    if (options.oneofs)
                        object.value = "echo";
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    object.flush = $root.tendermint.abci.ResponseFlush.toObject(message.flush, options);
                    if (options.oneofs)
                        object.value = "flush";
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    object.info = $root.tendermint.abci.ResponseInfo.toObject(message.info, options);
                    if (options.oneofs)
                        object.value = "info";
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    object.set_option = $root.tendermint.abci.ResponseSetOption.toObject(message.set_option, options);
                    if (options.oneofs)
                        object.value = "set_option";
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    object.init_chain = $root.tendermint.abci.ResponseInitChain.toObject(message.init_chain, options);
                    if (options.oneofs)
                        object.value = "init_chain";
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    object.query = $root.tendermint.abci.ResponseQuery.toObject(message.query, options);
                    if (options.oneofs)
                        object.value = "query";
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    object.begin_block = $root.tendermint.abci.ResponseBeginBlock.toObject(message.begin_block, options);
                    if (options.oneofs)
                        object.value = "begin_block";
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    object.check_tx = $root.tendermint.abci.ResponseCheckTx.toObject(message.check_tx, options);
                    if (options.oneofs)
                        object.value = "check_tx";
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    object.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.toObject(message.deliver_tx, options);
                    if (options.oneofs)
                        object.value = "deliver_tx";
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    object.end_block = $root.tendermint.abci.ResponseEndBlock.toObject(message.end_block, options);
                    if (options.oneofs)
                        object.value = "end_block";
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    object.commit = $root.tendermint.abci.ResponseCommit.toObject(message.commit, options);
                    if (options.oneofs)
                        object.value = "commit";
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    object.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.toObject(message.list_snapshots, options);
                    if (options.oneofs)
                        object.value = "list_snapshots";
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    object.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.toObject(message.offer_snapshot, options);
                    if (options.oneofs)
                        object.value = "offer_snapshot";
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    object.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.toObject(message.load_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "load_snapshot_chunk";
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    object.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.toObject(message.apply_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "apply_snapshot_chunk";
                }
                return object;
            };

            /**
             * Converts this Response to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Response
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Response.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Response;
        })();

        abci.ResponseException = (function() {

            /**
             * Properties of a ResponseException.
             * @memberof tendermint.abci
             * @interface IResponseException
             * @property {string|null} [error] ResponseException error
             */

            /**
             * Constructs a new ResponseException.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseException.
             * @implements IResponseException
             * @constructor
             * @param {tendermint.abci.IResponseException=} [properties] Properties to set
             */
            function ResponseException(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseException error.
             * @member {string} error
             * @memberof tendermint.abci.ResponseException
             * @instance
             */
            ResponseException.prototype.error = "";

            /**
             * Encodes the specified ResponseException message. Does not implicitly {@link tendermint.abci.ResponseException.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {tendermint.abci.IResponseException} message ResponseException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseException.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.error);
                return writer;
            };

            /**
             * Encodes the specified ResponseException message, length delimited. Does not implicitly {@link tendermint.abci.ResponseException.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {tendermint.abci.IResponseException} message ResponseException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseException.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseException message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseException} ResponseException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseException.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseException();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.error = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseException message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseException} ResponseException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseException.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseException message.
             * @function verify
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseException.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.error != null && message.hasOwnProperty("error"))
                    if (!$util.isString(message.error))
                        return "error: string expected";
                return null;
            };

            /**
             * Creates a ResponseException message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseException} ResponseException
             */
            ResponseException.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseException)
                    return object;
                let message = new $root.tendermint.abci.ResponseException();
                if (object.error != null)
                    message.error = String(object.error);
                return message;
            };

            /**
             * Creates a plain object from a ResponseException message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {tendermint.abci.ResponseException} message ResponseException
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseException.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = "";
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = message.error;
                return object;
            };

            /**
             * Converts this ResponseException to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseException
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseException.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseException;
        })();

        abci.ResponseEcho = (function() {

            /**
             * Properties of a ResponseEcho.
             * @memberof tendermint.abci
             * @interface IResponseEcho
             * @property {string|null} [message] ResponseEcho message
             */

            /**
             * Constructs a new ResponseEcho.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseEcho.
             * @implements IResponseEcho
             * @constructor
             * @param {tendermint.abci.IResponseEcho=} [properties] Properties to set
             */
            function ResponseEcho(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseEcho message.
             * @member {string} message
             * @memberof tendermint.abci.ResponseEcho
             * @instance
             */
            ResponseEcho.prototype.message = "";

            /**
             * Encodes the specified ResponseEcho message. Does not implicitly {@link tendermint.abci.ResponseEcho.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {tendermint.abci.IResponseEcho} message ResponseEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEcho.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                return writer;
            };

            /**
             * Encodes the specified ResponseEcho message, length delimited. Does not implicitly {@link tendermint.abci.ResponseEcho.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {tendermint.abci.IResponseEcho} message ResponseEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEcho.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseEcho message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseEcho} ResponseEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEcho.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseEcho();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseEcho message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseEcho} ResponseEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEcho.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseEcho message.
             * @function verify
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseEcho.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                return null;
            };

            /**
             * Creates a ResponseEcho message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseEcho} ResponseEcho
             */
            ResponseEcho.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseEcho)
                    return object;
                let message = new $root.tendermint.abci.ResponseEcho();
                if (object.message != null)
                    message.message = String(object.message);
                return message;
            };

            /**
             * Creates a plain object from a ResponseEcho message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {tendermint.abci.ResponseEcho} message ResponseEcho
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseEcho.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.message = "";
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                return object;
            };

            /**
             * Converts this ResponseEcho to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseEcho
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseEcho.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseEcho;
        })();

        abci.ResponseFlush = (function() {

            /**
             * Properties of a ResponseFlush.
             * @memberof tendermint.abci
             * @interface IResponseFlush
             */

            /**
             * Constructs a new ResponseFlush.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseFlush.
             * @implements IResponseFlush
             * @constructor
             * @param {tendermint.abci.IResponseFlush=} [properties] Properties to set
             */
            function ResponseFlush(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified ResponseFlush message. Does not implicitly {@link tendermint.abci.ResponseFlush.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {tendermint.abci.IResponseFlush} message ResponseFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseFlush.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified ResponseFlush message, length delimited. Does not implicitly {@link tendermint.abci.ResponseFlush.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {tendermint.abci.IResponseFlush} message ResponseFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseFlush.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseFlush message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseFlush} ResponseFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseFlush.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseFlush();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseFlush message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseFlush} ResponseFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseFlush.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseFlush message.
             * @function verify
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseFlush.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a ResponseFlush message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseFlush} ResponseFlush
             */
            ResponseFlush.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseFlush)
                    return object;
                return new $root.tendermint.abci.ResponseFlush();
            };

            /**
             * Creates a plain object from a ResponseFlush message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {tendermint.abci.ResponseFlush} message ResponseFlush
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseFlush.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this ResponseFlush to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseFlush
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseFlush.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseFlush;
        })();

        abci.ResponseInfo = (function() {

            /**
             * Properties of a ResponseInfo.
             * @memberof tendermint.abci
             * @interface IResponseInfo
             * @property {string|null} [data] ResponseInfo data
             * @property {string|null} [version] ResponseInfo version
             * @property {number|null} [app_version] ResponseInfo app_version
             * @property {number|null} [last_block_height] ResponseInfo last_block_height
             * @property {Uint8Array|null} [last_block_app_hash] ResponseInfo last_block_app_hash
             */

            /**
             * Constructs a new ResponseInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseInfo.
             * @implements IResponseInfo
             * @constructor
             * @param {tendermint.abci.IResponseInfo=} [properties] Properties to set
             */
            function ResponseInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseInfo data.
             * @member {string} data
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.data = "";

            /**
             * ResponseInfo version.
             * @member {string} version
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.version = "";

            /**
             * ResponseInfo app_version.
             * @member {number} app_version
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.app_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ResponseInfo last_block_height.
             * @member {number} last_block_height
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.last_block_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseInfo last_block_app_hash.
             * @member {Uint8Array} last_block_app_hash
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.last_block_app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseInfo message. Does not implicitly {@link tendermint.abci.ResponseInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {tendermint.abci.IResponseInfo} message ResponseInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                if (message.app_version != null && Object.hasOwnProperty.call(message, "app_version"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.app_version);
                if (message.last_block_height != null && Object.hasOwnProperty.call(message, "last_block_height"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.last_block_height);
                if (message.last_block_app_hash != null && Object.hasOwnProperty.call(message, "last_block_app_hash"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.last_block_app_hash);
                return writer;
            };

            /**
             * Encodes the specified ResponseInfo message, length delimited. Does not implicitly {@link tendermint.abci.ResponseInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {tendermint.abci.IResponseInfo} message ResponseInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseInfo} ResponseInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.data = reader.string();
                        break;
                    case 2:
                        message.version = reader.string();
                        break;
                    case 3:
                        message.app_version = reader.uint64();
                        break;
                    case 4:
                        message.last_block_height = reader.int64();
                        break;
                    case 5:
                        message.last_block_app_hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseInfo} ResponseInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseInfo message.
             * @function verify
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!$util.isString(message.data))
                        return "data: string expected";
                if (message.version != null && message.hasOwnProperty("version"))
                    if (!$util.isString(message.version))
                        return "version: string expected";
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (!$util.isInteger(message.app_version) && !(message.app_version && $util.isInteger(message.app_version.low) && $util.isInteger(message.app_version.high)))
                        return "app_version: integer|Long expected";
                if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                    if (!$util.isInteger(message.last_block_height) && !(message.last_block_height && $util.isInteger(message.last_block_height.low) && $util.isInteger(message.last_block_height.high)))
                        return "last_block_height: integer|Long expected";
                if (message.last_block_app_hash != null && message.hasOwnProperty("last_block_app_hash"))
                    if (!(message.last_block_app_hash && typeof message.last_block_app_hash.length === "number" || $util.isString(message.last_block_app_hash)))
                        return "last_block_app_hash: buffer expected";
                return null;
            };

            /**
             * Creates a ResponseInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseInfo} ResponseInfo
             */
            ResponseInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseInfo)
                    return object;
                let message = new $root.tendermint.abci.ResponseInfo();
                if (object.data != null)
                    message.data = String(object.data);
                if (object.version != null)
                    message.version = String(object.version);
                if (object.app_version != null)
                    if ($util.Long)
                        (message.app_version = $util.Long.fromValue(object.app_version)).unsigned = true;
                    else if (typeof object.app_version === "string")
                        message.app_version = parseInt(object.app_version, 10);
                    else if (typeof object.app_version === "number")
                        message.app_version = object.app_version;
                    else if (typeof object.app_version === "object")
                        message.app_version = new $util.LongBits(object.app_version.low >>> 0, object.app_version.high >>> 0).toNumber(true);
                if (object.last_block_height != null)
                    if ($util.Long)
                        (message.last_block_height = $util.Long.fromValue(object.last_block_height)).unsigned = false;
                    else if (typeof object.last_block_height === "string")
                        message.last_block_height = parseInt(object.last_block_height, 10);
                    else if (typeof object.last_block_height === "number")
                        message.last_block_height = object.last_block_height;
                    else if (typeof object.last_block_height === "object")
                        message.last_block_height = new $util.LongBits(object.last_block_height.low >>> 0, object.last_block_height.high >>> 0).toNumber();
                if (object.last_block_app_hash != null)
                    if (typeof object.last_block_app_hash === "string")
                        $util.base64.decode(object.last_block_app_hash, message.last_block_app_hash = $util.newBuffer($util.base64.length(object.last_block_app_hash)), 0);
                    else if (object.last_block_app_hash.length)
                        message.last_block_app_hash = object.last_block_app_hash;
                return message;
            };

            /**
             * Creates a plain object from a ResponseInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {tendermint.abci.ResponseInfo} message ResponseInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.data = "";
                    object.version = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app_version = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.last_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_block_height = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.last_block_app_hash = "";
                    else {
                        object.last_block_app_hash = [];
                        if (options.bytes !== Array)
                            object.last_block_app_hash = $util.newBuffer(object.last_block_app_hash);
                    }
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = message.data;
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = message.version;
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (typeof message.app_version === "number")
                        object.app_version = options.longs === String ? String(message.app_version) : message.app_version;
                    else
                        object.app_version = options.longs === String ? $util.Long.prototype.toString.call(message.app_version) : options.longs === Number ? new $util.LongBits(message.app_version.low >>> 0, message.app_version.high >>> 0).toNumber(true) : message.app_version;
                if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                    if (typeof message.last_block_height === "number")
                        object.last_block_height = options.longs === String ? String(message.last_block_height) : message.last_block_height;
                    else
                        object.last_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.last_block_height) : options.longs === Number ? new $util.LongBits(message.last_block_height.low >>> 0, message.last_block_height.high >>> 0).toNumber() : message.last_block_height;
                if (message.last_block_app_hash != null && message.hasOwnProperty("last_block_app_hash"))
                    object.last_block_app_hash = options.bytes === String ? $util.base64.encode(message.last_block_app_hash, 0, message.last_block_app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_block_app_hash) : message.last_block_app_hash;
                return object;
            };

            /**
             * Converts this ResponseInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseInfo;
        })();

        abci.ResponseSetOption = (function() {

            /**
             * Properties of a ResponseSetOption.
             * @memberof tendermint.abci
             * @interface IResponseSetOption
             * @property {number|null} [code] ResponseSetOption code
             * @property {string|null} [log] ResponseSetOption log
             * @property {string|null} [info] ResponseSetOption info
             */

            /**
             * Constructs a new ResponseSetOption.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseSetOption.
             * @implements IResponseSetOption
             * @constructor
             * @param {tendermint.abci.IResponseSetOption=} [properties] Properties to set
             */
            function ResponseSetOption(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseSetOption code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.code = 0;

            /**
             * ResponseSetOption log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.log = "";

            /**
             * ResponseSetOption info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.info = "";

            /**
             * Encodes the specified ResponseSetOption message. Does not implicitly {@link tendermint.abci.ResponseSetOption.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {tendermint.abci.IResponseSetOption} message ResponseSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseSetOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                return writer;
            };

            /**
             * Encodes the specified ResponseSetOption message, length delimited. Does not implicitly {@link tendermint.abci.ResponseSetOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {tendermint.abci.IResponseSetOption} message ResponseSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseSetOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseSetOption message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseSetOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseSetOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseSetOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseSetOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseSetOption message.
             * @function verify
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseSetOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                return null;
            };

            /**
             * Creates a ResponseSetOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
             */
            ResponseSetOption.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseSetOption)
                    return object;
                let message = new $root.tendermint.abci.ResponseSetOption();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                return message;
            };

            /**
             * Creates a plain object from a ResponseSetOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {tendermint.abci.ResponseSetOption} message ResponseSetOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseSetOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.log = "";
                    object.info = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                return object;
            };

            /**
             * Converts this ResponseSetOption to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseSetOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseSetOption;
        })();

        abci.ResponseInitChain = (function() {

            /**
             * Properties of a ResponseInitChain.
             * @memberof tendermint.abci
             * @interface IResponseInitChain
             * @property {tendermint.abci.IConsensusParams|null} [consensus_params] ResponseInitChain consensus_params
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] ResponseInitChain validators
             * @property {Uint8Array|null} [app_hash] ResponseInitChain app_hash
             */

            /**
             * Constructs a new ResponseInitChain.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseInitChain.
             * @implements IResponseInitChain
             * @constructor
             * @param {tendermint.abci.IResponseInitChain=} [properties] Properties to set
             */
            function ResponseInitChain(properties) {
                this.validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseInitChain consensus_params.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.consensus_params = null;

            /**
             * ResponseInitChain validators.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.validators = $util.emptyArray;

            /**
             * ResponseInitChain app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseInitChain message. Does not implicitly {@link tendermint.abci.ResponseInitChain.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {tendermint.abci.IResponseInitChain} message ResponseInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInitChain.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                    $root.tendermint.abci.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.validators != null && message.validators.length)
                    for (let i = 0; i < message.validators.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(message.validators[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.app_hash);
                return writer;
            };

            /**
             * Encodes the specified ResponseInitChain message, length delimited. Does not implicitly {@link tendermint.abci.ResponseInitChain.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {tendermint.abci.IResponseInitChain} message ResponseInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInitChain.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseInitChain message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInitChain.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseInitChain();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.consensus_params = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.validators && message.validators.length))
                            message.validators = [];
                        message.validators.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.app_hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseInitChain message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInitChain.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseInitChain message.
             * @function verify
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseInitChain.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                    let error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_params);
                    if (error)
                        return "consensus_params." + error;
                }
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    if (!Array.isArray(message.validators))
                        return "validators: array expected";
                    for (let i = 0; i < message.validators.length; ++i) {
                        let error = $root.tendermint.abci.ValidatorUpdate.verify(message.validators[i]);
                        if (error)
                            return "validators." + error;
                    }
                }
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                return null;
            };

            /**
             * Creates a ResponseInitChain message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
             */
            ResponseInitChain.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseInitChain)
                    return object;
                let message = new $root.tendermint.abci.ResponseInitChain();
                if (object.consensus_params != null) {
                    if (typeof object.consensus_params !== "object")
                        throw TypeError(".tendermint.abci.ResponseInitChain.consensus_params: object expected");
                    message.consensus_params = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_params);
                }
                if (object.validators) {
                    if (!Array.isArray(object.validators))
                        throw TypeError(".tendermint.abci.ResponseInitChain.validators: array expected");
                    message.validators = [];
                    for (let i = 0; i < object.validators.length; ++i) {
                        if (typeof object.validators[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseInitChain.validators: object expected");
                        message.validators[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validators[i]);
                    }
                }
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                return message;
            };

            /**
             * Creates a plain object from a ResponseInitChain message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {tendermint.abci.ResponseInitChain} message ResponseInitChain
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseInitChain.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.validators = [];
                if (options.defaults) {
                    object.consensus_params = null;
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                }
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                    object.consensus_params = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_params, options);
                if (message.validators && message.validators.length) {
                    object.validators = [];
                    for (let j = 0; j < message.validators.length; ++j)
                        object.validators[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validators[j], options);
                }
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                return object;
            };

            /**
             * Converts this ResponseInitChain to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseInitChain.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseInitChain;
        })();

        abci.ResponseQuery = (function() {

            /**
             * Properties of a ResponseQuery.
             * @memberof tendermint.abci
             * @interface IResponseQuery
             * @property {number|null} [code] ResponseQuery code
             * @property {string|null} [log] ResponseQuery log
             * @property {string|null} [info] ResponseQuery info
             * @property {number|null} [index] ResponseQuery index
             * @property {Uint8Array|null} [key] ResponseQuery key
             * @property {Uint8Array|null} [value] ResponseQuery value
             * @property {tendermint.crypto.IProofOps|null} [proof_ops] ResponseQuery proof_ops
             * @property {number|null} [height] ResponseQuery height
             * @property {string|null} [codespace] ResponseQuery codespace
             */

            /**
             * Constructs a new ResponseQuery.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseQuery.
             * @implements IResponseQuery
             * @constructor
             * @param {tendermint.abci.IResponseQuery=} [properties] Properties to set
             */
            function ResponseQuery(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseQuery code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.code = 0;

            /**
             * ResponseQuery log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.log = "";

            /**
             * ResponseQuery info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.info = "";

            /**
             * ResponseQuery index.
             * @member {number} index
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseQuery key.
             * @member {Uint8Array} key
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.key = $util.newBuffer([]);

            /**
             * ResponseQuery value.
             * @member {Uint8Array} value
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.value = $util.newBuffer([]);

            /**
             * ResponseQuery proof_ops.
             * @member {tendermint.crypto.IProofOps|null|undefined} proof_ops
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.proof_ops = null;

            /**
             * ResponseQuery height.
             * @member {number} height
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseQuery codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.codespace = "";

            /**
             * Encodes the specified ResponseQuery message. Does not implicitly {@link tendermint.abci.ResponseQuery.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {tendermint.abci.IResponseQuery} message ResponseQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.index);
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.value);
                if (message.proof_ops != null && Object.hasOwnProperty.call(message, "proof_ops"))
                    $root.tendermint.crypto.ProofOps.encode(message.proof_ops, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.height);
                if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.codespace);
                return writer;
            };

            /**
             * Encodes the specified ResponseQuery message, length delimited. Does not implicitly {@link tendermint.abci.ResponseQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {tendermint.abci.IResponseQuery} message ResponseQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseQuery message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseQuery} ResponseQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseQuery();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    case 5:
                        message.index = reader.int64();
                        break;
                    case 6:
                        message.key = reader.bytes();
                        break;
                    case 7:
                        message.value = reader.bytes();
                        break;
                    case 8:
                        message.proof_ops = $root.tendermint.crypto.ProofOps.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.height = reader.int64();
                        break;
                    case 10:
                        message.codespace = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseQuery} ResponseQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseQuery message.
             * @function verify
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                        return "index: integer|Long expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                if (message.proof_ops != null && message.hasOwnProperty("proof_ops")) {
                    let error = $root.tendermint.crypto.ProofOps.verify(message.proof_ops);
                    if (error)
                        return "proof_ops." + error;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    if (!$util.isString(message.codespace))
                        return "codespace: string expected";
                return null;
            };

            /**
             * Creates a ResponseQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseQuery} ResponseQuery
             */
            ResponseQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseQuery)
                    return object;
                let message = new $root.tendermint.abci.ResponseQuery();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                if (object.index != null)
                    if ($util.Long)
                        (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                    else if (typeof object.index === "string")
                        message.index = parseInt(object.index, 10);
                    else if (typeof object.index === "number")
                        message.index = object.index;
                    else if (typeof object.index === "object")
                        message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                if (object.proof_ops != null) {
                    if (typeof object.proof_ops !== "object")
                        throw TypeError(".tendermint.abci.ResponseQuery.proof_ops: object expected");
                    message.proof_ops = $root.tendermint.crypto.ProofOps.fromObject(object.proof_ops);
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.codespace != null)
                    message.codespace = String(object.codespace);
                return message;
            };

            /**
             * Creates a plain object from a ResponseQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {tendermint.abci.ResponseQuery} message ResponseQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.log = "";
                    object.info = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.index = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                    object.proof_ops = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.codespace = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                if (message.index != null && message.hasOwnProperty("index"))
                    if (typeof message.index === "number")
                        object.index = options.longs === String ? String(message.index) : message.index;
                    else
                        object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                if (message.proof_ops != null && message.hasOwnProperty("proof_ops"))
                    object.proof_ops = $root.tendermint.crypto.ProofOps.toObject(message.proof_ops, options);
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    object.codespace = message.codespace;
                return object;
            };

            /**
             * Converts this ResponseQuery to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseQuery;
        })();

        abci.ResponseBeginBlock = (function() {

            /**
             * Properties of a ResponseBeginBlock.
             * @memberof tendermint.abci
             * @interface IResponseBeginBlock
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseBeginBlock events
             */

            /**
             * Constructs a new ResponseBeginBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseBeginBlock.
             * @implements IResponseBeginBlock
             * @constructor
             * @param {tendermint.abci.IResponseBeginBlock=} [properties] Properties to set
             */
            function ResponseBeginBlock(properties) {
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseBeginBlock events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseBeginBlock
             * @instance
             */
            ResponseBeginBlock.prototype.events = $util.emptyArray;

            /**
             * Encodes the specified ResponseBeginBlock message. Does not implicitly {@link tendermint.abci.ResponseBeginBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {tendermint.abci.IResponseBeginBlock} message ResponseBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseBeginBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ResponseBeginBlock message, length delimited. Does not implicitly {@link tendermint.abci.ResponseBeginBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {tendermint.abci.IResponseBeginBlock} message ResponseBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseBeginBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseBeginBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseBeginBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseBeginBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseBeginBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseBeginBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseBeginBlock message.
             * @function verify
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseBeginBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ResponseBeginBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
             */
            ResponseBeginBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseBeginBlock)
                    return object;
                let message = new $root.tendermint.abci.ResponseBeginBlock();
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseBeginBlock.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseBeginBlock.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseBeginBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {tendermint.abci.ResponseBeginBlock} message ResponseBeginBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseBeginBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.events = [];
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                return object;
            };

            /**
             * Converts this ResponseBeginBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseBeginBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseBeginBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseBeginBlock;
        })();

        abci.ResponseCheckTx = (function() {

            /**
             * Properties of a ResponseCheckTx.
             * @memberof tendermint.abci
             * @interface IResponseCheckTx
             * @property {number|null} [code] ResponseCheckTx code
             * @property {Uint8Array|null} [data] ResponseCheckTx data
             * @property {string|null} [log] ResponseCheckTx log
             * @property {string|null} [info] ResponseCheckTx info
             * @property {number|null} [gas_wanted] ResponseCheckTx gas_wanted
             * @property {number|null} [gas_used] ResponseCheckTx gas_used
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseCheckTx events
             * @property {string|null} [codespace] ResponseCheckTx codespace
             */

            /**
             * Constructs a new ResponseCheckTx.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseCheckTx.
             * @implements IResponseCheckTx
             * @constructor
             * @param {tendermint.abci.IResponseCheckTx=} [properties] Properties to set
             */
            function ResponseCheckTx(properties) {
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseCheckTx code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.code = 0;

            /**
             * ResponseCheckTx data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.data = $util.newBuffer([]);

            /**
             * ResponseCheckTx log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.log = "";

            /**
             * ResponseCheckTx info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.info = "";

            /**
             * ResponseCheckTx gas_wanted.
             * @member {number} gas_wanted
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseCheckTx gas_used.
             * @member {number} gas_used
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseCheckTx events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.events = $util.emptyArray;

            /**
             * ResponseCheckTx codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.codespace = "";

            /**
             * Encodes the specified ResponseCheckTx message. Does not implicitly {@link tendermint.abci.ResponseCheckTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {tendermint.abci.IResponseCheckTx} message ResponseCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCheckTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                if (message.gas_wanted != null && Object.hasOwnProperty.call(message, "gas_wanted"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gas_wanted);
                if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.gas_used);
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.codespace);
                return writer;
            };

            /**
             * Encodes the specified ResponseCheckTx message, length delimited. Does not implicitly {@link tendermint.abci.ResponseCheckTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {tendermint.abci.IResponseCheckTx} message ResponseCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCheckTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseCheckTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCheckTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseCheckTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    case 5:
                        message.gas_wanted = reader.int64();
                        break;
                    case 6:
                        message.gas_used = reader.int64();
                        break;
                    case 7:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.codespace = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseCheckTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCheckTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseCheckTx message.
             * @function verify
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseCheckTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (!$util.isInteger(message.gas_wanted) && !(message.gas_wanted && $util.isInteger(message.gas_wanted.low) && $util.isInteger(message.gas_wanted.high)))
                        return "gas_wanted: integer|Long expected";
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                        return "gas_used: integer|Long expected";
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    if (!$util.isString(message.codespace))
                        return "codespace: string expected";
                return null;
            };

            /**
             * Creates a ResponseCheckTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
             */
            ResponseCheckTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseCheckTx)
                    return object;
                let message = new $root.tendermint.abci.ResponseCheckTx();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                if (object.gas_wanted != null)
                    if ($util.Long)
                        (message.gas_wanted = $util.Long.fromValue(object.gas_wanted)).unsigned = false;
                    else if (typeof object.gas_wanted === "string")
                        message.gas_wanted = parseInt(object.gas_wanted, 10);
                    else if (typeof object.gas_wanted === "number")
                        message.gas_wanted = object.gas_wanted;
                    else if (typeof object.gas_wanted === "object")
                        message.gas_wanted = new $util.LongBits(object.gas_wanted.low >>> 0, object.gas_wanted.high >>> 0).toNumber();
                if (object.gas_used != null)
                    if ($util.Long)
                        (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = false;
                    else if (typeof object.gas_used === "string")
                        message.gas_used = parseInt(object.gas_used, 10);
                    else if (typeof object.gas_used === "number")
                        message.gas_used = object.gas_used;
                    else if (typeof object.gas_used === "object")
                        message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber();
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseCheckTx.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseCheckTx.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                if (object.codespace != null)
                    message.codespace = String(object.codespace);
                return message;
            };

            /**
             * Creates a plain object from a ResponseCheckTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {tendermint.abci.ResponseCheckTx} message ResponseCheckTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseCheckTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.events = [];
                if (options.defaults) {
                    object.code = 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.log = "";
                    object.info = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_wanted = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_wanted = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_used = options.longs === String ? "0" : 0;
                    object.codespace = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (typeof message.gas_wanted === "number")
                        object.gas_wanted = options.longs === String ? String(message.gas_wanted) : message.gas_wanted;
                    else
                        object.gas_wanted = options.longs === String ? $util.Long.prototype.toString.call(message.gas_wanted) : options.longs === Number ? new $util.LongBits(message.gas_wanted.low >>> 0, message.gas_wanted.high >>> 0).toNumber() : message.gas_wanted;
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (typeof message.gas_used === "number")
                        object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                    else
                        object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber() : message.gas_used;
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    object.codespace = message.codespace;
                return object;
            };

            /**
             * Converts this ResponseCheckTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseCheckTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseCheckTx;
        })();

        abci.ResponseDeliverTx = (function() {

            /**
             * Properties of a ResponseDeliverTx.
             * @memberof tendermint.abci
             * @interface IResponseDeliverTx
             * @property {number|null} [code] ResponseDeliverTx code
             * @property {Uint8Array|null} [data] ResponseDeliverTx data
             * @property {string|null} [log] ResponseDeliverTx log
             * @property {string|null} [info] ResponseDeliverTx info
             * @property {number|null} [gas_wanted] ResponseDeliverTx gas_wanted
             * @property {number|null} [gas_used] ResponseDeliverTx gas_used
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseDeliverTx events
             * @property {string|null} [codespace] ResponseDeliverTx codespace
             */

            /**
             * Constructs a new ResponseDeliverTx.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseDeliverTx.
             * @implements IResponseDeliverTx
             * @constructor
             * @param {tendermint.abci.IResponseDeliverTx=} [properties] Properties to set
             */
            function ResponseDeliverTx(properties) {
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseDeliverTx code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.code = 0;

            /**
             * ResponseDeliverTx data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.data = $util.newBuffer([]);

            /**
             * ResponseDeliverTx log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.log = "";

            /**
             * ResponseDeliverTx info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.info = "";

            /**
             * ResponseDeliverTx gas_wanted.
             * @member {number} gas_wanted
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseDeliverTx gas_used.
             * @member {number} gas_used
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseDeliverTx events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.events = $util.emptyArray;

            /**
             * ResponseDeliverTx codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.codespace = "";

            /**
             * Encodes the specified ResponseDeliverTx message. Does not implicitly {@link tendermint.abci.ResponseDeliverTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {tendermint.abci.IResponseDeliverTx} message ResponseDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseDeliverTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                if (message.gas_wanted != null && Object.hasOwnProperty.call(message, "gas_wanted"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gas_wanted);
                if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.gas_used);
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.codespace);
                return writer;
            };

            /**
             * Encodes the specified ResponseDeliverTx message, length delimited. Does not implicitly {@link tendermint.abci.ResponseDeliverTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {tendermint.abci.IResponseDeliverTx} message ResponseDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseDeliverTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseDeliverTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseDeliverTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseDeliverTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    case 5:
                        message.gas_wanted = reader.int64();
                        break;
                    case 6:
                        message.gas_used = reader.int64();
                        break;
                    case 7:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.codespace = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseDeliverTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseDeliverTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseDeliverTx message.
             * @function verify
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseDeliverTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (!$util.isInteger(message.gas_wanted) && !(message.gas_wanted && $util.isInteger(message.gas_wanted.low) && $util.isInteger(message.gas_wanted.high)))
                        return "gas_wanted: integer|Long expected";
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                        return "gas_used: integer|Long expected";
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    if (!$util.isString(message.codespace))
                        return "codespace: string expected";
                return null;
            };

            /**
             * Creates a ResponseDeliverTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
             */
            ResponseDeliverTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseDeliverTx)
                    return object;
                let message = new $root.tendermint.abci.ResponseDeliverTx();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                if (object.gas_wanted != null)
                    if ($util.Long)
                        (message.gas_wanted = $util.Long.fromValue(object.gas_wanted)).unsigned = false;
                    else if (typeof object.gas_wanted === "string")
                        message.gas_wanted = parseInt(object.gas_wanted, 10);
                    else if (typeof object.gas_wanted === "number")
                        message.gas_wanted = object.gas_wanted;
                    else if (typeof object.gas_wanted === "object")
                        message.gas_wanted = new $util.LongBits(object.gas_wanted.low >>> 0, object.gas_wanted.high >>> 0).toNumber();
                if (object.gas_used != null)
                    if ($util.Long)
                        (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = false;
                    else if (typeof object.gas_used === "string")
                        message.gas_used = parseInt(object.gas_used, 10);
                    else if (typeof object.gas_used === "number")
                        message.gas_used = object.gas_used;
                    else if (typeof object.gas_used === "object")
                        message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber();
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseDeliverTx.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseDeliverTx.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                if (object.codespace != null)
                    message.codespace = String(object.codespace);
                return message;
            };

            /**
             * Creates a plain object from a ResponseDeliverTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {tendermint.abci.ResponseDeliverTx} message ResponseDeliverTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseDeliverTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.events = [];
                if (options.defaults) {
                    object.code = 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.log = "";
                    object.info = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_wanted = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_wanted = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_used = options.longs === String ? "0" : 0;
                    object.codespace = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (typeof message.gas_wanted === "number")
                        object.gas_wanted = options.longs === String ? String(message.gas_wanted) : message.gas_wanted;
                    else
                        object.gas_wanted = options.longs === String ? $util.Long.prototype.toString.call(message.gas_wanted) : options.longs === Number ? new $util.LongBits(message.gas_wanted.low >>> 0, message.gas_wanted.high >>> 0).toNumber() : message.gas_wanted;
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (typeof message.gas_used === "number")
                        object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                    else
                        object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber() : message.gas_used;
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    object.codespace = message.codespace;
                return object;
            };

            /**
             * Converts this ResponseDeliverTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseDeliverTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseDeliverTx;
        })();

        abci.ResponseEndBlock = (function() {

            /**
             * Properties of a ResponseEndBlock.
             * @memberof tendermint.abci
             * @interface IResponseEndBlock
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validator_updates] ResponseEndBlock validator_updates
             * @property {tendermint.abci.IConsensusParams|null} [consensus_param_updates] ResponseEndBlock consensus_param_updates
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseEndBlock events
             */

            /**
             * Constructs a new ResponseEndBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseEndBlock.
             * @implements IResponseEndBlock
             * @constructor
             * @param {tendermint.abci.IResponseEndBlock=} [properties] Properties to set
             */
            function ResponseEndBlock(properties) {
                this.validator_updates = [];
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseEndBlock validator_updates.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validator_updates
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.validator_updates = $util.emptyArray;

            /**
             * ResponseEndBlock consensus_param_updates.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_param_updates
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.consensus_param_updates = null;

            /**
             * ResponseEndBlock events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.events = $util.emptyArray;

            /**
             * Encodes the specified ResponseEndBlock message. Does not implicitly {@link tendermint.abci.ResponseEndBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {tendermint.abci.IResponseEndBlock} message ResponseEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEndBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator_updates != null && message.validator_updates.length)
                    for (let i = 0; i < message.validator_updates.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(message.validator_updates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.consensus_param_updates != null && Object.hasOwnProperty.call(message, "consensus_param_updates"))
                    $root.tendermint.abci.ConsensusParams.encode(message.consensus_param_updates, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ResponseEndBlock message, length delimited. Does not implicitly {@link tendermint.abci.ResponseEndBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {tendermint.abci.IResponseEndBlock} message ResponseEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEndBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseEndBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEndBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseEndBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.validator_updates && message.validator_updates.length))
                            message.validator_updates = [];
                        message.validator_updates.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.consensus_param_updates = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseEndBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEndBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseEndBlock message.
             * @function verify
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseEndBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator_updates != null && message.hasOwnProperty("validator_updates")) {
                    if (!Array.isArray(message.validator_updates))
                        return "validator_updates: array expected";
                    for (let i = 0; i < message.validator_updates.length; ++i) {
                        let error = $root.tendermint.abci.ValidatorUpdate.verify(message.validator_updates[i]);
                        if (error)
                            return "validator_updates." + error;
                    }
                }
                if (message.consensus_param_updates != null && message.hasOwnProperty("consensus_param_updates")) {
                    let error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_param_updates);
                    if (error)
                        return "consensus_param_updates." + error;
                }
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ResponseEndBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
             */
            ResponseEndBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseEndBlock)
                    return object;
                let message = new $root.tendermint.abci.ResponseEndBlock();
                if (object.validator_updates) {
                    if (!Array.isArray(object.validator_updates))
                        throw TypeError(".tendermint.abci.ResponseEndBlock.validator_updates: array expected");
                    message.validator_updates = [];
                    for (let i = 0; i < object.validator_updates.length; ++i) {
                        if (typeof object.validator_updates[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseEndBlock.validator_updates: object expected");
                        message.validator_updates[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validator_updates[i]);
                    }
                }
                if (object.consensus_param_updates != null) {
                    if (typeof object.consensus_param_updates !== "object")
                        throw TypeError(".tendermint.abci.ResponseEndBlock.consensus_param_updates: object expected");
                    message.consensus_param_updates = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_param_updates);
                }
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseEndBlock.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseEndBlock.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseEndBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {tendermint.abci.ResponseEndBlock} message ResponseEndBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseEndBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.validator_updates = [];
                    object.events = [];
                }
                if (options.defaults)
                    object.consensus_param_updates = null;
                if (message.validator_updates && message.validator_updates.length) {
                    object.validator_updates = [];
                    for (let j = 0; j < message.validator_updates.length; ++j)
                        object.validator_updates[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validator_updates[j], options);
                }
                if (message.consensus_param_updates != null && message.hasOwnProperty("consensus_param_updates"))
                    object.consensus_param_updates = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_param_updates, options);
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                return object;
            };

            /**
             * Converts this ResponseEndBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseEndBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseEndBlock;
        })();

        abci.ResponseCommit = (function() {

            /**
             * Properties of a ResponseCommit.
             * @memberof tendermint.abci
             * @interface IResponseCommit
             * @property {Uint8Array|null} [data] ResponseCommit data
             * @property {number|null} [retain_height] ResponseCommit retain_height
             */

            /**
             * Constructs a new ResponseCommit.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseCommit.
             * @implements IResponseCommit
             * @constructor
             * @param {tendermint.abci.IResponseCommit=} [properties] Properties to set
             */
            function ResponseCommit(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseCommit data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             */
            ResponseCommit.prototype.data = $util.newBuffer([]);

            /**
             * ResponseCommit retain_height.
             * @member {number} retain_height
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             */
            ResponseCommit.prototype.retain_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ResponseCommit message. Does not implicitly {@link tendermint.abci.ResponseCommit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {tendermint.abci.IResponseCommit} message ResponseCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCommit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.retain_height != null && Object.hasOwnProperty.call(message, "retain_height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.retain_height);
                return writer;
            };

            /**
             * Encodes the specified ResponseCommit message, length delimited. Does not implicitly {@link tendermint.abci.ResponseCommit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {tendermint.abci.IResponseCommit} message ResponseCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCommit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseCommit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseCommit} ResponseCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCommit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseCommit();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.retain_height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseCommit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseCommit} ResponseCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCommit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseCommit message.
             * @function verify
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseCommit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.retain_height != null && message.hasOwnProperty("retain_height"))
                    if (!$util.isInteger(message.retain_height) && !(message.retain_height && $util.isInteger(message.retain_height.low) && $util.isInteger(message.retain_height.high)))
                        return "retain_height: integer|Long expected";
                return null;
            };

            /**
             * Creates a ResponseCommit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseCommit} ResponseCommit
             */
            ResponseCommit.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseCommit)
                    return object;
                let message = new $root.tendermint.abci.ResponseCommit();
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.retain_height != null)
                    if ($util.Long)
                        (message.retain_height = $util.Long.fromValue(object.retain_height)).unsigned = false;
                    else if (typeof object.retain_height === "string")
                        message.retain_height = parseInt(object.retain_height, 10);
                    else if (typeof object.retain_height === "number")
                        message.retain_height = object.retain_height;
                    else if (typeof object.retain_height === "object")
                        message.retain_height = new $util.LongBits(object.retain_height.low >>> 0, object.retain_height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ResponseCommit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {tendermint.abci.ResponseCommit} message ResponseCommit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseCommit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.retain_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.retain_height = options.longs === String ? "0" : 0;
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.retain_height != null && message.hasOwnProperty("retain_height"))
                    if (typeof message.retain_height === "number")
                        object.retain_height = options.longs === String ? String(message.retain_height) : message.retain_height;
                    else
                        object.retain_height = options.longs === String ? $util.Long.prototype.toString.call(message.retain_height) : options.longs === Number ? new $util.LongBits(message.retain_height.low >>> 0, message.retain_height.high >>> 0).toNumber() : message.retain_height;
                return object;
            };

            /**
             * Converts this ResponseCommit to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseCommit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseCommit;
        })();

        abci.ResponseListSnapshots = (function() {

            /**
             * Properties of a ResponseListSnapshots.
             * @memberof tendermint.abci
             * @interface IResponseListSnapshots
             * @property {Array.<tendermint.abci.ISnapshot>|null} [snapshots] ResponseListSnapshots snapshots
             */

            /**
             * Constructs a new ResponseListSnapshots.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseListSnapshots.
             * @implements IResponseListSnapshots
             * @constructor
             * @param {tendermint.abci.IResponseListSnapshots=} [properties] Properties to set
             */
            function ResponseListSnapshots(properties) {
                this.snapshots = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseListSnapshots snapshots.
             * @member {Array.<tendermint.abci.ISnapshot>} snapshots
             * @memberof tendermint.abci.ResponseListSnapshots
             * @instance
             */
            ResponseListSnapshots.prototype.snapshots = $util.emptyArray;

            /**
             * Encodes the specified ResponseListSnapshots message. Does not implicitly {@link tendermint.abci.ResponseListSnapshots.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {tendermint.abci.IResponseListSnapshots} message ResponseListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseListSnapshots.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.snapshots != null && message.snapshots.length)
                    for (let i = 0; i < message.snapshots.length; ++i)
                        $root.tendermint.abci.Snapshot.encode(message.snapshots[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ResponseListSnapshots message, length delimited. Does not implicitly {@link tendermint.abci.ResponseListSnapshots.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {tendermint.abci.IResponseListSnapshots} message ResponseListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseListSnapshots.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseListSnapshots message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseListSnapshots.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseListSnapshots();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.snapshots && message.snapshots.length))
                            message.snapshots = [];
                        message.snapshots.push($root.tendermint.abci.Snapshot.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseListSnapshots message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseListSnapshots.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseListSnapshots message.
             * @function verify
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseListSnapshots.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.snapshots != null && message.hasOwnProperty("snapshots")) {
                    if (!Array.isArray(message.snapshots))
                        return "snapshots: array expected";
                    for (let i = 0; i < message.snapshots.length; ++i) {
                        let error = $root.tendermint.abci.Snapshot.verify(message.snapshots[i]);
                        if (error)
                            return "snapshots." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ResponseListSnapshots message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
             */
            ResponseListSnapshots.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseListSnapshots)
                    return object;
                let message = new $root.tendermint.abci.ResponseListSnapshots();
                if (object.snapshots) {
                    if (!Array.isArray(object.snapshots))
                        throw TypeError(".tendermint.abci.ResponseListSnapshots.snapshots: array expected");
                    message.snapshots = [];
                    for (let i = 0; i < object.snapshots.length; ++i) {
                        if (typeof object.snapshots[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseListSnapshots.snapshots: object expected");
                        message.snapshots[i] = $root.tendermint.abci.Snapshot.fromObject(object.snapshots[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseListSnapshots message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {tendermint.abci.ResponseListSnapshots} message ResponseListSnapshots
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseListSnapshots.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.snapshots = [];
                if (message.snapshots && message.snapshots.length) {
                    object.snapshots = [];
                    for (let j = 0; j < message.snapshots.length; ++j)
                        object.snapshots[j] = $root.tendermint.abci.Snapshot.toObject(message.snapshots[j], options);
                }
                return object;
            };

            /**
             * Converts this ResponseListSnapshots to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseListSnapshots
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseListSnapshots.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseListSnapshots;
        })();

        abci.ResponseOfferSnapshot = (function() {

            /**
             * Properties of a ResponseOfferSnapshot.
             * @memberof tendermint.abci
             * @interface IResponseOfferSnapshot
             * @property {tendermint.abci.ResponseOfferSnapshot.Result|null} [result] ResponseOfferSnapshot result
             */

            /**
             * Constructs a new ResponseOfferSnapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseOfferSnapshot.
             * @implements IResponseOfferSnapshot
             * @constructor
             * @param {tendermint.abci.IResponseOfferSnapshot=} [properties] Properties to set
             */
            function ResponseOfferSnapshot(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseOfferSnapshot result.
             * @member {tendermint.abci.ResponseOfferSnapshot.Result} result
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @instance
             */
            ResponseOfferSnapshot.prototype.result = 0;

            /**
             * Encodes the specified ResponseOfferSnapshot message. Does not implicitly {@link tendermint.abci.ResponseOfferSnapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {tendermint.abci.IResponseOfferSnapshot} message ResponseOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseOfferSnapshot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                return writer;
            };

            /**
             * Encodes the specified ResponseOfferSnapshot message, length delimited. Does not implicitly {@link tendermint.abci.ResponseOfferSnapshot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {tendermint.abci.IResponseOfferSnapshot} message ResponseOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseOfferSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseOfferSnapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseOfferSnapshot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseOfferSnapshot();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseOfferSnapshot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseOfferSnapshot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseOfferSnapshot message.
             * @function verify
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseOfferSnapshot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result"))
                    switch (message.result) {
                    default:
                        return "result: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                return null;
            };

            /**
             * Creates a ResponseOfferSnapshot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
             */
            ResponseOfferSnapshot.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseOfferSnapshot)
                    return object;
                let message = new $root.tendermint.abci.ResponseOfferSnapshot();
                switch (object.result) {
                case "UNKNOWN":
                case 0:
                    message.result = 0;
                    break;
                case "ACCEPT":
                case 1:
                    message.result = 1;
                    break;
                case "ABORT":
                case 2:
                    message.result = 2;
                    break;
                case "REJECT":
                case 3:
                    message.result = 3;
                    break;
                case "REJECT_FORMAT":
                case 4:
                    message.result = 4;
                    break;
                case "REJECT_SENDER":
                case 5:
                    message.result = 5;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseOfferSnapshot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {tendermint.abci.ResponseOfferSnapshot} message ResponseOfferSnapshot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseOfferSnapshot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.result = options.enums === String ? "UNKNOWN" : 0;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = options.enums === String ? $root.tendermint.abci.ResponseOfferSnapshot.Result[message.result] : message.result;
                return object;
            };

            /**
             * Converts this ResponseOfferSnapshot to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseOfferSnapshot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Result enum.
             * @name tendermint.abci.ResponseOfferSnapshot.Result
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} ACCEPT=1 ACCEPT value
             * @property {number} ABORT=2 ABORT value
             * @property {number} REJECT=3 REJECT value
             * @property {number} REJECT_FORMAT=4 REJECT_FORMAT value
             * @property {number} REJECT_SENDER=5 REJECT_SENDER value
             */
            ResponseOfferSnapshot.Result = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "ACCEPT"] = 1;
                values[valuesById[2] = "ABORT"] = 2;
                values[valuesById[3] = "REJECT"] = 3;
                values[valuesById[4] = "REJECT_FORMAT"] = 4;
                values[valuesById[5] = "REJECT_SENDER"] = 5;
                return values;
            })();

            return ResponseOfferSnapshot;
        })();

        abci.ResponseLoadSnapshotChunk = (function() {

            /**
             * Properties of a ResponseLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @interface IResponseLoadSnapshotChunk
             * @property {Uint8Array|null} [chunk] ResponseLoadSnapshotChunk chunk
             */

            /**
             * Constructs a new ResponseLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseLoadSnapshotChunk.
             * @implements IResponseLoadSnapshotChunk
             * @constructor
             * @param {tendermint.abci.IResponseLoadSnapshotChunk=} [properties] Properties to set
             */
            function ResponseLoadSnapshotChunk(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseLoadSnapshotChunk chunk.
             * @member {Uint8Array} chunk
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @instance
             */
            ResponseLoadSnapshotChunk.prototype.chunk = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseLoadSnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseLoadSnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.chunk);
                return writer;
            };

            /**
             * Encodes the specified ResponseLoadSnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.ResponseLoadSnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseLoadSnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseLoadSnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseLoadSnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseLoadSnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.chunk = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseLoadSnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseLoadSnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseLoadSnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseLoadSnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    if (!(message.chunk && typeof message.chunk.length === "number" || $util.isString(message.chunk)))
                        return "chunk: buffer expected";
                return null;
            };

            /**
             * Creates a ResponseLoadSnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
             */
            ResponseLoadSnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseLoadSnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.ResponseLoadSnapshotChunk();
                if (object.chunk != null)
                    if (typeof object.chunk === "string")
                        $util.base64.decode(object.chunk, message.chunk = $util.newBuffer($util.base64.length(object.chunk)), 0);
                    else if (object.chunk.length)
                        message.chunk = object.chunk;
                return message;
            };

            /**
             * Creates a plain object from a ResponseLoadSnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.ResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseLoadSnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.chunk = "";
                    else {
                        object.chunk = [];
                        if (options.bytes !== Array)
                            object.chunk = $util.newBuffer(object.chunk);
                    }
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    object.chunk = options.bytes === String ? $util.base64.encode(message.chunk, 0, message.chunk.length) : options.bytes === Array ? Array.prototype.slice.call(message.chunk) : message.chunk;
                return object;
            };

            /**
             * Converts this ResponseLoadSnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseLoadSnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseLoadSnapshotChunk;
        })();

        abci.ResponseApplySnapshotChunk = (function() {

            /**
             * Properties of a ResponseApplySnapshotChunk.
             * @memberof tendermint.abci
             * @interface IResponseApplySnapshotChunk
             * @property {tendermint.abci.ResponseApplySnapshotChunk.Result|null} [result] ResponseApplySnapshotChunk result
             * @property {Array.<number>|null} [refetch_chunks] ResponseApplySnapshotChunk refetch_chunks
             * @property {Array.<string>|null} [reject_senders] ResponseApplySnapshotChunk reject_senders
             */

            /**
             * Constructs a new ResponseApplySnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseApplySnapshotChunk.
             * @implements IResponseApplySnapshotChunk
             * @constructor
             * @param {tendermint.abci.IResponseApplySnapshotChunk=} [properties] Properties to set
             */
            function ResponseApplySnapshotChunk(properties) {
                this.refetch_chunks = [];
                this.reject_senders = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseApplySnapshotChunk result.
             * @member {tendermint.abci.ResponseApplySnapshotChunk.Result} result
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.result = 0;

            /**
             * ResponseApplySnapshotChunk refetch_chunks.
             * @member {Array.<number>} refetch_chunks
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.refetch_chunks = $util.emptyArray;

            /**
             * ResponseApplySnapshotChunk reject_senders.
             * @member {Array.<string>} reject_senders
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.reject_senders = $util.emptyArray;

            /**
             * Encodes the specified ResponseApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseApplySnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseApplySnapshotChunk} message ResponseApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseApplySnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                if (message.refetch_chunks != null && message.refetch_chunks.length) {
                    writer.uint32(/* id 2, wireType 2 =*/18).fork();
                    for (let i = 0; i < message.refetch_chunks.length; ++i)
                        writer.uint32(message.refetch_chunks[i]);
                    writer.ldelim();
                }
                if (message.reject_senders != null && message.reject_senders.length)
                    for (let i = 0; i < message.reject_senders.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.reject_senders[i]);
                return writer;
            };

            /**
             * Encodes the specified ResponseApplySnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.ResponseApplySnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseApplySnapshotChunk} message ResponseApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseApplySnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseApplySnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseApplySnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseApplySnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = reader.int32();
                        break;
                    case 2:
                        if (!(message.refetch_chunks && message.refetch_chunks.length))
                            message.refetch_chunks = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.refetch_chunks.push(reader.uint32());
                        } else
                            message.refetch_chunks.push(reader.uint32());
                        break;
                    case 3:
                        if (!(message.reject_senders && message.reject_senders.length))
                            message.reject_senders = [];
                        message.reject_senders.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseApplySnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseApplySnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseApplySnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseApplySnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result"))
                    switch (message.result) {
                    default:
                        return "result: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.refetch_chunks != null && message.hasOwnProperty("refetch_chunks")) {
                    if (!Array.isArray(message.refetch_chunks))
                        return "refetch_chunks: array expected";
                    for (let i = 0; i < message.refetch_chunks.length; ++i)
                        if (!$util.isInteger(message.refetch_chunks[i]))
                            return "refetch_chunks: integer[] expected";
                }
                if (message.reject_senders != null && message.hasOwnProperty("reject_senders")) {
                    if (!Array.isArray(message.reject_senders))
                        return "reject_senders: array expected";
                    for (let i = 0; i < message.reject_senders.length; ++i)
                        if (!$util.isString(message.reject_senders[i]))
                            return "reject_senders: string[] expected";
                }
                return null;
            };

            /**
             * Creates a ResponseApplySnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
             */
            ResponseApplySnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseApplySnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.ResponseApplySnapshotChunk();
                switch (object.result) {
                case "UNKNOWN":
                case 0:
                    message.result = 0;
                    break;
                case "ACCEPT":
                case 1:
                    message.result = 1;
                    break;
                case "ABORT":
                case 2:
                    message.result = 2;
                    break;
                case "RETRY":
                case 3:
                    message.result = 3;
                    break;
                case "RETRY_SNAPSHOT":
                case 4:
                    message.result = 4;
                    break;
                case "REJECT_SNAPSHOT":
                case 5:
                    message.result = 5;
                    break;
                }
                if (object.refetch_chunks) {
                    if (!Array.isArray(object.refetch_chunks))
                        throw TypeError(".tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks: array expected");
                    message.refetch_chunks = [];
                    for (let i = 0; i < object.refetch_chunks.length; ++i)
                        message.refetch_chunks[i] = object.refetch_chunks[i] >>> 0;
                }
                if (object.reject_senders) {
                    if (!Array.isArray(object.reject_senders))
                        throw TypeError(".tendermint.abci.ResponseApplySnapshotChunk.reject_senders: array expected");
                    message.reject_senders = [];
                    for (let i = 0; i < object.reject_senders.length; ++i)
                        message.reject_senders[i] = String(object.reject_senders[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseApplySnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {tendermint.abci.ResponseApplySnapshotChunk} message ResponseApplySnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseApplySnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.refetch_chunks = [];
                    object.reject_senders = [];
                }
                if (options.defaults)
                    object.result = options.enums === String ? "UNKNOWN" : 0;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = options.enums === String ? $root.tendermint.abci.ResponseApplySnapshotChunk.Result[message.result] : message.result;
                if (message.refetch_chunks && message.refetch_chunks.length) {
                    object.refetch_chunks = [];
                    for (let j = 0; j < message.refetch_chunks.length; ++j)
                        object.refetch_chunks[j] = message.refetch_chunks[j];
                }
                if (message.reject_senders && message.reject_senders.length) {
                    object.reject_senders = [];
                    for (let j = 0; j < message.reject_senders.length; ++j)
                        object.reject_senders[j] = message.reject_senders[j];
                }
                return object;
            };

            /**
             * Converts this ResponseApplySnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseApplySnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Result enum.
             * @name tendermint.abci.ResponseApplySnapshotChunk.Result
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} ACCEPT=1 ACCEPT value
             * @property {number} ABORT=2 ABORT value
             * @property {number} RETRY=3 RETRY value
             * @property {number} RETRY_SNAPSHOT=4 RETRY_SNAPSHOT value
             * @property {number} REJECT_SNAPSHOT=5 REJECT_SNAPSHOT value
             */
            ResponseApplySnapshotChunk.Result = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "ACCEPT"] = 1;
                values[valuesById[2] = "ABORT"] = 2;
                values[valuesById[3] = "RETRY"] = 3;
                values[valuesById[4] = "RETRY_SNAPSHOT"] = 4;
                values[valuesById[5] = "REJECT_SNAPSHOT"] = 5;
                return values;
            })();

            return ResponseApplySnapshotChunk;
        })();

        abci.ConsensusParams = (function() {

            /**
             * Properties of a ConsensusParams.
             * @memberof tendermint.abci
             * @interface IConsensusParams
             * @property {tendermint.abci.IBlockParams|null} [block] ConsensusParams block
             * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
             * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
             * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
             */

            /**
             * Constructs a new ConsensusParams.
             * @memberof tendermint.abci
             * @classdesc Represents a ConsensusParams.
             * @implements IConsensusParams
             * @constructor
             * @param {tendermint.abci.IConsensusParams=} [properties] Properties to set
             */
            function ConsensusParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsensusParams block.
             * @member {tendermint.abci.IBlockParams|null|undefined} block
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.block = null;

            /**
             * ConsensusParams evidence.
             * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.evidence = null;

            /**
             * ConsensusParams validator.
             * @member {tendermint.types.IValidatorParams|null|undefined} validator
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.validator = null;

            /**
             * ConsensusParams version.
             * @member {tendermint.types.IVersionParams|null|undefined} version
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.version = null;

            /**
             * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.abci.ConsensusParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {tendermint.abci.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    $root.tendermint.abci.BlockParams.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.evidence != null && Object.hasOwnProperty.call(message, "evidence"))
                    $root.tendermint.types.EvidenceParams.encode(message.evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.types.ValidatorParams.encode(message.validator, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.types.VersionParams.encode(message.version, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConsensusParams message, length delimited. Does not implicitly {@link tendermint.abci.ConsensusParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {tendermint.abci.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ConsensusParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = $root.tendermint.abci.BlockParams.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.evidence = $root.tendermint.types.EvidenceParams.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.validator = $root.tendermint.types.ValidatorParams.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.version = $root.tendermint.types.VersionParams.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsensusParams message.
             * @function verify
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsensusParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block")) {
                    let error = $root.tendermint.abci.BlockParams.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                if (message.evidence != null && message.hasOwnProperty("evidence")) {
                    let error = $root.tendermint.types.EvidenceParams.verify(message.evidence);
                    if (error)
                        return "evidence." + error;
                }
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.types.ValidatorParams.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.types.VersionParams.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                return null;
            };

            /**
             * Creates a ConsensusParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ConsensusParams} ConsensusParams
             */
            ConsensusParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ConsensusParams)
                    return object;
                let message = new $root.tendermint.abci.ConsensusParams();
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.block: object expected");
                    message.block = $root.tendermint.abci.BlockParams.fromObject(object.block);
                }
                if (object.evidence != null) {
                    if (typeof object.evidence !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.evidence: object expected");
                    message.evidence = $root.tendermint.types.EvidenceParams.fromObject(object.evidence);
                }
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.validator: object expected");
                    message.validator = $root.tendermint.types.ValidatorParams.fromObject(object.validator);
                }
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.version: object expected");
                    message.version = $root.tendermint.types.VersionParams.fromObject(object.version);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConsensusParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {tendermint.abci.ConsensusParams} message ConsensusParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsensusParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block = null;
                    object.evidence = null;
                    object.validator = null;
                    object.version = null;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.tendermint.abci.BlockParams.toObject(message.block, options);
                if (message.evidence != null && message.hasOwnProperty("evidence"))
                    object.evidence = $root.tendermint.types.EvidenceParams.toObject(message.evidence, options);
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.types.ValidatorParams.toObject(message.validator, options);
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.types.VersionParams.toObject(message.version, options);
                return object;
            };

            /**
             * Converts this ConsensusParams to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsensusParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsensusParams;
        })();

        abci.BlockParams = (function() {

            /**
             * Properties of a BlockParams.
             * @memberof tendermint.abci
             * @interface IBlockParams
             * @property {number|null} [max_bytes] BlockParams max_bytes
             * @property {number|null} [max_gas] BlockParams max_gas
             */

            /**
             * Constructs a new BlockParams.
             * @memberof tendermint.abci
             * @classdesc Represents a BlockParams.
             * @implements IBlockParams
             * @constructor
             * @param {tendermint.abci.IBlockParams=} [properties] Properties to set
             */
            function BlockParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockParams max_bytes.
             * @member {number} max_bytes
             * @memberof tendermint.abci.BlockParams
             * @instance
             */
            BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockParams max_gas.
             * @member {number} max_gas
             * @memberof tendermint.abci.BlockParams
             * @instance
             */
            BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.abci.BlockParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {tendermint.abci.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_bytes);
                if (message.max_gas != null && Object.hasOwnProperty.call(message, "max_gas"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.max_gas);
                return writer;
            };

            /**
             * Encodes the specified BlockParams message, length delimited. Does not implicitly {@link tendermint.abci.BlockParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {tendermint.abci.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.BlockParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.max_bytes = reader.int64();
                        break;
                    case 2:
                        message.max_gas = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockParams message.
             * @function verify
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                        return "max_bytes: integer|Long expected";
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (!$util.isInteger(message.max_gas) && !(message.max_gas && $util.isInteger(message.max_gas.low) && $util.isInteger(message.max_gas.high)))
                        return "max_gas: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.BlockParams} BlockParams
             */
            BlockParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.BlockParams)
                    return object;
                let message = new $root.tendermint.abci.BlockParams();
                if (object.max_bytes != null)
                    if ($util.Long)
                        (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                    else if (typeof object.max_bytes === "string")
                        message.max_bytes = parseInt(object.max_bytes, 10);
                    else if (typeof object.max_bytes === "number")
                        message.max_bytes = object.max_bytes;
                    else if (typeof object.max_bytes === "object")
                        message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                if (object.max_gas != null)
                    if ($util.Long)
                        (message.max_gas = $util.Long.fromValue(object.max_gas)).unsigned = false;
                    else if (typeof object.max_gas === "string")
                        message.max_gas = parseInt(object.max_gas, 10);
                    else if (typeof object.max_gas === "number")
                        message.max_gas = object.max_gas;
                    else if (typeof object.max_gas === "object")
                        message.max_gas = new $util.LongBits(object.max_gas.low >>> 0, object.max_gas.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {tendermint.abci.BlockParams} message BlockParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_bytes = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_gas = options.longs === String ? "0" : 0;
                }
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (typeof message.max_bytes === "number")
                        object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                    else
                        object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (typeof message.max_gas === "number")
                        object.max_gas = options.longs === String ? String(message.max_gas) : message.max_gas;
                    else
                        object.max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.max_gas) : options.longs === Number ? new $util.LongBits(message.max_gas.low >>> 0, message.max_gas.high >>> 0).toNumber() : message.max_gas;
                return object;
            };

            /**
             * Converts this BlockParams to JSON.
             * @function toJSON
             * @memberof tendermint.abci.BlockParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockParams;
        })();

        abci.LastCommitInfo = (function() {

            /**
             * Properties of a LastCommitInfo.
             * @memberof tendermint.abci
             * @interface ILastCommitInfo
             * @property {number|null} [round] LastCommitInfo round
             * @property {Array.<tendermint.abci.IVoteInfo>|null} [votes] LastCommitInfo votes
             */

            /**
             * Constructs a new LastCommitInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a LastCommitInfo.
             * @implements ILastCommitInfo
             * @constructor
             * @param {tendermint.abci.ILastCommitInfo=} [properties] Properties to set
             */
            function LastCommitInfo(properties) {
                this.votes = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LastCommitInfo round.
             * @member {number} round
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             */
            LastCommitInfo.prototype.round = 0;

            /**
             * LastCommitInfo votes.
             * @member {Array.<tendermint.abci.IVoteInfo>} votes
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             */
            LastCommitInfo.prototype.votes = $util.emptyArray;

            /**
             * Encodes the specified LastCommitInfo message. Does not implicitly {@link tendermint.abci.LastCommitInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {tendermint.abci.ILastCommitInfo} message LastCommitInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastCommitInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.round);
                if (message.votes != null && message.votes.length)
                    for (let i = 0; i < message.votes.length; ++i)
                        $root.tendermint.abci.VoteInfo.encode(message.votes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LastCommitInfo message, length delimited. Does not implicitly {@link tendermint.abci.LastCommitInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {tendermint.abci.ILastCommitInfo} message LastCommitInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastCommitInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LastCommitInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastCommitInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.LastCommitInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.round = reader.int32();
                        break;
                    case 2:
                        if (!(message.votes && message.votes.length))
                            message.votes = [];
                        message.votes.push($root.tendermint.abci.VoteInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LastCommitInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastCommitInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LastCommitInfo message.
             * @function verify
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LastCommitInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.votes != null && message.hasOwnProperty("votes")) {
                    if (!Array.isArray(message.votes))
                        return "votes: array expected";
                    for (let i = 0; i < message.votes.length; ++i) {
                        let error = $root.tendermint.abci.VoteInfo.verify(message.votes[i]);
                        if (error)
                            return "votes." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LastCommitInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
             */
            LastCommitInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.LastCommitInfo)
                    return object;
                let message = new $root.tendermint.abci.LastCommitInfo();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.votes) {
                    if (!Array.isArray(object.votes))
                        throw TypeError(".tendermint.abci.LastCommitInfo.votes: array expected");
                    message.votes = [];
                    for (let i = 0; i < object.votes.length; ++i) {
                        if (typeof object.votes[i] !== "object")
                            throw TypeError(".tendermint.abci.LastCommitInfo.votes: object expected");
                        message.votes[i] = $root.tendermint.abci.VoteInfo.fromObject(object.votes[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LastCommitInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {tendermint.abci.LastCommitInfo} message LastCommitInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LastCommitInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.votes = [];
                if (options.defaults)
                    object.round = 0;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.votes && message.votes.length) {
                    object.votes = [];
                    for (let j = 0; j < message.votes.length; ++j)
                        object.votes[j] = $root.tendermint.abci.VoteInfo.toObject(message.votes[j], options);
                }
                return object;
            };

            /**
             * Converts this LastCommitInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LastCommitInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LastCommitInfo;
        })();

        abci.Event = (function() {

            /**
             * Properties of an Event.
             * @memberof tendermint.abci
             * @interface IEvent
             * @property {string|null} [type] Event type
             * @property {Array.<tendermint.abci.IEventAttribute>|null} [attributes] Event attributes
             */

            /**
             * Constructs a new Event.
             * @memberof tendermint.abci
             * @classdesc Represents an Event.
             * @implements IEvent
             * @constructor
             * @param {tendermint.abci.IEvent=} [properties] Properties to set
             */
            function Event(properties) {
                this.attributes = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Event type.
             * @member {string} type
             * @memberof tendermint.abci.Event
             * @instance
             */
            Event.prototype.type = "";

            /**
             * Event attributes.
             * @member {Array.<tendermint.abci.IEventAttribute>} attributes
             * @memberof tendermint.abci.Event
             * @instance
             */
            Event.prototype.attributes = $util.emptyArray;

            /**
             * Encodes the specified Event message. Does not implicitly {@link tendermint.abci.Event.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Event
             * @static
             * @param {tendermint.abci.IEvent} message Event message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Event.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.attributes != null && message.attributes.length)
                    for (let i = 0; i < message.attributes.length; ++i)
                        $root.tendermint.abci.EventAttribute.encode(message.attributes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Event message, length delimited. Does not implicitly {@link tendermint.abci.Event.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Event
             * @static
             * @param {tendermint.abci.IEvent} message Event message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Event.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Event message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Event
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Event} Event
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Event.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Event();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        if (!(message.attributes && message.attributes.length))
                            message.attributes = [];
                        message.attributes.push($root.tendermint.abci.EventAttribute.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Event message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Event
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Event} Event
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Event.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Event message.
             * @function verify
             * @memberof tendermint.abci.Event
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Event.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.attributes != null && message.hasOwnProperty("attributes")) {
                    if (!Array.isArray(message.attributes))
                        return "attributes: array expected";
                    for (let i = 0; i < message.attributes.length; ++i) {
                        let error = $root.tendermint.abci.EventAttribute.verify(message.attributes[i]);
                        if (error)
                            return "attributes." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an Event message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Event
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Event} Event
             */
            Event.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Event)
                    return object;
                let message = new $root.tendermint.abci.Event();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.attributes) {
                    if (!Array.isArray(object.attributes))
                        throw TypeError(".tendermint.abci.Event.attributes: array expected");
                    message.attributes = [];
                    for (let i = 0; i < object.attributes.length; ++i) {
                        if (typeof object.attributes[i] !== "object")
                            throw TypeError(".tendermint.abci.Event.attributes: object expected");
                        message.attributes[i] = $root.tendermint.abci.EventAttribute.fromObject(object.attributes[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an Event message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Event
             * @static
             * @param {tendermint.abci.Event} message Event
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Event.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.attributes = [];
                if (options.defaults)
                    object.type = "";
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.attributes && message.attributes.length) {
                    object.attributes = [];
                    for (let j = 0; j < message.attributes.length; ++j)
                        object.attributes[j] = $root.tendermint.abci.EventAttribute.toObject(message.attributes[j], options);
                }
                return object;
            };

            /**
             * Converts this Event to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Event
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Event.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Event;
        })();

        abci.EventAttribute = (function() {

            /**
             * Properties of an EventAttribute.
             * @memberof tendermint.abci
             * @interface IEventAttribute
             * @property {Uint8Array|null} [key] EventAttribute key
             * @property {Uint8Array|null} [value] EventAttribute value
             * @property {boolean|null} [index] EventAttribute index
             */

            /**
             * Constructs a new EventAttribute.
             * @memberof tendermint.abci
             * @classdesc Represents an EventAttribute.
             * @implements IEventAttribute
             * @constructor
             * @param {tendermint.abci.IEventAttribute=} [properties] Properties to set
             */
            function EventAttribute(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventAttribute key.
             * @member {Uint8Array} key
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.key = $util.newBuffer([]);

            /**
             * EventAttribute value.
             * @member {Uint8Array} value
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.value = $util.newBuffer([]);

            /**
             * EventAttribute index.
             * @member {boolean} index
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.index = false;

            /**
             * Encodes the specified EventAttribute message. Does not implicitly {@link tendermint.abci.EventAttribute.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {tendermint.abci.IEventAttribute} message EventAttribute message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAttribute.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.index);
                return writer;
            };

            /**
             * Encodes the specified EventAttribute message, length delimited. Does not implicitly {@link tendermint.abci.EventAttribute.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {tendermint.abci.IEventAttribute} message EventAttribute message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAttribute.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventAttribute message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.EventAttribute} EventAttribute
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAttribute.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.EventAttribute();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.bytes();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    case 3:
                        message.index = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventAttribute message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.EventAttribute} EventAttribute
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAttribute.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventAttribute message.
             * @function verify
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventAttribute.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (typeof message.index !== "boolean")
                        return "index: boolean expected";
                return null;
            };

            /**
             * Creates an EventAttribute message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.EventAttribute} EventAttribute
             */
            EventAttribute.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.EventAttribute)
                    return object;
                let message = new $root.tendermint.abci.EventAttribute();
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                if (object.index != null)
                    message.index = Boolean(object.index);
                return message;
            };

            /**
             * Creates a plain object from an EventAttribute message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {tendermint.abci.EventAttribute} message EventAttribute
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventAttribute.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                    object.index = false;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                return object;
            };

            /**
             * Converts this EventAttribute to JSON.
             * @function toJSON
             * @memberof tendermint.abci.EventAttribute
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventAttribute.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventAttribute;
        })();

        abci.TxResult = (function() {

            /**
             * Properties of a TxResult.
             * @memberof tendermint.abci
             * @interface ITxResult
             * @property {number|null} [height] TxResult height
             * @property {number|null} [index] TxResult index
             * @property {Uint8Array|null} [tx] TxResult tx
             * @property {tendermint.abci.IResponseDeliverTx|null} [result] TxResult result
             */

            /**
             * Constructs a new TxResult.
             * @memberof tendermint.abci
             * @classdesc Represents a TxResult.
             * @implements ITxResult
             * @constructor
             * @param {tendermint.abci.ITxResult=} [properties] Properties to set
             */
            function TxResult(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TxResult height.
             * @member {number} height
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TxResult index.
             * @member {number} index
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.index = 0;

            /**
             * TxResult tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.tx = $util.newBuffer([]);

            /**
             * TxResult result.
             * @member {tendermint.abci.IResponseDeliverTx|null|undefined} result
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.result = null;

            /**
             * Encodes the specified TxResult message. Does not implicitly {@link tendermint.abci.TxResult.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {tendermint.abci.ITxResult} message TxResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxResult.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
                if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.tx);
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    $root.tendermint.abci.ResponseDeliverTx.encode(message.result, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TxResult message, length delimited. Does not implicitly {@link tendermint.abci.TxResult.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {tendermint.abci.ITxResult} message TxResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxResult.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TxResult message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.TxResult} TxResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxResult.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.TxResult();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.index = reader.uint32();
                        break;
                    case 3:
                        message.tx = reader.bytes();
                        break;
                    case 4:
                        message.result = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TxResult message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.TxResult} TxResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxResult.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TxResult message.
             * @function verify
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TxResult.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.tx != null && message.hasOwnProperty("tx"))
                    if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                        return "tx: buffer expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    let error = $root.tendermint.abci.ResponseDeliverTx.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };

            /**
             * Creates a TxResult message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.TxResult} TxResult
             */
            TxResult.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.TxResult)
                    return object;
                let message = new $root.tendermint.abci.TxResult();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.tx != null)
                    if (typeof object.tx === "string")
                        $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                    else if (object.tx.length)
                        message.tx = object.tx;
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".tendermint.abci.TxResult.result: object expected");
                    message.result = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.result);
                }
                return message;
            };

            /**
             * Creates a plain object from a TxResult message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {tendermint.abci.TxResult} message TxResult
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TxResult.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.index = 0;
                    if (options.bytes === String)
                        object.tx = "";
                    else {
                        object.tx = [];
                        if (options.bytes !== Array)
                            object.tx = $util.newBuffer(object.tx);
                    }
                    object.result = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.tx != null && message.hasOwnProperty("tx"))
                    object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.tendermint.abci.ResponseDeliverTx.toObject(message.result, options);
                return object;
            };

            /**
             * Converts this TxResult to JSON.
             * @function toJSON
             * @memberof tendermint.abci.TxResult
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TxResult.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TxResult;
        })();

        abci.Validator = (function() {

            /**
             * Properties of a Validator.
             * @memberof tendermint.abci
             * @interface IValidator
             * @property {Uint8Array|null} [address] Validator address
             * @property {number|null} [power] Validator power
             */

            /**
             * Constructs a new Validator.
             * @memberof tendermint.abci
             * @classdesc Represents a Validator.
             * @implements IValidator
             * @constructor
             * @param {tendermint.abci.IValidator=} [properties] Properties to set
             */
            function Validator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Validator address.
             * @member {Uint8Array} address
             * @memberof tendermint.abci.Validator
             * @instance
             */
            Validator.prototype.address = $util.newBuffer([]);

            /**
             * Validator power.
             * @member {number} power
             * @memberof tendermint.abci.Validator
             * @instance
             */
            Validator.prototype.power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified Validator message. Does not implicitly {@link tendermint.abci.Validator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Validator
             * @static
             * @param {tendermint.abci.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
                if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.power);
                return writer;
            };

            /**
             * Encodes the specified Validator message, length delimited. Does not implicitly {@link tendermint.abci.Validator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Validator
             * @static
             * @param {tendermint.abci.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Validator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Validator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.bytes();
                        break;
                    case 3:
                        message.power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Validator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Validator message.
             * @function verify
             * @memberof tendermint.abci.Validator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Validator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                        return "address: buffer expected";
                if (message.power != null && message.hasOwnProperty("power"))
                    if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                        return "power: integer|Long expected";
                return null;
            };

            /**
             * Creates a Validator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Validator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Validator} Validator
             */
            Validator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Validator)
                    return object;
                let message = new $root.tendermint.abci.Validator();
                if (object.address != null)
                    if (typeof object.address === "string")
                        $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                    else if (object.address.length)
                        message.address = object.address;
                if (object.power != null)
                    if ($util.Long)
                        (message.power = $util.Long.fromValue(object.power)).unsigned = false;
                    else if (typeof object.power === "string")
                        message.power = parseInt(object.power, 10);
                    else if (typeof object.power === "number")
                        message.power = object.power;
                    else if (typeof object.power === "object")
                        message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Validator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Validator
             * @static
             * @param {tendermint.abci.Validator} message Validator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Validator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.address = "";
                    else {
                        object.address = [];
                        if (options.bytes !== Array)
                            object.address = $util.newBuffer(object.address);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.power = options.longs === String ? "0" : 0;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power === "number")
                        object.power = options.longs === String ? String(message.power) : message.power;
                    else
                        object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber() : message.power;
                return object;
            };

            /**
             * Converts this Validator to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Validator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Validator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Validator;
        })();

        abci.ValidatorUpdate = (function() {

            /**
             * Properties of a ValidatorUpdate.
             * @memberof tendermint.abci
             * @interface IValidatorUpdate
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] ValidatorUpdate pub_key
             * @property {number|null} [power] ValidatorUpdate power
             */

            /**
             * Constructs a new ValidatorUpdate.
             * @memberof tendermint.abci
             * @classdesc Represents a ValidatorUpdate.
             * @implements IValidatorUpdate
             * @constructor
             * @param {tendermint.abci.IValidatorUpdate=} [properties] Properties to set
             */
            function ValidatorUpdate(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorUpdate pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             */
            ValidatorUpdate.prototype.pub_key = null;

            /**
             * ValidatorUpdate power.
             * @member {number} power
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             */
            ValidatorUpdate.prototype.power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ValidatorUpdate message. Does not implicitly {@link tendermint.abci.ValidatorUpdate.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {tendermint.abci.IValidatorUpdate} message ValidatorUpdate message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorUpdate.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.power);
                return writer;
            };

            /**
             * Encodes the specified ValidatorUpdate message, length delimited. Does not implicitly {@link tendermint.abci.ValidatorUpdate.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {tendermint.abci.IValidatorUpdate} message ValidatorUpdate message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorUpdate message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorUpdate.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ValidatorUpdate();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorUpdate message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorUpdate.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorUpdate message.
             * @function verify
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorUpdate.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.power != null && message.hasOwnProperty("power"))
                    if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                        return "power: integer|Long expected";
                return null;
            };

            /**
             * Creates a ValidatorUpdate message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
             */
            ValidatorUpdate.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ValidatorUpdate)
                    return object;
                let message = new $root.tendermint.abci.ValidatorUpdate();
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.abci.ValidatorUpdate.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.power != null)
                    if ($util.Long)
                        (message.power = $util.Long.fromValue(object.power)).unsigned = false;
                    else if (typeof object.power === "string")
                        message.power = parseInt(object.power, 10);
                    else if (typeof object.power === "number")
                        message.power = object.power;
                    else if (typeof object.power === "object")
                        message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ValidatorUpdate message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {tendermint.abci.ValidatorUpdate} message ValidatorUpdate
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorUpdate.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.power = options.longs === String ? "0" : 0;
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power === "number")
                        object.power = options.longs === String ? String(message.power) : message.power;
                    else
                        object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber() : message.power;
                return object;
            };

            /**
             * Converts this ValidatorUpdate to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorUpdate.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorUpdate;
        })();

        abci.VoteInfo = (function() {

            /**
             * Properties of a VoteInfo.
             * @memberof tendermint.abci
             * @interface IVoteInfo
             * @property {tendermint.abci.IValidator|null} [validator] VoteInfo validator
             * @property {boolean|null} [signed_last_block] VoteInfo signed_last_block
             */

            /**
             * Constructs a new VoteInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a VoteInfo.
             * @implements IVoteInfo
             * @constructor
             * @param {tendermint.abci.IVoteInfo=} [properties] Properties to set
             */
            function VoteInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VoteInfo validator.
             * @member {tendermint.abci.IValidator|null|undefined} validator
             * @memberof tendermint.abci.VoteInfo
             * @instance
             */
            VoteInfo.prototype.validator = null;

            /**
             * VoteInfo signed_last_block.
             * @member {boolean} signed_last_block
             * @memberof tendermint.abci.VoteInfo
             * @instance
             */
            VoteInfo.prototype.signed_last_block = false;

            /**
             * Encodes the specified VoteInfo message. Does not implicitly {@link tendermint.abci.VoteInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {tendermint.abci.IVoteInfo} message VoteInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.abci.Validator.encode(message.validator, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.signed_last_block != null && Object.hasOwnProperty.call(message, "signed_last_block"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.signed_last_block);
                return writer;
            };

            /**
             * Encodes the specified VoteInfo message, length delimited. Does not implicitly {@link tendermint.abci.VoteInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {tendermint.abci.IVoteInfo} message VoteInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VoteInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.VoteInfo} VoteInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.VoteInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator = $root.tendermint.abci.Validator.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.signed_last_block = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VoteInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.VoteInfo} VoteInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VoteInfo message.
             * @function verify
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.abci.Validator.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.signed_last_block != null && message.hasOwnProperty("signed_last_block"))
                    if (typeof message.signed_last_block !== "boolean")
                        return "signed_last_block: boolean expected";
                return null;
            };

            /**
             * Creates a VoteInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.VoteInfo} VoteInfo
             */
            VoteInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.VoteInfo)
                    return object;
                let message = new $root.tendermint.abci.VoteInfo();
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.abci.VoteInfo.validator: object expected");
                    message.validator = $root.tendermint.abci.Validator.fromObject(object.validator);
                }
                if (object.signed_last_block != null)
                    message.signed_last_block = Boolean(object.signed_last_block);
                return message;
            };

            /**
             * Creates a plain object from a VoteInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {tendermint.abci.VoteInfo} message VoteInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.validator = null;
                    object.signed_last_block = false;
                }
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.abci.Validator.toObject(message.validator, options);
                if (message.signed_last_block != null && message.hasOwnProperty("signed_last_block"))
                    object.signed_last_block = message.signed_last_block;
                return object;
            };

            /**
             * Converts this VoteInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.VoteInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VoteInfo;
        })();

        /**
         * EvidenceType enum.
         * @name tendermint.abci.EvidenceType
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} DUPLICATE_VOTE=1 DUPLICATE_VOTE value
         * @property {number} LIGHT_CLIENT_ATTACK=2 LIGHT_CLIENT_ATTACK value
         */
        abci.EvidenceType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "DUPLICATE_VOTE"] = 1;
            values[valuesById[2] = "LIGHT_CLIENT_ATTACK"] = 2;
            return values;
        })();

        abci.Evidence = (function() {

            /**
             * Properties of an Evidence.
             * @memberof tendermint.abci
             * @interface IEvidence
             * @property {tendermint.abci.EvidenceType|null} [type] Evidence type
             * @property {tendermint.abci.IValidator|null} [validator] Evidence validator
             * @property {number|null} [height] Evidence height
             * @property {google.protobuf.ITimestamp|null} [time] Evidence time
             * @property {number|null} [total_voting_power] Evidence total_voting_power
             */

            /**
             * Constructs a new Evidence.
             * @memberof tendermint.abci
             * @classdesc Represents an Evidence.
             * @implements IEvidence
             * @constructor
             * @param {tendermint.abci.IEvidence=} [properties] Properties to set
             */
            function Evidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Evidence type.
             * @member {tendermint.abci.EvidenceType} type
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.type = 0;

            /**
             * Evidence validator.
             * @member {tendermint.abci.IValidator|null|undefined} validator
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.validator = null;

            /**
             * Evidence height.
             * @member {number} height
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Evidence time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.time = null;

            /**
             * Evidence total_voting_power.
             * @member {number} total_voting_power
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified Evidence message. Does not implicitly {@link tendermint.abci.Evidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {tendermint.abci.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.abci.Validator.encode(message.validator, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.total_voting_power);
                return writer;
            };

            /**
             * Encodes the specified Evidence message, length delimited. Does not implicitly {@link tendermint.abci.Evidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {tendermint.abci.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Evidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.validator = $root.tendermint.abci.Validator.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.height = reader.int64();
                        break;
                    case 4:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.total_voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Evidence message.
             * @function verify
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Evidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.abci.Validator.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                        return "total_voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates an Evidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Evidence} Evidence
             */
            Evidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Evidence)
                    return object;
                let message = new $root.tendermint.abci.Evidence();
                switch (object.type) {
                case "UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "DUPLICATE_VOTE":
                case 1:
                    message.type = 1;
                    break;
                case "LIGHT_CLIENT_ATTACK":
                case 2:
                    message.type = 2;
                    break;
                }
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.abci.Evidence.validator: object expected");
                    message.validator = $root.tendermint.abci.Validator.fromObject(object.validator);
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.abci.Evidence.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.total_voting_power != null)
                    if ($util.Long)
                        (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                    else if (typeof object.total_voting_power === "string")
                        message.total_voting_power = parseInt(object.total_voting_power, 10);
                    else if (typeof object.total_voting_power === "number")
                        message.total_voting_power = object.total_voting_power;
                    else if (typeof object.total_voting_power === "object")
                        message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an Evidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {tendermint.abci.Evidence} message Evidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Evidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "UNKNOWN" : 0;
                    object.validator = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.time = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total_voting_power = options.longs === String ? "0" : 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.abci.EvidenceType[message.type] : message.type;
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.abci.Validator.toObject(message.validator, options);
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (typeof message.total_voting_power === "number")
                        object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                    else
                        object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                return object;
            };

            /**
             * Converts this Evidence to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Evidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Evidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Evidence;
        })();

        abci.Snapshot = (function() {

            /**
             * Properties of a Snapshot.
             * @memberof tendermint.abci
             * @interface ISnapshot
             * @property {number|null} [height] Snapshot height
             * @property {number|null} [format] Snapshot format
             * @property {number|null} [chunks] Snapshot chunks
             * @property {Uint8Array|null} [hash] Snapshot hash
             * @property {Uint8Array|null} [metadata] Snapshot metadata
             */

            /**
             * Constructs a new Snapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a Snapshot.
             * @implements ISnapshot
             * @constructor
             * @param {tendermint.abci.ISnapshot=} [properties] Properties to set
             */
            function Snapshot(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Snapshot height.
             * @member {number} height
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Snapshot format.
             * @member {number} format
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.format = 0;

            /**
             * Snapshot chunks.
             * @member {number} chunks
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.chunks = 0;

            /**
             * Snapshot hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.hash = $util.newBuffer([]);

            /**
             * Snapshot metadata.
             * @member {Uint8Array} metadata
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.metadata = $util.newBuffer([]);

            /**
             * Encodes the specified Snapshot message. Does not implicitly {@link tendermint.abci.Snapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {tendermint.abci.ISnapshot} message Snapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Snapshot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                if (message.chunks != null && Object.hasOwnProperty.call(message, "chunks"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chunks);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.hash);
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.metadata);
                return writer;
            };

            /**
             * Encodes the specified Snapshot message, length delimited. Does not implicitly {@link tendermint.abci.Snapshot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {tendermint.abci.ISnapshot} message Snapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Snapshot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Snapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Snapshot} Snapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Snapshot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Snapshot();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.uint64();
                        break;
                    case 2:
                        message.format = reader.uint32();
                        break;
                    case 3:
                        message.chunks = reader.uint32();
                        break;
                    case 4:
                        message.hash = reader.bytes();
                        break;
                    case 5:
                        message.metadata = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Snapshot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Snapshot} Snapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Snapshot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Snapshot message.
             * @function verify
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Snapshot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.format != null && message.hasOwnProperty("format"))
                    if (!$util.isInteger(message.format))
                        return "format: integer expected";
                if (message.chunks != null && message.hasOwnProperty("chunks"))
                    if (!$util.isInteger(message.chunks))
                        return "chunks: integer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!(message.metadata && typeof message.metadata.length === "number" || $util.isString(message.metadata)))
                        return "metadata: buffer expected";
                return null;
            };

            /**
             * Creates a Snapshot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Snapshot} Snapshot
             */
            Snapshot.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Snapshot)
                    return object;
                let message = new $root.tendermint.abci.Snapshot();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.format != null)
                    message.format = object.format >>> 0;
                if (object.chunks != null)
                    message.chunks = object.chunks >>> 0;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.metadata != null)
                    if (typeof object.metadata === "string")
                        $util.base64.decode(object.metadata, message.metadata = $util.newBuffer($util.base64.length(object.metadata)), 0);
                    else if (object.metadata.length)
                        message.metadata = object.metadata;
                return message;
            };

            /**
             * Creates a plain object from a Snapshot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {tendermint.abci.Snapshot} message Snapshot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Snapshot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.format = 0;
                    object.chunks = 0;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    if (options.bytes === String)
                        object.metadata = "";
                    else {
                        object.metadata = [];
                        if (options.bytes !== Array)
                            object.metadata = $util.newBuffer(object.metadata);
                    }
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.format != null && message.hasOwnProperty("format"))
                    object.format = message.format;
                if (message.chunks != null && message.hasOwnProperty("chunks"))
                    object.chunks = message.chunks;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = options.bytes === String ? $util.base64.encode(message.metadata, 0, message.metadata.length) : options.bytes === Array ? Array.prototype.slice.call(message.metadata) : message.metadata;
                return object;
            };

            /**
             * Converts this Snapshot to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Snapshot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Snapshot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Snapshot;
        })();

        abci.ABCIApplication = (function() {

            /**
             * Constructs a new ABCIApplication service.
             * @memberof tendermint.abci
             * @classdesc Represents a ABCIApplication
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function ABCIApplication(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (ABCIApplication.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ABCIApplication;

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#echo}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef EchoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseEcho} [response] ResponseEcho
             */

            /**
             * Calls Echo.
             * @function echo
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEcho} request RequestEcho message or plain object
             * @param {tendermint.abci.ABCIApplication.EchoCallback} callback Node-style callback called with the error, if any, and ResponseEcho
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.echo = function echo(request, callback) {
                return this.rpcCall(echo, $root.tendermint.abci.RequestEcho, $root.tendermint.abci.ResponseEcho, request, callback);
            }, "name", { value: "Echo" });

            /**
             * Calls Echo.
             * @function echo
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEcho} request RequestEcho message or plain object
             * @returns {Promise<tendermint.abci.ResponseEcho>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#flush}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef FlushCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseFlush} [response] ResponseFlush
             */

            /**
             * Calls Flush.
             * @function flush
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestFlush} request RequestFlush message or plain object
             * @param {tendermint.abci.ABCIApplication.FlushCallback} callback Node-style callback called with the error, if any, and ResponseFlush
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.flush = function flush(request, callback) {
                return this.rpcCall(flush, $root.tendermint.abci.RequestFlush, $root.tendermint.abci.ResponseFlush, request, callback);
            }, "name", { value: "Flush" });

            /**
             * Calls Flush.
             * @function flush
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestFlush} request RequestFlush message or plain object
             * @returns {Promise<tendermint.abci.ResponseFlush>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#info}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef InfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseInfo} [response] ResponseInfo
             */

            /**
             * Calls Info.
             * @function info
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInfo} request RequestInfo message or plain object
             * @param {tendermint.abci.ABCIApplication.InfoCallback} callback Node-style callback called with the error, if any, and ResponseInfo
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.info = function info(request, callback) {
                return this.rpcCall(info, $root.tendermint.abci.RequestInfo, $root.tendermint.abci.ResponseInfo, request, callback);
            }, "name", { value: "Info" });

            /**
             * Calls Info.
             * @function info
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInfo} request RequestInfo message or plain object
             * @returns {Promise<tendermint.abci.ResponseInfo>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#setOption}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef SetOptionCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseSetOption} [response] ResponseSetOption
             */

            /**
             * Calls SetOption.
             * @function setOption
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestSetOption} request RequestSetOption message or plain object
             * @param {tendermint.abci.ABCIApplication.SetOptionCallback} callback Node-style callback called with the error, if any, and ResponseSetOption
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.setOption = function setOption(request, callback) {
                return this.rpcCall(setOption, $root.tendermint.abci.RequestSetOption, $root.tendermint.abci.ResponseSetOption, request, callback);
            }, "name", { value: "SetOption" });

            /**
             * Calls SetOption.
             * @function setOption
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestSetOption} request RequestSetOption message or plain object
             * @returns {Promise<tendermint.abci.ResponseSetOption>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#deliverTx}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef DeliverTxCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseDeliverTx} [response] ResponseDeliverTx
             */

            /**
             * Calls DeliverTx.
             * @function deliverTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestDeliverTx} request RequestDeliverTx message or plain object
             * @param {tendermint.abci.ABCIApplication.DeliverTxCallback} callback Node-style callback called with the error, if any, and ResponseDeliverTx
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.deliverTx = function deliverTx(request, callback) {
                return this.rpcCall(deliverTx, $root.tendermint.abci.RequestDeliverTx, $root.tendermint.abci.ResponseDeliverTx, request, callback);
            }, "name", { value: "DeliverTx" });

            /**
             * Calls DeliverTx.
             * @function deliverTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestDeliverTx} request RequestDeliverTx message or plain object
             * @returns {Promise<tendermint.abci.ResponseDeliverTx>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#checkTx}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef CheckTxCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseCheckTx} [response] ResponseCheckTx
             */

            /**
             * Calls CheckTx.
             * @function checkTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCheckTx} request RequestCheckTx message or plain object
             * @param {tendermint.abci.ABCIApplication.CheckTxCallback} callback Node-style callback called with the error, if any, and ResponseCheckTx
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.checkTx = function checkTx(request, callback) {
                return this.rpcCall(checkTx, $root.tendermint.abci.RequestCheckTx, $root.tendermint.abci.ResponseCheckTx, request, callback);
            }, "name", { value: "CheckTx" });

            /**
             * Calls CheckTx.
             * @function checkTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCheckTx} request RequestCheckTx message or plain object
             * @returns {Promise<tendermint.abci.ResponseCheckTx>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#query}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef QueryCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseQuery} [response] ResponseQuery
             */

            /**
             * Calls Query.
             * @function query
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestQuery} request RequestQuery message or plain object
             * @param {tendermint.abci.ABCIApplication.QueryCallback} callback Node-style callback called with the error, if any, and ResponseQuery
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.query = function query(request, callback) {
                return this.rpcCall(query, $root.tendermint.abci.RequestQuery, $root.tendermint.abci.ResponseQuery, request, callback);
            }, "name", { value: "Query" });

            /**
             * Calls Query.
             * @function query
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestQuery} request RequestQuery message or plain object
             * @returns {Promise<tendermint.abci.ResponseQuery>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#commit}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef CommitCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseCommit} [response] ResponseCommit
             */

            /**
             * Calls Commit.
             * @function commit
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCommit} request RequestCommit message or plain object
             * @param {tendermint.abci.ABCIApplication.CommitCallback} callback Node-style callback called with the error, if any, and ResponseCommit
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.commit = function commit(request, callback) {
                return this.rpcCall(commit, $root.tendermint.abci.RequestCommit, $root.tendermint.abci.ResponseCommit, request, callback);
            }, "name", { value: "Commit" });

            /**
             * Calls Commit.
             * @function commit
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCommit} request RequestCommit message or plain object
             * @returns {Promise<tendermint.abci.ResponseCommit>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#initChain}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef InitChainCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseInitChain} [response] ResponseInitChain
             */

            /**
             * Calls InitChain.
             * @function initChain
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInitChain} request RequestInitChain message or plain object
             * @param {tendermint.abci.ABCIApplication.InitChainCallback} callback Node-style callback called with the error, if any, and ResponseInitChain
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.initChain = function initChain(request, callback) {
                return this.rpcCall(initChain, $root.tendermint.abci.RequestInitChain, $root.tendermint.abci.ResponseInitChain, request, callback);
            }, "name", { value: "InitChain" });

            /**
             * Calls InitChain.
             * @function initChain
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInitChain} request RequestInitChain message or plain object
             * @returns {Promise<tendermint.abci.ResponseInitChain>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#beginBlock}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef BeginBlockCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseBeginBlock} [response] ResponseBeginBlock
             */

            /**
             * Calls BeginBlock.
             * @function beginBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestBeginBlock} request RequestBeginBlock message or plain object
             * @param {tendermint.abci.ABCIApplication.BeginBlockCallback} callback Node-style callback called with the error, if any, and ResponseBeginBlock
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.beginBlock = function beginBlock(request, callback) {
                return this.rpcCall(beginBlock, $root.tendermint.abci.RequestBeginBlock, $root.tendermint.abci.ResponseBeginBlock, request, callback);
            }, "name", { value: "BeginBlock" });

            /**
             * Calls BeginBlock.
             * @function beginBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestBeginBlock} request RequestBeginBlock message or plain object
             * @returns {Promise<tendermint.abci.ResponseBeginBlock>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#endBlock}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef EndBlockCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseEndBlock} [response] ResponseEndBlock
             */

            /**
             * Calls EndBlock.
             * @function endBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEndBlock} request RequestEndBlock message or plain object
             * @param {tendermint.abci.ABCIApplication.EndBlockCallback} callback Node-style callback called with the error, if any, and ResponseEndBlock
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.endBlock = function endBlock(request, callback) {
                return this.rpcCall(endBlock, $root.tendermint.abci.RequestEndBlock, $root.tendermint.abci.ResponseEndBlock, request, callback);
            }, "name", { value: "EndBlock" });

            /**
             * Calls EndBlock.
             * @function endBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEndBlock} request RequestEndBlock message or plain object
             * @returns {Promise<tendermint.abci.ResponseEndBlock>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#listSnapshots}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef ListSnapshotsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseListSnapshots} [response] ResponseListSnapshots
             */

            /**
             * Calls ListSnapshots.
             * @function listSnapshots
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestListSnapshots} request RequestListSnapshots message or plain object
             * @param {tendermint.abci.ABCIApplication.ListSnapshotsCallback} callback Node-style callback called with the error, if any, and ResponseListSnapshots
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.listSnapshots = function listSnapshots(request, callback) {
                return this.rpcCall(listSnapshots, $root.tendermint.abci.RequestListSnapshots, $root.tendermint.abci.ResponseListSnapshots, request, callback);
            }, "name", { value: "ListSnapshots" });

            /**
             * Calls ListSnapshots.
             * @function listSnapshots
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestListSnapshots} request RequestListSnapshots message or plain object
             * @returns {Promise<tendermint.abci.ResponseListSnapshots>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#offerSnapshot}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef OfferSnapshotCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseOfferSnapshot} [response] ResponseOfferSnapshot
             */

            /**
             * Calls OfferSnapshot.
             * @function offerSnapshot
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestOfferSnapshot} request RequestOfferSnapshot message or plain object
             * @param {tendermint.abci.ABCIApplication.OfferSnapshotCallback} callback Node-style callback called with the error, if any, and ResponseOfferSnapshot
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.offerSnapshot = function offerSnapshot(request, callback) {
                return this.rpcCall(offerSnapshot, $root.tendermint.abci.RequestOfferSnapshot, $root.tendermint.abci.ResponseOfferSnapshot, request, callback);
            }, "name", { value: "OfferSnapshot" });

            /**
             * Calls OfferSnapshot.
             * @function offerSnapshot
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestOfferSnapshot} request RequestOfferSnapshot message or plain object
             * @returns {Promise<tendermint.abci.ResponseOfferSnapshot>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#loadSnapshotChunk}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef LoadSnapshotChunkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseLoadSnapshotChunk} [response] ResponseLoadSnapshotChunk
             */

            /**
             * Calls LoadSnapshotChunk.
             * @function loadSnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} request RequestLoadSnapshotChunk message or plain object
             * @param {tendermint.abci.ABCIApplication.LoadSnapshotChunkCallback} callback Node-style callback called with the error, if any, and ResponseLoadSnapshotChunk
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.loadSnapshotChunk = function loadSnapshotChunk(request, callback) {
                return this.rpcCall(loadSnapshotChunk, $root.tendermint.abci.RequestLoadSnapshotChunk, $root.tendermint.abci.ResponseLoadSnapshotChunk, request, callback);
            }, "name", { value: "LoadSnapshotChunk" });

            /**
             * Calls LoadSnapshotChunk.
             * @function loadSnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} request RequestLoadSnapshotChunk message or plain object
             * @returns {Promise<tendermint.abci.ResponseLoadSnapshotChunk>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#applySnapshotChunk}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef ApplySnapshotChunkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseApplySnapshotChunk} [response] ResponseApplySnapshotChunk
             */

            /**
             * Calls ApplySnapshotChunk.
             * @function applySnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestApplySnapshotChunk} request RequestApplySnapshotChunk message or plain object
             * @param {tendermint.abci.ABCIApplication.ApplySnapshotChunkCallback} callback Node-style callback called with the error, if any, and ResponseApplySnapshotChunk
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.applySnapshotChunk = function applySnapshotChunk(request, callback) {
                return this.rpcCall(applySnapshotChunk, $root.tendermint.abci.RequestApplySnapshotChunk, $root.tendermint.abci.ResponseApplySnapshotChunk, request, callback);
            }, "name", { value: "ApplySnapshotChunk" });

            /**
             * Calls ApplySnapshotChunk.
             * @function applySnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestApplySnapshotChunk} request RequestApplySnapshotChunk message or plain object
             * @returns {Promise<tendermint.abci.ResponseApplySnapshotChunk>} Promise
             * @variation 2
             */

            return ABCIApplication;
        })();

        return abci;
    })();

    tendermint.crypto = (function() {

        /**
         * Namespace crypto.
         * @memberof tendermint
         * @namespace
         */
        const crypto = {};

        crypto.Proof = (function() {

            /**
             * Properties of a Proof.
             * @memberof tendermint.crypto
             * @interface IProof
             * @property {number|null} [total] Proof total
             * @property {number|null} [index] Proof index
             * @property {Uint8Array|null} [leaf_hash] Proof leaf_hash
             * @property {Array.<Uint8Array>|null} [aunts] Proof aunts
             */

            /**
             * Constructs a new Proof.
             * @memberof tendermint.crypto
             * @classdesc Represents a Proof.
             * @implements IProof
             * @constructor
             * @param {tendermint.crypto.IProof=} [properties] Properties to set
             */
            function Proof(properties) {
                this.aunts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Proof total.
             * @member {number} total
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.total = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proof index.
             * @member {number} index
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proof leaf_hash.
             * @member {Uint8Array} leaf_hash
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.leaf_hash = $util.newBuffer([]);

            /**
             * Proof aunts.
             * @member {Array.<Uint8Array>} aunts
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.aunts = $util.emptyArray;

            /**
             * Encodes the specified Proof message. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proof.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.total);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.index);
                if (message.leaf_hash != null && Object.hasOwnProperty.call(message, "leaf_hash"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.leaf_hash);
                if (message.aunts != null && message.aunts.length)
                    for (let i = 0; i < message.aunts.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.aunts[i]);
                return writer;
            };

            /**
             * Encodes the specified Proof message, length delimited. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proof.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Proof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.Proof} Proof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proof.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.Proof();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.int64();
                        break;
                    case 2:
                        message.index = reader.int64();
                        break;
                    case 3:
                        message.leaf_hash = reader.bytes();
                        break;
                    case 4:
                        if (!(message.aunts && message.aunts.length))
                            message.aunts = [];
                        message.aunts.push(reader.bytes());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Proof message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.Proof} Proof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proof.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Proof message.
             * @function verify
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Proof.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                        return "total: integer|Long expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                        return "index: integer|Long expected";
                if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                    if (!(message.leaf_hash && typeof message.leaf_hash.length === "number" || $util.isString(message.leaf_hash)))
                        return "leaf_hash: buffer expected";
                if (message.aunts != null && message.hasOwnProperty("aunts")) {
                    if (!Array.isArray(message.aunts))
                        return "aunts: array expected";
                    for (let i = 0; i < message.aunts.length; ++i)
                        if (!(message.aunts[i] && typeof message.aunts[i].length === "number" || $util.isString(message.aunts[i])))
                            return "aunts: buffer[] expected";
                }
                return null;
            };

            /**
             * Creates a Proof message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.Proof} Proof
             */
            Proof.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.Proof)
                    return object;
                let message = new $root.tendermint.crypto.Proof();
                if (object.total != null)
                    if ($util.Long)
                        (message.total = $util.Long.fromValue(object.total)).unsigned = false;
                    else if (typeof object.total === "string")
                        message.total = parseInt(object.total, 10);
                    else if (typeof object.total === "number")
                        message.total = object.total;
                    else if (typeof object.total === "object")
                        message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber();
                if (object.index != null)
                    if ($util.Long)
                        (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                    else if (typeof object.index === "string")
                        message.index = parseInt(object.index, 10);
                    else if (typeof object.index === "number")
                        message.index = object.index;
                    else if (typeof object.index === "object")
                        message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                if (object.leaf_hash != null)
                    if (typeof object.leaf_hash === "string")
                        $util.base64.decode(object.leaf_hash, message.leaf_hash = $util.newBuffer($util.base64.length(object.leaf_hash)), 0);
                    else if (object.leaf_hash.length)
                        message.leaf_hash = object.leaf_hash;
                if (object.aunts) {
                    if (!Array.isArray(object.aunts))
                        throw TypeError(".tendermint.crypto.Proof.aunts: array expected");
                    message.aunts = [];
                    for (let i = 0; i < object.aunts.length; ++i)
                        if (typeof object.aunts[i] === "string")
                            $util.base64.decode(object.aunts[i], message.aunts[i] = $util.newBuffer($util.base64.length(object.aunts[i])), 0);
                        else if (object.aunts[i].length)
                            message.aunts[i] = object.aunts[i];
                }
                return message;
            };

            /**
             * Creates a plain object from a Proof message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.Proof} message Proof
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Proof.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.aunts = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.index = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.leaf_hash = "";
                    else {
                        object.leaf_hash = [];
                        if (options.bytes !== Array)
                            object.leaf_hash = $util.newBuffer(object.leaf_hash);
                    }
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    if (typeof message.total === "number")
                        object.total = options.longs === String ? String(message.total) : message.total;
                    else
                        object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber() : message.total;
                if (message.index != null && message.hasOwnProperty("index"))
                    if (typeof message.index === "number")
                        object.index = options.longs === String ? String(message.index) : message.index;
                    else
                        object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                    object.leaf_hash = options.bytes === String ? $util.base64.encode(message.leaf_hash, 0, message.leaf_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.leaf_hash) : message.leaf_hash;
                if (message.aunts && message.aunts.length) {
                    object.aunts = [];
                    for (let j = 0; j < message.aunts.length; ++j)
                        object.aunts[j] = options.bytes === String ? $util.base64.encode(message.aunts[j], 0, message.aunts[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.aunts[j]) : message.aunts[j];
                }
                return object;
            };

            /**
             * Converts this Proof to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.Proof
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Proof.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Proof;
        })();

        crypto.ValueOp = (function() {

            /**
             * Properties of a ValueOp.
             * @memberof tendermint.crypto
             * @interface IValueOp
             * @property {Uint8Array|null} [key] ValueOp key
             * @property {tendermint.crypto.IProof|null} [proof] ValueOp proof
             */

            /**
             * Constructs a new ValueOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ValueOp.
             * @implements IValueOp
             * @constructor
             * @param {tendermint.crypto.IValueOp=} [properties] Properties to set
             */
            function ValueOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValueOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.key = $util.newBuffer([]);

            /**
             * ValueOp proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.proof = null;

            /**
             * Encodes the specified ValueOp message. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ValueOp message, length delimited. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValueOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ValueOp} ValueOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ValueOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.bytes();
                        break;
                    case 2:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValueOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ValueOp} ValueOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValueOp message.
             * @function verify
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValueOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a ValueOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ValueOp} ValueOp
             */
            ValueOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ValueOp)
                    return object;
                let message = new $root.tendermint.crypto.ValueOp();
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.crypto.ValueOp.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a ValueOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.ValueOp} message ValueOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValueOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    object.proof = null;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this ValueOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ValueOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValueOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValueOp;
        })();

        crypto.DominoOp = (function() {

            /**
             * Properties of a DominoOp.
             * @memberof tendermint.crypto
             * @interface IDominoOp
             * @property {string|null} [key] DominoOp key
             * @property {string|null} [input] DominoOp input
             * @property {string|null} [output] DominoOp output
             */

            /**
             * Constructs a new DominoOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a DominoOp.
             * @implements IDominoOp
             * @constructor
             * @param {tendermint.crypto.IDominoOp=} [properties] Properties to set
             */
            function DominoOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DominoOp key.
             * @member {string} key
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.key = "";

            /**
             * DominoOp input.
             * @member {string} input
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.input = "";

            /**
             * DominoOp output.
             * @member {string} output
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.output = "";

            /**
             * Encodes the specified DominoOp message. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DominoOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input);
                if (message.output != null && Object.hasOwnProperty.call(message, "output"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output);
                return writer;
            };

            /**
             * Encodes the specified DominoOp message, length delimited. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DominoOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DominoOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.DominoOp} DominoOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DominoOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.DominoOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.string();
                        break;
                    case 2:
                        message.input = reader.string();
                        break;
                    case 3:
                        message.output = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DominoOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.DominoOp} DominoOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DominoOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DominoOp message.
             * @function verify
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DominoOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.input != null && message.hasOwnProperty("input"))
                    if (!$util.isString(message.input))
                        return "input: string expected";
                if (message.output != null && message.hasOwnProperty("output"))
                    if (!$util.isString(message.output))
                        return "output: string expected";
                return null;
            };

            /**
             * Creates a DominoOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.DominoOp} DominoOp
             */
            DominoOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.DominoOp)
                    return object;
                let message = new $root.tendermint.crypto.DominoOp();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.input != null)
                    message.input = String(object.input);
                if (object.output != null)
                    message.output = String(object.output);
                return message;
            };

            /**
             * Creates a plain object from a DominoOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.DominoOp} message DominoOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DominoOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.key = "";
                    object.input = "";
                    object.output = "";
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.input != null && message.hasOwnProperty("input"))
                    object.input = message.input;
                if (message.output != null && message.hasOwnProperty("output"))
                    object.output = message.output;
                return object;
            };

            /**
             * Converts this DominoOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.DominoOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DominoOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DominoOp;
        })();

        crypto.ProofOp = (function() {

            /**
             * Properties of a ProofOp.
             * @memberof tendermint.crypto
             * @interface IProofOp
             * @property {string|null} [type] ProofOp type
             * @property {Uint8Array|null} [key] ProofOp key
             * @property {Uint8Array|null} [data] ProofOp data
             */

            /**
             * Constructs a new ProofOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOp.
             * @implements IProofOp
             * @constructor
             * @param {tendermint.crypto.IProofOp=} [properties] Properties to set
             */
            function ProofOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProofOp type.
             * @member {string} type
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.type = "";

            /**
             * ProofOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.key = $util.newBuffer([]);

            /**
             * ProofOp data.
             * @member {Uint8Array} data
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.data = $util.newBuffer([]);

            /**
             * Encodes the specified ProofOp message. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                return writer;
            };

            /**
             * Encodes the specified ProofOp message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProofOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOp} ProofOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.key = reader.bytes();
                        break;
                    case 3:
                        message.data = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProofOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ProofOp} ProofOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProofOp message.
             * @function verify
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProofOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                return null;
            };

            /**
             * Creates a ProofOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ProofOp} ProofOp
             */
            ProofOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ProofOp)
                    return object;
                let message = new $root.tendermint.crypto.ProofOp();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                return message;
            };

            /**
             * Creates a plain object from a ProofOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.ProofOp} message ProofOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProofOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = "";
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                return object;
            };

            /**
             * Converts this ProofOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ProofOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProofOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProofOp;
        })();

        crypto.ProofOps = (function() {

            /**
             * Properties of a ProofOps.
             * @memberof tendermint.crypto
             * @interface IProofOps
             * @property {Array.<tendermint.crypto.IProofOp>|null} [ops] ProofOps ops
             */

            /**
             * Constructs a new ProofOps.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOps.
             * @implements IProofOps
             * @constructor
             * @param {tendermint.crypto.IProofOps=} [properties] Properties to set
             */
            function ProofOps(properties) {
                this.ops = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProofOps ops.
             * @member {Array.<tendermint.crypto.IProofOp>} ops
             * @memberof tendermint.crypto.ProofOps
             * @instance
             */
            ProofOps.prototype.ops = $util.emptyArray;

            /**
             * Encodes the specified ProofOps message. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOps.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ops != null && message.ops.length)
                    for (let i = 0; i < message.ops.length; ++i)
                        $root.tendermint.crypto.ProofOp.encode(message.ops[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ProofOps message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOps.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProofOps message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOps} ProofOps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOps.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOps();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.ops && message.ops.length))
                            message.ops = [];
                        message.ops.push($root.tendermint.crypto.ProofOp.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProofOps message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ProofOps} ProofOps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOps.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProofOps message.
             * @function verify
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProofOps.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ops != null && message.hasOwnProperty("ops")) {
                    if (!Array.isArray(message.ops))
                        return "ops: array expected";
                    for (let i = 0; i < message.ops.length; ++i) {
                        let error = $root.tendermint.crypto.ProofOp.verify(message.ops[i]);
                        if (error)
                            return "ops." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ProofOps message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ProofOps} ProofOps
             */
            ProofOps.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ProofOps)
                    return object;
                let message = new $root.tendermint.crypto.ProofOps();
                if (object.ops) {
                    if (!Array.isArray(object.ops))
                        throw TypeError(".tendermint.crypto.ProofOps.ops: array expected");
                    message.ops = [];
                    for (let i = 0; i < object.ops.length; ++i) {
                        if (typeof object.ops[i] !== "object")
                            throw TypeError(".tendermint.crypto.ProofOps.ops: object expected");
                        message.ops[i] = $root.tendermint.crypto.ProofOp.fromObject(object.ops[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ProofOps message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.ProofOps} message ProofOps
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProofOps.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ops = [];
                if (message.ops && message.ops.length) {
                    object.ops = [];
                    for (let j = 0; j < message.ops.length; ++j)
                        object.ops[j] = $root.tendermint.crypto.ProofOp.toObject(message.ops[j], options);
                }
                return object;
            };

            /**
             * Converts this ProofOps to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ProofOps
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProofOps.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProofOps;
        })();

        crypto.PublicKey = (function() {

            /**
             * Properties of a PublicKey.
             * @memberof tendermint.crypto
             * @interface IPublicKey
             * @property {Uint8Array|null} [ed25519] PublicKey ed25519
             * @property {Uint8Array|null} [secp256k1] PublicKey secp256k1
             */

            /**
             * Constructs a new PublicKey.
             * @memberof tendermint.crypto
             * @classdesc Represents a PublicKey.
             * @implements IPublicKey
             * @constructor
             * @param {tendermint.crypto.IPublicKey=} [properties] Properties to set
             */
            function PublicKey(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PublicKey ed25519.
             * @member {Uint8Array|null|undefined} ed25519
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            PublicKey.prototype.ed25519 = null;

            /**
             * PublicKey secp256k1.
             * @member {Uint8Array|null|undefined} secp256k1
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            PublicKey.prototype.secp256k1 = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * PublicKey sum.
             * @member {"ed25519"|"secp256k1"|undefined} sum
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            Object.defineProperty(PublicKey.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["ed25519", "secp256k1"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified PublicKey message. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PublicKey.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ed25519 != null && Object.hasOwnProperty.call(message, "ed25519"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ed25519);
                if (message.secp256k1 != null && Object.hasOwnProperty.call(message, "secp256k1"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.secp256k1);
                return writer;
            };

            /**
             * Encodes the specified PublicKey message, length delimited. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PublicKey.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PublicKey message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.PublicKey} PublicKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PublicKey.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.PublicKey();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ed25519 = reader.bytes();
                        break;
                    case 2:
                        message.secp256k1 = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PublicKey message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.PublicKey} PublicKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PublicKey.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PublicKey message.
             * @function verify
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PublicKey.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    properties.sum = 1;
                    if (!(message.ed25519 && typeof message.ed25519.length === "number" || $util.isString(message.ed25519)))
                        return "ed25519: buffer expected";
                }
                if (message.secp256k1 != null && message.hasOwnProperty("secp256k1")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    if (!(message.secp256k1 && typeof message.secp256k1.length === "number" || $util.isString(message.secp256k1)))
                        return "secp256k1: buffer expected";
                }
                return null;
            };

            /**
             * Creates a PublicKey message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.PublicKey} PublicKey
             */
            PublicKey.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.PublicKey)
                    return object;
                let message = new $root.tendermint.crypto.PublicKey();
                if (object.ed25519 != null)
                    if (typeof object.ed25519 === "string")
                        $util.base64.decode(object.ed25519, message.ed25519 = $util.newBuffer($util.base64.length(object.ed25519)), 0);
                    else if (object.ed25519.length)
                        message.ed25519 = object.ed25519;
                if (object.secp256k1 != null)
                    if (typeof object.secp256k1 === "string")
                        $util.base64.decode(object.secp256k1, message.secp256k1 = $util.newBuffer($util.base64.length(object.secp256k1)), 0);
                    else if (object.secp256k1.length)
                        message.secp256k1 = object.secp256k1;
                return message;
            };

            /**
             * Creates a plain object from a PublicKey message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.PublicKey} message PublicKey
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PublicKey.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    object.ed25519 = options.bytes === String ? $util.base64.encode(message.ed25519, 0, message.ed25519.length) : options.bytes === Array ? Array.prototype.slice.call(message.ed25519) : message.ed25519;
                    if (options.oneofs)
                        object.sum = "ed25519";
                }
                if (message.secp256k1 != null && message.hasOwnProperty("secp256k1")) {
                    object.secp256k1 = options.bytes === String ? $util.base64.encode(message.secp256k1, 0, message.secp256k1.length) : options.bytes === Array ? Array.prototype.slice.call(message.secp256k1) : message.secp256k1;
                    if (options.oneofs)
                        object.sum = "secp256k1";
                }
                return object;
            };

            /**
             * Converts this PublicKey to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.PublicKey
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PublicKey.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PublicKey;
        })();

        return crypto;
    })();

    tendermint.types = (function() {

        /**
         * Namespace types.
         * @memberof tendermint
         * @namespace
         */
        const types = {};

        /**
         * BlockIDFlag enum.
         * @name tendermint.types.BlockIDFlag
         * @enum {number}
         * @property {number} BLOCK_ID_FLAG_UNKNOWN=0 BLOCK_ID_FLAG_UNKNOWN value
         * @property {number} BLOCK_ID_FLAG_ABSENT=1 BLOCK_ID_FLAG_ABSENT value
         * @property {number} BLOCK_ID_FLAG_COMMIT=2 BLOCK_ID_FLAG_COMMIT value
         * @property {number} BLOCK_ID_FLAG_NIL=3 BLOCK_ID_FLAG_NIL value
         */
        types.BlockIDFlag = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "BLOCK_ID_FLAG_UNKNOWN"] = 0;
            values[valuesById[1] = "BLOCK_ID_FLAG_ABSENT"] = 1;
            values[valuesById[2] = "BLOCK_ID_FLAG_COMMIT"] = 2;
            values[valuesById[3] = "BLOCK_ID_FLAG_NIL"] = 3;
            return values;
        })();

        /**
         * SignedMsgType enum.
         * @name tendermint.types.SignedMsgType
         * @enum {number}
         * @property {number} SIGNED_MSG_TYPE_UNKNOWN=0 SIGNED_MSG_TYPE_UNKNOWN value
         * @property {number} SIGNED_MSG_TYPE_PREVOTE=1 SIGNED_MSG_TYPE_PREVOTE value
         * @property {number} SIGNED_MSG_TYPE_PRECOMMIT=2 SIGNED_MSG_TYPE_PRECOMMIT value
         * @property {number} SIGNED_MSG_TYPE_PROPOSAL=32 SIGNED_MSG_TYPE_PROPOSAL value
         */
        types.SignedMsgType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SIGNED_MSG_TYPE_UNKNOWN"] = 0;
            values[valuesById[1] = "SIGNED_MSG_TYPE_PREVOTE"] = 1;
            values[valuesById[2] = "SIGNED_MSG_TYPE_PRECOMMIT"] = 2;
            values[valuesById[32] = "SIGNED_MSG_TYPE_PROPOSAL"] = 32;
            return values;
        })();

        types.PartSetHeader = (function() {

            /**
             * Properties of a PartSetHeader.
             * @memberof tendermint.types
             * @interface IPartSetHeader
             * @property {number|null} [total] PartSetHeader total
             * @property {Uint8Array|null} [hash] PartSetHeader hash
             */

            /**
             * Constructs a new PartSetHeader.
             * @memberof tendermint.types
             * @classdesc Represents a PartSetHeader.
             * @implements IPartSetHeader
             * @constructor
             * @param {tendermint.types.IPartSetHeader=} [properties] Properties to set
             */
            function PartSetHeader(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PartSetHeader total.
             * @member {number} total
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.total = 0;

            /**
             * PartSetHeader hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.hash = $util.newBuffer([]);

            /**
             * Encodes the specified PartSetHeader message. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartSetHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.total);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified PartSetHeader message, length delimited. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartSetHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PartSetHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartSetHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.PartSetHeader();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.uint32();
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PartSetHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartSetHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PartSetHeader message.
             * @function verify
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PartSetHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a PartSetHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             */
            PartSetHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.PartSetHeader)
                    return object;
                let message = new $root.tendermint.types.PartSetHeader();
                if (object.total != null)
                    message.total = object.total >>> 0;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a PartSetHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.PartSetHeader} message PartSetHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PartSetHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.total = 0;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this PartSetHeader to JSON.
             * @function toJSON
             * @memberof tendermint.types.PartSetHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PartSetHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PartSetHeader;
        })();

        types.Part = (function() {

            /**
             * Properties of a Part.
             * @memberof tendermint.types
             * @interface IPart
             * @property {number|null} [index] Part index
             * @property {Uint8Array|null} [bytes] Part bytes
             * @property {tendermint.crypto.IProof|null} [proof] Part proof
             */

            /**
             * Constructs a new Part.
             * @memberof tendermint.types
             * @classdesc Represents a Part.
             * @implements IPart
             * @constructor
             * @param {tendermint.types.IPart=} [properties] Properties to set
             */
            function Part(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Part index.
             * @member {number} index
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.index = 0;

            /**
             * Part bytes.
             * @member {Uint8Array} bytes
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.bytes = $util.newBuffer([]);

            /**
             * Part proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.proof = null;

            /**
             * Encodes the specified Part message. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.IPart} message Part message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Part.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.bytes != null && Object.hasOwnProperty.call(message, "bytes"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.bytes);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Part message, length delimited. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.IPart} message Part message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Part.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Part message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Part
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Part} Part
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Part.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Part();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.bytes = reader.bytes();
                        break;
                    case 3:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Part message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Part
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Part} Part
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Part.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Part message.
             * @function verify
             * @memberof tendermint.types.Part
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Part.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.bytes != null && message.hasOwnProperty("bytes"))
                    if (!(message.bytes && typeof message.bytes.length === "number" || $util.isString(message.bytes)))
                        return "bytes: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a Part message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Part
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Part} Part
             */
            Part.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Part)
                    return object;
                let message = new $root.tendermint.types.Part();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.bytes != null)
                    if (typeof object.bytes === "string")
                        $util.base64.decode(object.bytes, message.bytes = $util.newBuffer($util.base64.length(object.bytes)), 0);
                    else if (object.bytes.length)
                        message.bytes = object.bytes;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.types.Part.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a Part message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.Part} message Part
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Part.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.index = 0;
                    if (options.bytes === String)
                        object.bytes = "";
                    else {
                        object.bytes = [];
                        if (options.bytes !== Array)
                            object.bytes = $util.newBuffer(object.bytes);
                    }
                    object.proof = null;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.bytes != null && message.hasOwnProperty("bytes"))
                    object.bytes = options.bytes === String ? $util.base64.encode(message.bytes, 0, message.bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytes) : message.bytes;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this Part to JSON.
             * @function toJSON
             * @memberof tendermint.types.Part
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Part.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Part;
        })();

        types.BlockID = (function() {

            /**
             * Properties of a BlockID.
             * @memberof tendermint.types
             * @interface IBlockID
             * @property {Uint8Array|null} [hash] BlockID hash
             * @property {tendermint.types.IPartSetHeader|null} [part_set_header] BlockID part_set_header
             */

            /**
             * Constructs a new BlockID.
             * @memberof tendermint.types
             * @classdesc Represents a BlockID.
             * @implements IBlockID
             * @constructor
             * @param {tendermint.types.IBlockID=} [properties] Properties to set
             */
            function BlockID(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockID hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.hash = $util.newBuffer([]);

            /**
             * BlockID part_set_header.
             * @member {tendermint.types.IPartSetHeader|null|undefined} part_set_header
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.part_set_header = null;

            /**
             * Encodes the specified BlockID message. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockID.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                if (message.part_set_header != null && Object.hasOwnProperty.call(message, "part_set_header"))
                    $root.tendermint.types.PartSetHeader.encode(message.part_set_header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockID message, length delimited. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockID.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockID message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockID} BlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockID.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockID();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    case 2:
                        message.part_set_header = $root.tendermint.types.PartSetHeader.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockID message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockID} BlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockID.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockID message.
             * @function verify
             * @memberof tendermint.types.BlockID
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockID.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header")) {
                    let error = $root.tendermint.types.PartSetHeader.verify(message.part_set_header);
                    if (error)
                        return "part_set_header." + error;
                }
                return null;
            };

            /**
             * Creates a BlockID message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockID
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockID} BlockID
             */
            BlockID.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockID)
                    return object;
                let message = new $root.tendermint.types.BlockID();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.part_set_header != null) {
                    if (typeof object.part_set_header !== "object")
                        throw TypeError(".tendermint.types.BlockID.part_set_header: object expected");
                    message.part_set_header = $root.tendermint.types.PartSetHeader.fromObject(object.part_set_header);
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockID message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.BlockID} message BlockID
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockID.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.part_set_header = null;
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header"))
                    object.part_set_header = $root.tendermint.types.PartSetHeader.toObject(message.part_set_header, options);
                return object;
            };

            /**
             * Converts this BlockID to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockID
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockID.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockID;
        })();

        types.Header = (function() {

            /**
             * Properties of a Header.
             * @memberof tendermint.types
             * @interface IHeader
             * @property {tendermint.version.IConsensus|null} [version] Header version
             * @property {string|null} [chain_id] Header chain_id
             * @property {number|null} [height] Header height
             * @property {google.protobuf.ITimestamp|null} [time] Header time
             * @property {tendermint.types.IBlockID|null} [last_block_id] Header last_block_id
             * @property {Uint8Array|null} [last_commit_hash] Header last_commit_hash
             * @property {Uint8Array|null} [data_hash] Header data_hash
             * @property {Uint8Array|null} [validators_hash] Header validators_hash
             * @property {Uint8Array|null} [next_validators_hash] Header next_validators_hash
             * @property {Uint8Array|null} [consensus_hash] Header consensus_hash
             * @property {Uint8Array|null} [app_hash] Header app_hash
             * @property {Uint8Array|null} [last_results_hash] Header last_results_hash
             * @property {Uint8Array|null} [evidence_hash] Header evidence_hash
             * @property {Uint8Array|null} [proposer_address] Header proposer_address
             */

            /**
             * Constructs a new Header.
             * @memberof tendermint.types
             * @classdesc Represents a Header.
             * @implements IHeader
             * @constructor
             * @param {tendermint.types.IHeader=} [properties] Properties to set
             */
            function Header(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Header version.
             * @member {tendermint.version.IConsensus|null|undefined} version
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.version = null;

            /**
             * Header chain_id.
             * @member {string} chain_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.chain_id = "";

            /**
             * Header height.
             * @member {number} height
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Header time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.time = null;

            /**
             * Header last_block_id.
             * @member {tendermint.types.IBlockID|null|undefined} last_block_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_block_id = null;

            /**
             * Header last_commit_hash.
             * @member {Uint8Array} last_commit_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_commit_hash = $util.newBuffer([]);

            /**
             * Header data_hash.
             * @member {Uint8Array} data_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.data_hash = $util.newBuffer([]);

            /**
             * Header validators_hash.
             * @member {Uint8Array} validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.validators_hash = $util.newBuffer([]);

            /**
             * Header next_validators_hash.
             * @member {Uint8Array} next_validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.next_validators_hash = $util.newBuffer([]);

            /**
             * Header consensus_hash.
             * @member {Uint8Array} consensus_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.consensus_hash = $util.newBuffer([]);

            /**
             * Header app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.app_hash = $util.newBuffer([]);

            /**
             * Header last_results_hash.
             * @member {Uint8Array} last_results_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_results_hash = $util.newBuffer([]);

            /**
             * Header evidence_hash.
             * @member {Uint8Array} evidence_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.evidence_hash = $util.newBuffer([]);

            /**
             * Header proposer_address.
             * @member {Uint8Array} proposer_address
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.proposer_address = $util.newBuffer([]);

            /**
             * Encodes the specified Header message. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.version.Consensus.encode(message.version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.last_block_id != null && Object.hasOwnProperty.call(message, "last_block_id"))
                    $root.tendermint.types.BlockID.encode(message.last_block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.last_commit_hash != null && Object.hasOwnProperty.call(message, "last_commit_hash"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.last_commit_hash);
                if (message.data_hash != null && Object.hasOwnProperty.call(message, "data_hash"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.data_hash);
                if (message.validators_hash != null && Object.hasOwnProperty.call(message, "validators_hash"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.validators_hash);
                if (message.next_validators_hash != null && Object.hasOwnProperty.call(message, "next_validators_hash"))
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.next_validators_hash);
                if (message.consensus_hash != null && Object.hasOwnProperty.call(message, "consensus_hash"))
                    writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.consensus_hash);
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.app_hash);
                if (message.last_results_hash != null && Object.hasOwnProperty.call(message, "last_results_hash"))
                    writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.last_results_hash);
                if (message.evidence_hash != null && Object.hasOwnProperty.call(message, "evidence_hash"))
                    writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.evidence_hash);
                if (message.proposer_address != null && Object.hasOwnProperty.call(message, "proposer_address"))
                    writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.proposer_address);
                return writer;
            };

            /**
             * Encodes the specified Header message, length delimited. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Header message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Header();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.version = $root.tendermint.version.Consensus.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    case 3:
                        message.height = reader.int64();
                        break;
                    case 4:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.last_block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.last_commit_hash = reader.bytes();
                        break;
                    case 7:
                        message.data_hash = reader.bytes();
                        break;
                    case 8:
                        message.validators_hash = reader.bytes();
                        break;
                    case 9:
                        message.next_validators_hash = reader.bytes();
                        break;
                    case 10:
                        message.consensus_hash = reader.bytes();
                        break;
                    case 11:
                        message.app_hash = reader.bytes();
                        break;
                    case 12:
                        message.last_results_hash = reader.bytes();
                        break;
                    case 13:
                        message.evidence_hash = reader.bytes();
                        break;
                    case 14:
                        message.proposer_address = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Header message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Header message.
             * @function verify
             * @memberof tendermint.types.Header
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Header.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.version.Consensus.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.last_block_id);
                    if (error)
                        return "last_block_id." + error;
                }
                if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                    if (!(message.last_commit_hash && typeof message.last_commit_hash.length === "number" || $util.isString(message.last_commit_hash)))
                        return "last_commit_hash: buffer expected";
                if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                    if (!(message.data_hash && typeof message.data_hash.length === "number" || $util.isString(message.data_hash)))
                        return "data_hash: buffer expected";
                if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                    if (!(message.validators_hash && typeof message.validators_hash.length === "number" || $util.isString(message.validators_hash)))
                        return "validators_hash: buffer expected";
                if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                    if (!(message.next_validators_hash && typeof message.next_validators_hash.length === "number" || $util.isString(message.next_validators_hash)))
                        return "next_validators_hash: buffer expected";
                if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                    if (!(message.consensus_hash && typeof message.consensus_hash.length === "number" || $util.isString(message.consensus_hash)))
                        return "consensus_hash: buffer expected";
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    if (!(message.last_results_hash && typeof message.last_results_hash.length === "number" || $util.isString(message.last_results_hash)))
                        return "last_results_hash: buffer expected";
                if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                    if (!(message.evidence_hash && typeof message.evidence_hash.length === "number" || $util.isString(message.evidence_hash)))
                        return "evidence_hash: buffer expected";
                if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                    if (!(message.proposer_address && typeof message.proposer_address.length === "number" || $util.isString(message.proposer_address)))
                        return "proposer_address: buffer expected";
                return null;
            };

            /**
             * Creates a Header message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Header
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Header} Header
             */
            Header.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Header)
                    return object;
                let message = new $root.tendermint.types.Header();
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.types.Header.version: object expected");
                    message.version = $root.tendermint.version.Consensus.fromObject(object.version);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.types.Header.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.last_block_id != null) {
                    if (typeof object.last_block_id !== "object")
                        throw TypeError(".tendermint.types.Header.last_block_id: object expected");
                    message.last_block_id = $root.tendermint.types.BlockID.fromObject(object.last_block_id);
                }
                if (object.last_commit_hash != null)
                    if (typeof object.last_commit_hash === "string")
                        $util.base64.decode(object.last_commit_hash, message.last_commit_hash = $util.newBuffer($util.base64.length(object.last_commit_hash)), 0);
                    else if (object.last_commit_hash.length)
                        message.last_commit_hash = object.last_commit_hash;
                if (object.data_hash != null)
                    if (typeof object.data_hash === "string")
                        $util.base64.decode(object.data_hash, message.data_hash = $util.newBuffer($util.base64.length(object.data_hash)), 0);
                    else if (object.data_hash.length)
                        message.data_hash = object.data_hash;
                if (object.validators_hash != null)
                    if (typeof object.validators_hash === "string")
                        $util.base64.decode(object.validators_hash, message.validators_hash = $util.newBuffer($util.base64.length(object.validators_hash)), 0);
                    else if (object.validators_hash.length)
                        message.validators_hash = object.validators_hash;
                if (object.next_validators_hash != null)
                    if (typeof object.next_validators_hash === "string")
                        $util.base64.decode(object.next_validators_hash, message.next_validators_hash = $util.newBuffer($util.base64.length(object.next_validators_hash)), 0);
                    else if (object.next_validators_hash.length)
                        message.next_validators_hash = object.next_validators_hash;
                if (object.consensus_hash != null)
                    if (typeof object.consensus_hash === "string")
                        $util.base64.decode(object.consensus_hash, message.consensus_hash = $util.newBuffer($util.base64.length(object.consensus_hash)), 0);
                    else if (object.consensus_hash.length)
                        message.consensus_hash = object.consensus_hash;
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                if (object.last_results_hash != null)
                    if (typeof object.last_results_hash === "string")
                        $util.base64.decode(object.last_results_hash, message.last_results_hash = $util.newBuffer($util.base64.length(object.last_results_hash)), 0);
                    else if (object.last_results_hash.length)
                        message.last_results_hash = object.last_results_hash;
                if (object.evidence_hash != null)
                    if (typeof object.evidence_hash === "string")
                        $util.base64.decode(object.evidence_hash, message.evidence_hash = $util.newBuffer($util.base64.length(object.evidence_hash)), 0);
                    else if (object.evidence_hash.length)
                        message.evidence_hash = object.evidence_hash;
                if (object.proposer_address != null)
                    if (typeof object.proposer_address === "string")
                        $util.base64.decode(object.proposer_address, message.proposer_address = $util.newBuffer($util.base64.length(object.proposer_address)), 0);
                    else if (object.proposer_address.length)
                        message.proposer_address = object.proposer_address;
                return message;
            };

            /**
             * Creates a plain object from a Header message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.Header} message Header
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Header.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.version = null;
                    object.chain_id = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.time = null;
                    object.last_block_id = null;
                    if (options.bytes === String)
                        object.last_commit_hash = "";
                    else {
                        object.last_commit_hash = [];
                        if (options.bytes !== Array)
                            object.last_commit_hash = $util.newBuffer(object.last_commit_hash);
                    }
                    if (options.bytes === String)
                        object.data_hash = "";
                    else {
                        object.data_hash = [];
                        if (options.bytes !== Array)
                            object.data_hash = $util.newBuffer(object.data_hash);
                    }
                    if (options.bytes === String)
                        object.validators_hash = "";
                    else {
                        object.validators_hash = [];
                        if (options.bytes !== Array)
                            object.validators_hash = $util.newBuffer(object.validators_hash);
                    }
                    if (options.bytes === String)
                        object.next_validators_hash = "";
                    else {
                        object.next_validators_hash = [];
                        if (options.bytes !== Array)
                            object.next_validators_hash = $util.newBuffer(object.next_validators_hash);
                    }
                    if (options.bytes === String)
                        object.consensus_hash = "";
                    else {
                        object.consensus_hash = [];
                        if (options.bytes !== Array)
                            object.consensus_hash = $util.newBuffer(object.consensus_hash);
                    }
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                    if (options.bytes === String)
                        object.last_results_hash = "";
                    else {
                        object.last_results_hash = [];
                        if (options.bytes !== Array)
                            object.last_results_hash = $util.newBuffer(object.last_results_hash);
                    }
                    if (options.bytes === String)
                        object.evidence_hash = "";
                    else {
                        object.evidence_hash = [];
                        if (options.bytes !== Array)
                            object.evidence_hash = $util.newBuffer(object.evidence_hash);
                    }
                    if (options.bytes === String)
                        object.proposer_address = "";
                    else {
                        object.proposer_address = [];
                        if (options.bytes !== Array)
                            object.proposer_address = $util.newBuffer(object.proposer_address);
                    }
                }
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.version.Consensus.toObject(message.version, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id"))
                    object.last_block_id = $root.tendermint.types.BlockID.toObject(message.last_block_id, options);
                if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                    object.last_commit_hash = options.bytes === String ? $util.base64.encode(message.last_commit_hash, 0, message.last_commit_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_commit_hash) : message.last_commit_hash;
                if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                    object.data_hash = options.bytes === String ? $util.base64.encode(message.data_hash, 0, message.data_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.data_hash) : message.data_hash;
                if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                    object.validators_hash = options.bytes === String ? $util.base64.encode(message.validators_hash, 0, message.validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.validators_hash) : message.validators_hash;
                if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                    object.next_validators_hash = options.bytes === String ? $util.base64.encode(message.next_validators_hash, 0, message.next_validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_validators_hash) : message.next_validators_hash;
                if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                    object.consensus_hash = options.bytes === String ? $util.base64.encode(message.consensus_hash, 0, message.consensus_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.consensus_hash) : message.consensus_hash;
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    object.last_results_hash = options.bytes === String ? $util.base64.encode(message.last_results_hash, 0, message.last_results_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_results_hash) : message.last_results_hash;
                if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                    object.evidence_hash = options.bytes === String ? $util.base64.encode(message.evidence_hash, 0, message.evidence_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.evidence_hash) : message.evidence_hash;
                if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                    object.proposer_address = options.bytes === String ? $util.base64.encode(message.proposer_address, 0, message.proposer_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.proposer_address) : message.proposer_address;
                return object;
            };

            /**
             * Converts this Header to JSON.
             * @function toJSON
             * @memberof tendermint.types.Header
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Header.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Header;
        })();

        types.Data = (function() {

            /**
             * Properties of a Data.
             * @memberof tendermint.types
             * @interface IData
             * @property {Array.<Uint8Array>|null} [txs] Data txs
             */

            /**
             * Constructs a new Data.
             * @memberof tendermint.types
             * @classdesc Represents a Data.
             * @implements IData
             * @constructor
             * @param {tendermint.types.IData=} [properties] Properties to set
             */
            function Data(properties) {
                this.txs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Data txs.
             * @member {Array.<Uint8Array>} txs
             * @memberof tendermint.types.Data
             * @instance
             */
            Data.prototype.txs = $util.emptyArray;

            /**
             * Encodes the specified Data message. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.IData} message Data message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Data.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.txs != null && message.txs.length)
                    for (let i = 0; i < message.txs.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.txs[i]);
                return writer;
            };

            /**
             * Encodes the specified Data message, length delimited. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.IData} message Data message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Data.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Data message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Data
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Data} Data
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Data.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Data();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.txs && message.txs.length))
                            message.txs = [];
                        message.txs.push(reader.bytes());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Data message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Data
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Data} Data
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Data.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Data message.
             * @function verify
             * @memberof tendermint.types.Data
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Data.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.txs != null && message.hasOwnProperty("txs")) {
                    if (!Array.isArray(message.txs))
                        return "txs: array expected";
                    for (let i = 0; i < message.txs.length; ++i)
                        if (!(message.txs[i] && typeof message.txs[i].length === "number" || $util.isString(message.txs[i])))
                            return "txs: buffer[] expected";
                }
                return null;
            };

            /**
             * Creates a Data message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Data
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Data} Data
             */
            Data.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Data)
                    return object;
                let message = new $root.tendermint.types.Data();
                if (object.txs) {
                    if (!Array.isArray(object.txs))
                        throw TypeError(".tendermint.types.Data.txs: array expected");
                    message.txs = [];
                    for (let i = 0; i < object.txs.length; ++i)
                        if (typeof object.txs[i] === "string")
                            $util.base64.decode(object.txs[i], message.txs[i] = $util.newBuffer($util.base64.length(object.txs[i])), 0);
                        else if (object.txs[i].length)
                            message.txs[i] = object.txs[i];
                }
                return message;
            };

            /**
             * Creates a plain object from a Data message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.Data} message Data
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Data.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.txs = [];
                if (message.txs && message.txs.length) {
                    object.txs = [];
                    for (let j = 0; j < message.txs.length; ++j)
                        object.txs[j] = options.bytes === String ? $util.base64.encode(message.txs[j], 0, message.txs[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.txs[j]) : message.txs[j];
                }
                return object;
            };

            /**
             * Converts this Data to JSON.
             * @function toJSON
             * @memberof tendermint.types.Data
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Data.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Data;
        })();

        types.Vote = (function() {

            /**
             * Properties of a Vote.
             * @memberof tendermint.types
             * @interface IVote
             * @property {tendermint.types.SignedMsgType|null} [type] Vote type
             * @property {number|null} [height] Vote height
             * @property {number|null} [round] Vote round
             * @property {tendermint.types.IBlockID|null} [block_id] Vote block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Vote timestamp
             * @property {Uint8Array|null} [validator_address] Vote validator_address
             * @property {number|null} [validator_index] Vote validator_index
             * @property {Uint8Array|null} [signature] Vote signature
             */

            /**
             * Constructs a new Vote.
             * @memberof tendermint.types
             * @classdesc Represents a Vote.
             * @implements IVote
             * @constructor
             * @param {tendermint.types.IVote=} [properties] Properties to set
             */
            function Vote(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Vote type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.type = 0;

            /**
             * Vote height.
             * @member {number} height
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Vote round.
             * @member {number} round
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.round = 0;

            /**
             * Vote block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.block_id = null;

            /**
             * Vote timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.timestamp = null;

            /**
             * Vote validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_address = $util.newBuffer([]);

            /**
             * Vote validator_index.
             * @member {number} validator_index
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_index = 0;

            /**
             * Vote signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Vote message. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.validator_address);
                if (message.validator_index != null && Object.hasOwnProperty.call(message, "validator_index"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.validator_index);
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified Vote message, length delimited. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Vote message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Vote();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    case 3:
                        message.round = reader.int32();
                        break;
                    case 4:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.validator_address = reader.bytes();
                        break;
                    case 7:
                        message.validator_index = reader.int32();
                        break;
                    case 8:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Vote message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Vote message.
             * @function verify
             * @memberof tendermint.types.Vote
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Vote.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                        return "validator_address: buffer expected";
                if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                    if (!$util.isInteger(message.validator_index))
                        return "validator_index: integer expected";
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a Vote message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Vote
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Vote} Vote
             */
            Vote.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Vote)
                    return object;
                let message = new $root.tendermint.types.Vote();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Vote.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.Vote.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.validator_address != null)
                    if (typeof object.validator_address === "string")
                        $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                    else if (object.validator_address.length)
                        message.validator_address = object.validator_address;
                if (object.validator_index != null)
                    message.validator_index = object.validator_index | 0;
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a Vote message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.Vote} message Vote
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Vote.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.block_id = null;
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.validator_address = "";
                    else {
                        object.validator_address = [];
                        if (options.bytes !== Array)
                            object.validator_address = $util.newBuffer(object.validator_address);
                    }
                    object.validator_index = 0;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                    object.validator_index = message.validator_index;
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this Vote to JSON.
             * @function toJSON
             * @memberof tendermint.types.Vote
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Vote.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Vote;
        })();

        types.Commit = (function() {

            /**
             * Properties of a Commit.
             * @memberof tendermint.types
             * @interface ICommit
             * @property {number|null} [height] Commit height
             * @property {number|null} [round] Commit round
             * @property {tendermint.types.IBlockID|null} [block_id] Commit block_id
             * @property {Array.<tendermint.types.ICommitSig>|null} [signatures] Commit signatures
             */

            /**
             * Constructs a new Commit.
             * @memberof tendermint.types
             * @classdesc Represents a Commit.
             * @implements ICommit
             * @constructor
             * @param {tendermint.types.ICommit=} [properties] Properties to set
             */
            function Commit(properties) {
                this.signatures = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Commit height.
             * @member {number} height
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Commit round.
             * @member {number} round
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.round = 0;

            /**
             * Commit block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.block_id = null;

            /**
             * Commit signatures.
             * @member {Array.<tendermint.types.ICommitSig>} signatures
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.signatures = $util.emptyArray;

            /**
             * Encodes the specified Commit message. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.ICommit} message Commit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Commit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.signatures != null && message.signatures.length)
                    for (let i = 0; i < message.signatures.length; ++i)
                        $root.tendermint.types.CommitSig.encode(message.signatures[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Commit message, length delimited. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.ICommit} message Commit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Commit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Commit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Commit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Commit} Commit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Commit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Commit();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.signatures && message.signatures.length))
                            message.signatures = [];
                        message.signatures.push($root.tendermint.types.CommitSig.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Commit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Commit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Commit} Commit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Commit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Commit message.
             * @function verify
             * @memberof tendermint.types.Commit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Commit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.signatures != null && message.hasOwnProperty("signatures")) {
                    if (!Array.isArray(message.signatures))
                        return "signatures: array expected";
                    for (let i = 0; i < message.signatures.length; ++i) {
                        let error = $root.tendermint.types.CommitSig.verify(message.signatures[i]);
                        if (error)
                            return "signatures." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Commit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Commit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Commit} Commit
             */
            Commit.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Commit)
                    return object;
                let message = new $root.tendermint.types.Commit();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Commit.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.signatures) {
                    if (!Array.isArray(object.signatures))
                        throw TypeError(".tendermint.types.Commit.signatures: array expected");
                    message.signatures = [];
                    for (let i = 0; i < object.signatures.length; ++i) {
                        if (typeof object.signatures[i] !== "object")
                            throw TypeError(".tendermint.types.Commit.signatures: object expected");
                        message.signatures[i] = $root.tendermint.types.CommitSig.fromObject(object.signatures[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Commit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.Commit} message Commit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Commit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.signatures = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.block_id = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.signatures && message.signatures.length) {
                    object.signatures = [];
                    for (let j = 0; j < message.signatures.length; ++j)
                        object.signatures[j] = $root.tendermint.types.CommitSig.toObject(message.signatures[j], options);
                }
                return object;
            };

            /**
             * Converts this Commit to JSON.
             * @function toJSON
             * @memberof tendermint.types.Commit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Commit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Commit;
        })();

        types.CommitSig = (function() {

            /**
             * Properties of a CommitSig.
             * @memberof tendermint.types
             * @interface ICommitSig
             * @property {tendermint.types.BlockIDFlag|null} [block_id_flag] CommitSig block_id_flag
             * @property {Uint8Array|null} [validator_address] CommitSig validator_address
             * @property {google.protobuf.ITimestamp|null} [timestamp] CommitSig timestamp
             * @property {Uint8Array|null} [signature] CommitSig signature
             */

            /**
             * Constructs a new CommitSig.
             * @memberof tendermint.types
             * @classdesc Represents a CommitSig.
             * @implements ICommitSig
             * @constructor
             * @param {tendermint.types.ICommitSig=} [properties] Properties to set
             */
            function CommitSig(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CommitSig block_id_flag.
             * @member {tendermint.types.BlockIDFlag} block_id_flag
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.block_id_flag = 0;

            /**
             * CommitSig validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.validator_address = $util.newBuffer([]);

            /**
             * CommitSig timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.timestamp = null;

            /**
             * CommitSig signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified CommitSig message. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommitSig.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_id_flag != null && Object.hasOwnProperty.call(message, "block_id_flag"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.block_id_flag);
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.validator_address);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified CommitSig message, length delimited. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommitSig.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CommitSig message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.CommitSig} CommitSig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommitSig.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CommitSig();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_id_flag = reader.int32();
                        break;
                    case 2:
                        message.validator_address = reader.bytes();
                        break;
                    case 3:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CommitSig message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.CommitSig} CommitSig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommitSig.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CommitSig message.
             * @function verify
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CommitSig.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                    switch (message.block_id_flag) {
                    default:
                        return "block_id_flag: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                        return "validator_address: buffer expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a CommitSig message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.CommitSig} CommitSig
             */
            CommitSig.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.CommitSig)
                    return object;
                let message = new $root.tendermint.types.CommitSig();
                switch (object.block_id_flag) {
                case "BLOCK_ID_FLAG_UNKNOWN":
                case 0:
                    message.block_id_flag = 0;
                    break;
                case "BLOCK_ID_FLAG_ABSENT":
                case 1:
                    message.block_id_flag = 1;
                    break;
                case "BLOCK_ID_FLAG_COMMIT":
                case 2:
                    message.block_id_flag = 2;
                    break;
                case "BLOCK_ID_FLAG_NIL":
                case 3:
                    message.block_id_flag = 3;
                    break;
                }
                if (object.validator_address != null)
                    if (typeof object.validator_address === "string")
                        $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                    else if (object.validator_address.length)
                        message.validator_address = object.validator_address;
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.CommitSig.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a CommitSig message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.CommitSig} message CommitSig
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CommitSig.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block_id_flag = options.enums === String ? "BLOCK_ID_FLAG_UNKNOWN" : 0;
                    if (options.bytes === String)
                        object.validator_address = "";
                    else {
                        object.validator_address = [];
                        if (options.bytes !== Array)
                            object.validator_address = $util.newBuffer(object.validator_address);
                    }
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                    object.block_id_flag = options.enums === String ? $root.tendermint.types.BlockIDFlag[message.block_id_flag] : message.block_id_flag;
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this CommitSig to JSON.
             * @function toJSON
             * @memberof tendermint.types.CommitSig
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CommitSig.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CommitSig;
        })();

        types.Proposal = (function() {

            /**
             * Properties of a Proposal.
             * @memberof tendermint.types
             * @interface IProposal
             * @property {tendermint.types.SignedMsgType|null} [type] Proposal type
             * @property {number|null} [height] Proposal height
             * @property {number|null} [round] Proposal round
             * @property {number|null} [pol_round] Proposal pol_round
             * @property {tendermint.types.IBlockID|null} [block_id] Proposal block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Proposal timestamp
             * @property {Uint8Array|null} [signature] Proposal signature
             */

            /**
             * Constructs a new Proposal.
             * @memberof tendermint.types
             * @classdesc Represents a Proposal.
             * @implements IProposal
             * @constructor
             * @param {tendermint.types.IProposal=} [properties] Properties to set
             */
            function Proposal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Proposal type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.type = 0;

            /**
             * Proposal height.
             * @member {number} height
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proposal round.
             * @member {number} round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.round = 0;

            /**
             * Proposal pol_round.
             * @member {number} pol_round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.pol_round = 0;

            /**
             * Proposal block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.block_id = null;

            /**
             * Proposal timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.timestamp = null;

            /**
             * Proposal signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Proposal message. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                if (message.pol_round != null && Object.hasOwnProperty.call(message, "pol_round"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pol_round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified Proposal message, length delimited. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Proposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    case 3:
                        message.round = reader.int32();
                        break;
                    case 4:
                        message.pol_round = reader.int32();
                        break;
                    case 5:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Proposal message.
             * @function verify
             * @memberof tendermint.types.Proposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Proposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    if (!$util.isInteger(message.pol_round))
                        return "pol_round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a Proposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Proposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Proposal} Proposal
             */
            Proposal.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Proposal)
                    return object;
                let message = new $root.tendermint.types.Proposal();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.pol_round != null)
                    message.pol_round = object.pol_round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Proposal.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.Proposal.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a Proposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.Proposal} message Proposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Proposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.pol_round = 0;
                    object.block_id = null;
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    object.pol_round = message.pol_round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this Proposal to JSON.
             * @function toJSON
             * @memberof tendermint.types.Proposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Proposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Proposal;
        })();

        types.SignedHeader = (function() {

            /**
             * Properties of a SignedHeader.
             * @memberof tendermint.types
             * @interface ISignedHeader
             * @property {tendermint.types.IHeader|null} [header] SignedHeader header
             * @property {tendermint.types.ICommit|null} [commit] SignedHeader commit
             */

            /**
             * Constructs a new SignedHeader.
             * @memberof tendermint.types
             * @classdesc Represents a SignedHeader.
             * @implements ISignedHeader
             * @constructor
             * @param {tendermint.types.ISignedHeader=} [properties] Properties to set
             */
            function SignedHeader(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SignedHeader header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.header = null;

            /**
             * SignedHeader commit.
             * @member {tendermint.types.ICommit|null|undefined} commit
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.commit = null;

            /**
             * Encodes the specified SignedHeader message. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                    $root.tendermint.types.Commit.encode(message.commit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SignedHeader message, length delimited. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SignedHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.SignedHeader} SignedHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SignedHeader();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.commit = $root.tendermint.types.Commit.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SignedHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.SignedHeader} SignedHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SignedHeader message.
             * @function verify
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignedHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    let error = $root.tendermint.types.Commit.verify(message.commit);
                    if (error)
                        return "commit." + error;
                }
                return null;
            };

            /**
             * Creates a SignedHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.SignedHeader} SignedHeader
             */
            SignedHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.SignedHeader)
                    return object;
                let message = new $root.tendermint.types.SignedHeader();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.SignedHeader.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.commit != null) {
                    if (typeof object.commit !== "object")
                        throw TypeError(".tendermint.types.SignedHeader.commit: object expected");
                    message.commit = $root.tendermint.types.Commit.fromObject(object.commit);
                }
                return message;
            };

            /**
             * Creates a plain object from a SignedHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.SignedHeader} message SignedHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignedHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.header = null;
                    object.commit = null;
                }
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.commit != null && message.hasOwnProperty("commit"))
                    object.commit = $root.tendermint.types.Commit.toObject(message.commit, options);
                return object;
            };

            /**
             * Converts this SignedHeader to JSON.
             * @function toJSON
             * @memberof tendermint.types.SignedHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignedHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SignedHeader;
        })();

        types.LightBlock = (function() {

            /**
             * Properties of a LightBlock.
             * @memberof tendermint.types
             * @interface ILightBlock
             * @property {tendermint.types.ISignedHeader|null} [signed_header] LightBlock signed_header
             * @property {tendermint.types.IValidatorSet|null} [validator_set] LightBlock validator_set
             */

            /**
             * Constructs a new LightBlock.
             * @memberof tendermint.types
             * @classdesc Represents a LightBlock.
             * @implements ILightBlock
             * @constructor
             * @param {tendermint.types.ILightBlock=} [properties] Properties to set
             */
            function LightBlock(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LightBlock signed_header.
             * @member {tendermint.types.ISignedHeader|null|undefined} signed_header
             * @memberof tendermint.types.LightBlock
             * @instance
             */
            LightBlock.prototype.signed_header = null;

            /**
             * LightBlock validator_set.
             * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
             * @memberof tendermint.types.LightBlock
             * @instance
             */
            LightBlock.prototype.validator_set = null;

            /**
             * Encodes the specified LightBlock message. Does not implicitly {@link tendermint.types.LightBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {tendermint.types.ILightBlock} message LightBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.signed_header != null && Object.hasOwnProperty.call(message, "signed_header"))
                    $root.tendermint.types.SignedHeader.encode(message.signed_header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.validator_set != null && Object.hasOwnProperty.call(message, "validator_set"))
                    $root.tendermint.types.ValidatorSet.encode(message.validator_set, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LightBlock message, length delimited. Does not implicitly {@link tendermint.types.LightBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {tendermint.types.ILightBlock} message LightBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LightBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.LightBlock} LightBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.LightBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.signed_header = $root.tendermint.types.SignedHeader.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.validator_set = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LightBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.LightBlock} LightBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LightBlock message.
             * @function verify
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LightBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.signed_header != null && message.hasOwnProperty("signed_header")) {
                    let error = $root.tendermint.types.SignedHeader.verify(message.signed_header);
                    if (error)
                        return "signed_header." + error;
                }
                if (message.validator_set != null && message.hasOwnProperty("validator_set")) {
                    let error = $root.tendermint.types.ValidatorSet.verify(message.validator_set);
                    if (error)
                        return "validator_set." + error;
                }
                return null;
            };

            /**
             * Creates a LightBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.LightBlock} LightBlock
             */
            LightBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.LightBlock)
                    return object;
                let message = new $root.tendermint.types.LightBlock();
                if (object.signed_header != null) {
                    if (typeof object.signed_header !== "object")
                        throw TypeError(".tendermint.types.LightBlock.signed_header: object expected");
                    message.signed_header = $root.tendermint.types.SignedHeader.fromObject(object.signed_header);
                }
                if (object.validator_set != null) {
                    if (typeof object.validator_set !== "object")
                        throw TypeError(".tendermint.types.LightBlock.validator_set: object expected");
                    message.validator_set = $root.tendermint.types.ValidatorSet.fromObject(object.validator_set);
                }
                return message;
            };

            /**
             * Creates a plain object from a LightBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {tendermint.types.LightBlock} message LightBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LightBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.signed_header = null;
                    object.validator_set = null;
                }
                if (message.signed_header != null && message.hasOwnProperty("signed_header"))
                    object.signed_header = $root.tendermint.types.SignedHeader.toObject(message.signed_header, options);
                if (message.validator_set != null && message.hasOwnProperty("validator_set"))
                    object.validator_set = $root.tendermint.types.ValidatorSet.toObject(message.validator_set, options);
                return object;
            };

            /**
             * Converts this LightBlock to JSON.
             * @function toJSON
             * @memberof tendermint.types.LightBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LightBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LightBlock;
        })();

        types.BlockMeta = (function() {

            /**
             * Properties of a BlockMeta.
             * @memberof tendermint.types
             * @interface IBlockMeta
             * @property {tendermint.types.IBlockID|null} [block_id] BlockMeta block_id
             * @property {number|null} [block_size] BlockMeta block_size
             * @property {tendermint.types.IHeader|null} [header] BlockMeta header
             * @property {number|null} [num_txs] BlockMeta num_txs
             */

            /**
             * Constructs a new BlockMeta.
             * @memberof tendermint.types
             * @classdesc Represents a BlockMeta.
             * @implements IBlockMeta
             * @constructor
             * @param {tendermint.types.IBlockMeta=} [properties] Properties to set
             */
            function BlockMeta(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockMeta block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_id = null;

            /**
             * BlockMeta block_size.
             * @member {number} block_size
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockMeta header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.header = null;

            /**
             * BlockMeta num_txs.
             * @member {number} num_txs
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.num_txs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockMeta message. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMeta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.block_size != null && Object.hasOwnProperty.call(message, "block_size"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.block_size);
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.num_txs != null && Object.hasOwnProperty.call(message, "num_txs"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.num_txs);
                return writer;
            };

            /**
             * Encodes the specified BlockMeta message, length delimited. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMeta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockMeta message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockMeta} BlockMeta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMeta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockMeta();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.block_size = reader.int64();
                        break;
                    case 3:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.num_txs = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockMeta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockMeta} BlockMeta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMeta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockMeta message.
             * @function verify
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockMeta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    if (!$util.isInteger(message.block_size) && !(message.block_size && $util.isInteger(message.block_size.low) && $util.isInteger(message.block_size.high)))
                        return "block_size: integer|Long expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                    if (!$util.isInteger(message.num_txs) && !(message.num_txs && $util.isInteger(message.num_txs.low) && $util.isInteger(message.num_txs.high)))
                        return "num_txs: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockMeta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockMeta} BlockMeta
             */
            BlockMeta.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockMeta)
                    return object;
                let message = new $root.tendermint.types.BlockMeta();
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.BlockMeta.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.block_size != null)
                    if ($util.Long)
                        (message.block_size = $util.Long.fromValue(object.block_size)).unsigned = false;
                    else if (typeof object.block_size === "string")
                        message.block_size = parseInt(object.block_size, 10);
                    else if (typeof object.block_size === "number")
                        message.block_size = object.block_size;
                    else if (typeof object.block_size === "object")
                        message.block_size = new $util.LongBits(object.block_size.low >>> 0, object.block_size.high >>> 0).toNumber();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.BlockMeta.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.num_txs != null)
                    if ($util.Long)
                        (message.num_txs = $util.Long.fromValue(object.num_txs)).unsigned = false;
                    else if (typeof object.num_txs === "string")
                        message.num_txs = parseInt(object.num_txs, 10);
                    else if (typeof object.num_txs === "number")
                        message.num_txs = object.num_txs;
                    else if (typeof object.num_txs === "object")
                        message.num_txs = new $util.LongBits(object.num_txs.low >>> 0, object.num_txs.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockMeta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.BlockMeta} message BlockMeta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockMeta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block_id = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.block_size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_size = options.longs === String ? "0" : 0;
                    object.header = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.num_txs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.num_txs = options.longs === String ? "0" : 0;
                }
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    if (typeof message.block_size === "number")
                        object.block_size = options.longs === String ? String(message.block_size) : message.block_size;
                    else
                        object.block_size = options.longs === String ? $util.Long.prototype.toString.call(message.block_size) : options.longs === Number ? new $util.LongBits(message.block_size.low >>> 0, message.block_size.high >>> 0).toNumber() : message.block_size;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                    if (typeof message.num_txs === "number")
                        object.num_txs = options.longs === String ? String(message.num_txs) : message.num_txs;
                    else
                        object.num_txs = options.longs === String ? $util.Long.prototype.toString.call(message.num_txs) : options.longs === Number ? new $util.LongBits(message.num_txs.low >>> 0, message.num_txs.high >>> 0).toNumber() : message.num_txs;
                return object;
            };

            /**
             * Converts this BlockMeta to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockMeta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockMeta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockMeta;
        })();

        types.TxProof = (function() {

            /**
             * Properties of a TxProof.
             * @memberof tendermint.types
             * @interface ITxProof
             * @property {Uint8Array|null} [root_hash] TxProof root_hash
             * @property {Uint8Array|null} [data] TxProof data
             * @property {tendermint.crypto.IProof|null} [proof] TxProof proof
             */

            /**
             * Constructs a new TxProof.
             * @memberof tendermint.types
             * @classdesc Represents a TxProof.
             * @implements ITxProof
             * @constructor
             * @param {tendermint.types.ITxProof=} [properties] Properties to set
             */
            function TxProof(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TxProof root_hash.
             * @member {Uint8Array} root_hash
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.root_hash = $util.newBuffer([]);

            /**
             * TxProof data.
             * @member {Uint8Array} data
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.data = $util.newBuffer([]);

            /**
             * TxProof proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.proof = null;

            /**
             * Encodes the specified TxProof message. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxProof.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.root_hash != null && Object.hasOwnProperty.call(message, "root_hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.root_hash);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TxProof message, length delimited. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxProof.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TxProof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.TxProof} TxProof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxProof.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.TxProof();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.root_hash = reader.bytes();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TxProof message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.TxProof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.TxProof} TxProof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxProof.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TxProof message.
             * @function verify
             * @memberof tendermint.types.TxProof
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TxProof.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                    if (!(message.root_hash && typeof message.root_hash.length === "number" || $util.isString(message.root_hash)))
                        return "root_hash: buffer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a TxProof message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.TxProof
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.TxProof} TxProof
             */
            TxProof.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.TxProof)
                    return object;
                let message = new $root.tendermint.types.TxProof();
                if (object.root_hash != null)
                    if (typeof object.root_hash === "string")
                        $util.base64.decode(object.root_hash, message.root_hash = $util.newBuffer($util.base64.length(object.root_hash)), 0);
                    else if (object.root_hash.length)
                        message.root_hash = object.root_hash;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.types.TxProof.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a TxProof message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.TxProof} message TxProof
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TxProof.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.root_hash = "";
                    else {
                        object.root_hash = [];
                        if (options.bytes !== Array)
                            object.root_hash = $util.newBuffer(object.root_hash);
                    }
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.proof = null;
                }
                if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                    object.root_hash = options.bytes === String ? $util.base64.encode(message.root_hash, 0, message.root_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.root_hash) : message.root_hash;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this TxProof to JSON.
             * @function toJSON
             * @memberof tendermint.types.TxProof
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TxProof.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TxProof;
        })();

        types.ValidatorSet = (function() {

            /**
             * Properties of a ValidatorSet.
             * @memberof tendermint.types
             * @interface IValidatorSet
             * @property {Array.<tendermint.types.IValidator>|null} [validators] ValidatorSet validators
             * @property {tendermint.types.IValidator|null} [proposer] ValidatorSet proposer
             * @property {number|null} [total_voting_power] ValidatorSet total_voting_power
             */

            /**
             * Constructs a new ValidatorSet.
             * @memberof tendermint.types
             * @classdesc Represents a ValidatorSet.
             * @implements IValidatorSet
             * @constructor
             * @param {tendermint.types.IValidatorSet=} [properties] Properties to set
             */
            function ValidatorSet(properties) {
                this.validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorSet validators.
             * @member {Array.<tendermint.types.IValidator>} validators
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.validators = $util.emptyArray;

            /**
             * ValidatorSet proposer.
             * @member {tendermint.types.IValidator|null|undefined} proposer
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.proposer = null;

            /**
             * ValidatorSet total_voting_power.
             * @member {number} total_voting_power
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ValidatorSet message. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validators != null && message.validators.length)
                    for (let i = 0; i < message.validators.length; ++i)
                        $root.tendermint.types.Validator.encode(message.validators[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.proposer != null && Object.hasOwnProperty.call(message, "proposer"))
                    $root.tendermint.types.Validator.encode(message.proposer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.total_voting_power);
                return writer;
            };

            /**
             * Encodes the specified ValidatorSet message, length delimited. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorSet message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ValidatorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.validators && message.validators.length))
                            message.validators = [];
                        message.validators.push($root.tendermint.types.Validator.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.proposer = $root.tendermint.types.Validator.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.total_voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorSet message.
             * @function verify
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    if (!Array.isArray(message.validators))
                        return "validators: array expected";
                    for (let i = 0; i < message.validators.length; ++i) {
                        let error = $root.tendermint.types.Validator.verify(message.validators[i]);
                        if (error)
                            return "validators." + error;
                    }
                }
                if (message.proposer != null && message.hasOwnProperty("proposer")) {
                    let error = $root.tendermint.types.Validator.verify(message.proposer);
                    if (error)
                        return "proposer." + error;
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                        return "total_voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates a ValidatorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             */
            ValidatorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ValidatorSet)
                    return object;
                let message = new $root.tendermint.types.ValidatorSet();
                if (object.validators) {
                    if (!Array.isArray(object.validators))
                        throw TypeError(".tendermint.types.ValidatorSet.validators: array expected");
                    message.validators = [];
                    for (let i = 0; i < object.validators.length; ++i) {
                        if (typeof object.validators[i] !== "object")
                            throw TypeError(".tendermint.types.ValidatorSet.validators: object expected");
                        message.validators[i] = $root.tendermint.types.Validator.fromObject(object.validators[i]);
                    }
                }
                if (object.proposer != null) {
                    if (typeof object.proposer !== "object")
                        throw TypeError(".tendermint.types.ValidatorSet.proposer: object expected");
                    message.proposer = $root.tendermint.types.Validator.fromObject(object.proposer);
                }
                if (object.total_voting_power != null)
                    if ($util.Long)
                        (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                    else if (typeof object.total_voting_power === "string")
                        message.total_voting_power = parseInt(object.total_voting_power, 10);
                    else if (typeof object.total_voting_power === "number")
                        message.total_voting_power = object.total_voting_power;
                    else if (typeof object.total_voting_power === "object")
                        message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ValidatorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.ValidatorSet} message ValidatorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.validators = [];
                if (options.defaults) {
                    object.proposer = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total_voting_power = options.longs === String ? "0" : 0;
                }
                if (message.validators && message.validators.length) {
                    object.validators = [];
                    for (let j = 0; j < message.validators.length; ++j)
                        object.validators[j] = $root.tendermint.types.Validator.toObject(message.validators[j], options);
                }
                if (message.proposer != null && message.hasOwnProperty("proposer"))
                    object.proposer = $root.tendermint.types.Validator.toObject(message.proposer, options);
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (typeof message.total_voting_power === "number")
                        object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                    else
                        object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                return object;
            };

            /**
             * Converts this ValidatorSet to JSON.
             * @function toJSON
             * @memberof tendermint.types.ValidatorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorSet;
        })();

        types.Validator = (function() {

            /**
             * Properties of a Validator.
             * @memberof tendermint.types
             * @interface IValidator
             * @property {Uint8Array|null} [address] Validator address
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] Validator pub_key
             * @property {number|null} [voting_power] Validator voting_power
             * @property {number|null} [proposer_priority] Validator proposer_priority
             */

            /**
             * Constructs a new Validator.
             * @memberof tendermint.types
             * @classdesc Represents a Validator.
             * @implements IValidator
             * @constructor
             * @param {tendermint.types.IValidator=} [properties] Properties to set
             */
            function Validator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Validator address.
             * @member {Uint8Array} address
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.address = $util.newBuffer([]);

            /**
             * Validator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.pub_key = null;

            /**
             * Validator voting_power.
             * @member {number} voting_power
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Validator proposer_priority.
             * @member {number} proposer_priority
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.proposer_priority = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified Validator message. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.voting_power);
                if (message.proposer_priority != null && Object.hasOwnProperty.call(message, "proposer_priority"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.proposer_priority);
                return writer;
            };

            /**
             * Encodes the specified Validator message, length delimited. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Validator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Validator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.bytes();
                        break;
                    case 2:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.voting_power = reader.int64();
                        break;
                    case 4:
                        message.proposer_priority = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Validator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Validator message.
             * @function verify
             * @memberof tendermint.types.Validator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Validator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                        return "address: buffer expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                        return "voting_power: integer|Long expected";
                if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                    if (!$util.isInteger(message.proposer_priority) && !(message.proposer_priority && $util.isInteger(message.proposer_priority.low) && $util.isInteger(message.proposer_priority.high)))
                        return "proposer_priority: integer|Long expected";
                return null;
            };

            /**
             * Creates a Validator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Validator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Validator} Validator
             */
            Validator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Validator)
                    return object;
                let message = new $root.tendermint.types.Validator();
                if (object.address != null)
                    if (typeof object.address === "string")
                        $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                    else if (object.address.length)
                        message.address = object.address;
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.types.Validator.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.voting_power != null)
                    if ($util.Long)
                        (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                    else if (typeof object.voting_power === "string")
                        message.voting_power = parseInt(object.voting_power, 10);
                    else if (typeof object.voting_power === "number")
                        message.voting_power = object.voting_power;
                    else if (typeof object.voting_power === "object")
                        message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                if (object.proposer_priority != null)
                    if ($util.Long)
                        (message.proposer_priority = $util.Long.fromValue(object.proposer_priority)).unsigned = false;
                    else if (typeof object.proposer_priority === "string")
                        message.proposer_priority = parseInt(object.proposer_priority, 10);
                    else if (typeof object.proposer_priority === "number")
                        message.proposer_priority = object.proposer_priority;
                    else if (typeof object.proposer_priority === "object")
                        message.proposer_priority = new $util.LongBits(object.proposer_priority.low >>> 0, object.proposer_priority.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Validator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.Validator} message Validator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Validator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.address = "";
                    else {
                        object.address = [];
                        if (options.bytes !== Array)
                            object.address = $util.newBuffer(object.address);
                    }
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.voting_power = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.proposer_priority = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.proposer_priority = options.longs === String ? "0" : 0;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (typeof message.voting_power === "number")
                        object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                    else
                        object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                    if (typeof message.proposer_priority === "number")
                        object.proposer_priority = options.longs === String ? String(message.proposer_priority) : message.proposer_priority;
                    else
                        object.proposer_priority = options.longs === String ? $util.Long.prototype.toString.call(message.proposer_priority) : options.longs === Number ? new $util.LongBits(message.proposer_priority.low >>> 0, message.proposer_priority.high >>> 0).toNumber() : message.proposer_priority;
                return object;
            };

            /**
             * Converts this Validator to JSON.
             * @function toJSON
             * @memberof tendermint.types.Validator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Validator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Validator;
        })();

        types.SimpleValidator = (function() {

            /**
             * Properties of a SimpleValidator.
             * @memberof tendermint.types
             * @interface ISimpleValidator
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] SimpleValidator pub_key
             * @property {number|null} [voting_power] SimpleValidator voting_power
             */

            /**
             * Constructs a new SimpleValidator.
             * @memberof tendermint.types
             * @classdesc Represents a SimpleValidator.
             * @implements ISimpleValidator
             * @constructor
             * @param {tendermint.types.ISimpleValidator=} [properties] Properties to set
             */
            function SimpleValidator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SimpleValidator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.pub_key = null;

            /**
             * SimpleValidator voting_power.
             * @member {number} voting_power
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified SimpleValidator message. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SimpleValidator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.voting_power);
                return writer;
            };

            /**
             * Encodes the specified SimpleValidator message, length delimited. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SimpleValidator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SimpleValidator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SimpleValidator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SimpleValidator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SimpleValidator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SimpleValidator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SimpleValidator message.
             * @function verify
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SimpleValidator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                        return "voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates a SimpleValidator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             */
            SimpleValidator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.SimpleValidator)
                    return object;
                let message = new $root.tendermint.types.SimpleValidator();
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.types.SimpleValidator.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.voting_power != null)
                    if ($util.Long)
                        (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                    else if (typeof object.voting_power === "string")
                        message.voting_power = parseInt(object.voting_power, 10);
                    else if (typeof object.voting_power === "number")
                        message.voting_power = object.voting_power;
                    else if (typeof object.voting_power === "object")
                        message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a SimpleValidator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.SimpleValidator} message SimpleValidator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SimpleValidator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.voting_power = options.longs === String ? "0" : 0;
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (typeof message.voting_power === "number")
                        object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                    else
                        object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                return object;
            };

            /**
             * Converts this SimpleValidator to JSON.
             * @function toJSON
             * @memberof tendermint.types.SimpleValidator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SimpleValidator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SimpleValidator;
        })();

        types.ConsensusParams = (function() {

            /**
             * Properties of a ConsensusParams.
             * @memberof tendermint.types
             * @interface IConsensusParams
             * @property {tendermint.types.IBlockParams|null} [block] ConsensusParams block
             * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
             * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
             * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
             */

            /**
             * Constructs a new ConsensusParams.
             * @memberof tendermint.types
             * @classdesc Represents a ConsensusParams.
             * @implements IConsensusParams
             * @constructor
             * @param {tendermint.types.IConsensusParams=} [properties] Properties to set
             */
            function ConsensusParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsensusParams block.
             * @member {tendermint.types.IBlockParams|null|undefined} block
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.block = null;

            /**
             * ConsensusParams evidence.
             * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.evidence = null;

            /**
             * ConsensusParams validator.
             * @member {tendermint.types.IValidatorParams|null|undefined} validator
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.validator = null;

            /**
             * ConsensusParams version.
             * @member {tendermint.types.IVersionParams|null|undefined} version
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.version = null;

            /**
             * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.types.ConsensusParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {tendermint.types.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    $root.tendermint.types.BlockParams.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.evidence != null && Object.hasOwnProperty.call(message, "evidence"))
                    $root.tendermint.types.EvidenceParams.encode(message.evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.types.ValidatorParams.encode(message.validator, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.types.VersionParams.encode(message.version, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConsensusParams message, length delimited. Does not implicitly {@link tendermint.types.ConsensusParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {tendermint.types.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ConsensusParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = $root.tendermint.types.BlockParams.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.evidence = $root.tendermint.types.EvidenceParams.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.validator = $root.tendermint.types.ValidatorParams.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.version = $root.tendermint.types.VersionParams.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsensusParams message.
             * @function verify
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsensusParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block")) {
                    let error = $root.tendermint.types.BlockParams.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                if (message.evidence != null && message.hasOwnProperty("evidence")) {
                    let error = $root.tendermint.types.EvidenceParams.verify(message.evidence);
                    if (error)
                        return "evidence." + error;
                }
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.types.ValidatorParams.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.types.VersionParams.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                return null;
            };

            /**
             * Creates a ConsensusParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ConsensusParams} ConsensusParams
             */
            ConsensusParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ConsensusParams)
                    return object;
                let message = new $root.tendermint.types.ConsensusParams();
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.block: object expected");
                    message.block = $root.tendermint.types.BlockParams.fromObject(object.block);
                }
                if (object.evidence != null) {
                    if (typeof object.evidence !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.evidence: object expected");
                    message.evidence = $root.tendermint.types.EvidenceParams.fromObject(object.evidence);
                }
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.validator: object expected");
                    message.validator = $root.tendermint.types.ValidatorParams.fromObject(object.validator);
                }
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.version: object expected");
                    message.version = $root.tendermint.types.VersionParams.fromObject(object.version);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConsensusParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {tendermint.types.ConsensusParams} message ConsensusParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsensusParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block = null;
                    object.evidence = null;
                    object.validator = null;
                    object.version = null;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.tendermint.types.BlockParams.toObject(message.block, options);
                if (message.evidence != null && message.hasOwnProperty("evidence"))
                    object.evidence = $root.tendermint.types.EvidenceParams.toObject(message.evidence, options);
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.types.ValidatorParams.toObject(message.validator, options);
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.types.VersionParams.toObject(message.version, options);
                return object;
            };

            /**
             * Converts this ConsensusParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.ConsensusParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsensusParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsensusParams;
        })();

        types.BlockParams = (function() {

            /**
             * Properties of a BlockParams.
             * @memberof tendermint.types
             * @interface IBlockParams
             * @property {number|null} [max_bytes] BlockParams max_bytes
             * @property {number|null} [max_gas] BlockParams max_gas
             * @property {number|null} [time_iota_ms] BlockParams time_iota_ms
             */

            /**
             * Constructs a new BlockParams.
             * @memberof tendermint.types
             * @classdesc Represents a BlockParams.
             * @implements IBlockParams
             * @constructor
             * @param {tendermint.types.IBlockParams=} [properties] Properties to set
             */
            function BlockParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockParams max_bytes.
             * @member {number} max_bytes
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockParams max_gas.
             * @member {number} max_gas
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockParams time_iota_ms.
             * @member {number} time_iota_ms
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.time_iota_ms = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.types.BlockParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {tendermint.types.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_bytes);
                if (message.max_gas != null && Object.hasOwnProperty.call(message, "max_gas"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.max_gas);
                if (message.time_iota_ms != null && Object.hasOwnProperty.call(message, "time_iota_ms"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time_iota_ms);
                return writer;
            };

            /**
             * Encodes the specified BlockParams message, length delimited. Does not implicitly {@link tendermint.types.BlockParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {tendermint.types.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.max_bytes = reader.int64();
                        break;
                    case 2:
                        message.max_gas = reader.int64();
                        break;
                    case 3:
                        message.time_iota_ms = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockParams message.
             * @function verify
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                        return "max_bytes: integer|Long expected";
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (!$util.isInteger(message.max_gas) && !(message.max_gas && $util.isInteger(message.max_gas.low) && $util.isInteger(message.max_gas.high)))
                        return "max_gas: integer|Long expected";
                if (message.time_iota_ms != null && message.hasOwnProperty("time_iota_ms"))
                    if (!$util.isInteger(message.time_iota_ms) && !(message.time_iota_ms && $util.isInteger(message.time_iota_ms.low) && $util.isInteger(message.time_iota_ms.high)))
                        return "time_iota_ms: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockParams} BlockParams
             */
            BlockParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockParams)
                    return object;
                let message = new $root.tendermint.types.BlockParams();
                if (object.max_bytes != null)
                    if ($util.Long)
                        (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                    else if (typeof object.max_bytes === "string")
                        message.max_bytes = parseInt(object.max_bytes, 10);
                    else if (typeof object.max_bytes === "number")
                        message.max_bytes = object.max_bytes;
                    else if (typeof object.max_bytes === "object")
                        message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                if (object.max_gas != null)
                    if ($util.Long)
                        (message.max_gas = $util.Long.fromValue(object.max_gas)).unsigned = false;
                    else if (typeof object.max_gas === "string")
                        message.max_gas = parseInt(object.max_gas, 10);
                    else if (typeof object.max_gas === "number")
                        message.max_gas = object.max_gas;
                    else if (typeof object.max_gas === "object")
                        message.max_gas = new $util.LongBits(object.max_gas.low >>> 0, object.max_gas.high >>> 0).toNumber();
                if (object.time_iota_ms != null)
                    if ($util.Long)
                        (message.time_iota_ms = $util.Long.fromValue(object.time_iota_ms)).unsigned = false;
                    else if (typeof object.time_iota_ms === "string")
                        message.time_iota_ms = parseInt(object.time_iota_ms, 10);
                    else if (typeof object.time_iota_ms === "number")
                        message.time_iota_ms = object.time_iota_ms;
                    else if (typeof object.time_iota_ms === "object")
                        message.time_iota_ms = new $util.LongBits(object.time_iota_ms.low >>> 0, object.time_iota_ms.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {tendermint.types.BlockParams} message BlockParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_bytes = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_gas = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.time_iota_ms = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.time_iota_ms = options.longs === String ? "0" : 0;
                }
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (typeof message.max_bytes === "number")
                        object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                    else
                        object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (typeof message.max_gas === "number")
                        object.max_gas = options.longs === String ? String(message.max_gas) : message.max_gas;
                    else
                        object.max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.max_gas) : options.longs === Number ? new $util.LongBits(message.max_gas.low >>> 0, message.max_gas.high >>> 0).toNumber() : message.max_gas;
                if (message.time_iota_ms != null && message.hasOwnProperty("time_iota_ms"))
                    if (typeof message.time_iota_ms === "number")
                        object.time_iota_ms = options.longs === String ? String(message.time_iota_ms) : message.time_iota_ms;
                    else
                        object.time_iota_ms = options.longs === String ? $util.Long.prototype.toString.call(message.time_iota_ms) : options.longs === Number ? new $util.LongBits(message.time_iota_ms.low >>> 0, message.time_iota_ms.high >>> 0).toNumber() : message.time_iota_ms;
                return object;
            };

            /**
             * Converts this BlockParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockParams;
        })();

        types.EvidenceParams = (function() {

            /**
             * Properties of an EvidenceParams.
             * @memberof tendermint.types
             * @interface IEvidenceParams
             * @property {number|null} [max_age_num_blocks] EvidenceParams max_age_num_blocks
             * @property {google.protobuf.IDuration|null} [max_age_duration] EvidenceParams max_age_duration
             * @property {number|null} [max_bytes] EvidenceParams max_bytes
             */

            /**
             * Constructs a new EvidenceParams.
             * @memberof tendermint.types
             * @classdesc Represents an EvidenceParams.
             * @implements IEvidenceParams
             * @constructor
             * @param {tendermint.types.IEvidenceParams=} [properties] Properties to set
             */
            function EvidenceParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EvidenceParams max_age_num_blocks.
             * @member {number} max_age_num_blocks
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_age_num_blocks = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EvidenceParams max_age_duration.
             * @member {google.protobuf.IDuration|null|undefined} max_age_duration
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_age_duration = null;

            /**
             * EvidenceParams max_bytes.
             * @member {number} max_bytes
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified EvidenceParams message. Does not implicitly {@link tendermint.types.EvidenceParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {tendermint.types.IEvidenceParams} message EvidenceParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.max_age_num_blocks != null && Object.hasOwnProperty.call(message, "max_age_num_blocks"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_age_num_blocks);
                if (message.max_age_duration != null && Object.hasOwnProperty.call(message, "max_age_duration"))
                    $root.google.protobuf.Duration.encode(message.max_age_duration, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.max_bytes);
                return writer;
            };

            /**
             * Encodes the specified EvidenceParams message, length delimited. Does not implicitly {@link tendermint.types.EvidenceParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {tendermint.types.IEvidenceParams} message EvidenceParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EvidenceParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.EvidenceParams} EvidenceParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.EvidenceParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.max_age_num_blocks = reader.int64();
                        break;
                    case 2:
                        message.max_age_duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.max_bytes = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EvidenceParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.EvidenceParams} EvidenceParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EvidenceParams message.
             * @function verify
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EvidenceParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.max_age_num_blocks != null && message.hasOwnProperty("max_age_num_blocks"))
                    if (!$util.isInteger(message.max_age_num_blocks) && !(message.max_age_num_blocks && $util.isInteger(message.max_age_num_blocks.low) && $util.isInteger(message.max_age_num_blocks.high)))
                        return "max_age_num_blocks: integer|Long expected";
                if (message.max_age_duration != null && message.hasOwnProperty("max_age_duration")) {
                    let error = $root.google.protobuf.Duration.verify(message.max_age_duration);
                    if (error)
                        return "max_age_duration." + error;
                }
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                        return "max_bytes: integer|Long expected";
                return null;
            };

            /**
             * Creates an EvidenceParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.EvidenceParams} EvidenceParams
             */
            EvidenceParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.EvidenceParams)
                    return object;
                let message = new $root.tendermint.types.EvidenceParams();
                if (object.max_age_num_blocks != null)
                    if ($util.Long)
                        (message.max_age_num_blocks = $util.Long.fromValue(object.max_age_num_blocks)).unsigned = false;
                    else if (typeof object.max_age_num_blocks === "string")
                        message.max_age_num_blocks = parseInt(object.max_age_num_blocks, 10);
                    else if (typeof object.max_age_num_blocks === "number")
                        message.max_age_num_blocks = object.max_age_num_blocks;
                    else if (typeof object.max_age_num_blocks === "object")
                        message.max_age_num_blocks = new $util.LongBits(object.max_age_num_blocks.low >>> 0, object.max_age_num_blocks.high >>> 0).toNumber();
                if (object.max_age_duration != null) {
                    if (typeof object.max_age_duration !== "object")
                        throw TypeError(".tendermint.types.EvidenceParams.max_age_duration: object expected");
                    message.max_age_duration = $root.google.protobuf.Duration.fromObject(object.max_age_duration);
                }
                if (object.max_bytes != null)
                    if ($util.Long)
                        (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                    else if (typeof object.max_bytes === "string")
                        message.max_bytes = parseInt(object.max_bytes, 10);
                    else if (typeof object.max_bytes === "number")
                        message.max_bytes = object.max_bytes;
                    else if (typeof object.max_bytes === "object")
                        message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an EvidenceParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {tendermint.types.EvidenceParams} message EvidenceParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EvidenceParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_age_num_blocks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_age_num_blocks = options.longs === String ? "0" : 0;
                    object.max_age_duration = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_bytes = options.longs === String ? "0" : 0;
                }
                if (message.max_age_num_blocks != null && message.hasOwnProperty("max_age_num_blocks"))
                    if (typeof message.max_age_num_blocks === "number")
                        object.max_age_num_blocks = options.longs === String ? String(message.max_age_num_blocks) : message.max_age_num_blocks;
                    else
                        object.max_age_num_blocks = options.longs === String ? $util.Long.prototype.toString.call(message.max_age_num_blocks) : options.longs === Number ? new $util.LongBits(message.max_age_num_blocks.low >>> 0, message.max_age_num_blocks.high >>> 0).toNumber() : message.max_age_num_blocks;
                if (message.max_age_duration != null && message.hasOwnProperty("max_age_duration"))
                    object.max_age_duration = $root.google.protobuf.Duration.toObject(message.max_age_duration, options);
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (typeof message.max_bytes === "number")
                        object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                    else
                        object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                return object;
            };

            /**
             * Converts this EvidenceParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.EvidenceParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EvidenceParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EvidenceParams;
        })();

        types.ValidatorParams = (function() {

            /**
             * Properties of a ValidatorParams.
             * @memberof tendermint.types
             * @interface IValidatorParams
             * @property {Array.<string>|null} [pub_key_types] ValidatorParams pub_key_types
             */

            /**
             * Constructs a new ValidatorParams.
             * @memberof tendermint.types
             * @classdesc Represents a ValidatorParams.
             * @implements IValidatorParams
             * @constructor
             * @param {tendermint.types.IValidatorParams=} [properties] Properties to set
             */
            function ValidatorParams(properties) {
                this.pub_key_types = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorParams pub_key_types.
             * @member {Array.<string>} pub_key_types
             * @memberof tendermint.types.ValidatorParams
             * @instance
             */
            ValidatorParams.prototype.pub_key_types = $util.emptyArray;

            /**
             * Encodes the specified ValidatorParams message. Does not implicitly {@link tendermint.types.ValidatorParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {tendermint.types.IValidatorParams} message ValidatorParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key_types != null && message.pub_key_types.length)
                    for (let i = 0; i < message.pub_key_types.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.pub_key_types[i]);
                return writer;
            };

            /**
             * Encodes the specified ValidatorParams message, length delimited. Does not implicitly {@link tendermint.types.ValidatorParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {tendermint.types.IValidatorParams} message ValidatorParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ValidatorParams} ValidatorParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ValidatorParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.pub_key_types && message.pub_key_types.length))
                            message.pub_key_types = [];
                        message.pub_key_types.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ValidatorParams} ValidatorParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorParams message.
             * @function verify
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key_types != null && message.hasOwnProperty("pub_key_types")) {
                    if (!Array.isArray(message.pub_key_types))
                        return "pub_key_types: array expected";
                    for (let i = 0; i < message.pub_key_types.length; ++i)
                        if (!$util.isString(message.pub_key_types[i]))
                            return "pub_key_types: string[] expected";
                }
                return null;
            };

            /**
             * Creates a ValidatorParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ValidatorParams} ValidatorParams
             */
            ValidatorParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ValidatorParams)
                    return object;
                let message = new $root.tendermint.types.ValidatorParams();
                if (object.pub_key_types) {
                    if (!Array.isArray(object.pub_key_types))
                        throw TypeError(".tendermint.types.ValidatorParams.pub_key_types: array expected");
                    message.pub_key_types = [];
                    for (let i = 0; i < object.pub_key_types.length; ++i)
                        message.pub_key_types[i] = String(object.pub_key_types[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a ValidatorParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {tendermint.types.ValidatorParams} message ValidatorParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.pub_key_types = [];
                if (message.pub_key_types && message.pub_key_types.length) {
                    object.pub_key_types = [];
                    for (let j = 0; j < message.pub_key_types.length; ++j)
                        object.pub_key_types[j] = message.pub_key_types[j];
                }
                return object;
            };

            /**
             * Converts this ValidatorParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.ValidatorParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorParams;
        })();

        types.VersionParams = (function() {

            /**
             * Properties of a VersionParams.
             * @memberof tendermint.types
             * @interface IVersionParams
             * @property {number|null} [app_version] VersionParams app_version
             */

            /**
             * Constructs a new VersionParams.
             * @memberof tendermint.types
             * @classdesc Represents a VersionParams.
             * @implements IVersionParams
             * @constructor
             * @param {tendermint.types.IVersionParams=} [properties] Properties to set
             */
            function VersionParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VersionParams app_version.
             * @member {number} app_version
             * @memberof tendermint.types.VersionParams
             * @instance
             */
            VersionParams.prototype.app_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified VersionParams message. Does not implicitly {@link tendermint.types.VersionParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {tendermint.types.IVersionParams} message VersionParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VersionParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.app_version != null && Object.hasOwnProperty.call(message, "app_version"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.app_version);
                return writer;
            };

            /**
             * Encodes the specified VersionParams message, length delimited. Does not implicitly {@link tendermint.types.VersionParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {tendermint.types.IVersionParams} message VersionParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VersionParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VersionParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.VersionParams} VersionParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VersionParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.VersionParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.app_version = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VersionParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.VersionParams} VersionParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VersionParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VersionParams message.
             * @function verify
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VersionParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (!$util.isInteger(message.app_version) && !(message.app_version && $util.isInteger(message.app_version.low) && $util.isInteger(message.app_version.high)))
                        return "app_version: integer|Long expected";
                return null;
            };

            /**
             * Creates a VersionParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.VersionParams} VersionParams
             */
            VersionParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.VersionParams)
                    return object;
                let message = new $root.tendermint.types.VersionParams();
                if (object.app_version != null)
                    if ($util.Long)
                        (message.app_version = $util.Long.fromValue(object.app_version)).unsigned = true;
                    else if (typeof object.app_version === "string")
                        message.app_version = parseInt(object.app_version, 10);
                    else if (typeof object.app_version === "number")
                        message.app_version = object.app_version;
                    else if (typeof object.app_version === "object")
                        message.app_version = new $util.LongBits(object.app_version.low >>> 0, object.app_version.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a VersionParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {tendermint.types.VersionParams} message VersionParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VersionParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app_version = options.longs === String ? "0" : 0;
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (typeof message.app_version === "number")
                        object.app_version = options.longs === String ? String(message.app_version) : message.app_version;
                    else
                        object.app_version = options.longs === String ? $util.Long.prototype.toString.call(message.app_version) : options.longs === Number ? new $util.LongBits(message.app_version.low >>> 0, message.app_version.high >>> 0).toNumber(true) : message.app_version;
                return object;
            };

            /**
             * Converts this VersionParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.VersionParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VersionParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VersionParams;
        })();

        types.HashedParams = (function() {

            /**
             * Properties of a HashedParams.
             * @memberof tendermint.types
             * @interface IHashedParams
             * @property {number|null} [block_max_bytes] HashedParams block_max_bytes
             * @property {number|null} [block_max_gas] HashedParams block_max_gas
             */

            /**
             * Constructs a new HashedParams.
             * @memberof tendermint.types
             * @classdesc Represents a HashedParams.
             * @implements IHashedParams
             * @constructor
             * @param {tendermint.types.IHashedParams=} [properties] Properties to set
             */
            function HashedParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HashedParams block_max_bytes.
             * @member {number} block_max_bytes
             * @memberof tendermint.types.HashedParams
             * @instance
             */
            HashedParams.prototype.block_max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HashedParams block_max_gas.
             * @member {number} block_max_gas
             * @memberof tendermint.types.HashedParams
             * @instance
             */
            HashedParams.prototype.block_max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified HashedParams message. Does not implicitly {@link tendermint.types.HashedParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {tendermint.types.IHashedParams} message HashedParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HashedParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_max_bytes != null && Object.hasOwnProperty.call(message, "block_max_bytes"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.block_max_bytes);
                if (message.block_max_gas != null && Object.hasOwnProperty.call(message, "block_max_gas"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.block_max_gas);
                return writer;
            };

            /**
             * Encodes the specified HashedParams message, length delimited. Does not implicitly {@link tendermint.types.HashedParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {tendermint.types.IHashedParams} message HashedParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HashedParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HashedParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.HashedParams} HashedParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HashedParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.HashedParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_max_bytes = reader.int64();
                        break;
                    case 2:
                        message.block_max_gas = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HashedParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.HashedParams} HashedParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HashedParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HashedParams message.
             * @function verify
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HashedParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_max_bytes != null && message.hasOwnProperty("block_max_bytes"))
                    if (!$util.isInteger(message.block_max_bytes) && !(message.block_max_bytes && $util.isInteger(message.block_max_bytes.low) && $util.isInteger(message.block_max_bytes.high)))
                        return "block_max_bytes: integer|Long expected";
                if (message.block_max_gas != null && message.hasOwnProperty("block_max_gas"))
                    if (!$util.isInteger(message.block_max_gas) && !(message.block_max_gas && $util.isInteger(message.block_max_gas.low) && $util.isInteger(message.block_max_gas.high)))
                        return "block_max_gas: integer|Long expected";
                return null;
            };

            /**
             * Creates a HashedParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.HashedParams} HashedParams
             */
            HashedParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.HashedParams)
                    return object;
                let message = new $root.tendermint.types.HashedParams();
                if (object.block_max_bytes != null)
                    if ($util.Long)
                        (message.block_max_bytes = $util.Long.fromValue(object.block_max_bytes)).unsigned = false;
                    else if (typeof object.block_max_bytes === "string")
                        message.block_max_bytes = parseInt(object.block_max_bytes, 10);
                    else if (typeof object.block_max_bytes === "number")
                        message.block_max_bytes = object.block_max_bytes;
                    else if (typeof object.block_max_bytes === "object")
                        message.block_max_bytes = new $util.LongBits(object.block_max_bytes.low >>> 0, object.block_max_bytes.high >>> 0).toNumber();
                if (object.block_max_gas != null)
                    if ($util.Long)
                        (message.block_max_gas = $util.Long.fromValue(object.block_max_gas)).unsigned = false;
                    else if (typeof object.block_max_gas === "string")
                        message.block_max_gas = parseInt(object.block_max_gas, 10);
                    else if (typeof object.block_max_gas === "number")
                        message.block_max_gas = object.block_max_gas;
                    else if (typeof object.block_max_gas === "object")
                        message.block_max_gas = new $util.LongBits(object.block_max_gas.low >>> 0, object.block_max_gas.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a HashedParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {tendermint.types.HashedParams} message HashedParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HashedParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.block_max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_max_bytes = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.block_max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_max_gas = options.longs === String ? "0" : 0;
                }
                if (message.block_max_bytes != null && message.hasOwnProperty("block_max_bytes"))
                    if (typeof message.block_max_bytes === "number")
                        object.block_max_bytes = options.longs === String ? String(message.block_max_bytes) : message.block_max_bytes;
                    else
                        object.block_max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.block_max_bytes) : options.longs === Number ? new $util.LongBits(message.block_max_bytes.low >>> 0, message.block_max_bytes.high >>> 0).toNumber() : message.block_max_bytes;
                if (message.block_max_gas != null && message.hasOwnProperty("block_max_gas"))
                    if (typeof message.block_max_gas === "number")
                        object.block_max_gas = options.longs === String ? String(message.block_max_gas) : message.block_max_gas;
                    else
                        object.block_max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.block_max_gas) : options.longs === Number ? new $util.LongBits(message.block_max_gas.low >>> 0, message.block_max_gas.high >>> 0).toNumber() : message.block_max_gas;
                return object;
            };

            /**
             * Converts this HashedParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.HashedParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HashedParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HashedParams;
        })();

        types.Block = (function() {

            /**
             * Properties of a Block.
             * @memberof tendermint.types
             * @interface IBlock
             * @property {tendermint.types.IHeader|null} [header] Block header
             * @property {tendermint.types.IData|null} [data] Block data
             * @property {tendermint.types.IEvidenceList|null} [evidence] Block evidence
             * @property {tendermint.types.ICommit|null} [last_commit] Block last_commit
             */

            /**
             * Constructs a new Block.
             * @memberof tendermint.types
             * @classdesc Represents a Block.
             * @implements IBlock
             * @constructor
             * @param {tendermint.types.IBlock=} [properties] Properties to set
             */
            function Block(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Block header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.header = null;

            /**
             * Block data.
             * @member {tendermint.types.IData|null|undefined} data
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.data = null;

            /**
             * Block evidence.
             * @member {tendermint.types.IEvidenceList|null|undefined} evidence
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.evidence = null;

            /**
             * Block last_commit.
             * @member {tendermint.types.ICommit|null|undefined} last_commit
             * @memberof tendermint.types.Block
             * @instance
             */
            Block.prototype.last_commit = null;

            /**
             * Encodes the specified Block message. Does not implicitly {@link tendermint.types.Block.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Block
             * @static
             * @param {tendermint.types.IBlock} message Block message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Block.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.tendermint.types.Data.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.evidence != null && Object.hasOwnProperty.call(message, "evidence"))
                    $root.tendermint.types.EvidenceList.encode(message.evidence, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.last_commit != null && Object.hasOwnProperty.call(message, "last_commit"))
                    $root.tendermint.types.Commit.encode(message.last_commit, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Block message, length delimited. Does not implicitly {@link tendermint.types.Block.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Block
             * @static
             * @param {tendermint.types.IBlock} message Block message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Block.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Block message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Block
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Block} Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Block.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Block();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.data = $root.tendermint.types.Data.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.evidence = $root.tendermint.types.EvidenceList.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.last_commit = $root.tendermint.types.Commit.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Block message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Block
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Block} Block
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Block.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Block message.
             * @function verify
             * @memberof tendermint.types.Block
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Block.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    let error = $root.tendermint.types.Data.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                if (message.evidence != null && message.hasOwnProperty("evidence")) {
                    let error = $root.tendermint.types.EvidenceList.verify(message.evidence);
                    if (error)
                        return "evidence." + error;
                }
                if (message.last_commit != null && message.hasOwnProperty("last_commit")) {
                    let error = $root.tendermint.types.Commit.verify(message.last_commit);
                    if (error)
                        return "last_commit." + error;
                }
                return null;
            };

            /**
             * Creates a Block message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Block
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Block} Block
             */
            Block.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Block)
                    return object;
                let message = new $root.tendermint.types.Block();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.Block.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".tendermint.types.Block.data: object expected");
                    message.data = $root.tendermint.types.Data.fromObject(object.data);
                }
                if (object.evidence != null) {
                    if (typeof object.evidence !== "object")
                        throw TypeError(".tendermint.types.Block.evidence: object expected");
                    message.evidence = $root.tendermint.types.EvidenceList.fromObject(object.evidence);
                }
                if (object.last_commit != null) {
                    if (typeof object.last_commit !== "object")
                        throw TypeError(".tendermint.types.Block.last_commit: object expected");
                    message.last_commit = $root.tendermint.types.Commit.fromObject(object.last_commit);
                }
                return message;
            };

            /**
             * Creates a plain object from a Block message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Block
             * @static
             * @param {tendermint.types.Block} message Block
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Block.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.header = null;
                    object.data = null;
                    object.evidence = null;
                    object.last_commit = null;
                }
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.tendermint.types.Data.toObject(message.data, options);
                if (message.evidence != null && message.hasOwnProperty("evidence"))
                    object.evidence = $root.tendermint.types.EvidenceList.toObject(message.evidence, options);
                if (message.last_commit != null && message.hasOwnProperty("last_commit"))
                    object.last_commit = $root.tendermint.types.Commit.toObject(message.last_commit, options);
                return object;
            };

            /**
             * Converts this Block to JSON.
             * @function toJSON
             * @memberof tendermint.types.Block
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Block.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Block;
        })();

        types.Evidence = (function() {

            /**
             * Properties of an Evidence.
             * @memberof tendermint.types
             * @interface IEvidence
             * @property {tendermint.types.IDuplicateVoteEvidence|null} [duplicate_vote_evidence] Evidence duplicate_vote_evidence
             * @property {tendermint.types.ILightClientAttackEvidence|null} [light_client_attack_evidence] Evidence light_client_attack_evidence
             */

            /**
             * Constructs a new Evidence.
             * @memberof tendermint.types
             * @classdesc Represents an Evidence.
             * @implements IEvidence
             * @constructor
             * @param {tendermint.types.IEvidence=} [properties] Properties to set
             */
            function Evidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Evidence duplicate_vote_evidence.
             * @member {tendermint.types.IDuplicateVoteEvidence|null|undefined} duplicate_vote_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.duplicate_vote_evidence = null;

            /**
             * Evidence light_client_attack_evidence.
             * @member {tendermint.types.ILightClientAttackEvidence|null|undefined} light_client_attack_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.light_client_attack_evidence = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Evidence sum.
             * @member {"duplicate_vote_evidence"|"light_client_attack_evidence"|undefined} sum
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Object.defineProperty(Evidence.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["duplicate_vote_evidence", "light_client_attack_evidence"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Evidence message. Does not implicitly {@link tendermint.types.Evidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Evidence
             * @static
             * @param {tendermint.types.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.duplicate_vote_evidence != null && Object.hasOwnProperty.call(message, "duplicate_vote_evidence"))
                    $root.tendermint.types.DuplicateVoteEvidence.encode(message.duplicate_vote_evidence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.light_client_attack_evidence != null && Object.hasOwnProperty.call(message, "light_client_attack_evidence"))
                    $root.tendermint.types.LightClientAttackEvidence.encode(message.light_client_attack_evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Evidence message, length delimited. Does not implicitly {@link tendermint.types.Evidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Evidence
             * @static
             * @param {tendermint.types.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Evidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.duplicate_vote_evidence = $root.tendermint.types.DuplicateVoteEvidence.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.light_client_attack_evidence = $root.tendermint.types.LightClientAttackEvidence.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Evidence message.
             * @function verify
             * @memberof tendermint.types.Evidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Evidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.duplicate_vote_evidence != null && message.hasOwnProperty("duplicate_vote_evidence")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.DuplicateVoteEvidence.verify(message.duplicate_vote_evidence);
                        if (error)
                            return "duplicate_vote_evidence." + error;
                    }
                }
                if (message.light_client_attack_evidence != null && message.hasOwnProperty("light_client_attack_evidence")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.LightClientAttackEvidence.verify(message.light_client_attack_evidence);
                        if (error)
                            return "light_client_attack_evidence." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an Evidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Evidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Evidence} Evidence
             */
            Evidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Evidence)
                    return object;
                let message = new $root.tendermint.types.Evidence();
                if (object.duplicate_vote_evidence != null) {
                    if (typeof object.duplicate_vote_evidence !== "object")
                        throw TypeError(".tendermint.types.Evidence.duplicate_vote_evidence: object expected");
                    message.duplicate_vote_evidence = $root.tendermint.types.DuplicateVoteEvidence.fromObject(object.duplicate_vote_evidence);
                }
                if (object.light_client_attack_evidence != null) {
                    if (typeof object.light_client_attack_evidence !== "object")
                        throw TypeError(".tendermint.types.Evidence.light_client_attack_evidence: object expected");
                    message.light_client_attack_evidence = $root.tendermint.types.LightClientAttackEvidence.fromObject(object.light_client_attack_evidence);
                }
                return message;
            };

            /**
             * Creates a plain object from an Evidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Evidence
             * @static
             * @param {tendermint.types.Evidence} message Evidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Evidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.duplicate_vote_evidence != null && message.hasOwnProperty("duplicate_vote_evidence")) {
                    object.duplicate_vote_evidence = $root.tendermint.types.DuplicateVoteEvidence.toObject(message.duplicate_vote_evidence, options);
                    if (options.oneofs)
                        object.sum = "duplicate_vote_evidence";
                }
                if (message.light_client_attack_evidence != null && message.hasOwnProperty("light_client_attack_evidence")) {
                    object.light_client_attack_evidence = $root.tendermint.types.LightClientAttackEvidence.toObject(message.light_client_attack_evidence, options);
                    if (options.oneofs)
                        object.sum = "light_client_attack_evidence";
                }
                return object;
            };

            /**
             * Converts this Evidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.Evidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Evidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Evidence;
        })();

        types.DuplicateVoteEvidence = (function() {

            /**
             * Properties of a DuplicateVoteEvidence.
             * @memberof tendermint.types
             * @interface IDuplicateVoteEvidence
             * @property {tendermint.types.IVote|null} [vote_a] DuplicateVoteEvidence vote_a
             * @property {tendermint.types.IVote|null} [vote_b] DuplicateVoteEvidence vote_b
             * @property {number|null} [total_voting_power] DuplicateVoteEvidence total_voting_power
             * @property {number|null} [validator_power] DuplicateVoteEvidence validator_power
             * @property {google.protobuf.ITimestamp|null} [timestamp] DuplicateVoteEvidence timestamp
             */

            /**
             * Constructs a new DuplicateVoteEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a DuplicateVoteEvidence.
             * @implements IDuplicateVoteEvidence
             * @constructor
             * @param {tendermint.types.IDuplicateVoteEvidence=} [properties] Properties to set
             */
            function DuplicateVoteEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DuplicateVoteEvidence vote_a.
             * @member {tendermint.types.IVote|null|undefined} vote_a
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.vote_a = null;

            /**
             * DuplicateVoteEvidence vote_b.
             * @member {tendermint.types.IVote|null|undefined} vote_b
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.vote_b = null;

            /**
             * DuplicateVoteEvidence total_voting_power.
             * @member {number} total_voting_power
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DuplicateVoteEvidence validator_power.
             * @member {number} validator_power
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.validator_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DuplicateVoteEvidence timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.timestamp = null;

            /**
             * Encodes the specified DuplicateVoteEvidence message. Does not implicitly {@link tendermint.types.DuplicateVoteEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {tendermint.types.IDuplicateVoteEvidence} message DuplicateVoteEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DuplicateVoteEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vote_a != null && Object.hasOwnProperty.call(message, "vote_a"))
                    $root.tendermint.types.Vote.encode(message.vote_a, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.vote_b != null && Object.hasOwnProperty.call(message, "vote_b"))
                    $root.tendermint.types.Vote.encode(message.vote_b, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.total_voting_power);
                if (message.validator_power != null && Object.hasOwnProperty.call(message, "validator_power"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.validator_power);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DuplicateVoteEvidence message, length delimited. Does not implicitly {@link tendermint.types.DuplicateVoteEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {tendermint.types.IDuplicateVoteEvidence} message DuplicateVoteEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DuplicateVoteEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DuplicateVoteEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.DuplicateVoteEvidence} DuplicateVoteEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DuplicateVoteEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.DuplicateVoteEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vote_a = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.vote_b = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.total_voting_power = reader.int64();
                        break;
                    case 4:
                        message.validator_power = reader.int64();
                        break;
                    case 5:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DuplicateVoteEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.DuplicateVoteEvidence} DuplicateVoteEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DuplicateVoteEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DuplicateVoteEvidence message.
             * @function verify
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DuplicateVoteEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.vote_a != null && message.hasOwnProperty("vote_a")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote_a);
                    if (error)
                        return "vote_a." + error;
                }
                if (message.vote_b != null && message.hasOwnProperty("vote_b")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote_b);
                    if (error)
                        return "vote_b." + error;
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                        return "total_voting_power: integer|Long expected";
                if (message.validator_power != null && message.hasOwnProperty("validator_power"))
                    if (!$util.isInteger(message.validator_power) && !(message.validator_power && $util.isInteger(message.validator_power.low) && $util.isInteger(message.validator_power.high)))
                        return "validator_power: integer|Long expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                return null;
            };

            /**
             * Creates a DuplicateVoteEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.DuplicateVoteEvidence} DuplicateVoteEvidence
             */
            DuplicateVoteEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.DuplicateVoteEvidence)
                    return object;
                let message = new $root.tendermint.types.DuplicateVoteEvidence();
                if (object.vote_a != null) {
                    if (typeof object.vote_a !== "object")
                        throw TypeError(".tendermint.types.DuplicateVoteEvidence.vote_a: object expected");
                    message.vote_a = $root.tendermint.types.Vote.fromObject(object.vote_a);
                }
                if (object.vote_b != null) {
                    if (typeof object.vote_b !== "object")
                        throw TypeError(".tendermint.types.DuplicateVoteEvidence.vote_b: object expected");
                    message.vote_b = $root.tendermint.types.Vote.fromObject(object.vote_b);
                }
                if (object.total_voting_power != null)
                    if ($util.Long)
                        (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                    else if (typeof object.total_voting_power === "string")
                        message.total_voting_power = parseInt(object.total_voting_power, 10);
                    else if (typeof object.total_voting_power === "number")
                        message.total_voting_power = object.total_voting_power;
                    else if (typeof object.total_voting_power === "object")
                        message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                if (object.validator_power != null)
                    if ($util.Long)
                        (message.validator_power = $util.Long.fromValue(object.validator_power)).unsigned = false;
                    else if (typeof object.validator_power === "string")
                        message.validator_power = parseInt(object.validator_power, 10);
                    else if (typeof object.validator_power === "number")
                        message.validator_power = object.validator_power;
                    else if (typeof object.validator_power === "object")
                        message.validator_power = new $util.LongBits(object.validator_power.low >>> 0, object.validator_power.high >>> 0).toNumber();
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.DuplicateVoteEvidence.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                return message;
            };

            /**
             * Creates a plain object from a DuplicateVoteEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {tendermint.types.DuplicateVoteEvidence} message DuplicateVoteEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DuplicateVoteEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.vote_a = null;
                    object.vote_b = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total_voting_power = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.validator_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.validator_power = options.longs === String ? "0" : 0;
                    object.timestamp = null;
                }
                if (message.vote_a != null && message.hasOwnProperty("vote_a"))
                    object.vote_a = $root.tendermint.types.Vote.toObject(message.vote_a, options);
                if (message.vote_b != null && message.hasOwnProperty("vote_b"))
                    object.vote_b = $root.tendermint.types.Vote.toObject(message.vote_b, options);
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (typeof message.total_voting_power === "number")
                        object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                    else
                        object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                if (message.validator_power != null && message.hasOwnProperty("validator_power"))
                    if (typeof message.validator_power === "number")
                        object.validator_power = options.longs === String ? String(message.validator_power) : message.validator_power;
                    else
                        object.validator_power = options.longs === String ? $util.Long.prototype.toString.call(message.validator_power) : options.longs === Number ? new $util.LongBits(message.validator_power.low >>> 0, message.validator_power.high >>> 0).toNumber() : message.validator_power;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                return object;
            };

            /**
             * Converts this DuplicateVoteEvidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DuplicateVoteEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DuplicateVoteEvidence;
        })();

        types.LightClientAttackEvidence = (function() {

            /**
             * Properties of a LightClientAttackEvidence.
             * @memberof tendermint.types
             * @interface ILightClientAttackEvidence
             * @property {tendermint.types.ILightBlock|null} [conflicting_block] LightClientAttackEvidence conflicting_block
             * @property {number|null} [common_height] LightClientAttackEvidence common_height
             * @property {Array.<tendermint.types.IValidator>|null} [byzantine_validators] LightClientAttackEvidence byzantine_validators
             * @property {number|null} [total_voting_power] LightClientAttackEvidence total_voting_power
             * @property {google.protobuf.ITimestamp|null} [timestamp] LightClientAttackEvidence timestamp
             */

            /**
             * Constructs a new LightClientAttackEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a LightClientAttackEvidence.
             * @implements ILightClientAttackEvidence
             * @constructor
             * @param {tendermint.types.ILightClientAttackEvidence=} [properties] Properties to set
             */
            function LightClientAttackEvidence(properties) {
                this.byzantine_validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LightClientAttackEvidence conflicting_block.
             * @member {tendermint.types.ILightBlock|null|undefined} conflicting_block
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.conflicting_block = null;

            /**
             * LightClientAttackEvidence common_height.
             * @member {number} common_height
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.common_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LightClientAttackEvidence byzantine_validators.
             * @member {Array.<tendermint.types.IValidator>} byzantine_validators
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.byzantine_validators = $util.emptyArray;

            /**
             * LightClientAttackEvidence total_voting_power.
             * @member {number} total_voting_power
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LightClientAttackEvidence timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             */
            LightClientAttackEvidence.prototype.timestamp = null;

            /**
             * Encodes the specified LightClientAttackEvidence message. Does not implicitly {@link tendermint.types.LightClientAttackEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {tendermint.types.ILightClientAttackEvidence} message LightClientAttackEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightClientAttackEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.conflicting_block != null && Object.hasOwnProperty.call(message, "conflicting_block"))
                    $root.tendermint.types.LightBlock.encode(message.conflicting_block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.common_height != null && Object.hasOwnProperty.call(message, "common_height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.common_height);
                if (message.byzantine_validators != null && message.byzantine_validators.length)
                    for (let i = 0; i < message.byzantine_validators.length; ++i)
                        $root.tendermint.types.Validator.encode(message.byzantine_validators[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.total_voting_power);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LightClientAttackEvidence message, length delimited. Does not implicitly {@link tendermint.types.LightClientAttackEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {tendermint.types.ILightClientAttackEvidence} message LightClientAttackEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightClientAttackEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LightClientAttackEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.LightClientAttackEvidence} LightClientAttackEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightClientAttackEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.LightClientAttackEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.conflicting_block = $root.tendermint.types.LightBlock.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.common_height = reader.int64();
                        break;
                    case 3:
                        if (!(message.byzantine_validators && message.byzantine_validators.length))
                            message.byzantine_validators = [];
                        message.byzantine_validators.push($root.tendermint.types.Validator.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.total_voting_power = reader.int64();
                        break;
                    case 5:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LightClientAttackEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.LightClientAttackEvidence} LightClientAttackEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightClientAttackEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LightClientAttackEvidence message.
             * @function verify
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LightClientAttackEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.conflicting_block != null && message.hasOwnProperty("conflicting_block")) {
                    let error = $root.tendermint.types.LightBlock.verify(message.conflicting_block);
                    if (error)
                        return "conflicting_block." + error;
                }
                if (message.common_height != null && message.hasOwnProperty("common_height"))
                    if (!$util.isInteger(message.common_height) && !(message.common_height && $util.isInteger(message.common_height.low) && $util.isInteger(message.common_height.high)))
                        return "common_height: integer|Long expected";
                if (message.byzantine_validators != null && message.hasOwnProperty("byzantine_validators")) {
                    if (!Array.isArray(message.byzantine_validators))
                        return "byzantine_validators: array expected";
                    for (let i = 0; i < message.byzantine_validators.length; ++i) {
                        let error = $root.tendermint.types.Validator.verify(message.byzantine_validators[i]);
                        if (error)
                            return "byzantine_validators." + error;
                    }
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                        return "total_voting_power: integer|Long expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                return null;
            };

            /**
             * Creates a LightClientAttackEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.LightClientAttackEvidence} LightClientAttackEvidence
             */
            LightClientAttackEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.LightClientAttackEvidence)
                    return object;
                let message = new $root.tendermint.types.LightClientAttackEvidence();
                if (object.conflicting_block != null) {
                    if (typeof object.conflicting_block !== "object")
                        throw TypeError(".tendermint.types.LightClientAttackEvidence.conflicting_block: object expected");
                    message.conflicting_block = $root.tendermint.types.LightBlock.fromObject(object.conflicting_block);
                }
                if (object.common_height != null)
                    if ($util.Long)
                        (message.common_height = $util.Long.fromValue(object.common_height)).unsigned = false;
                    else if (typeof object.common_height === "string")
                        message.common_height = parseInt(object.common_height, 10);
                    else if (typeof object.common_height === "number")
                        message.common_height = object.common_height;
                    else if (typeof object.common_height === "object")
                        message.common_height = new $util.LongBits(object.common_height.low >>> 0, object.common_height.high >>> 0).toNumber();
                if (object.byzantine_validators) {
                    if (!Array.isArray(object.byzantine_validators))
                        throw TypeError(".tendermint.types.LightClientAttackEvidence.byzantine_validators: array expected");
                    message.byzantine_validators = [];
                    for (let i = 0; i < object.byzantine_validators.length; ++i) {
                        if (typeof object.byzantine_validators[i] !== "object")
                            throw TypeError(".tendermint.types.LightClientAttackEvidence.byzantine_validators: object expected");
                        message.byzantine_validators[i] = $root.tendermint.types.Validator.fromObject(object.byzantine_validators[i]);
                    }
                }
                if (object.total_voting_power != null)
                    if ($util.Long)
                        (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                    else if (typeof object.total_voting_power === "string")
                        message.total_voting_power = parseInt(object.total_voting_power, 10);
                    else if (typeof object.total_voting_power === "number")
                        message.total_voting_power = object.total_voting_power;
                    else if (typeof object.total_voting_power === "object")
                        message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.LightClientAttackEvidence.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                return message;
            };

            /**
             * Creates a plain object from a LightClientAttackEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.LightClientAttackEvidence
             * @static
             * @param {tendermint.types.LightClientAttackEvidence} message LightClientAttackEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LightClientAttackEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.byzantine_validators = [];
                if (options.defaults) {
                    object.conflicting_block = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.common_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.common_height = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total_voting_power = options.longs === String ? "0" : 0;
                    object.timestamp = null;
                }
                if (message.conflicting_block != null && message.hasOwnProperty("conflicting_block"))
                    object.conflicting_block = $root.tendermint.types.LightBlock.toObject(message.conflicting_block, options);
                if (message.common_height != null && message.hasOwnProperty("common_height"))
                    if (typeof message.common_height === "number")
                        object.common_height = options.longs === String ? String(message.common_height) : message.common_height;
                    else
                        object.common_height = options.longs === String ? $util.Long.prototype.toString.call(message.common_height) : options.longs === Number ? new $util.LongBits(message.common_height.low >>> 0, message.common_height.high >>> 0).toNumber() : message.common_height;
                if (message.byzantine_validators && message.byzantine_validators.length) {
                    object.byzantine_validators = [];
                    for (let j = 0; j < message.byzantine_validators.length; ++j)
                        object.byzantine_validators[j] = $root.tendermint.types.Validator.toObject(message.byzantine_validators[j], options);
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (typeof message.total_voting_power === "number")
                        object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                    else
                        object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                return object;
            };

            /**
             * Converts this LightClientAttackEvidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.LightClientAttackEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LightClientAttackEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LightClientAttackEvidence;
        })();

        types.EvidenceList = (function() {

            /**
             * Properties of an EvidenceList.
             * @memberof tendermint.types
             * @interface IEvidenceList
             * @property {Array.<tendermint.types.IEvidence>|null} [evidence] EvidenceList evidence
             */

            /**
             * Constructs a new EvidenceList.
             * @memberof tendermint.types
             * @classdesc Represents an EvidenceList.
             * @implements IEvidenceList
             * @constructor
             * @param {tendermint.types.IEvidenceList=} [properties] Properties to set
             */
            function EvidenceList(properties) {
                this.evidence = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EvidenceList evidence.
             * @member {Array.<tendermint.types.IEvidence>} evidence
             * @memberof tendermint.types.EvidenceList
             * @instance
             */
            EvidenceList.prototype.evidence = $util.emptyArray;

            /**
             * Encodes the specified EvidenceList message. Does not implicitly {@link tendermint.types.EvidenceList.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {tendermint.types.IEvidenceList} message EvidenceList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.evidence != null && message.evidence.length)
                    for (let i = 0; i < message.evidence.length; ++i)
                        $root.tendermint.types.Evidence.encode(message.evidence[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EvidenceList message, length delimited. Does not implicitly {@link tendermint.types.EvidenceList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {tendermint.types.IEvidenceList} message EvidenceList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EvidenceList message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.EvidenceList} EvidenceList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.EvidenceList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.evidence && message.evidence.length))
                            message.evidence = [];
                        message.evidence.push($root.tendermint.types.Evidence.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EvidenceList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.EvidenceList} EvidenceList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EvidenceList message.
             * @function verify
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EvidenceList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.evidence != null && message.hasOwnProperty("evidence")) {
                    if (!Array.isArray(message.evidence))
                        return "evidence: array expected";
                    for (let i = 0; i < message.evidence.length; ++i) {
                        let error = $root.tendermint.types.Evidence.verify(message.evidence[i]);
                        if (error)
                            return "evidence." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EvidenceList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.EvidenceList} EvidenceList
             */
            EvidenceList.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.EvidenceList)
                    return object;
                let message = new $root.tendermint.types.EvidenceList();
                if (object.evidence) {
                    if (!Array.isArray(object.evidence))
                        throw TypeError(".tendermint.types.EvidenceList.evidence: array expected");
                    message.evidence = [];
                    for (let i = 0; i < object.evidence.length; ++i) {
                        if (typeof object.evidence[i] !== "object")
                            throw TypeError(".tendermint.types.EvidenceList.evidence: object expected");
                        message.evidence[i] = $root.tendermint.types.Evidence.fromObject(object.evidence[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EvidenceList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.EvidenceList
             * @static
             * @param {tendermint.types.EvidenceList} message EvidenceList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EvidenceList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.evidence = [];
                if (message.evidence && message.evidence.length) {
                    object.evidence = [];
                    for (let j = 0; j < message.evidence.length; ++j)
                        object.evidence[j] = $root.tendermint.types.Evidence.toObject(message.evidence[j], options);
                }
                return object;
            };

            /**
             * Converts this EvidenceList to JSON.
             * @function toJSON
             * @memberof tendermint.types.EvidenceList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EvidenceList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EvidenceList;
        })();

        types.EventDataRoundState = (function() {

            /**
             * Properties of an EventDataRoundState.
             * @memberof tendermint.types
             * @interface IEventDataRoundState
             * @property {number|null} [height] EventDataRoundState height
             * @property {number|null} [round] EventDataRoundState round
             * @property {string|null} [step] EventDataRoundState step
             */

            /**
             * Constructs a new EventDataRoundState.
             * @memberof tendermint.types
             * @classdesc Represents an EventDataRoundState.
             * @implements IEventDataRoundState
             * @constructor
             * @param {tendermint.types.IEventDataRoundState=} [properties] Properties to set
             */
            function EventDataRoundState(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventDataRoundState height.
             * @member {number} height
             * @memberof tendermint.types.EventDataRoundState
             * @instance
             */
            EventDataRoundState.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EventDataRoundState round.
             * @member {number} round
             * @memberof tendermint.types.EventDataRoundState
             * @instance
             */
            EventDataRoundState.prototype.round = 0;

            /**
             * EventDataRoundState step.
             * @member {string} step
             * @memberof tendermint.types.EventDataRoundState
             * @instance
             */
            EventDataRoundState.prototype.step = "";

            /**
             * Encodes the specified EventDataRoundState message. Does not implicitly {@link tendermint.types.EventDataRoundState.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.EventDataRoundState
             * @static
             * @param {tendermint.types.IEventDataRoundState} message EventDataRoundState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventDataRoundState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.step != null && Object.hasOwnProperty.call(message, "step"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.step);
                return writer;
            };

            /**
             * Encodes the specified EventDataRoundState message, length delimited. Does not implicitly {@link tendermint.types.EventDataRoundState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.EventDataRoundState
             * @static
             * @param {tendermint.types.IEventDataRoundState} message EventDataRoundState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventDataRoundState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventDataRoundState message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.EventDataRoundState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.EventDataRoundState} EventDataRoundState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventDataRoundState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.EventDataRoundState();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.step = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventDataRoundState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.EventDataRoundState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.EventDataRoundState} EventDataRoundState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventDataRoundState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventDataRoundState message.
             * @function verify
             * @memberof tendermint.types.EventDataRoundState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventDataRoundState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.step != null && message.hasOwnProperty("step"))
                    if (!$util.isString(message.step))
                        return "step: string expected";
                return null;
            };

            /**
             * Creates an EventDataRoundState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.EventDataRoundState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.EventDataRoundState} EventDataRoundState
             */
            EventDataRoundState.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.EventDataRoundState)
                    return object;
                let message = new $root.tendermint.types.EventDataRoundState();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.step != null)
                    message.step = String(object.step);
                return message;
            };

            /**
             * Creates a plain object from an EventDataRoundState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.EventDataRoundState
             * @static
             * @param {tendermint.types.EventDataRoundState} message EventDataRoundState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventDataRoundState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.step = "";
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.step != null && message.hasOwnProperty("step"))
                    object.step = message.step;
                return object;
            };

            /**
             * Converts this EventDataRoundState to JSON.
             * @function toJSON
             * @memberof tendermint.types.EventDataRoundState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventDataRoundState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventDataRoundState;
        })();

        types.CanonicalBlockID = (function() {

            /**
             * Properties of a CanonicalBlockID.
             * @memberof tendermint.types
             * @interface ICanonicalBlockID
             * @property {Uint8Array|null} [hash] CanonicalBlockID hash
             * @property {tendermint.types.ICanonicalPartSetHeader|null} [part_set_header] CanonicalBlockID part_set_header
             */

            /**
             * Constructs a new CanonicalBlockID.
             * @memberof tendermint.types
             * @classdesc Represents a CanonicalBlockID.
             * @implements ICanonicalBlockID
             * @constructor
             * @param {tendermint.types.ICanonicalBlockID=} [properties] Properties to set
             */
            function CanonicalBlockID(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CanonicalBlockID hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.CanonicalBlockID
             * @instance
             */
            CanonicalBlockID.prototype.hash = $util.newBuffer([]);

            /**
             * CanonicalBlockID part_set_header.
             * @member {tendermint.types.ICanonicalPartSetHeader|null|undefined} part_set_header
             * @memberof tendermint.types.CanonicalBlockID
             * @instance
             */
            CanonicalBlockID.prototype.part_set_header = null;

            /**
             * Encodes the specified CanonicalBlockID message. Does not implicitly {@link tendermint.types.CanonicalBlockID.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CanonicalBlockID
             * @static
             * @param {tendermint.types.ICanonicalBlockID} message CanonicalBlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalBlockID.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                if (message.part_set_header != null && Object.hasOwnProperty.call(message, "part_set_header"))
                    $root.tendermint.types.CanonicalPartSetHeader.encode(message.part_set_header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CanonicalBlockID message, length delimited. Does not implicitly {@link tendermint.types.CanonicalBlockID.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.CanonicalBlockID
             * @static
             * @param {tendermint.types.ICanonicalBlockID} message CanonicalBlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalBlockID.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CanonicalBlockID message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CanonicalBlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.CanonicalBlockID} CanonicalBlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalBlockID.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CanonicalBlockID();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    case 2:
                        message.part_set_header = $root.tendermint.types.CanonicalPartSetHeader.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CanonicalBlockID message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.CanonicalBlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.CanonicalBlockID} CanonicalBlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalBlockID.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CanonicalBlockID message.
             * @function verify
             * @memberof tendermint.types.CanonicalBlockID
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CanonicalBlockID.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header")) {
                    let error = $root.tendermint.types.CanonicalPartSetHeader.verify(message.part_set_header);
                    if (error)
                        return "part_set_header." + error;
                }
                return null;
            };

            /**
             * Creates a CanonicalBlockID message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.CanonicalBlockID
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.CanonicalBlockID} CanonicalBlockID
             */
            CanonicalBlockID.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.CanonicalBlockID)
                    return object;
                let message = new $root.tendermint.types.CanonicalBlockID();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.part_set_header != null) {
                    if (typeof object.part_set_header !== "object")
                        throw TypeError(".tendermint.types.CanonicalBlockID.part_set_header: object expected");
                    message.part_set_header = $root.tendermint.types.CanonicalPartSetHeader.fromObject(object.part_set_header);
                }
                return message;
            };

            /**
             * Creates a plain object from a CanonicalBlockID message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.CanonicalBlockID
             * @static
             * @param {tendermint.types.CanonicalBlockID} message CanonicalBlockID
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CanonicalBlockID.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.part_set_header = null;
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header"))
                    object.part_set_header = $root.tendermint.types.CanonicalPartSetHeader.toObject(message.part_set_header, options);
                return object;
            };

            /**
             * Converts this CanonicalBlockID to JSON.
             * @function toJSON
             * @memberof tendermint.types.CanonicalBlockID
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CanonicalBlockID.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CanonicalBlockID;
        })();

        types.CanonicalPartSetHeader = (function() {

            /**
             * Properties of a CanonicalPartSetHeader.
             * @memberof tendermint.types
             * @interface ICanonicalPartSetHeader
             * @property {number|null} [total] CanonicalPartSetHeader total
             * @property {Uint8Array|null} [hash] CanonicalPartSetHeader hash
             */

            /**
             * Constructs a new CanonicalPartSetHeader.
             * @memberof tendermint.types
             * @classdesc Represents a CanonicalPartSetHeader.
             * @implements ICanonicalPartSetHeader
             * @constructor
             * @param {tendermint.types.ICanonicalPartSetHeader=} [properties] Properties to set
             */
            function CanonicalPartSetHeader(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CanonicalPartSetHeader total.
             * @member {number} total
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @instance
             */
            CanonicalPartSetHeader.prototype.total = 0;

            /**
             * CanonicalPartSetHeader hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @instance
             */
            CanonicalPartSetHeader.prototype.hash = $util.newBuffer([]);

            /**
             * Encodes the specified CanonicalPartSetHeader message. Does not implicitly {@link tendermint.types.CanonicalPartSetHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @static
             * @param {tendermint.types.ICanonicalPartSetHeader} message CanonicalPartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalPartSetHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.total);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified CanonicalPartSetHeader message, length delimited. Does not implicitly {@link tendermint.types.CanonicalPartSetHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @static
             * @param {tendermint.types.ICanonicalPartSetHeader} message CanonicalPartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalPartSetHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CanonicalPartSetHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.CanonicalPartSetHeader} CanonicalPartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalPartSetHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CanonicalPartSetHeader();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.uint32();
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CanonicalPartSetHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.CanonicalPartSetHeader} CanonicalPartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalPartSetHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CanonicalPartSetHeader message.
             * @function verify
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CanonicalPartSetHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a CanonicalPartSetHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.CanonicalPartSetHeader} CanonicalPartSetHeader
             */
            CanonicalPartSetHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.CanonicalPartSetHeader)
                    return object;
                let message = new $root.tendermint.types.CanonicalPartSetHeader();
                if (object.total != null)
                    message.total = object.total >>> 0;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a CanonicalPartSetHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @static
             * @param {tendermint.types.CanonicalPartSetHeader} message CanonicalPartSetHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CanonicalPartSetHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.total = 0;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this CanonicalPartSetHeader to JSON.
             * @function toJSON
             * @memberof tendermint.types.CanonicalPartSetHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CanonicalPartSetHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CanonicalPartSetHeader;
        })();

        types.CanonicalProposal = (function() {

            /**
             * Properties of a CanonicalProposal.
             * @memberof tendermint.types
             * @interface ICanonicalProposal
             * @property {tendermint.types.SignedMsgType|null} [type] CanonicalProposal type
             * @property {number|null} [height] CanonicalProposal height
             * @property {number|null} [round] CanonicalProposal round
             * @property {number|null} [pol_round] CanonicalProposal pol_round
             * @property {tendermint.types.ICanonicalBlockID|null} [block_id] CanonicalProposal block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] CanonicalProposal timestamp
             * @property {string|null} [chain_id] CanonicalProposal chain_id
             */

            /**
             * Constructs a new CanonicalProposal.
             * @memberof tendermint.types
             * @classdesc Represents a CanonicalProposal.
             * @implements ICanonicalProposal
             * @constructor
             * @param {tendermint.types.ICanonicalProposal=} [properties] Properties to set
             */
            function CanonicalProposal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CanonicalProposal type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             */
            CanonicalProposal.prototype.type = 0;

            /**
             * CanonicalProposal height.
             * @member {number} height
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             */
            CanonicalProposal.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CanonicalProposal round.
             * @member {number} round
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             */
            CanonicalProposal.prototype.round = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CanonicalProposal pol_round.
             * @member {number} pol_round
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             */
            CanonicalProposal.prototype.pol_round = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CanonicalProposal block_id.
             * @member {tendermint.types.ICanonicalBlockID|null|undefined} block_id
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             */
            CanonicalProposal.prototype.block_id = null;

            /**
             * CanonicalProposal timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             */
            CanonicalProposal.prototype.timestamp = null;

            /**
             * CanonicalProposal chain_id.
             * @member {string} chain_id
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             */
            CanonicalProposal.prototype.chain_id = "";

            /**
             * Encodes the specified CanonicalProposal message. Does not implicitly {@link tendermint.types.CanonicalProposal.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CanonicalProposal
             * @static
             * @param {tendermint.types.ICanonicalProposal} message CanonicalProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalProposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 1 =*/17).sfixed64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 1 =*/25).sfixed64(message.round);
                if (message.pol_round != null && Object.hasOwnProperty.call(message, "pol_round"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.pol_round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.CanonicalBlockID.encode(message.block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.chain_id);
                return writer;
            };

            /**
             * Encodes the specified CanonicalProposal message, length delimited. Does not implicitly {@link tendermint.types.CanonicalProposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.CanonicalProposal
             * @static
             * @param {tendermint.types.ICanonicalProposal} message CanonicalProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalProposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CanonicalProposal message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CanonicalProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.CanonicalProposal} CanonicalProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalProposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CanonicalProposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.sfixed64();
                        break;
                    case 3:
                        message.round = reader.sfixed64();
                        break;
                    case 4:
                        message.pol_round = reader.int64();
                        break;
                    case 5:
                        message.block_id = $root.tendermint.types.CanonicalBlockID.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.chain_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CanonicalProposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.CanonicalProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.CanonicalProposal} CanonicalProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalProposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CanonicalProposal message.
             * @function verify
             * @memberof tendermint.types.CanonicalProposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CanonicalProposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round) && !(message.round && $util.isInteger(message.round.low) && $util.isInteger(message.round.high)))
                        return "round: integer|Long expected";
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    if (!$util.isInteger(message.pol_round) && !(message.pol_round && $util.isInteger(message.pol_round.low) && $util.isInteger(message.pol_round.high)))
                        return "pol_round: integer|Long expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.CanonicalBlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                return null;
            };

            /**
             * Creates a CanonicalProposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.CanonicalProposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.CanonicalProposal} CanonicalProposal
             */
            CanonicalProposal.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.CanonicalProposal)
                    return object;
                let message = new $root.tendermint.types.CanonicalProposal();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    if ($util.Long)
                        (message.round = $util.Long.fromValue(object.round)).unsigned = false;
                    else if (typeof object.round === "string")
                        message.round = parseInt(object.round, 10);
                    else if (typeof object.round === "number")
                        message.round = object.round;
                    else if (typeof object.round === "object")
                        message.round = new $util.LongBits(object.round.low >>> 0, object.round.high >>> 0).toNumber();
                if (object.pol_round != null)
                    if ($util.Long)
                        (message.pol_round = $util.Long.fromValue(object.pol_round)).unsigned = false;
                    else if (typeof object.pol_round === "string")
                        message.pol_round = parseInt(object.pol_round, 10);
                    else if (typeof object.pol_round === "number")
                        message.pol_round = object.pol_round;
                    else if (typeof object.pol_round === "object")
                        message.pol_round = new $util.LongBits(object.pol_round.low >>> 0, object.pol_round.high >>> 0).toNumber();
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.CanonicalProposal.block_id: object expected");
                    message.block_id = $root.tendermint.types.CanonicalBlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.CanonicalProposal.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                return message;
            };

            /**
             * Creates a plain object from a CanonicalProposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.CanonicalProposal
             * @static
             * @param {tendermint.types.CanonicalProposal} message CanonicalProposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CanonicalProposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.round = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.round = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.pol_round = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.pol_round = options.longs === String ? "0" : 0;
                    object.block_id = null;
                    object.timestamp = null;
                    object.chain_id = "";
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    if (typeof message.round === "number")
                        object.round = options.longs === String ? String(message.round) : message.round;
                    else
                        object.round = options.longs === String ? $util.Long.prototype.toString.call(message.round) : options.longs === Number ? new $util.LongBits(message.round.low >>> 0, message.round.high >>> 0).toNumber() : message.round;
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    if (typeof message.pol_round === "number")
                        object.pol_round = options.longs === String ? String(message.pol_round) : message.pol_round;
                    else
                        object.pol_round = options.longs === String ? $util.Long.prototype.toString.call(message.pol_round) : options.longs === Number ? new $util.LongBits(message.pol_round.low >>> 0, message.pol_round.high >>> 0).toNumber() : message.pol_round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.CanonicalBlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                return object;
            };

            /**
             * Converts this CanonicalProposal to JSON.
             * @function toJSON
             * @memberof tendermint.types.CanonicalProposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CanonicalProposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CanonicalProposal;
        })();

        types.CanonicalVote = (function() {

            /**
             * Properties of a CanonicalVote.
             * @memberof tendermint.types
             * @interface ICanonicalVote
             * @property {tendermint.types.SignedMsgType|null} [type] CanonicalVote type
             * @property {number|null} [height] CanonicalVote height
             * @property {number|null} [round] CanonicalVote round
             * @property {tendermint.types.ICanonicalBlockID|null} [block_id] CanonicalVote block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] CanonicalVote timestamp
             * @property {string|null} [chain_id] CanonicalVote chain_id
             */

            /**
             * Constructs a new CanonicalVote.
             * @memberof tendermint.types
             * @classdesc Represents a CanonicalVote.
             * @implements ICanonicalVote
             * @constructor
             * @param {tendermint.types.ICanonicalVote=} [properties] Properties to set
             */
            function CanonicalVote(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CanonicalVote type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.CanonicalVote
             * @instance
             */
            CanonicalVote.prototype.type = 0;

            /**
             * CanonicalVote height.
             * @member {number} height
             * @memberof tendermint.types.CanonicalVote
             * @instance
             */
            CanonicalVote.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CanonicalVote round.
             * @member {number} round
             * @memberof tendermint.types.CanonicalVote
             * @instance
             */
            CanonicalVote.prototype.round = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CanonicalVote block_id.
             * @member {tendermint.types.ICanonicalBlockID|null|undefined} block_id
             * @memberof tendermint.types.CanonicalVote
             * @instance
             */
            CanonicalVote.prototype.block_id = null;

            /**
             * CanonicalVote timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.CanonicalVote
             * @instance
             */
            CanonicalVote.prototype.timestamp = null;

            /**
             * CanonicalVote chain_id.
             * @member {string} chain_id
             * @memberof tendermint.types.CanonicalVote
             * @instance
             */
            CanonicalVote.prototype.chain_id = "";

            /**
             * Encodes the specified CanonicalVote message. Does not implicitly {@link tendermint.types.CanonicalVote.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CanonicalVote
             * @static
             * @param {tendermint.types.ICanonicalVote} message CanonicalVote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalVote.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 1 =*/17).sfixed64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 1 =*/25).sfixed64(message.round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.CanonicalBlockID.encode(message.block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.chain_id);
                return writer;
            };

            /**
             * Encodes the specified CanonicalVote message, length delimited. Does not implicitly {@link tendermint.types.CanonicalVote.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.CanonicalVote
             * @static
             * @param {tendermint.types.ICanonicalVote} message CanonicalVote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CanonicalVote.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CanonicalVote message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CanonicalVote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.CanonicalVote} CanonicalVote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalVote.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CanonicalVote();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.sfixed64();
                        break;
                    case 3:
                        message.round = reader.sfixed64();
                        break;
                    case 4:
                        message.block_id = $root.tendermint.types.CanonicalBlockID.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.chain_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CanonicalVote message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.CanonicalVote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.CanonicalVote} CanonicalVote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CanonicalVote.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CanonicalVote message.
             * @function verify
             * @memberof tendermint.types.CanonicalVote
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CanonicalVote.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round) && !(message.round && $util.isInteger(message.round.low) && $util.isInteger(message.round.high)))
                        return "round: integer|Long expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.CanonicalBlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                return null;
            };

            /**
             * Creates a CanonicalVote message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.CanonicalVote
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.CanonicalVote} CanonicalVote
             */
            CanonicalVote.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.CanonicalVote)
                    return object;
                let message = new $root.tendermint.types.CanonicalVote();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    if ($util.Long)
                        (message.round = $util.Long.fromValue(object.round)).unsigned = false;
                    else if (typeof object.round === "string")
                        message.round = parseInt(object.round, 10);
                    else if (typeof object.round === "number")
                        message.round = object.round;
                    else if (typeof object.round === "object")
                        message.round = new $util.LongBits(object.round.low >>> 0, object.round.high >>> 0).toNumber();
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.CanonicalVote.block_id: object expected");
                    message.block_id = $root.tendermint.types.CanonicalBlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.CanonicalVote.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                return message;
            };

            /**
             * Creates a plain object from a CanonicalVote message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.CanonicalVote
             * @static
             * @param {tendermint.types.CanonicalVote} message CanonicalVote
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CanonicalVote.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.round = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.round = options.longs === String ? "0" : 0;
                    object.block_id = null;
                    object.timestamp = null;
                    object.chain_id = "";
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    if (typeof message.round === "number")
                        object.round = options.longs === String ? String(message.round) : message.round;
                    else
                        object.round = options.longs === String ? $util.Long.prototype.toString.call(message.round) : options.longs === Number ? new $util.LongBits(message.round.low >>> 0, message.round.high >>> 0).toNumber() : message.round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.CanonicalBlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                return object;
            };

            /**
             * Converts this CanonicalVote to JSON.
             * @function toJSON
             * @memberof tendermint.types.CanonicalVote
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CanonicalVote.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CanonicalVote;
        })();

        return types;
    })();

    tendermint.version = (function() {

        /**
         * Namespace version.
         * @memberof tendermint
         * @namespace
         */
        const version = {};

        version.App = (function() {

            /**
             * Properties of an App.
             * @memberof tendermint.version
             * @interface IApp
             * @property {number|null} [protocol] App protocol
             * @property {string|null} [software] App software
             */

            /**
             * Constructs a new App.
             * @memberof tendermint.version
             * @classdesc Represents an App.
             * @implements IApp
             * @constructor
             * @param {tendermint.version.IApp=} [properties] Properties to set
             */
            function App(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * App protocol.
             * @member {number} protocol
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.protocol = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * App software.
             * @member {string} software
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.software = "";

            /**
             * Encodes the specified App message. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.IApp} message App message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            App.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.protocol);
                if (message.software != null && Object.hasOwnProperty.call(message, "software"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.software);
                return writer;
            };

            /**
             * Encodes the specified App message, length delimited. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.IApp} message App message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            App.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an App message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.App
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.version.App} App
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            App.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.App();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.protocol = reader.uint64();
                        break;
                    case 2:
                        message.software = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an App message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.version.App
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.version.App} App
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            App.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an App message.
             * @function verify
             * @memberof tendermint.version.App
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            App.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    if (!$util.isInteger(message.protocol) && !(message.protocol && $util.isInteger(message.protocol.low) && $util.isInteger(message.protocol.high)))
                        return "protocol: integer|Long expected";
                if (message.software != null && message.hasOwnProperty("software"))
                    if (!$util.isString(message.software))
                        return "software: string expected";
                return null;
            };

            /**
             * Creates an App message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.version.App
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.version.App} App
             */
            App.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.version.App)
                    return object;
                let message = new $root.tendermint.version.App();
                if (object.protocol != null)
                    if ($util.Long)
                        (message.protocol = $util.Long.fromValue(object.protocol)).unsigned = true;
                    else if (typeof object.protocol === "string")
                        message.protocol = parseInt(object.protocol, 10);
                    else if (typeof object.protocol === "number")
                        message.protocol = object.protocol;
                    else if (typeof object.protocol === "object")
                        message.protocol = new $util.LongBits(object.protocol.low >>> 0, object.protocol.high >>> 0).toNumber(true);
                if (object.software != null)
                    message.software = String(object.software);
                return message;
            };

            /**
             * Creates a plain object from an App message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.App} message App
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            App.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.protocol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.protocol = options.longs === String ? "0" : 0;
                    object.software = "";
                }
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    if (typeof message.protocol === "number")
                        object.protocol = options.longs === String ? String(message.protocol) : message.protocol;
                    else
                        object.protocol = options.longs === String ? $util.Long.prototype.toString.call(message.protocol) : options.longs === Number ? new $util.LongBits(message.protocol.low >>> 0, message.protocol.high >>> 0).toNumber(true) : message.protocol;
                if (message.software != null && message.hasOwnProperty("software"))
                    object.software = message.software;
                return object;
            };

            /**
             * Converts this App to JSON.
             * @function toJSON
             * @memberof tendermint.version.App
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            App.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return App;
        })();

        version.Consensus = (function() {

            /**
             * Properties of a Consensus.
             * @memberof tendermint.version
             * @interface IConsensus
             * @property {number|null} [block] Consensus block
             * @property {number|null} [app] Consensus app
             */

            /**
             * Constructs a new Consensus.
             * @memberof tendermint.version
             * @classdesc Represents a Consensus.
             * @implements IConsensus
             * @constructor
             * @param {tendermint.version.IConsensus=} [properties] Properties to set
             */
            function Consensus(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Consensus block.
             * @member {number} block
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Consensus app.
             * @member {number} app
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.app = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified Consensus message. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Consensus.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.block);
                if (message.app != null && Object.hasOwnProperty.call(message, "app"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.app);
                return writer;
            };

            /**
             * Encodes the specified Consensus message, length delimited. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Consensus.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Consensus message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.version.Consensus} Consensus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Consensus.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.Consensus();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = reader.uint64();
                        break;
                    case 2:
                        message.app = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Consensus message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.version.Consensus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.version.Consensus} Consensus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Consensus.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Consensus message.
             * @function verify
             * @memberof tendermint.version.Consensus
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Consensus.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block"))
                    if (!$util.isInteger(message.block) && !(message.block && $util.isInteger(message.block.low) && $util.isInteger(message.block.high)))
                        return "block: integer|Long expected";
                if (message.app != null && message.hasOwnProperty("app"))
                    if (!$util.isInteger(message.app) && !(message.app && $util.isInteger(message.app.low) && $util.isInteger(message.app.high)))
                        return "app: integer|Long expected";
                return null;
            };

            /**
             * Creates a Consensus message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.version.Consensus
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.version.Consensus} Consensus
             */
            Consensus.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.version.Consensus)
                    return object;
                let message = new $root.tendermint.version.Consensus();
                if (object.block != null)
                    if ($util.Long)
                        (message.block = $util.Long.fromValue(object.block)).unsigned = true;
                    else if (typeof object.block === "string")
                        message.block = parseInt(object.block, 10);
                    else if (typeof object.block === "number")
                        message.block = object.block;
                    else if (typeof object.block === "object")
                        message.block = new $util.LongBits(object.block.low >>> 0, object.block.high >>> 0).toNumber(true);
                if (object.app != null)
                    if ($util.Long)
                        (message.app = $util.Long.fromValue(object.app)).unsigned = true;
                    else if (typeof object.app === "string")
                        message.app = parseInt(object.app, 10);
                    else if (typeof object.app === "number")
                        message.app = object.app;
                    else if (typeof object.app === "object")
                        message.app = new $util.LongBits(object.app.low >>> 0, object.app.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a Consensus message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.Consensus} message Consensus
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Consensus.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app = options.longs === String ? "0" : 0;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    if (typeof message.block === "number")
                        object.block = options.longs === String ? String(message.block) : message.block;
                    else
                        object.block = options.longs === String ? $util.Long.prototype.toString.call(message.block) : options.longs === Number ? new $util.LongBits(message.block.low >>> 0, message.block.high >>> 0).toNumber(true) : message.block;
                if (message.app != null && message.hasOwnProperty("app"))
                    if (typeof message.app === "number")
                        object.app = options.longs === String ? String(message.app) : message.app;
                    else
                        object.app = options.longs === String ? $util.Long.prototype.toString.call(message.app) : options.longs === Number ? new $util.LongBits(message.app.low >>> 0, message.app.high >>> 0).toNumber(true) : message.app;
                return object;
            };

            /**
             * Converts this Consensus to JSON.
             * @function toJSON
             * @memberof tendermint.version.Consensus
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Consensus.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Consensus;
        })();

        return version;
    })();

    tendermint.blockchain = (function() {

        /**
         * Namespace blockchain.
         * @memberof tendermint
         * @namespace
         */
        const blockchain = {};

        blockchain.BlockRequest = (function() {

            /**
             * Properties of a BlockRequest.
             * @memberof tendermint.blockchain
             * @interface IBlockRequest
             * @property {number|null} [height] BlockRequest height
             */

            /**
             * Constructs a new BlockRequest.
             * @memberof tendermint.blockchain
             * @classdesc Represents a BlockRequest.
             * @implements IBlockRequest
             * @constructor
             * @param {tendermint.blockchain.IBlockRequest=} [properties] Properties to set
             */
            function BlockRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockRequest height.
             * @member {number} height
             * @memberof tendermint.blockchain.BlockRequest
             * @instance
             */
            BlockRequest.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockRequest message. Does not implicitly {@link tendermint.blockchain.BlockRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.blockchain.BlockRequest
             * @static
             * @param {tendermint.blockchain.IBlockRequest} message BlockRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                return writer;
            };

            /**
             * Encodes the specified BlockRequest message, length delimited. Does not implicitly {@link tendermint.blockchain.BlockRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.blockchain.BlockRequest
             * @static
             * @param {tendermint.blockchain.IBlockRequest} message BlockRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.blockchain.BlockRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.blockchain.BlockRequest} BlockRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.blockchain.BlockRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.blockchain.BlockRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.blockchain.BlockRequest} BlockRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockRequest message.
             * @function verify
             * @memberof tendermint.blockchain.BlockRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.blockchain.BlockRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.blockchain.BlockRequest} BlockRequest
             */
            BlockRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.blockchain.BlockRequest)
                    return object;
                let message = new $root.tendermint.blockchain.BlockRequest();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.blockchain.BlockRequest
             * @static
             * @param {tendermint.blockchain.BlockRequest} message BlockRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                return object;
            };

            /**
             * Converts this BlockRequest to JSON.
             * @function toJSON
             * @memberof tendermint.blockchain.BlockRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockRequest;
        })();

        blockchain.NoBlockResponse = (function() {

            /**
             * Properties of a NoBlockResponse.
             * @memberof tendermint.blockchain
             * @interface INoBlockResponse
             * @property {number|null} [height] NoBlockResponse height
             */

            /**
             * Constructs a new NoBlockResponse.
             * @memberof tendermint.blockchain
             * @classdesc Represents a NoBlockResponse.
             * @implements INoBlockResponse
             * @constructor
             * @param {tendermint.blockchain.INoBlockResponse=} [properties] Properties to set
             */
            function NoBlockResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NoBlockResponse height.
             * @member {number} height
             * @memberof tendermint.blockchain.NoBlockResponse
             * @instance
             */
            NoBlockResponse.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified NoBlockResponse message. Does not implicitly {@link tendermint.blockchain.NoBlockResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.blockchain.NoBlockResponse
             * @static
             * @param {tendermint.blockchain.INoBlockResponse} message NoBlockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NoBlockResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                return writer;
            };

            /**
             * Encodes the specified NoBlockResponse message, length delimited. Does not implicitly {@link tendermint.blockchain.NoBlockResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.blockchain.NoBlockResponse
             * @static
             * @param {tendermint.blockchain.INoBlockResponse} message NoBlockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NoBlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NoBlockResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.blockchain.NoBlockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.blockchain.NoBlockResponse} NoBlockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NoBlockResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.blockchain.NoBlockResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NoBlockResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.blockchain.NoBlockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.blockchain.NoBlockResponse} NoBlockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NoBlockResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NoBlockResponse message.
             * @function verify
             * @memberof tendermint.blockchain.NoBlockResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NoBlockResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                return null;
            };

            /**
             * Creates a NoBlockResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.blockchain.NoBlockResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.blockchain.NoBlockResponse} NoBlockResponse
             */
            NoBlockResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.blockchain.NoBlockResponse)
                    return object;
                let message = new $root.tendermint.blockchain.NoBlockResponse();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a NoBlockResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.blockchain.NoBlockResponse
             * @static
             * @param {tendermint.blockchain.NoBlockResponse} message NoBlockResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NoBlockResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                return object;
            };

            /**
             * Converts this NoBlockResponse to JSON.
             * @function toJSON
             * @memberof tendermint.blockchain.NoBlockResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NoBlockResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return NoBlockResponse;
        })();

        blockchain.BlockResponse = (function() {

            /**
             * Properties of a BlockResponse.
             * @memberof tendermint.blockchain
             * @interface IBlockResponse
             * @property {tendermint.types.IBlock|null} [block] BlockResponse block
             */

            /**
             * Constructs a new BlockResponse.
             * @memberof tendermint.blockchain
             * @classdesc Represents a BlockResponse.
             * @implements IBlockResponse
             * @constructor
             * @param {tendermint.blockchain.IBlockResponse=} [properties] Properties to set
             */
            function BlockResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockResponse block.
             * @member {tendermint.types.IBlock|null|undefined} block
             * @memberof tendermint.blockchain.BlockResponse
             * @instance
             */
            BlockResponse.prototype.block = null;

            /**
             * Encodes the specified BlockResponse message. Does not implicitly {@link tendermint.blockchain.BlockResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.blockchain.BlockResponse
             * @static
             * @param {tendermint.blockchain.IBlockResponse} message BlockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    $root.tendermint.types.Block.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockResponse message, length delimited. Does not implicitly {@link tendermint.blockchain.BlockResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.blockchain.BlockResponse
             * @static
             * @param {tendermint.blockchain.IBlockResponse} message BlockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.blockchain.BlockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.blockchain.BlockResponse} BlockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.blockchain.BlockResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = $root.tendermint.types.Block.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.blockchain.BlockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.blockchain.BlockResponse} BlockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockResponse message.
             * @function verify
             * @memberof tendermint.blockchain.BlockResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block")) {
                    let error = $root.tendermint.types.Block.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                return null;
            };

            /**
             * Creates a BlockResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.blockchain.BlockResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.blockchain.BlockResponse} BlockResponse
             */
            BlockResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.blockchain.BlockResponse)
                    return object;
                let message = new $root.tendermint.blockchain.BlockResponse();
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".tendermint.blockchain.BlockResponse.block: object expected");
                    message.block = $root.tendermint.types.Block.fromObject(object.block);
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.blockchain.BlockResponse
             * @static
             * @param {tendermint.blockchain.BlockResponse} message BlockResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.block = null;
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.tendermint.types.Block.toObject(message.block, options);
                return object;
            };

            /**
             * Converts this BlockResponse to JSON.
             * @function toJSON
             * @memberof tendermint.blockchain.BlockResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockResponse;
        })();

        blockchain.StatusRequest = (function() {

            /**
             * Properties of a StatusRequest.
             * @memberof tendermint.blockchain
             * @interface IStatusRequest
             */

            /**
             * Constructs a new StatusRequest.
             * @memberof tendermint.blockchain
             * @classdesc Represents a StatusRequest.
             * @implements IStatusRequest
             * @constructor
             * @param {tendermint.blockchain.IStatusRequest=} [properties] Properties to set
             */
            function StatusRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified StatusRequest message. Does not implicitly {@link tendermint.blockchain.StatusRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.blockchain.StatusRequest
             * @static
             * @param {tendermint.blockchain.IStatusRequest} message StatusRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatusRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified StatusRequest message, length delimited. Does not implicitly {@link tendermint.blockchain.StatusRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.blockchain.StatusRequest
             * @static
             * @param {tendermint.blockchain.IStatusRequest} message StatusRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StatusRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.blockchain.StatusRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.blockchain.StatusRequest} StatusRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatusRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.blockchain.StatusRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StatusRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.blockchain.StatusRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.blockchain.StatusRequest} StatusRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatusRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StatusRequest message.
             * @function verify
             * @memberof tendermint.blockchain.StatusRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StatusRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a StatusRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.blockchain.StatusRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.blockchain.StatusRequest} StatusRequest
             */
            StatusRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.blockchain.StatusRequest)
                    return object;
                return new $root.tendermint.blockchain.StatusRequest();
            };

            /**
             * Creates a plain object from a StatusRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.blockchain.StatusRequest
             * @static
             * @param {tendermint.blockchain.StatusRequest} message StatusRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StatusRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this StatusRequest to JSON.
             * @function toJSON
             * @memberof tendermint.blockchain.StatusRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StatusRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StatusRequest;
        })();

        blockchain.StatusResponse = (function() {

            /**
             * Properties of a StatusResponse.
             * @memberof tendermint.blockchain
             * @interface IStatusResponse
             * @property {number|null} [height] StatusResponse height
             * @property {number|null} [base] StatusResponse base
             */

            /**
             * Constructs a new StatusResponse.
             * @memberof tendermint.blockchain
             * @classdesc Represents a StatusResponse.
             * @implements IStatusResponse
             * @constructor
             * @param {tendermint.blockchain.IStatusResponse=} [properties] Properties to set
             */
            function StatusResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StatusResponse height.
             * @member {number} height
             * @memberof tendermint.blockchain.StatusResponse
             * @instance
             */
            StatusResponse.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StatusResponse base.
             * @member {number} base
             * @memberof tendermint.blockchain.StatusResponse
             * @instance
             */
            StatusResponse.prototype.base = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified StatusResponse message. Does not implicitly {@link tendermint.blockchain.StatusResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.blockchain.StatusResponse
             * @static
             * @param {tendermint.blockchain.IStatusResponse} message StatusResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatusResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.base != null && Object.hasOwnProperty.call(message, "base"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.base);
                return writer;
            };

            /**
             * Encodes the specified StatusResponse message, length delimited. Does not implicitly {@link tendermint.blockchain.StatusResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.blockchain.StatusResponse
             * @static
             * @param {tendermint.blockchain.IStatusResponse} message StatusResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StatusResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.blockchain.StatusResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.blockchain.StatusResponse} StatusResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatusResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.blockchain.StatusResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.base = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StatusResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.blockchain.StatusResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.blockchain.StatusResponse} StatusResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatusResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StatusResponse message.
             * @function verify
             * @memberof tendermint.blockchain.StatusResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StatusResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.base != null && message.hasOwnProperty("base"))
                    if (!$util.isInteger(message.base) && !(message.base && $util.isInteger(message.base.low) && $util.isInteger(message.base.high)))
                        return "base: integer|Long expected";
                return null;
            };

            /**
             * Creates a StatusResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.blockchain.StatusResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.blockchain.StatusResponse} StatusResponse
             */
            StatusResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.blockchain.StatusResponse)
                    return object;
                let message = new $root.tendermint.blockchain.StatusResponse();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.base != null)
                    if ($util.Long)
                        (message.base = $util.Long.fromValue(object.base)).unsigned = false;
                    else if (typeof object.base === "string")
                        message.base = parseInt(object.base, 10);
                    else if (typeof object.base === "number")
                        message.base = object.base;
                    else if (typeof object.base === "object")
                        message.base = new $util.LongBits(object.base.low >>> 0, object.base.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a StatusResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.blockchain.StatusResponse
             * @static
             * @param {tendermint.blockchain.StatusResponse} message StatusResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StatusResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.base = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.base = options.longs === String ? "0" : 0;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.base != null && message.hasOwnProperty("base"))
                    if (typeof message.base === "number")
                        object.base = options.longs === String ? String(message.base) : message.base;
                    else
                        object.base = options.longs === String ? $util.Long.prototype.toString.call(message.base) : options.longs === Number ? new $util.LongBits(message.base.low >>> 0, message.base.high >>> 0).toNumber() : message.base;
                return object;
            };

            /**
             * Converts this StatusResponse to JSON.
             * @function toJSON
             * @memberof tendermint.blockchain.StatusResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StatusResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StatusResponse;
        })();

        blockchain.Message = (function() {

            /**
             * Properties of a Message.
             * @memberof tendermint.blockchain
             * @interface IMessage
             * @property {tendermint.blockchain.IBlockRequest|null} [block_request] Message block_request
             * @property {tendermint.blockchain.INoBlockResponse|null} [no_block_response] Message no_block_response
             * @property {tendermint.blockchain.IBlockResponse|null} [block_response] Message block_response
             * @property {tendermint.blockchain.IStatusRequest|null} [status_request] Message status_request
             * @property {tendermint.blockchain.IStatusResponse|null} [status_response] Message status_response
             */

            /**
             * Constructs a new Message.
             * @memberof tendermint.blockchain
             * @classdesc Represents a Message.
             * @implements IMessage
             * @constructor
             * @param {tendermint.blockchain.IMessage=} [properties] Properties to set
             */
            function Message(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Message block_request.
             * @member {tendermint.blockchain.IBlockRequest|null|undefined} block_request
             * @memberof tendermint.blockchain.Message
             * @instance
             */
            Message.prototype.block_request = null;

            /**
             * Message no_block_response.
             * @member {tendermint.blockchain.INoBlockResponse|null|undefined} no_block_response
             * @memberof tendermint.blockchain.Message
             * @instance
             */
            Message.prototype.no_block_response = null;

            /**
             * Message block_response.
             * @member {tendermint.blockchain.IBlockResponse|null|undefined} block_response
             * @memberof tendermint.blockchain.Message
             * @instance
             */
            Message.prototype.block_response = null;

            /**
             * Message status_request.
             * @member {tendermint.blockchain.IStatusRequest|null|undefined} status_request
             * @memberof tendermint.blockchain.Message
             * @instance
             */
            Message.prototype.status_request = null;

            /**
             * Message status_response.
             * @member {tendermint.blockchain.IStatusResponse|null|undefined} status_response
             * @memberof tendermint.blockchain.Message
             * @instance
             */
            Message.prototype.status_response = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Message sum.
             * @member {"block_request"|"no_block_response"|"block_response"|"status_request"|"status_response"|undefined} sum
             * @memberof tendermint.blockchain.Message
             * @instance
             */
            Object.defineProperty(Message.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["block_request", "no_block_response", "block_response", "status_request", "status_response"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Message message. Does not implicitly {@link tendermint.blockchain.Message.verify|verify} messages.
             * @function encode
             * @memberof tendermint.blockchain.Message
             * @static
             * @param {tendermint.blockchain.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_request != null && Object.hasOwnProperty.call(message, "block_request"))
                    $root.tendermint.blockchain.BlockRequest.encode(message.block_request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.no_block_response != null && Object.hasOwnProperty.call(message, "no_block_response"))
                    $root.tendermint.blockchain.NoBlockResponse.encode(message.no_block_response, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.block_response != null && Object.hasOwnProperty.call(message, "block_response"))
                    $root.tendermint.blockchain.BlockResponse.encode(message.block_response, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.status_request != null && Object.hasOwnProperty.call(message, "status_request"))
                    $root.tendermint.blockchain.StatusRequest.encode(message.status_request, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.status_response != null && Object.hasOwnProperty.call(message, "status_response"))
                    $root.tendermint.blockchain.StatusResponse.encode(message.status_response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link tendermint.blockchain.Message.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.blockchain.Message
             * @static
             * @param {tendermint.blockchain.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.blockchain.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.blockchain.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.blockchain.Message();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_request = $root.tendermint.blockchain.BlockRequest.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.no_block_response = $root.tendermint.blockchain.NoBlockResponse.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.block_response = $root.tendermint.blockchain.BlockResponse.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.status_request = $root.tendermint.blockchain.StatusRequest.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.status_response = $root.tendermint.blockchain.StatusResponse.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.blockchain.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.blockchain.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Message message.
             * @function verify
             * @memberof tendermint.blockchain.Message
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Message.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.block_request != null && message.hasOwnProperty("block_request")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.blockchain.BlockRequest.verify(message.block_request);
                        if (error)
                            return "block_request." + error;
                    }
                }
                if (message.no_block_response != null && message.hasOwnProperty("no_block_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.blockchain.NoBlockResponse.verify(message.no_block_response);
                        if (error)
                            return "no_block_response." + error;
                    }
                }
                if (message.block_response != null && message.hasOwnProperty("block_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.blockchain.BlockResponse.verify(message.block_response);
                        if (error)
                            return "block_response." + error;
                    }
                }
                if (message.status_request != null && message.hasOwnProperty("status_request")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.blockchain.StatusRequest.verify(message.status_request);
                        if (error)
                            return "status_request." + error;
                    }
                }
                if (message.status_response != null && message.hasOwnProperty("status_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.blockchain.StatusResponse.verify(message.status_response);
                        if (error)
                            return "status_response." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.blockchain.Message
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.blockchain.Message} Message
             */
            Message.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.blockchain.Message)
                    return object;
                let message = new $root.tendermint.blockchain.Message();
                if (object.block_request != null) {
                    if (typeof object.block_request !== "object")
                        throw TypeError(".tendermint.blockchain.Message.block_request: object expected");
                    message.block_request = $root.tendermint.blockchain.BlockRequest.fromObject(object.block_request);
                }
                if (object.no_block_response != null) {
                    if (typeof object.no_block_response !== "object")
                        throw TypeError(".tendermint.blockchain.Message.no_block_response: object expected");
                    message.no_block_response = $root.tendermint.blockchain.NoBlockResponse.fromObject(object.no_block_response);
                }
                if (object.block_response != null) {
                    if (typeof object.block_response !== "object")
                        throw TypeError(".tendermint.blockchain.Message.block_response: object expected");
                    message.block_response = $root.tendermint.blockchain.BlockResponse.fromObject(object.block_response);
                }
                if (object.status_request != null) {
                    if (typeof object.status_request !== "object")
                        throw TypeError(".tendermint.blockchain.Message.status_request: object expected");
                    message.status_request = $root.tendermint.blockchain.StatusRequest.fromObject(object.status_request);
                }
                if (object.status_response != null) {
                    if (typeof object.status_response !== "object")
                        throw TypeError(".tendermint.blockchain.Message.status_response: object expected");
                    message.status_response = $root.tendermint.blockchain.StatusResponse.fromObject(object.status_response);
                }
                return message;
            };

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.blockchain.Message
             * @static
             * @param {tendermint.blockchain.Message} message Message
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Message.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.block_request != null && message.hasOwnProperty("block_request")) {
                    object.block_request = $root.tendermint.blockchain.BlockRequest.toObject(message.block_request, options);
                    if (options.oneofs)
                        object.sum = "block_request";
                }
                if (message.no_block_response != null && message.hasOwnProperty("no_block_response")) {
                    object.no_block_response = $root.tendermint.blockchain.NoBlockResponse.toObject(message.no_block_response, options);
                    if (options.oneofs)
                        object.sum = "no_block_response";
                }
                if (message.block_response != null && message.hasOwnProperty("block_response")) {
                    object.block_response = $root.tendermint.blockchain.BlockResponse.toObject(message.block_response, options);
                    if (options.oneofs)
                        object.sum = "block_response";
                }
                if (message.status_request != null && message.hasOwnProperty("status_request")) {
                    object.status_request = $root.tendermint.blockchain.StatusRequest.toObject(message.status_request, options);
                    if (options.oneofs)
                        object.sum = "status_request";
                }
                if (message.status_response != null && message.hasOwnProperty("status_response")) {
                    object.status_response = $root.tendermint.blockchain.StatusResponse.toObject(message.status_response, options);
                    if (options.oneofs)
                        object.sum = "status_response";
                }
                return object;
            };

            /**
             * Converts this Message to JSON.
             * @function toJSON
             * @memberof tendermint.blockchain.Message
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Message.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Message;
        })();

        return blockchain;
    })();

    tendermint.consensus = (function() {

        /**
         * Namespace consensus.
         * @memberof tendermint
         * @namespace
         */
        const consensus = {};

        consensus.NewRoundStep = (function() {

            /**
             * Properties of a NewRoundStep.
             * @memberof tendermint.consensus
             * @interface INewRoundStep
             * @property {number|null} [height] NewRoundStep height
             * @property {number|null} [round] NewRoundStep round
             * @property {number|null} [step] NewRoundStep step
             * @property {number|null} [seconds_since_start_time] NewRoundStep seconds_since_start_time
             * @property {number|null} [last_commit_round] NewRoundStep last_commit_round
             */

            /**
             * Constructs a new NewRoundStep.
             * @memberof tendermint.consensus
             * @classdesc Represents a NewRoundStep.
             * @implements INewRoundStep
             * @constructor
             * @param {tendermint.consensus.INewRoundStep=} [properties] Properties to set
             */
            function NewRoundStep(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NewRoundStep height.
             * @member {number} height
             * @memberof tendermint.consensus.NewRoundStep
             * @instance
             */
            NewRoundStep.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * NewRoundStep round.
             * @member {number} round
             * @memberof tendermint.consensus.NewRoundStep
             * @instance
             */
            NewRoundStep.prototype.round = 0;

            /**
             * NewRoundStep step.
             * @member {number} step
             * @memberof tendermint.consensus.NewRoundStep
             * @instance
             */
            NewRoundStep.prototype.step = 0;

            /**
             * NewRoundStep seconds_since_start_time.
             * @member {number} seconds_since_start_time
             * @memberof tendermint.consensus.NewRoundStep
             * @instance
             */
            NewRoundStep.prototype.seconds_since_start_time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * NewRoundStep last_commit_round.
             * @member {number} last_commit_round
             * @memberof tendermint.consensus.NewRoundStep
             * @instance
             */
            NewRoundStep.prototype.last_commit_round = 0;

            /**
             * Encodes the specified NewRoundStep message. Does not implicitly {@link tendermint.consensus.NewRoundStep.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.NewRoundStep
             * @static
             * @param {tendermint.consensus.INewRoundStep} message NewRoundStep message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewRoundStep.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.step != null && Object.hasOwnProperty.call(message, "step"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.step);
                if (message.seconds_since_start_time != null && Object.hasOwnProperty.call(message, "seconds_since_start_time"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.seconds_since_start_time);
                if (message.last_commit_round != null && Object.hasOwnProperty.call(message, "last_commit_round"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.last_commit_round);
                return writer;
            };

            /**
             * Encodes the specified NewRoundStep message, length delimited. Does not implicitly {@link tendermint.consensus.NewRoundStep.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.NewRoundStep
             * @static
             * @param {tendermint.consensus.INewRoundStep} message NewRoundStep message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewRoundStep.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NewRoundStep message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.NewRoundStep
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.NewRoundStep} NewRoundStep
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewRoundStep.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.NewRoundStep();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.step = reader.uint32();
                        break;
                    case 4:
                        message.seconds_since_start_time = reader.int64();
                        break;
                    case 5:
                        message.last_commit_round = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NewRoundStep message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.NewRoundStep
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.NewRoundStep} NewRoundStep
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewRoundStep.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NewRoundStep message.
             * @function verify
             * @memberof tendermint.consensus.NewRoundStep
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NewRoundStep.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.step != null && message.hasOwnProperty("step"))
                    if (!$util.isInteger(message.step))
                        return "step: integer expected";
                if (message.seconds_since_start_time != null && message.hasOwnProperty("seconds_since_start_time"))
                    if (!$util.isInteger(message.seconds_since_start_time) && !(message.seconds_since_start_time && $util.isInteger(message.seconds_since_start_time.low) && $util.isInteger(message.seconds_since_start_time.high)))
                        return "seconds_since_start_time: integer|Long expected";
                if (message.last_commit_round != null && message.hasOwnProperty("last_commit_round"))
                    if (!$util.isInteger(message.last_commit_round))
                        return "last_commit_round: integer expected";
                return null;
            };

            /**
             * Creates a NewRoundStep message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.NewRoundStep
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.NewRoundStep} NewRoundStep
             */
            NewRoundStep.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.NewRoundStep)
                    return object;
                let message = new $root.tendermint.consensus.NewRoundStep();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.step != null)
                    message.step = object.step >>> 0;
                if (object.seconds_since_start_time != null)
                    if ($util.Long)
                        (message.seconds_since_start_time = $util.Long.fromValue(object.seconds_since_start_time)).unsigned = false;
                    else if (typeof object.seconds_since_start_time === "string")
                        message.seconds_since_start_time = parseInt(object.seconds_since_start_time, 10);
                    else if (typeof object.seconds_since_start_time === "number")
                        message.seconds_since_start_time = object.seconds_since_start_time;
                    else if (typeof object.seconds_since_start_time === "object")
                        message.seconds_since_start_time = new $util.LongBits(object.seconds_since_start_time.low >>> 0, object.seconds_since_start_time.high >>> 0).toNumber();
                if (object.last_commit_round != null)
                    message.last_commit_round = object.last_commit_round | 0;
                return message;
            };

            /**
             * Creates a plain object from a NewRoundStep message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.NewRoundStep
             * @static
             * @param {tendermint.consensus.NewRoundStep} message NewRoundStep
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NewRoundStep.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.step = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds_since_start_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds_since_start_time = options.longs === String ? "0" : 0;
                    object.last_commit_round = 0;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.step != null && message.hasOwnProperty("step"))
                    object.step = message.step;
                if (message.seconds_since_start_time != null && message.hasOwnProperty("seconds_since_start_time"))
                    if (typeof message.seconds_since_start_time === "number")
                        object.seconds_since_start_time = options.longs === String ? String(message.seconds_since_start_time) : message.seconds_since_start_time;
                    else
                        object.seconds_since_start_time = options.longs === String ? $util.Long.prototype.toString.call(message.seconds_since_start_time) : options.longs === Number ? new $util.LongBits(message.seconds_since_start_time.low >>> 0, message.seconds_since_start_time.high >>> 0).toNumber() : message.seconds_since_start_time;
                if (message.last_commit_round != null && message.hasOwnProperty("last_commit_round"))
                    object.last_commit_round = message.last_commit_round;
                return object;
            };

            /**
             * Converts this NewRoundStep to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.NewRoundStep
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NewRoundStep.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return NewRoundStep;
        })();

        consensus.NewValidBlock = (function() {

            /**
             * Properties of a NewValidBlock.
             * @memberof tendermint.consensus
             * @interface INewValidBlock
             * @property {number|null} [height] NewValidBlock height
             * @property {number|null} [round] NewValidBlock round
             * @property {tendermint.types.IPartSetHeader|null} [block_part_set_header] NewValidBlock block_part_set_header
             * @property {tendermint.libs.bits.IBitArray|null} [block_parts] NewValidBlock block_parts
             * @property {boolean|null} [is_commit] NewValidBlock is_commit
             */

            /**
             * Constructs a new NewValidBlock.
             * @memberof tendermint.consensus
             * @classdesc Represents a NewValidBlock.
             * @implements INewValidBlock
             * @constructor
             * @param {tendermint.consensus.INewValidBlock=} [properties] Properties to set
             */
            function NewValidBlock(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NewValidBlock height.
             * @member {number} height
             * @memberof tendermint.consensus.NewValidBlock
             * @instance
             */
            NewValidBlock.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * NewValidBlock round.
             * @member {number} round
             * @memberof tendermint.consensus.NewValidBlock
             * @instance
             */
            NewValidBlock.prototype.round = 0;

            /**
             * NewValidBlock block_part_set_header.
             * @member {tendermint.types.IPartSetHeader|null|undefined} block_part_set_header
             * @memberof tendermint.consensus.NewValidBlock
             * @instance
             */
            NewValidBlock.prototype.block_part_set_header = null;

            /**
             * NewValidBlock block_parts.
             * @member {tendermint.libs.bits.IBitArray|null|undefined} block_parts
             * @memberof tendermint.consensus.NewValidBlock
             * @instance
             */
            NewValidBlock.prototype.block_parts = null;

            /**
             * NewValidBlock is_commit.
             * @member {boolean} is_commit
             * @memberof tendermint.consensus.NewValidBlock
             * @instance
             */
            NewValidBlock.prototype.is_commit = false;

            /**
             * Encodes the specified NewValidBlock message. Does not implicitly {@link tendermint.consensus.NewValidBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.NewValidBlock
             * @static
             * @param {tendermint.consensus.INewValidBlock} message NewValidBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewValidBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.block_part_set_header != null && Object.hasOwnProperty.call(message, "block_part_set_header"))
                    $root.tendermint.types.PartSetHeader.encode(message.block_part_set_header, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.block_parts != null && Object.hasOwnProperty.call(message, "block_parts"))
                    $root.tendermint.libs.bits.BitArray.encode(message.block_parts, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.is_commit != null && Object.hasOwnProperty.call(message, "is_commit"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_commit);
                return writer;
            };

            /**
             * Encodes the specified NewValidBlock message, length delimited. Does not implicitly {@link tendermint.consensus.NewValidBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.NewValidBlock
             * @static
             * @param {tendermint.consensus.INewValidBlock} message NewValidBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewValidBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NewValidBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.NewValidBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.NewValidBlock} NewValidBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewValidBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.NewValidBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.block_part_set_header = $root.tendermint.types.PartSetHeader.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.block_parts = $root.tendermint.libs.bits.BitArray.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.is_commit = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NewValidBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.NewValidBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.NewValidBlock} NewValidBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewValidBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NewValidBlock message.
             * @function verify
             * @memberof tendermint.consensus.NewValidBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NewValidBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.block_part_set_header != null && message.hasOwnProperty("block_part_set_header")) {
                    let error = $root.tendermint.types.PartSetHeader.verify(message.block_part_set_header);
                    if (error)
                        return "block_part_set_header." + error;
                }
                if (message.block_parts != null && message.hasOwnProperty("block_parts")) {
                    let error = $root.tendermint.libs.bits.BitArray.verify(message.block_parts);
                    if (error)
                        return "block_parts." + error;
                }
                if (message.is_commit != null && message.hasOwnProperty("is_commit"))
                    if (typeof message.is_commit !== "boolean")
                        return "is_commit: boolean expected";
                return null;
            };

            /**
             * Creates a NewValidBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.NewValidBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.NewValidBlock} NewValidBlock
             */
            NewValidBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.NewValidBlock)
                    return object;
                let message = new $root.tendermint.consensus.NewValidBlock();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.block_part_set_header != null) {
                    if (typeof object.block_part_set_header !== "object")
                        throw TypeError(".tendermint.consensus.NewValidBlock.block_part_set_header: object expected");
                    message.block_part_set_header = $root.tendermint.types.PartSetHeader.fromObject(object.block_part_set_header);
                }
                if (object.block_parts != null) {
                    if (typeof object.block_parts !== "object")
                        throw TypeError(".tendermint.consensus.NewValidBlock.block_parts: object expected");
                    message.block_parts = $root.tendermint.libs.bits.BitArray.fromObject(object.block_parts);
                }
                if (object.is_commit != null)
                    message.is_commit = Boolean(object.is_commit);
                return message;
            };

            /**
             * Creates a plain object from a NewValidBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.NewValidBlock
             * @static
             * @param {tendermint.consensus.NewValidBlock} message NewValidBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NewValidBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.block_part_set_header = null;
                    object.block_parts = null;
                    object.is_commit = false;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.block_part_set_header != null && message.hasOwnProperty("block_part_set_header"))
                    object.block_part_set_header = $root.tendermint.types.PartSetHeader.toObject(message.block_part_set_header, options);
                if (message.block_parts != null && message.hasOwnProperty("block_parts"))
                    object.block_parts = $root.tendermint.libs.bits.BitArray.toObject(message.block_parts, options);
                if (message.is_commit != null && message.hasOwnProperty("is_commit"))
                    object.is_commit = message.is_commit;
                return object;
            };

            /**
             * Converts this NewValidBlock to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.NewValidBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NewValidBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return NewValidBlock;
        })();

        consensus.Proposal = (function() {

            /**
             * Properties of a Proposal.
             * @memberof tendermint.consensus
             * @interface IProposal
             * @property {tendermint.types.IProposal|null} [proposal] Proposal proposal
             */

            /**
             * Constructs a new Proposal.
             * @memberof tendermint.consensus
             * @classdesc Represents a Proposal.
             * @implements IProposal
             * @constructor
             * @param {tendermint.consensus.IProposal=} [properties] Properties to set
             */
            function Proposal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Proposal proposal.
             * @member {tendermint.types.IProposal|null|undefined} proposal
             * @memberof tendermint.consensus.Proposal
             * @instance
             */
            Proposal.prototype.proposal = null;

            /**
             * Encodes the specified Proposal message. Does not implicitly {@link tendermint.consensus.Proposal.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.Proposal
             * @static
             * @param {tendermint.consensus.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.proposal != null && Object.hasOwnProperty.call(message, "proposal"))
                    $root.tendermint.types.Proposal.encode(message.proposal, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Proposal message, length delimited. Does not implicitly {@link tendermint.consensus.Proposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.Proposal
             * @static
             * @param {tendermint.consensus.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.Proposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.proposal = $root.tendermint.types.Proposal.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Proposal message.
             * @function verify
             * @memberof tendermint.consensus.Proposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Proposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.proposal != null && message.hasOwnProperty("proposal")) {
                    let error = $root.tendermint.types.Proposal.verify(message.proposal);
                    if (error)
                        return "proposal." + error;
                }
                return null;
            };

            /**
             * Creates a Proposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.Proposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.Proposal} Proposal
             */
            Proposal.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.Proposal)
                    return object;
                let message = new $root.tendermint.consensus.Proposal();
                if (object.proposal != null) {
                    if (typeof object.proposal !== "object")
                        throw TypeError(".tendermint.consensus.Proposal.proposal: object expected");
                    message.proposal = $root.tendermint.types.Proposal.fromObject(object.proposal);
                }
                return message;
            };

            /**
             * Creates a plain object from a Proposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.Proposal
             * @static
             * @param {tendermint.consensus.Proposal} message Proposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Proposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.proposal = null;
                if (message.proposal != null && message.hasOwnProperty("proposal"))
                    object.proposal = $root.tendermint.types.Proposal.toObject(message.proposal, options);
                return object;
            };

            /**
             * Converts this Proposal to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.Proposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Proposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Proposal;
        })();

        consensus.ProposalPOL = (function() {

            /**
             * Properties of a ProposalPOL.
             * @memberof tendermint.consensus
             * @interface IProposalPOL
             * @property {number|null} [height] ProposalPOL height
             * @property {number|null} [proposal_pol_round] ProposalPOL proposal_pol_round
             * @property {tendermint.libs.bits.IBitArray|null} [proposal_pol] ProposalPOL proposal_pol
             */

            /**
             * Constructs a new ProposalPOL.
             * @memberof tendermint.consensus
             * @classdesc Represents a ProposalPOL.
             * @implements IProposalPOL
             * @constructor
             * @param {tendermint.consensus.IProposalPOL=} [properties] Properties to set
             */
            function ProposalPOL(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProposalPOL height.
             * @member {number} height
             * @memberof tendermint.consensus.ProposalPOL
             * @instance
             */
            ProposalPOL.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ProposalPOL proposal_pol_round.
             * @member {number} proposal_pol_round
             * @memberof tendermint.consensus.ProposalPOL
             * @instance
             */
            ProposalPOL.prototype.proposal_pol_round = 0;

            /**
             * ProposalPOL proposal_pol.
             * @member {tendermint.libs.bits.IBitArray|null|undefined} proposal_pol
             * @memberof tendermint.consensus.ProposalPOL
             * @instance
             */
            ProposalPOL.prototype.proposal_pol = null;

            /**
             * Encodes the specified ProposalPOL message. Does not implicitly {@link tendermint.consensus.ProposalPOL.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.ProposalPOL
             * @static
             * @param {tendermint.consensus.IProposalPOL} message ProposalPOL message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProposalPOL.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.proposal_pol_round != null && Object.hasOwnProperty.call(message, "proposal_pol_round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.proposal_pol_round);
                if (message.proposal_pol != null && Object.hasOwnProperty.call(message, "proposal_pol"))
                    $root.tendermint.libs.bits.BitArray.encode(message.proposal_pol, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ProposalPOL message, length delimited. Does not implicitly {@link tendermint.consensus.ProposalPOL.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.ProposalPOL
             * @static
             * @param {tendermint.consensus.IProposalPOL} message ProposalPOL message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProposalPOL.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProposalPOL message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.ProposalPOL
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.ProposalPOL} ProposalPOL
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProposalPOL.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.ProposalPOL();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.proposal_pol_round = reader.int32();
                        break;
                    case 3:
                        message.proposal_pol = $root.tendermint.libs.bits.BitArray.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProposalPOL message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.ProposalPOL
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.ProposalPOL} ProposalPOL
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProposalPOL.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProposalPOL message.
             * @function verify
             * @memberof tendermint.consensus.ProposalPOL
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProposalPOL.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.proposal_pol_round != null && message.hasOwnProperty("proposal_pol_round"))
                    if (!$util.isInteger(message.proposal_pol_round))
                        return "proposal_pol_round: integer expected";
                if (message.proposal_pol != null && message.hasOwnProperty("proposal_pol")) {
                    let error = $root.tendermint.libs.bits.BitArray.verify(message.proposal_pol);
                    if (error)
                        return "proposal_pol." + error;
                }
                return null;
            };

            /**
             * Creates a ProposalPOL message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.ProposalPOL
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.ProposalPOL} ProposalPOL
             */
            ProposalPOL.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.ProposalPOL)
                    return object;
                let message = new $root.tendermint.consensus.ProposalPOL();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.proposal_pol_round != null)
                    message.proposal_pol_round = object.proposal_pol_round | 0;
                if (object.proposal_pol != null) {
                    if (typeof object.proposal_pol !== "object")
                        throw TypeError(".tendermint.consensus.ProposalPOL.proposal_pol: object expected");
                    message.proposal_pol = $root.tendermint.libs.bits.BitArray.fromObject(object.proposal_pol);
                }
                return message;
            };

            /**
             * Creates a plain object from a ProposalPOL message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.ProposalPOL
             * @static
             * @param {tendermint.consensus.ProposalPOL} message ProposalPOL
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProposalPOL.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.proposal_pol_round = 0;
                    object.proposal_pol = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.proposal_pol_round != null && message.hasOwnProperty("proposal_pol_round"))
                    object.proposal_pol_round = message.proposal_pol_round;
                if (message.proposal_pol != null && message.hasOwnProperty("proposal_pol"))
                    object.proposal_pol = $root.tendermint.libs.bits.BitArray.toObject(message.proposal_pol, options);
                return object;
            };

            /**
             * Converts this ProposalPOL to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.ProposalPOL
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProposalPOL.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProposalPOL;
        })();

        consensus.BlockPart = (function() {

            /**
             * Properties of a BlockPart.
             * @memberof tendermint.consensus
             * @interface IBlockPart
             * @property {number|null} [height] BlockPart height
             * @property {number|null} [round] BlockPart round
             * @property {tendermint.types.IPart|null} [part] BlockPart part
             */

            /**
             * Constructs a new BlockPart.
             * @memberof tendermint.consensus
             * @classdesc Represents a BlockPart.
             * @implements IBlockPart
             * @constructor
             * @param {tendermint.consensus.IBlockPart=} [properties] Properties to set
             */
            function BlockPart(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockPart height.
             * @member {number} height
             * @memberof tendermint.consensus.BlockPart
             * @instance
             */
            BlockPart.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockPart round.
             * @member {number} round
             * @memberof tendermint.consensus.BlockPart
             * @instance
             */
            BlockPart.prototype.round = 0;

            /**
             * BlockPart part.
             * @member {tendermint.types.IPart|null|undefined} part
             * @memberof tendermint.consensus.BlockPart
             * @instance
             */
            BlockPart.prototype.part = null;

            /**
             * Encodes the specified BlockPart message. Does not implicitly {@link tendermint.consensus.BlockPart.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.BlockPart
             * @static
             * @param {tendermint.consensus.IBlockPart} message BlockPart message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockPart.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.part != null && Object.hasOwnProperty.call(message, "part"))
                    $root.tendermint.types.Part.encode(message.part, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockPart message, length delimited. Does not implicitly {@link tendermint.consensus.BlockPart.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.BlockPart
             * @static
             * @param {tendermint.consensus.IBlockPart} message BlockPart message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockPart.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockPart message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.BlockPart
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.BlockPart} BlockPart
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockPart.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.BlockPart();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.part = $root.tendermint.types.Part.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockPart message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.BlockPart
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.BlockPart} BlockPart
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockPart.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockPart message.
             * @function verify
             * @memberof tendermint.consensus.BlockPart
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockPart.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.part != null && message.hasOwnProperty("part")) {
                    let error = $root.tendermint.types.Part.verify(message.part);
                    if (error)
                        return "part." + error;
                }
                return null;
            };

            /**
             * Creates a BlockPart message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.BlockPart
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.BlockPart} BlockPart
             */
            BlockPart.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.BlockPart)
                    return object;
                let message = new $root.tendermint.consensus.BlockPart();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.part != null) {
                    if (typeof object.part !== "object")
                        throw TypeError(".tendermint.consensus.BlockPart.part: object expected");
                    message.part = $root.tendermint.types.Part.fromObject(object.part);
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockPart message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.BlockPart
             * @static
             * @param {tendermint.consensus.BlockPart} message BlockPart
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockPart.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.part = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.part != null && message.hasOwnProperty("part"))
                    object.part = $root.tendermint.types.Part.toObject(message.part, options);
                return object;
            };

            /**
             * Converts this BlockPart to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.BlockPart
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockPart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockPart;
        })();

        consensus.Vote = (function() {

            /**
             * Properties of a Vote.
             * @memberof tendermint.consensus
             * @interface IVote
             * @property {tendermint.types.IVote|null} [vote] Vote vote
             */

            /**
             * Constructs a new Vote.
             * @memberof tendermint.consensus
             * @classdesc Represents a Vote.
             * @implements IVote
             * @constructor
             * @param {tendermint.consensus.IVote=} [properties] Properties to set
             */
            function Vote(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Vote vote.
             * @member {tendermint.types.IVote|null|undefined} vote
             * @memberof tendermint.consensus.Vote
             * @instance
             */
            Vote.prototype.vote = null;

            /**
             * Encodes the specified Vote message. Does not implicitly {@link tendermint.consensus.Vote.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.Vote
             * @static
             * @param {tendermint.consensus.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                    $root.tendermint.types.Vote.encode(message.vote, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Vote message, length delimited. Does not implicitly {@link tendermint.consensus.Vote.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.Vote
             * @static
             * @param {tendermint.consensus.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Vote message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.Vote();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vote = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Vote message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Vote message.
             * @function verify
             * @memberof tendermint.consensus.Vote
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Vote.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote);
                    if (error)
                        return "vote." + error;
                }
                return null;
            };

            /**
             * Creates a Vote message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.Vote
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.Vote} Vote
             */
            Vote.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.Vote)
                    return object;
                let message = new $root.tendermint.consensus.Vote();
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".tendermint.consensus.Vote.vote: object expected");
                    message.vote = $root.tendermint.types.Vote.fromObject(object.vote);
                }
                return message;
            };

            /**
             * Creates a plain object from a Vote message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.Vote
             * @static
             * @param {tendermint.consensus.Vote} message Vote
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Vote.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.vote = null;
                if (message.vote != null && message.hasOwnProperty("vote"))
                    object.vote = $root.tendermint.types.Vote.toObject(message.vote, options);
                return object;
            };

            /**
             * Converts this Vote to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.Vote
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Vote.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Vote;
        })();

        consensus.HasVote = (function() {

            /**
             * Properties of a HasVote.
             * @memberof tendermint.consensus
             * @interface IHasVote
             * @property {number|null} [height] HasVote height
             * @property {number|null} [round] HasVote round
             * @property {tendermint.types.SignedMsgType|null} [type] HasVote type
             * @property {number|null} [index] HasVote index
             */

            /**
             * Constructs a new HasVote.
             * @memberof tendermint.consensus
             * @classdesc Represents a HasVote.
             * @implements IHasVote
             * @constructor
             * @param {tendermint.consensus.IHasVote=} [properties] Properties to set
             */
            function HasVote(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HasVote height.
             * @member {number} height
             * @memberof tendermint.consensus.HasVote
             * @instance
             */
            HasVote.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HasVote round.
             * @member {number} round
             * @memberof tendermint.consensus.HasVote
             * @instance
             */
            HasVote.prototype.round = 0;

            /**
             * HasVote type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.consensus.HasVote
             * @instance
             */
            HasVote.prototype.type = 0;

            /**
             * HasVote index.
             * @member {number} index
             * @memberof tendermint.consensus.HasVote
             * @instance
             */
            HasVote.prototype.index = 0;

            /**
             * Encodes the specified HasVote message. Does not implicitly {@link tendermint.consensus.HasVote.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.HasVote
             * @static
             * @param {tendermint.consensus.IHasVote} message HasVote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HasVote.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.index);
                return writer;
            };

            /**
             * Encodes the specified HasVote message, length delimited. Does not implicitly {@link tendermint.consensus.HasVote.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.HasVote
             * @static
             * @param {tendermint.consensus.IHasVote} message HasVote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HasVote.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HasVote message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.HasVote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.HasVote} HasVote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HasVote.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.HasVote();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.type = reader.int32();
                        break;
                    case 4:
                        message.index = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HasVote message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.HasVote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.HasVote} HasVote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HasVote.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HasVote message.
             * @function verify
             * @memberof tendermint.consensus.HasVote
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HasVote.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                return null;
            };

            /**
             * Creates a HasVote message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.HasVote
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.HasVote} HasVote
             */
            HasVote.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.HasVote)
                    return object;
                let message = new $root.tendermint.consensus.HasVote();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.index != null)
                    message.index = object.index | 0;
                return message;
            };

            /**
             * Creates a plain object from a HasVote message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.HasVote
             * @static
             * @param {tendermint.consensus.HasVote} message HasVote
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HasVote.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    object.index = 0;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                return object;
            };

            /**
             * Converts this HasVote to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.HasVote
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HasVote.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HasVote;
        })();

        consensus.VoteSetMaj23 = (function() {

            /**
             * Properties of a VoteSetMaj23.
             * @memberof tendermint.consensus
             * @interface IVoteSetMaj23
             * @property {number|null} [height] VoteSetMaj23 height
             * @property {number|null} [round] VoteSetMaj23 round
             * @property {tendermint.types.SignedMsgType|null} [type] VoteSetMaj23 type
             * @property {tendermint.types.IBlockID|null} [block_id] VoteSetMaj23 block_id
             */

            /**
             * Constructs a new VoteSetMaj23.
             * @memberof tendermint.consensus
             * @classdesc Represents a VoteSetMaj23.
             * @implements IVoteSetMaj23
             * @constructor
             * @param {tendermint.consensus.IVoteSetMaj23=} [properties] Properties to set
             */
            function VoteSetMaj23(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VoteSetMaj23 height.
             * @member {number} height
             * @memberof tendermint.consensus.VoteSetMaj23
             * @instance
             */
            VoteSetMaj23.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * VoteSetMaj23 round.
             * @member {number} round
             * @memberof tendermint.consensus.VoteSetMaj23
             * @instance
             */
            VoteSetMaj23.prototype.round = 0;

            /**
             * VoteSetMaj23 type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.consensus.VoteSetMaj23
             * @instance
             */
            VoteSetMaj23.prototype.type = 0;

            /**
             * VoteSetMaj23 block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.consensus.VoteSetMaj23
             * @instance
             */
            VoteSetMaj23.prototype.block_id = null;

            /**
             * Encodes the specified VoteSetMaj23 message. Does not implicitly {@link tendermint.consensus.VoteSetMaj23.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.VoteSetMaj23
             * @static
             * @param {tendermint.consensus.IVoteSetMaj23} message VoteSetMaj23 message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteSetMaj23.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified VoteSetMaj23 message, length delimited. Does not implicitly {@link tendermint.consensus.VoteSetMaj23.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.VoteSetMaj23
             * @static
             * @param {tendermint.consensus.IVoteSetMaj23} message VoteSetMaj23 message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteSetMaj23.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VoteSetMaj23 message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.VoteSetMaj23
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.VoteSetMaj23} VoteSetMaj23
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteSetMaj23.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.VoteSetMaj23();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.type = reader.int32();
                        break;
                    case 4:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VoteSetMaj23 message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.VoteSetMaj23
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.VoteSetMaj23} VoteSetMaj23
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteSetMaj23.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VoteSetMaj23 message.
             * @function verify
             * @memberof tendermint.consensus.VoteSetMaj23
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteSetMaj23.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                return null;
            };

            /**
             * Creates a VoteSetMaj23 message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.VoteSetMaj23
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.VoteSetMaj23} VoteSetMaj23
             */
            VoteSetMaj23.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.VoteSetMaj23)
                    return object;
                let message = new $root.tendermint.consensus.VoteSetMaj23();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.consensus.VoteSetMaj23.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                return message;
            };

            /**
             * Creates a plain object from a VoteSetMaj23 message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.VoteSetMaj23
             * @static
             * @param {tendermint.consensus.VoteSetMaj23} message VoteSetMaj23
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteSetMaj23.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    object.block_id = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                return object;
            };

            /**
             * Converts this VoteSetMaj23 to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.VoteSetMaj23
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteSetMaj23.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VoteSetMaj23;
        })();

        consensus.VoteSetBits = (function() {

            /**
             * Properties of a VoteSetBits.
             * @memberof tendermint.consensus
             * @interface IVoteSetBits
             * @property {number|null} [height] VoteSetBits height
             * @property {number|null} [round] VoteSetBits round
             * @property {tendermint.types.SignedMsgType|null} [type] VoteSetBits type
             * @property {tendermint.types.IBlockID|null} [block_id] VoteSetBits block_id
             * @property {tendermint.libs.bits.IBitArray|null} [votes] VoteSetBits votes
             */

            /**
             * Constructs a new VoteSetBits.
             * @memberof tendermint.consensus
             * @classdesc Represents a VoteSetBits.
             * @implements IVoteSetBits
             * @constructor
             * @param {tendermint.consensus.IVoteSetBits=} [properties] Properties to set
             */
            function VoteSetBits(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VoteSetBits height.
             * @member {number} height
             * @memberof tendermint.consensus.VoteSetBits
             * @instance
             */
            VoteSetBits.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * VoteSetBits round.
             * @member {number} round
             * @memberof tendermint.consensus.VoteSetBits
             * @instance
             */
            VoteSetBits.prototype.round = 0;

            /**
             * VoteSetBits type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.consensus.VoteSetBits
             * @instance
             */
            VoteSetBits.prototype.type = 0;

            /**
             * VoteSetBits block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.consensus.VoteSetBits
             * @instance
             */
            VoteSetBits.prototype.block_id = null;

            /**
             * VoteSetBits votes.
             * @member {tendermint.libs.bits.IBitArray|null|undefined} votes
             * @memberof tendermint.consensus.VoteSetBits
             * @instance
             */
            VoteSetBits.prototype.votes = null;

            /**
             * Encodes the specified VoteSetBits message. Does not implicitly {@link tendermint.consensus.VoteSetBits.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.VoteSetBits
             * @static
             * @param {tendermint.consensus.IVoteSetBits} message VoteSetBits message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteSetBits.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.votes != null && Object.hasOwnProperty.call(message, "votes"))
                    $root.tendermint.libs.bits.BitArray.encode(message.votes, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified VoteSetBits message, length delimited. Does not implicitly {@link tendermint.consensus.VoteSetBits.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.VoteSetBits
             * @static
             * @param {tendermint.consensus.IVoteSetBits} message VoteSetBits message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteSetBits.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VoteSetBits message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.VoteSetBits
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.VoteSetBits} VoteSetBits
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteSetBits.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.VoteSetBits();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.type = reader.int32();
                        break;
                    case 4:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.votes = $root.tendermint.libs.bits.BitArray.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VoteSetBits message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.VoteSetBits
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.VoteSetBits} VoteSetBits
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteSetBits.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VoteSetBits message.
             * @function verify
             * @memberof tendermint.consensus.VoteSetBits
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteSetBits.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.votes != null && message.hasOwnProperty("votes")) {
                    let error = $root.tendermint.libs.bits.BitArray.verify(message.votes);
                    if (error)
                        return "votes." + error;
                }
                return null;
            };

            /**
             * Creates a VoteSetBits message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.VoteSetBits
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.VoteSetBits} VoteSetBits
             */
            VoteSetBits.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.VoteSetBits)
                    return object;
                let message = new $root.tendermint.consensus.VoteSetBits();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.consensus.VoteSetBits.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.votes != null) {
                    if (typeof object.votes !== "object")
                        throw TypeError(".tendermint.consensus.VoteSetBits.votes: object expected");
                    message.votes = $root.tendermint.libs.bits.BitArray.fromObject(object.votes);
                }
                return message;
            };

            /**
             * Creates a plain object from a VoteSetBits message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.VoteSetBits
             * @static
             * @param {tendermint.consensus.VoteSetBits} message VoteSetBits
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteSetBits.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    object.block_id = null;
                    object.votes = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.votes != null && message.hasOwnProperty("votes"))
                    object.votes = $root.tendermint.libs.bits.BitArray.toObject(message.votes, options);
                return object;
            };

            /**
             * Converts this VoteSetBits to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.VoteSetBits
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteSetBits.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VoteSetBits;
        })();

        consensus.Message = (function() {

            /**
             * Properties of a Message.
             * @memberof tendermint.consensus
             * @interface IMessage
             * @property {tendermint.consensus.INewRoundStep|null} [new_round_step] Message new_round_step
             * @property {tendermint.consensus.INewValidBlock|null} [new_valid_block] Message new_valid_block
             * @property {tendermint.consensus.IProposal|null} [proposal] Message proposal
             * @property {tendermint.consensus.IProposalPOL|null} [proposal_pol] Message proposal_pol
             * @property {tendermint.consensus.IBlockPart|null} [block_part] Message block_part
             * @property {tendermint.consensus.IVote|null} [vote] Message vote
             * @property {tendermint.consensus.IHasVote|null} [has_vote] Message has_vote
             * @property {tendermint.consensus.IVoteSetMaj23|null} [vote_set_maj23] Message vote_set_maj23
             * @property {tendermint.consensus.IVoteSetBits|null} [vote_set_bits] Message vote_set_bits
             */

            /**
             * Constructs a new Message.
             * @memberof tendermint.consensus
             * @classdesc Represents a Message.
             * @implements IMessage
             * @constructor
             * @param {tendermint.consensus.IMessage=} [properties] Properties to set
             */
            function Message(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Message new_round_step.
             * @member {tendermint.consensus.INewRoundStep|null|undefined} new_round_step
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.new_round_step = null;

            /**
             * Message new_valid_block.
             * @member {tendermint.consensus.INewValidBlock|null|undefined} new_valid_block
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.new_valid_block = null;

            /**
             * Message proposal.
             * @member {tendermint.consensus.IProposal|null|undefined} proposal
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.proposal = null;

            /**
             * Message proposal_pol.
             * @member {tendermint.consensus.IProposalPOL|null|undefined} proposal_pol
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.proposal_pol = null;

            /**
             * Message block_part.
             * @member {tendermint.consensus.IBlockPart|null|undefined} block_part
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.block_part = null;

            /**
             * Message vote.
             * @member {tendermint.consensus.IVote|null|undefined} vote
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.vote = null;

            /**
             * Message has_vote.
             * @member {tendermint.consensus.IHasVote|null|undefined} has_vote
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.has_vote = null;

            /**
             * Message vote_set_maj23.
             * @member {tendermint.consensus.IVoteSetMaj23|null|undefined} vote_set_maj23
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.vote_set_maj23 = null;

            /**
             * Message vote_set_bits.
             * @member {tendermint.consensus.IVoteSetBits|null|undefined} vote_set_bits
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Message.prototype.vote_set_bits = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Message sum.
             * @member {"new_round_step"|"new_valid_block"|"proposal"|"proposal_pol"|"block_part"|"vote"|"has_vote"|"vote_set_maj23"|"vote_set_bits"|undefined} sum
             * @memberof tendermint.consensus.Message
             * @instance
             */
            Object.defineProperty(Message.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["new_round_step", "new_valid_block", "proposal", "proposal_pol", "block_part", "vote", "has_vote", "vote_set_maj23", "vote_set_bits"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Message message. Does not implicitly {@link tendermint.consensus.Message.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.Message
             * @static
             * @param {tendermint.consensus.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.new_round_step != null && Object.hasOwnProperty.call(message, "new_round_step"))
                    $root.tendermint.consensus.NewRoundStep.encode(message.new_round_step, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.new_valid_block != null && Object.hasOwnProperty.call(message, "new_valid_block"))
                    $root.tendermint.consensus.NewValidBlock.encode(message.new_valid_block, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.proposal != null && Object.hasOwnProperty.call(message, "proposal"))
                    $root.tendermint.consensus.Proposal.encode(message.proposal, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.proposal_pol != null && Object.hasOwnProperty.call(message, "proposal_pol"))
                    $root.tendermint.consensus.ProposalPOL.encode(message.proposal_pol, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.block_part != null && Object.hasOwnProperty.call(message, "block_part"))
                    $root.tendermint.consensus.BlockPart.encode(message.block_part, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                    $root.tendermint.consensus.Vote.encode(message.vote, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.has_vote != null && Object.hasOwnProperty.call(message, "has_vote"))
                    $root.tendermint.consensus.HasVote.encode(message.has_vote, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.vote_set_maj23 != null && Object.hasOwnProperty.call(message, "vote_set_maj23"))
                    $root.tendermint.consensus.VoteSetMaj23.encode(message.vote_set_maj23, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.vote_set_bits != null && Object.hasOwnProperty.call(message, "vote_set_bits"))
                    $root.tendermint.consensus.VoteSetBits.encode(message.vote_set_bits, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link tendermint.consensus.Message.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.Message
             * @static
             * @param {tendermint.consensus.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.Message();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.new_round_step = $root.tendermint.consensus.NewRoundStep.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.new_valid_block = $root.tendermint.consensus.NewValidBlock.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.proposal = $root.tendermint.consensus.Proposal.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.proposal_pol = $root.tendermint.consensus.ProposalPOL.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.block_part = $root.tendermint.consensus.BlockPart.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.vote = $root.tendermint.consensus.Vote.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.has_vote = $root.tendermint.consensus.HasVote.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.vote_set_maj23 = $root.tendermint.consensus.VoteSetMaj23.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.vote_set_bits = $root.tendermint.consensus.VoteSetBits.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Message message.
             * @function verify
             * @memberof tendermint.consensus.Message
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Message.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.new_round_step != null && message.hasOwnProperty("new_round_step")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.NewRoundStep.verify(message.new_round_step);
                        if (error)
                            return "new_round_step." + error;
                    }
                }
                if (message.new_valid_block != null && message.hasOwnProperty("new_valid_block")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.NewValidBlock.verify(message.new_valid_block);
                        if (error)
                            return "new_valid_block." + error;
                    }
                }
                if (message.proposal != null && message.hasOwnProperty("proposal")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.Proposal.verify(message.proposal);
                        if (error)
                            return "proposal." + error;
                    }
                }
                if (message.proposal_pol != null && message.hasOwnProperty("proposal_pol")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.ProposalPOL.verify(message.proposal_pol);
                        if (error)
                            return "proposal_pol." + error;
                    }
                }
                if (message.block_part != null && message.hasOwnProperty("block_part")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.BlockPart.verify(message.block_part);
                        if (error)
                            return "block_part." + error;
                    }
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.Vote.verify(message.vote);
                        if (error)
                            return "vote." + error;
                    }
                }
                if (message.has_vote != null && message.hasOwnProperty("has_vote")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.HasVote.verify(message.has_vote);
                        if (error)
                            return "has_vote." + error;
                    }
                }
                if (message.vote_set_maj23 != null && message.hasOwnProperty("vote_set_maj23")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.VoteSetMaj23.verify(message.vote_set_maj23);
                        if (error)
                            return "vote_set_maj23." + error;
                    }
                }
                if (message.vote_set_bits != null && message.hasOwnProperty("vote_set_bits")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.VoteSetBits.verify(message.vote_set_bits);
                        if (error)
                            return "vote_set_bits." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.Message
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.Message} Message
             */
            Message.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.Message)
                    return object;
                let message = new $root.tendermint.consensus.Message();
                if (object.new_round_step != null) {
                    if (typeof object.new_round_step !== "object")
                        throw TypeError(".tendermint.consensus.Message.new_round_step: object expected");
                    message.new_round_step = $root.tendermint.consensus.NewRoundStep.fromObject(object.new_round_step);
                }
                if (object.new_valid_block != null) {
                    if (typeof object.new_valid_block !== "object")
                        throw TypeError(".tendermint.consensus.Message.new_valid_block: object expected");
                    message.new_valid_block = $root.tendermint.consensus.NewValidBlock.fromObject(object.new_valid_block);
                }
                if (object.proposal != null) {
                    if (typeof object.proposal !== "object")
                        throw TypeError(".tendermint.consensus.Message.proposal: object expected");
                    message.proposal = $root.tendermint.consensus.Proposal.fromObject(object.proposal);
                }
                if (object.proposal_pol != null) {
                    if (typeof object.proposal_pol !== "object")
                        throw TypeError(".tendermint.consensus.Message.proposal_pol: object expected");
                    message.proposal_pol = $root.tendermint.consensus.ProposalPOL.fromObject(object.proposal_pol);
                }
                if (object.block_part != null) {
                    if (typeof object.block_part !== "object")
                        throw TypeError(".tendermint.consensus.Message.block_part: object expected");
                    message.block_part = $root.tendermint.consensus.BlockPart.fromObject(object.block_part);
                }
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".tendermint.consensus.Message.vote: object expected");
                    message.vote = $root.tendermint.consensus.Vote.fromObject(object.vote);
                }
                if (object.has_vote != null) {
                    if (typeof object.has_vote !== "object")
                        throw TypeError(".tendermint.consensus.Message.has_vote: object expected");
                    message.has_vote = $root.tendermint.consensus.HasVote.fromObject(object.has_vote);
                }
                if (object.vote_set_maj23 != null) {
                    if (typeof object.vote_set_maj23 !== "object")
                        throw TypeError(".tendermint.consensus.Message.vote_set_maj23: object expected");
                    message.vote_set_maj23 = $root.tendermint.consensus.VoteSetMaj23.fromObject(object.vote_set_maj23);
                }
                if (object.vote_set_bits != null) {
                    if (typeof object.vote_set_bits !== "object")
                        throw TypeError(".tendermint.consensus.Message.vote_set_bits: object expected");
                    message.vote_set_bits = $root.tendermint.consensus.VoteSetBits.fromObject(object.vote_set_bits);
                }
                return message;
            };

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.Message
             * @static
             * @param {tendermint.consensus.Message} message Message
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Message.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.new_round_step != null && message.hasOwnProperty("new_round_step")) {
                    object.new_round_step = $root.tendermint.consensus.NewRoundStep.toObject(message.new_round_step, options);
                    if (options.oneofs)
                        object.sum = "new_round_step";
                }
                if (message.new_valid_block != null && message.hasOwnProperty("new_valid_block")) {
                    object.new_valid_block = $root.tendermint.consensus.NewValidBlock.toObject(message.new_valid_block, options);
                    if (options.oneofs)
                        object.sum = "new_valid_block";
                }
                if (message.proposal != null && message.hasOwnProperty("proposal")) {
                    object.proposal = $root.tendermint.consensus.Proposal.toObject(message.proposal, options);
                    if (options.oneofs)
                        object.sum = "proposal";
                }
                if (message.proposal_pol != null && message.hasOwnProperty("proposal_pol")) {
                    object.proposal_pol = $root.tendermint.consensus.ProposalPOL.toObject(message.proposal_pol, options);
                    if (options.oneofs)
                        object.sum = "proposal_pol";
                }
                if (message.block_part != null && message.hasOwnProperty("block_part")) {
                    object.block_part = $root.tendermint.consensus.BlockPart.toObject(message.block_part, options);
                    if (options.oneofs)
                        object.sum = "block_part";
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    object.vote = $root.tendermint.consensus.Vote.toObject(message.vote, options);
                    if (options.oneofs)
                        object.sum = "vote";
                }
                if (message.has_vote != null && message.hasOwnProperty("has_vote")) {
                    object.has_vote = $root.tendermint.consensus.HasVote.toObject(message.has_vote, options);
                    if (options.oneofs)
                        object.sum = "has_vote";
                }
                if (message.vote_set_maj23 != null && message.hasOwnProperty("vote_set_maj23")) {
                    object.vote_set_maj23 = $root.tendermint.consensus.VoteSetMaj23.toObject(message.vote_set_maj23, options);
                    if (options.oneofs)
                        object.sum = "vote_set_maj23";
                }
                if (message.vote_set_bits != null && message.hasOwnProperty("vote_set_bits")) {
                    object.vote_set_bits = $root.tendermint.consensus.VoteSetBits.toObject(message.vote_set_bits, options);
                    if (options.oneofs)
                        object.sum = "vote_set_bits";
                }
                return object;
            };

            /**
             * Converts this Message to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.Message
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Message.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Message;
        })();

        consensus.MsgInfo = (function() {

            /**
             * Properties of a MsgInfo.
             * @memberof tendermint.consensus
             * @interface IMsgInfo
             * @property {tendermint.consensus.IMessage|null} [msg] MsgInfo msg
             * @property {string|null} [peer_id] MsgInfo peer_id
             */

            /**
             * Constructs a new MsgInfo.
             * @memberof tendermint.consensus
             * @classdesc Represents a MsgInfo.
             * @implements IMsgInfo
             * @constructor
             * @param {tendermint.consensus.IMsgInfo=} [properties] Properties to set
             */
            function MsgInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgInfo msg.
             * @member {tendermint.consensus.IMessage|null|undefined} msg
             * @memberof tendermint.consensus.MsgInfo
             * @instance
             */
            MsgInfo.prototype.msg = null;

            /**
             * MsgInfo peer_id.
             * @member {string} peer_id
             * @memberof tendermint.consensus.MsgInfo
             * @instance
             */
            MsgInfo.prototype.peer_id = "";

            /**
             * Encodes the specified MsgInfo message. Does not implicitly {@link tendermint.consensus.MsgInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.MsgInfo
             * @static
             * @param {tendermint.consensus.IMsgInfo} message MsgInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                    $root.tendermint.consensus.Message.encode(message.msg, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.peer_id != null && Object.hasOwnProperty.call(message, "peer_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.peer_id);
                return writer;
            };

            /**
             * Encodes the specified MsgInfo message, length delimited. Does not implicitly {@link tendermint.consensus.MsgInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.MsgInfo
             * @static
             * @param {tendermint.consensus.IMsgInfo} message MsgInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.MsgInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.MsgInfo} MsgInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.MsgInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.msg = $root.tendermint.consensus.Message.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.peer_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.MsgInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.MsgInfo} MsgInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgInfo message.
             * @function verify
             * @memberof tendermint.consensus.MsgInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.msg != null && message.hasOwnProperty("msg")) {
                    let error = $root.tendermint.consensus.Message.verify(message.msg);
                    if (error)
                        return "msg." + error;
                }
                if (message.peer_id != null && message.hasOwnProperty("peer_id"))
                    if (!$util.isString(message.peer_id))
                        return "peer_id: string expected";
                return null;
            };

            /**
             * Creates a MsgInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.MsgInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.MsgInfo} MsgInfo
             */
            MsgInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.MsgInfo)
                    return object;
                let message = new $root.tendermint.consensus.MsgInfo();
                if (object.msg != null) {
                    if (typeof object.msg !== "object")
                        throw TypeError(".tendermint.consensus.MsgInfo.msg: object expected");
                    message.msg = $root.tendermint.consensus.Message.fromObject(object.msg);
                }
                if (object.peer_id != null)
                    message.peer_id = String(object.peer_id);
                return message;
            };

            /**
             * Creates a plain object from a MsgInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.MsgInfo
             * @static
             * @param {tendermint.consensus.MsgInfo} message MsgInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.msg = null;
                    object.peer_id = "";
                }
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = $root.tendermint.consensus.Message.toObject(message.msg, options);
                if (message.peer_id != null && message.hasOwnProperty("peer_id"))
                    object.peer_id = message.peer_id;
                return object;
            };

            /**
             * Converts this MsgInfo to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.MsgInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgInfo;
        })();

        consensus.TimeoutInfo = (function() {

            /**
             * Properties of a TimeoutInfo.
             * @memberof tendermint.consensus
             * @interface ITimeoutInfo
             * @property {google.protobuf.IDuration|null} [duration] TimeoutInfo duration
             * @property {number|null} [height] TimeoutInfo height
             * @property {number|null} [round] TimeoutInfo round
             * @property {number|null} [step] TimeoutInfo step
             */

            /**
             * Constructs a new TimeoutInfo.
             * @memberof tendermint.consensus
             * @classdesc Represents a TimeoutInfo.
             * @implements ITimeoutInfo
             * @constructor
             * @param {tendermint.consensus.ITimeoutInfo=} [properties] Properties to set
             */
            function TimeoutInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TimeoutInfo duration.
             * @member {google.protobuf.IDuration|null|undefined} duration
             * @memberof tendermint.consensus.TimeoutInfo
             * @instance
             */
            TimeoutInfo.prototype.duration = null;

            /**
             * TimeoutInfo height.
             * @member {number} height
             * @memberof tendermint.consensus.TimeoutInfo
             * @instance
             */
            TimeoutInfo.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TimeoutInfo round.
             * @member {number} round
             * @memberof tendermint.consensus.TimeoutInfo
             * @instance
             */
            TimeoutInfo.prototype.round = 0;

            /**
             * TimeoutInfo step.
             * @member {number} step
             * @memberof tendermint.consensus.TimeoutInfo
             * @instance
             */
            TimeoutInfo.prototype.step = 0;

            /**
             * Encodes the specified TimeoutInfo message. Does not implicitly {@link tendermint.consensus.TimeoutInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.TimeoutInfo
             * @static
             * @param {tendermint.consensus.ITimeoutInfo} message TimeoutInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeoutInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                    $root.google.protobuf.Duration.encode(message.duration, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                if (message.step != null && Object.hasOwnProperty.call(message, "step"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.step);
                return writer;
            };

            /**
             * Encodes the specified TimeoutInfo message, length delimited. Does not implicitly {@link tendermint.consensus.TimeoutInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.TimeoutInfo
             * @static
             * @param {tendermint.consensus.ITimeoutInfo} message TimeoutInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeoutInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TimeoutInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.TimeoutInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.TimeoutInfo} TimeoutInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeoutInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.TimeoutInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    case 3:
                        message.round = reader.int32();
                        break;
                    case 4:
                        message.step = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TimeoutInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.TimeoutInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.TimeoutInfo} TimeoutInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeoutInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TimeoutInfo message.
             * @function verify
             * @memberof tendermint.consensus.TimeoutInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TimeoutInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.duration != null && message.hasOwnProperty("duration")) {
                    let error = $root.google.protobuf.Duration.verify(message.duration);
                    if (error)
                        return "duration." + error;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.step != null && message.hasOwnProperty("step"))
                    if (!$util.isInteger(message.step))
                        return "step: integer expected";
                return null;
            };

            /**
             * Creates a TimeoutInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.TimeoutInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.TimeoutInfo} TimeoutInfo
             */
            TimeoutInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.TimeoutInfo)
                    return object;
                let message = new $root.tendermint.consensus.TimeoutInfo();
                if (object.duration != null) {
                    if (typeof object.duration !== "object")
                        throw TypeError(".tendermint.consensus.TimeoutInfo.duration: object expected");
                    message.duration = $root.google.protobuf.Duration.fromObject(object.duration);
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.step != null)
                    message.step = object.step >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a TimeoutInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.TimeoutInfo
             * @static
             * @param {tendermint.consensus.TimeoutInfo} message TimeoutInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TimeoutInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.duration = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.step = 0;
                }
                if (message.duration != null && message.hasOwnProperty("duration"))
                    object.duration = $root.google.protobuf.Duration.toObject(message.duration, options);
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.step != null && message.hasOwnProperty("step"))
                    object.step = message.step;
                return object;
            };

            /**
             * Converts this TimeoutInfo to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.TimeoutInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TimeoutInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TimeoutInfo;
        })();

        consensus.EndHeight = (function() {

            /**
             * Properties of an EndHeight.
             * @memberof tendermint.consensus
             * @interface IEndHeight
             * @property {number|null} [height] EndHeight height
             */

            /**
             * Constructs a new EndHeight.
             * @memberof tendermint.consensus
             * @classdesc Represents an EndHeight.
             * @implements IEndHeight
             * @constructor
             * @param {tendermint.consensus.IEndHeight=} [properties] Properties to set
             */
            function EndHeight(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EndHeight height.
             * @member {number} height
             * @memberof tendermint.consensus.EndHeight
             * @instance
             */
            EndHeight.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified EndHeight message. Does not implicitly {@link tendermint.consensus.EndHeight.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.EndHeight
             * @static
             * @param {tendermint.consensus.IEndHeight} message EndHeight message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndHeight.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                return writer;
            };

            /**
             * Encodes the specified EndHeight message, length delimited. Does not implicitly {@link tendermint.consensus.EndHeight.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.EndHeight
             * @static
             * @param {tendermint.consensus.IEndHeight} message EndHeight message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndHeight.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EndHeight message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.EndHeight
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.EndHeight} EndHeight
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndHeight.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.EndHeight();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EndHeight message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.EndHeight
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.EndHeight} EndHeight
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndHeight.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EndHeight message.
             * @function verify
             * @memberof tendermint.consensus.EndHeight
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EndHeight.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                return null;
            };

            /**
             * Creates an EndHeight message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.EndHeight
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.EndHeight} EndHeight
             */
            EndHeight.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.EndHeight)
                    return object;
                let message = new $root.tendermint.consensus.EndHeight();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an EndHeight message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.EndHeight
             * @static
             * @param {tendermint.consensus.EndHeight} message EndHeight
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EndHeight.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                return object;
            };

            /**
             * Converts this EndHeight to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.EndHeight
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EndHeight.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EndHeight;
        })();

        consensus.WALMessage = (function() {

            /**
             * Properties of a WALMessage.
             * @memberof tendermint.consensus
             * @interface IWALMessage
             * @property {tendermint.types.IEventDataRoundState|null} [event_data_round_state] WALMessage event_data_round_state
             * @property {tendermint.consensus.IMsgInfo|null} [msg_info] WALMessage msg_info
             * @property {tendermint.consensus.ITimeoutInfo|null} [timeout_info] WALMessage timeout_info
             * @property {tendermint.consensus.IEndHeight|null} [end_height] WALMessage end_height
             */

            /**
             * Constructs a new WALMessage.
             * @memberof tendermint.consensus
             * @classdesc Represents a WALMessage.
             * @implements IWALMessage
             * @constructor
             * @param {tendermint.consensus.IWALMessage=} [properties] Properties to set
             */
            function WALMessage(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * WALMessage event_data_round_state.
             * @member {tendermint.types.IEventDataRoundState|null|undefined} event_data_round_state
             * @memberof tendermint.consensus.WALMessage
             * @instance
             */
            WALMessage.prototype.event_data_round_state = null;

            /**
             * WALMessage msg_info.
             * @member {tendermint.consensus.IMsgInfo|null|undefined} msg_info
             * @memberof tendermint.consensus.WALMessage
             * @instance
             */
            WALMessage.prototype.msg_info = null;

            /**
             * WALMessage timeout_info.
             * @member {tendermint.consensus.ITimeoutInfo|null|undefined} timeout_info
             * @memberof tendermint.consensus.WALMessage
             * @instance
             */
            WALMessage.prototype.timeout_info = null;

            /**
             * WALMessage end_height.
             * @member {tendermint.consensus.IEndHeight|null|undefined} end_height
             * @memberof tendermint.consensus.WALMessage
             * @instance
             */
            WALMessage.prototype.end_height = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * WALMessage sum.
             * @member {"event_data_round_state"|"msg_info"|"timeout_info"|"end_height"|undefined} sum
             * @memberof tendermint.consensus.WALMessage
             * @instance
             */
            Object.defineProperty(WALMessage.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["event_data_round_state", "msg_info", "timeout_info", "end_height"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified WALMessage message. Does not implicitly {@link tendermint.consensus.WALMessage.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.WALMessage
             * @static
             * @param {tendermint.consensus.IWALMessage} message WALMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WALMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.event_data_round_state != null && Object.hasOwnProperty.call(message, "event_data_round_state"))
                    $root.tendermint.types.EventDataRoundState.encode(message.event_data_round_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.msg_info != null && Object.hasOwnProperty.call(message, "msg_info"))
                    $root.tendermint.consensus.MsgInfo.encode(message.msg_info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.timeout_info != null && Object.hasOwnProperty.call(message, "timeout_info"))
                    $root.tendermint.consensus.TimeoutInfo.encode(message.timeout_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.end_height != null && Object.hasOwnProperty.call(message, "end_height"))
                    $root.tendermint.consensus.EndHeight.encode(message.end_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified WALMessage message, length delimited. Does not implicitly {@link tendermint.consensus.WALMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.WALMessage
             * @static
             * @param {tendermint.consensus.IWALMessage} message WALMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WALMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a WALMessage message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.WALMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.WALMessage} WALMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WALMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.WALMessage();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.event_data_round_state = $root.tendermint.types.EventDataRoundState.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.msg_info = $root.tendermint.consensus.MsgInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.timeout_info = $root.tendermint.consensus.TimeoutInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.end_height = $root.tendermint.consensus.EndHeight.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a WALMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.WALMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.WALMessage} WALMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WALMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a WALMessage message.
             * @function verify
             * @memberof tendermint.consensus.WALMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WALMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.event_data_round_state != null && message.hasOwnProperty("event_data_round_state")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.EventDataRoundState.verify(message.event_data_round_state);
                        if (error)
                            return "event_data_round_state." + error;
                    }
                }
                if (message.msg_info != null && message.hasOwnProperty("msg_info")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.MsgInfo.verify(message.msg_info);
                        if (error)
                            return "msg_info." + error;
                    }
                }
                if (message.timeout_info != null && message.hasOwnProperty("timeout_info")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.TimeoutInfo.verify(message.timeout_info);
                        if (error)
                            return "timeout_info." + error;
                    }
                }
                if (message.end_height != null && message.hasOwnProperty("end_height")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.consensus.EndHeight.verify(message.end_height);
                        if (error)
                            return "end_height." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a WALMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.WALMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.WALMessage} WALMessage
             */
            WALMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.WALMessage)
                    return object;
                let message = new $root.tendermint.consensus.WALMessage();
                if (object.event_data_round_state != null) {
                    if (typeof object.event_data_round_state !== "object")
                        throw TypeError(".tendermint.consensus.WALMessage.event_data_round_state: object expected");
                    message.event_data_round_state = $root.tendermint.types.EventDataRoundState.fromObject(object.event_data_round_state);
                }
                if (object.msg_info != null) {
                    if (typeof object.msg_info !== "object")
                        throw TypeError(".tendermint.consensus.WALMessage.msg_info: object expected");
                    message.msg_info = $root.tendermint.consensus.MsgInfo.fromObject(object.msg_info);
                }
                if (object.timeout_info != null) {
                    if (typeof object.timeout_info !== "object")
                        throw TypeError(".tendermint.consensus.WALMessage.timeout_info: object expected");
                    message.timeout_info = $root.tendermint.consensus.TimeoutInfo.fromObject(object.timeout_info);
                }
                if (object.end_height != null) {
                    if (typeof object.end_height !== "object")
                        throw TypeError(".tendermint.consensus.WALMessage.end_height: object expected");
                    message.end_height = $root.tendermint.consensus.EndHeight.fromObject(object.end_height);
                }
                return message;
            };

            /**
             * Creates a plain object from a WALMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.WALMessage
             * @static
             * @param {tendermint.consensus.WALMessage} message WALMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WALMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.event_data_round_state != null && message.hasOwnProperty("event_data_round_state")) {
                    object.event_data_round_state = $root.tendermint.types.EventDataRoundState.toObject(message.event_data_round_state, options);
                    if (options.oneofs)
                        object.sum = "event_data_round_state";
                }
                if (message.msg_info != null && message.hasOwnProperty("msg_info")) {
                    object.msg_info = $root.tendermint.consensus.MsgInfo.toObject(message.msg_info, options);
                    if (options.oneofs)
                        object.sum = "msg_info";
                }
                if (message.timeout_info != null && message.hasOwnProperty("timeout_info")) {
                    object.timeout_info = $root.tendermint.consensus.TimeoutInfo.toObject(message.timeout_info, options);
                    if (options.oneofs)
                        object.sum = "timeout_info";
                }
                if (message.end_height != null && message.hasOwnProperty("end_height")) {
                    object.end_height = $root.tendermint.consensus.EndHeight.toObject(message.end_height, options);
                    if (options.oneofs)
                        object.sum = "end_height";
                }
                return object;
            };

            /**
             * Converts this WALMessage to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.WALMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WALMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return WALMessage;
        })();

        consensus.TimedWALMessage = (function() {

            /**
             * Properties of a TimedWALMessage.
             * @memberof tendermint.consensus
             * @interface ITimedWALMessage
             * @property {google.protobuf.ITimestamp|null} [time] TimedWALMessage time
             * @property {tendermint.consensus.IWALMessage|null} [msg] TimedWALMessage msg
             */

            /**
             * Constructs a new TimedWALMessage.
             * @memberof tendermint.consensus
             * @classdesc Represents a TimedWALMessage.
             * @implements ITimedWALMessage
             * @constructor
             * @param {tendermint.consensus.ITimedWALMessage=} [properties] Properties to set
             */
            function TimedWALMessage(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TimedWALMessage time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.consensus.TimedWALMessage
             * @instance
             */
            TimedWALMessage.prototype.time = null;

            /**
             * TimedWALMessage msg.
             * @member {tendermint.consensus.IWALMessage|null|undefined} msg
             * @memberof tendermint.consensus.TimedWALMessage
             * @instance
             */
            TimedWALMessage.prototype.msg = null;

            /**
             * Encodes the specified TimedWALMessage message. Does not implicitly {@link tendermint.consensus.TimedWALMessage.verify|verify} messages.
             * @function encode
             * @memberof tendermint.consensus.TimedWALMessage
             * @static
             * @param {tendermint.consensus.ITimedWALMessage} message TimedWALMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimedWALMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                    $root.tendermint.consensus.WALMessage.encode(message.msg, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TimedWALMessage message, length delimited. Does not implicitly {@link tendermint.consensus.TimedWALMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.consensus.TimedWALMessage
             * @static
             * @param {tendermint.consensus.ITimedWALMessage} message TimedWALMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimedWALMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TimedWALMessage message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.consensus.TimedWALMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.consensus.TimedWALMessage} TimedWALMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimedWALMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.consensus.TimedWALMessage();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.msg = $root.tendermint.consensus.WALMessage.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TimedWALMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.consensus.TimedWALMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.consensus.TimedWALMessage} TimedWALMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimedWALMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TimedWALMessage message.
             * @function verify
             * @memberof tendermint.consensus.TimedWALMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TimedWALMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.msg != null && message.hasOwnProperty("msg")) {
                    let error = $root.tendermint.consensus.WALMessage.verify(message.msg);
                    if (error)
                        return "msg." + error;
                }
                return null;
            };

            /**
             * Creates a TimedWALMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.consensus.TimedWALMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.consensus.TimedWALMessage} TimedWALMessage
             */
            TimedWALMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.consensus.TimedWALMessage)
                    return object;
                let message = new $root.tendermint.consensus.TimedWALMessage();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.consensus.TimedWALMessage.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.msg != null) {
                    if (typeof object.msg !== "object")
                        throw TypeError(".tendermint.consensus.TimedWALMessage.msg: object expected");
                    message.msg = $root.tendermint.consensus.WALMessage.fromObject(object.msg);
                }
                return message;
            };

            /**
             * Creates a plain object from a TimedWALMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.consensus.TimedWALMessage
             * @static
             * @param {tendermint.consensus.TimedWALMessage} message TimedWALMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TimedWALMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.time = null;
                    object.msg = null;
                }
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = $root.tendermint.consensus.WALMessage.toObject(message.msg, options);
                return object;
            };

            /**
             * Converts this TimedWALMessage to JSON.
             * @function toJSON
             * @memberof tendermint.consensus.TimedWALMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TimedWALMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TimedWALMessage;
        })();

        return consensus;
    })();

    tendermint.libs = (function() {

        /**
         * Namespace libs.
         * @memberof tendermint
         * @namespace
         */
        const libs = {};

        libs.bits = (function() {

            /**
             * Namespace bits.
             * @memberof tendermint.libs
             * @namespace
             */
            const bits = {};

            bits.BitArray = (function() {

                /**
                 * Properties of a BitArray.
                 * @memberof tendermint.libs.bits
                 * @interface IBitArray
                 * @property {number|null} [bits] BitArray bits
                 * @property {Array.<number>|null} [elems] BitArray elems
                 */

                /**
                 * Constructs a new BitArray.
                 * @memberof tendermint.libs.bits
                 * @classdesc Represents a BitArray.
                 * @implements IBitArray
                 * @constructor
                 * @param {tendermint.libs.bits.IBitArray=} [properties] Properties to set
                 */
                function BitArray(properties) {
                    this.elems = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BitArray bits.
                 * @member {number} bits
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.bits = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BitArray elems.
                 * @member {Array.<number>} elems
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.elems = $util.emptyArray;

                /**
                 * Encodes the specified BitArray message. Does not implicitly {@link tendermint.libs.bits.BitArray.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.IBitArray} message BitArray message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BitArray.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.bits != null && Object.hasOwnProperty.call(message, "bits"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.bits);
                    if (message.elems != null && message.elems.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.elems.length; ++i)
                            writer.uint64(message.elems[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified BitArray message, length delimited. Does not implicitly {@link tendermint.libs.bits.BitArray.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.IBitArray} message BitArray message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BitArray.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BitArray message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BitArray.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.libs.bits.BitArray();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.bits = reader.int64();
                            break;
                        case 2:
                            if (!(message.elems && message.elems.length))
                                message.elems = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.elems.push(reader.uint64());
                            } else
                                message.elems.push(reader.uint64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BitArray message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BitArray.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BitArray message.
                 * @function verify
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BitArray.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.bits != null && message.hasOwnProperty("bits"))
                        if (!$util.isInteger(message.bits) && !(message.bits && $util.isInteger(message.bits.low) && $util.isInteger(message.bits.high)))
                            return "bits: integer|Long expected";
                    if (message.elems != null && message.hasOwnProperty("elems")) {
                        if (!Array.isArray(message.elems))
                            return "elems: array expected";
                        for (let i = 0; i < message.elems.length; ++i)
                            if (!$util.isInteger(message.elems[i]) && !(message.elems[i] && $util.isInteger(message.elems[i].low) && $util.isInteger(message.elems[i].high)))
                                return "elems: integer|Long[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a BitArray message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 */
                BitArray.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.libs.bits.BitArray)
                        return object;
                    let message = new $root.tendermint.libs.bits.BitArray();
                    if (object.bits != null)
                        if ($util.Long)
                            (message.bits = $util.Long.fromValue(object.bits)).unsigned = false;
                        else if (typeof object.bits === "string")
                            message.bits = parseInt(object.bits, 10);
                        else if (typeof object.bits === "number")
                            message.bits = object.bits;
                        else if (typeof object.bits === "object")
                            message.bits = new $util.LongBits(object.bits.low >>> 0, object.bits.high >>> 0).toNumber();
                    if (object.elems) {
                        if (!Array.isArray(object.elems))
                            throw TypeError(".tendermint.libs.bits.BitArray.elems: array expected");
                        message.elems = [];
                        for (let i = 0; i < object.elems.length; ++i)
                            if ($util.Long)
                                (message.elems[i] = $util.Long.fromValue(object.elems[i])).unsigned = true;
                            else if (typeof object.elems[i] === "string")
                                message.elems[i] = parseInt(object.elems[i], 10);
                            else if (typeof object.elems[i] === "number")
                                message.elems[i] = object.elems[i];
                            else if (typeof object.elems[i] === "object")
                                message.elems[i] = new $util.LongBits(object.elems[i].low >>> 0, object.elems[i].high >>> 0).toNumber(true);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a BitArray message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.BitArray} message BitArray
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BitArray.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.elems = [];
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.bits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.bits = options.longs === String ? "0" : 0;
                    if (message.bits != null && message.hasOwnProperty("bits"))
                        if (typeof message.bits === "number")
                            object.bits = options.longs === String ? String(message.bits) : message.bits;
                        else
                            object.bits = options.longs === String ? $util.Long.prototype.toString.call(message.bits) : options.longs === Number ? new $util.LongBits(message.bits.low >>> 0, message.bits.high >>> 0).toNumber() : message.bits;
                    if (message.elems && message.elems.length) {
                        object.elems = [];
                        for (let j = 0; j < message.elems.length; ++j)
                            if (typeof message.elems[j] === "number")
                                object.elems[j] = options.longs === String ? String(message.elems[j]) : message.elems[j];
                            else
                                object.elems[j] = options.longs === String ? $util.Long.prototype.toString.call(message.elems[j]) : options.longs === Number ? new $util.LongBits(message.elems[j].low >>> 0, message.elems[j].high >>> 0).toNumber(true) : message.elems[j];
                    }
                    return object;
                };

                /**
                 * Converts this BitArray to JSON.
                 * @function toJSON
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BitArray.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BitArray;
            })();

            return bits;
        })();

        return libs;
    })();

    tendermint.mempool = (function() {

        /**
         * Namespace mempool.
         * @memberof tendermint
         * @namespace
         */
        const mempool = {};

        mempool.Txs = (function() {

            /**
             * Properties of a Txs.
             * @memberof tendermint.mempool
             * @interface ITxs
             * @property {Array.<Uint8Array>|null} [txs] Txs txs
             */

            /**
             * Constructs a new Txs.
             * @memberof tendermint.mempool
             * @classdesc Represents a Txs.
             * @implements ITxs
             * @constructor
             * @param {tendermint.mempool.ITxs=} [properties] Properties to set
             */
            function Txs(properties) {
                this.txs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Txs txs.
             * @member {Array.<Uint8Array>} txs
             * @memberof tendermint.mempool.Txs
             * @instance
             */
            Txs.prototype.txs = $util.emptyArray;

            /**
             * Encodes the specified Txs message. Does not implicitly {@link tendermint.mempool.Txs.verify|verify} messages.
             * @function encode
             * @memberof tendermint.mempool.Txs
             * @static
             * @param {tendermint.mempool.ITxs} message Txs message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Txs.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.txs != null && message.txs.length)
                    for (let i = 0; i < message.txs.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.txs[i]);
                return writer;
            };

            /**
             * Encodes the specified Txs message, length delimited. Does not implicitly {@link tendermint.mempool.Txs.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.mempool.Txs
             * @static
             * @param {tendermint.mempool.ITxs} message Txs message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Txs.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Txs message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.mempool.Txs
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.mempool.Txs} Txs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Txs.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.mempool.Txs();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.txs && message.txs.length))
                            message.txs = [];
                        message.txs.push(reader.bytes());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Txs message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.mempool.Txs
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.mempool.Txs} Txs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Txs.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Txs message.
             * @function verify
             * @memberof tendermint.mempool.Txs
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Txs.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.txs != null && message.hasOwnProperty("txs")) {
                    if (!Array.isArray(message.txs))
                        return "txs: array expected";
                    for (let i = 0; i < message.txs.length; ++i)
                        if (!(message.txs[i] && typeof message.txs[i].length === "number" || $util.isString(message.txs[i])))
                            return "txs: buffer[] expected";
                }
                return null;
            };

            /**
             * Creates a Txs message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.mempool.Txs
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.mempool.Txs} Txs
             */
            Txs.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.mempool.Txs)
                    return object;
                let message = new $root.tendermint.mempool.Txs();
                if (object.txs) {
                    if (!Array.isArray(object.txs))
                        throw TypeError(".tendermint.mempool.Txs.txs: array expected");
                    message.txs = [];
                    for (let i = 0; i < object.txs.length; ++i)
                        if (typeof object.txs[i] === "string")
                            $util.base64.decode(object.txs[i], message.txs[i] = $util.newBuffer($util.base64.length(object.txs[i])), 0);
                        else if (object.txs[i].length)
                            message.txs[i] = object.txs[i];
                }
                return message;
            };

            /**
             * Creates a plain object from a Txs message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.mempool.Txs
             * @static
             * @param {tendermint.mempool.Txs} message Txs
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Txs.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.txs = [];
                if (message.txs && message.txs.length) {
                    object.txs = [];
                    for (let j = 0; j < message.txs.length; ++j)
                        object.txs[j] = options.bytes === String ? $util.base64.encode(message.txs[j], 0, message.txs[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.txs[j]) : message.txs[j];
                }
                return object;
            };

            /**
             * Converts this Txs to JSON.
             * @function toJSON
             * @memberof tendermint.mempool.Txs
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Txs.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Txs;
        })();

        mempool.Message = (function() {

            /**
             * Properties of a Message.
             * @memberof tendermint.mempool
             * @interface IMessage
             * @property {tendermint.mempool.ITxs|null} [txs] Message txs
             */

            /**
             * Constructs a new Message.
             * @memberof tendermint.mempool
             * @classdesc Represents a Message.
             * @implements IMessage
             * @constructor
             * @param {tendermint.mempool.IMessage=} [properties] Properties to set
             */
            function Message(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Message txs.
             * @member {tendermint.mempool.ITxs|null|undefined} txs
             * @memberof tendermint.mempool.Message
             * @instance
             */
            Message.prototype.txs = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Message sum.
             * @member {"txs"|undefined} sum
             * @memberof tendermint.mempool.Message
             * @instance
             */
            Object.defineProperty(Message.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["txs"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Message message. Does not implicitly {@link tendermint.mempool.Message.verify|verify} messages.
             * @function encode
             * @memberof tendermint.mempool.Message
             * @static
             * @param {tendermint.mempool.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.txs != null && Object.hasOwnProperty.call(message, "txs"))
                    $root.tendermint.mempool.Txs.encode(message.txs, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link tendermint.mempool.Message.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.mempool.Message
             * @static
             * @param {tendermint.mempool.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.mempool.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.mempool.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.mempool.Message();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.txs = $root.tendermint.mempool.Txs.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.mempool.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.mempool.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Message message.
             * @function verify
             * @memberof tendermint.mempool.Message
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Message.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.txs != null && message.hasOwnProperty("txs")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.mempool.Txs.verify(message.txs);
                        if (error)
                            return "txs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.mempool.Message
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.mempool.Message} Message
             */
            Message.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.mempool.Message)
                    return object;
                let message = new $root.tendermint.mempool.Message();
                if (object.txs != null) {
                    if (typeof object.txs !== "object")
                        throw TypeError(".tendermint.mempool.Message.txs: object expected");
                    message.txs = $root.tendermint.mempool.Txs.fromObject(object.txs);
                }
                return message;
            };

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.mempool.Message
             * @static
             * @param {tendermint.mempool.Message} message Message
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Message.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.txs != null && message.hasOwnProperty("txs")) {
                    object.txs = $root.tendermint.mempool.Txs.toObject(message.txs, options);
                    if (options.oneofs)
                        object.sum = "txs";
                }
                return object;
            };

            /**
             * Converts this Message to JSON.
             * @function toJSON
             * @memberof tendermint.mempool.Message
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Message.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Message;
        })();

        return mempool;
    })();

    tendermint.p2p = (function() {

        /**
         * Namespace p2p.
         * @memberof tendermint
         * @namespace
         */
        const p2p = {};

        p2p.NetAddress = (function() {

            /**
             * Properties of a NetAddress.
             * @memberof tendermint.p2p
             * @interface INetAddress
             * @property {string|null} [id] NetAddress id
             * @property {string|null} [ip] NetAddress ip
             * @property {number|null} [port] NetAddress port
             */

            /**
             * Constructs a new NetAddress.
             * @memberof tendermint.p2p
             * @classdesc Represents a NetAddress.
             * @implements INetAddress
             * @constructor
             * @param {tendermint.p2p.INetAddress=} [properties] Properties to set
             */
            function NetAddress(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NetAddress id.
             * @member {string} id
             * @memberof tendermint.p2p.NetAddress
             * @instance
             */
            NetAddress.prototype.id = "";

            /**
             * NetAddress ip.
             * @member {string} ip
             * @memberof tendermint.p2p.NetAddress
             * @instance
             */
            NetAddress.prototype.ip = "";

            /**
             * NetAddress port.
             * @member {number} port
             * @memberof tendermint.p2p.NetAddress
             * @instance
             */
            NetAddress.prototype.port = 0;

            /**
             * Encodes the specified NetAddress message. Does not implicitly {@link tendermint.p2p.NetAddress.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {tendermint.p2p.INetAddress} message NetAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NetAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ip);
                if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.port);
                return writer;
            };

            /**
             * Encodes the specified NetAddress message, length delimited. Does not implicitly {@link tendermint.p2p.NetAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {tendermint.p2p.INetAddress} message NetAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NetAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NetAddress message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.NetAddress} NetAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NetAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.NetAddress();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.string();
                        break;
                    case 2:
                        message.ip = reader.string();
                        break;
                    case 3:
                        message.port = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NetAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.NetAddress} NetAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NetAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NetAddress message.
             * @function verify
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NetAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.ip != null && message.hasOwnProperty("ip"))
                    if (!$util.isString(message.ip))
                        return "ip: string expected";
                if (message.port != null && message.hasOwnProperty("port"))
                    if (!$util.isInteger(message.port))
                        return "port: integer expected";
                return null;
            };

            /**
             * Creates a NetAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.NetAddress} NetAddress
             */
            NetAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.NetAddress)
                    return object;
                let message = new $root.tendermint.p2p.NetAddress();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.ip != null)
                    message.ip = String(object.ip);
                if (object.port != null)
                    message.port = object.port >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a NetAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.NetAddress
             * @static
             * @param {tendermint.p2p.NetAddress} message NetAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NetAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.id = "";
                    object.ip = "";
                    object.port = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.ip != null && message.hasOwnProperty("ip"))
                    object.ip = message.ip;
                if (message.port != null && message.hasOwnProperty("port"))
                    object.port = message.port;
                return object;
            };

            /**
             * Converts this NetAddress to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.NetAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NetAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return NetAddress;
        })();

        p2p.ProtocolVersion = (function() {

            /**
             * Properties of a ProtocolVersion.
             * @memberof tendermint.p2p
             * @interface IProtocolVersion
             * @property {number|null} [p2p] ProtocolVersion p2p
             * @property {number|null} [block] ProtocolVersion block
             * @property {number|null} [app] ProtocolVersion app
             */

            /**
             * Constructs a new ProtocolVersion.
             * @memberof tendermint.p2p
             * @classdesc Represents a ProtocolVersion.
             * @implements IProtocolVersion
             * @constructor
             * @param {tendermint.p2p.IProtocolVersion=} [properties] Properties to set
             */
            function ProtocolVersion(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProtocolVersion p2p.
             * @member {number} p2p
             * @memberof tendermint.p2p.ProtocolVersion
             * @instance
             */
            ProtocolVersion.prototype.p2p = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ProtocolVersion block.
             * @member {number} block
             * @memberof tendermint.p2p.ProtocolVersion
             * @instance
             */
            ProtocolVersion.prototype.block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ProtocolVersion app.
             * @member {number} app
             * @memberof tendermint.p2p.ProtocolVersion
             * @instance
             */
            ProtocolVersion.prototype.app = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified ProtocolVersion message. Does not implicitly {@link tendermint.p2p.ProtocolVersion.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {tendermint.p2p.IProtocolVersion} message ProtocolVersion message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolVersion.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.p2p != null && Object.hasOwnProperty.call(message, "p2p"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.p2p);
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.block);
                if (message.app != null && Object.hasOwnProperty.call(message, "app"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.app);
                return writer;
            };

            /**
             * Encodes the specified ProtocolVersion message, length delimited. Does not implicitly {@link tendermint.p2p.ProtocolVersion.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {tendermint.p2p.IProtocolVersion} message ProtocolVersion message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolVersion.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProtocolVersion message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.ProtocolVersion} ProtocolVersion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolVersion.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.ProtocolVersion();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.p2p = reader.uint64();
                        break;
                    case 2:
                        message.block = reader.uint64();
                        break;
                    case 3:
                        message.app = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProtocolVersion message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.ProtocolVersion} ProtocolVersion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolVersion.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProtocolVersion message.
             * @function verify
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProtocolVersion.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.p2p != null && message.hasOwnProperty("p2p"))
                    if (!$util.isInteger(message.p2p) && !(message.p2p && $util.isInteger(message.p2p.low) && $util.isInteger(message.p2p.high)))
                        return "p2p: integer|Long expected";
                if (message.block != null && message.hasOwnProperty("block"))
                    if (!$util.isInteger(message.block) && !(message.block && $util.isInteger(message.block.low) && $util.isInteger(message.block.high)))
                        return "block: integer|Long expected";
                if (message.app != null && message.hasOwnProperty("app"))
                    if (!$util.isInteger(message.app) && !(message.app && $util.isInteger(message.app.low) && $util.isInteger(message.app.high)))
                        return "app: integer|Long expected";
                return null;
            };

            /**
             * Creates a ProtocolVersion message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.ProtocolVersion} ProtocolVersion
             */
            ProtocolVersion.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.ProtocolVersion)
                    return object;
                let message = new $root.tendermint.p2p.ProtocolVersion();
                if (object.p2p != null)
                    if ($util.Long)
                        (message.p2p = $util.Long.fromValue(object.p2p)).unsigned = true;
                    else if (typeof object.p2p === "string")
                        message.p2p = parseInt(object.p2p, 10);
                    else if (typeof object.p2p === "number")
                        message.p2p = object.p2p;
                    else if (typeof object.p2p === "object")
                        message.p2p = new $util.LongBits(object.p2p.low >>> 0, object.p2p.high >>> 0).toNumber(true);
                if (object.block != null)
                    if ($util.Long)
                        (message.block = $util.Long.fromValue(object.block)).unsigned = true;
                    else if (typeof object.block === "string")
                        message.block = parseInt(object.block, 10);
                    else if (typeof object.block === "number")
                        message.block = object.block;
                    else if (typeof object.block === "object")
                        message.block = new $util.LongBits(object.block.low >>> 0, object.block.high >>> 0).toNumber(true);
                if (object.app != null)
                    if ($util.Long)
                        (message.app = $util.Long.fromValue(object.app)).unsigned = true;
                    else if (typeof object.app === "string")
                        message.app = parseInt(object.app, 10);
                    else if (typeof object.app === "number")
                        message.app = object.app;
                    else if (typeof object.app === "object")
                        message.app = new $util.LongBits(object.app.low >>> 0, object.app.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a ProtocolVersion message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.ProtocolVersion
             * @static
             * @param {tendermint.p2p.ProtocolVersion} message ProtocolVersion
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProtocolVersion.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.p2p = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.p2p = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app = options.longs === String ? "0" : 0;
                }
                if (message.p2p != null && message.hasOwnProperty("p2p"))
                    if (typeof message.p2p === "number")
                        object.p2p = options.longs === String ? String(message.p2p) : message.p2p;
                    else
                        object.p2p = options.longs === String ? $util.Long.prototype.toString.call(message.p2p) : options.longs === Number ? new $util.LongBits(message.p2p.low >>> 0, message.p2p.high >>> 0).toNumber(true) : message.p2p;
                if (message.block != null && message.hasOwnProperty("block"))
                    if (typeof message.block === "number")
                        object.block = options.longs === String ? String(message.block) : message.block;
                    else
                        object.block = options.longs === String ? $util.Long.prototype.toString.call(message.block) : options.longs === Number ? new $util.LongBits(message.block.low >>> 0, message.block.high >>> 0).toNumber(true) : message.block;
                if (message.app != null && message.hasOwnProperty("app"))
                    if (typeof message.app === "number")
                        object.app = options.longs === String ? String(message.app) : message.app;
                    else
                        object.app = options.longs === String ? $util.Long.prototype.toString.call(message.app) : options.longs === Number ? new $util.LongBits(message.app.low >>> 0, message.app.high >>> 0).toNumber(true) : message.app;
                return object;
            };

            /**
             * Converts this ProtocolVersion to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.ProtocolVersion
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProtocolVersion.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProtocolVersion;
        })();

        p2p.DefaultNodeInfo = (function() {

            /**
             * Properties of a DefaultNodeInfo.
             * @memberof tendermint.p2p
             * @interface IDefaultNodeInfo
             * @property {tendermint.p2p.IProtocolVersion|null} [protocol_version] DefaultNodeInfo protocol_version
             * @property {string|null} [default_node_id] DefaultNodeInfo default_node_id
             * @property {string|null} [listen_addr] DefaultNodeInfo listen_addr
             * @property {string|null} [network] DefaultNodeInfo network
             * @property {string|null} [version] DefaultNodeInfo version
             * @property {Uint8Array|null} [channels] DefaultNodeInfo channels
             * @property {string|null} [moniker] DefaultNodeInfo moniker
             * @property {tendermint.p2p.IDefaultNodeInfoOther|null} [other] DefaultNodeInfo other
             */

            /**
             * Constructs a new DefaultNodeInfo.
             * @memberof tendermint.p2p
             * @classdesc Represents a DefaultNodeInfo.
             * @implements IDefaultNodeInfo
             * @constructor
             * @param {tendermint.p2p.IDefaultNodeInfo=} [properties] Properties to set
             */
            function DefaultNodeInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DefaultNodeInfo protocol_version.
             * @member {tendermint.p2p.IProtocolVersion|null|undefined} protocol_version
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.protocol_version = null;

            /**
             * DefaultNodeInfo default_node_id.
             * @member {string} default_node_id
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.default_node_id = "";

            /**
             * DefaultNodeInfo listen_addr.
             * @member {string} listen_addr
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.listen_addr = "";

            /**
             * DefaultNodeInfo network.
             * @member {string} network
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.network = "";

            /**
             * DefaultNodeInfo version.
             * @member {string} version
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.version = "";

            /**
             * DefaultNodeInfo channels.
             * @member {Uint8Array} channels
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.channels = $util.newBuffer([]);

            /**
             * DefaultNodeInfo moniker.
             * @member {string} moniker
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.moniker = "";

            /**
             * DefaultNodeInfo other.
             * @member {tendermint.p2p.IDefaultNodeInfoOther|null|undefined} other
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             */
            DefaultNodeInfo.prototype.other = null;

            /**
             * Encodes the specified DefaultNodeInfo message. Does not implicitly {@link tendermint.p2p.DefaultNodeInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {tendermint.p2p.IDefaultNodeInfo} message DefaultNodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DefaultNodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.protocol_version != null && Object.hasOwnProperty.call(message, "protocol_version"))
                    $root.tendermint.p2p.ProtocolVersion.encode(message.protocol_version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.default_node_id != null && Object.hasOwnProperty.call(message, "default_node_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.default_node_id);
                if (message.listen_addr != null && Object.hasOwnProperty.call(message, "listen_addr"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.listen_addr);
                if (message.network != null && Object.hasOwnProperty.call(message, "network"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.network);
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                if (message.channels != null && Object.hasOwnProperty.call(message, "channels"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.channels);
                if (message.moniker != null && Object.hasOwnProperty.call(message, "moniker"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.moniker);
                if (message.other != null && Object.hasOwnProperty.call(message, "other"))
                    $root.tendermint.p2p.DefaultNodeInfoOther.encode(message.other, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DefaultNodeInfo message, length delimited. Does not implicitly {@link tendermint.p2p.DefaultNodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {tendermint.p2p.IDefaultNodeInfo} message DefaultNodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DefaultNodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DefaultNodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.DefaultNodeInfo} DefaultNodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DefaultNodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.DefaultNodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.protocol_version = $root.tendermint.p2p.ProtocolVersion.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.default_node_id = reader.string();
                        break;
                    case 3:
                        message.listen_addr = reader.string();
                        break;
                    case 4:
                        message.network = reader.string();
                        break;
                    case 5:
                        message.version = reader.string();
                        break;
                    case 6:
                        message.channels = reader.bytes();
                        break;
                    case 7:
                        message.moniker = reader.string();
                        break;
                    case 8:
                        message.other = $root.tendermint.p2p.DefaultNodeInfoOther.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DefaultNodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.DefaultNodeInfo} DefaultNodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DefaultNodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DefaultNodeInfo message.
             * @function verify
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DefaultNodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.protocol_version != null && message.hasOwnProperty("protocol_version")) {
                    let error = $root.tendermint.p2p.ProtocolVersion.verify(message.protocol_version);
                    if (error)
                        return "protocol_version." + error;
                }
                if (message.default_node_id != null && message.hasOwnProperty("default_node_id"))
                    if (!$util.isString(message.default_node_id))
                        return "default_node_id: string expected";
                if (message.listen_addr != null && message.hasOwnProperty("listen_addr"))
                    if (!$util.isString(message.listen_addr))
                        return "listen_addr: string expected";
                if (message.network != null && message.hasOwnProperty("network"))
                    if (!$util.isString(message.network))
                        return "network: string expected";
                if (message.version != null && message.hasOwnProperty("version"))
                    if (!$util.isString(message.version))
                        return "version: string expected";
                if (message.channels != null && message.hasOwnProperty("channels"))
                    if (!(message.channels && typeof message.channels.length === "number" || $util.isString(message.channels)))
                        return "channels: buffer expected";
                if (message.moniker != null && message.hasOwnProperty("moniker"))
                    if (!$util.isString(message.moniker))
                        return "moniker: string expected";
                if (message.other != null && message.hasOwnProperty("other")) {
                    let error = $root.tendermint.p2p.DefaultNodeInfoOther.verify(message.other);
                    if (error)
                        return "other." + error;
                }
                return null;
            };

            /**
             * Creates a DefaultNodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.DefaultNodeInfo} DefaultNodeInfo
             */
            DefaultNodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.DefaultNodeInfo)
                    return object;
                let message = new $root.tendermint.p2p.DefaultNodeInfo();
                if (object.protocol_version != null) {
                    if (typeof object.protocol_version !== "object")
                        throw TypeError(".tendermint.p2p.DefaultNodeInfo.protocol_version: object expected");
                    message.protocol_version = $root.tendermint.p2p.ProtocolVersion.fromObject(object.protocol_version);
                }
                if (object.default_node_id != null)
                    message.default_node_id = String(object.default_node_id);
                if (object.listen_addr != null)
                    message.listen_addr = String(object.listen_addr);
                if (object.network != null)
                    message.network = String(object.network);
                if (object.version != null)
                    message.version = String(object.version);
                if (object.channels != null)
                    if (typeof object.channels === "string")
                        $util.base64.decode(object.channels, message.channels = $util.newBuffer($util.base64.length(object.channels)), 0);
                    else if (object.channels.length)
                        message.channels = object.channels;
                if (object.moniker != null)
                    message.moniker = String(object.moniker);
                if (object.other != null) {
                    if (typeof object.other !== "object")
                        throw TypeError(".tendermint.p2p.DefaultNodeInfo.other: object expected");
                    message.other = $root.tendermint.p2p.DefaultNodeInfoOther.fromObject(object.other);
                }
                return message;
            };

            /**
             * Creates a plain object from a DefaultNodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @static
             * @param {tendermint.p2p.DefaultNodeInfo} message DefaultNodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DefaultNodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.protocol_version = null;
                    object.default_node_id = "";
                    object.listen_addr = "";
                    object.network = "";
                    object.version = "";
                    if (options.bytes === String)
                        object.channels = "";
                    else {
                        object.channels = [];
                        if (options.bytes !== Array)
                            object.channels = $util.newBuffer(object.channels);
                    }
                    object.moniker = "";
                    object.other = null;
                }
                if (message.protocol_version != null && message.hasOwnProperty("protocol_version"))
                    object.protocol_version = $root.tendermint.p2p.ProtocolVersion.toObject(message.protocol_version, options);
                if (message.default_node_id != null && message.hasOwnProperty("default_node_id"))
                    object.default_node_id = message.default_node_id;
                if (message.listen_addr != null && message.hasOwnProperty("listen_addr"))
                    object.listen_addr = message.listen_addr;
                if (message.network != null && message.hasOwnProperty("network"))
                    object.network = message.network;
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = message.version;
                if (message.channels != null && message.hasOwnProperty("channels"))
                    object.channels = options.bytes === String ? $util.base64.encode(message.channels, 0, message.channels.length) : options.bytes === Array ? Array.prototype.slice.call(message.channels) : message.channels;
                if (message.moniker != null && message.hasOwnProperty("moniker"))
                    object.moniker = message.moniker;
                if (message.other != null && message.hasOwnProperty("other"))
                    object.other = $root.tendermint.p2p.DefaultNodeInfoOther.toObject(message.other, options);
                return object;
            };

            /**
             * Converts this DefaultNodeInfo to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.DefaultNodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DefaultNodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DefaultNodeInfo;
        })();

        p2p.DefaultNodeInfoOther = (function() {

            /**
             * Properties of a DefaultNodeInfoOther.
             * @memberof tendermint.p2p
             * @interface IDefaultNodeInfoOther
             * @property {string|null} [tx_index] DefaultNodeInfoOther tx_index
             * @property {string|null} [rpc_address] DefaultNodeInfoOther rpc_address
             */

            /**
             * Constructs a new DefaultNodeInfoOther.
             * @memberof tendermint.p2p
             * @classdesc Represents a DefaultNodeInfoOther.
             * @implements IDefaultNodeInfoOther
             * @constructor
             * @param {tendermint.p2p.IDefaultNodeInfoOther=} [properties] Properties to set
             */
            function DefaultNodeInfoOther(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DefaultNodeInfoOther tx_index.
             * @member {string} tx_index
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @instance
             */
            DefaultNodeInfoOther.prototype.tx_index = "";

            /**
             * DefaultNodeInfoOther rpc_address.
             * @member {string} rpc_address
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @instance
             */
            DefaultNodeInfoOther.prototype.rpc_address = "";

            /**
             * Encodes the specified DefaultNodeInfoOther message. Does not implicitly {@link tendermint.p2p.DefaultNodeInfoOther.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {tendermint.p2p.IDefaultNodeInfoOther} message DefaultNodeInfoOther message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DefaultNodeInfoOther.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tx_index != null && Object.hasOwnProperty.call(message, "tx_index"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.tx_index);
                if (message.rpc_address != null && Object.hasOwnProperty.call(message, "rpc_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.rpc_address);
                return writer;
            };

            /**
             * Encodes the specified DefaultNodeInfoOther message, length delimited. Does not implicitly {@link tendermint.p2p.DefaultNodeInfoOther.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {tendermint.p2p.IDefaultNodeInfoOther} message DefaultNodeInfoOther message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DefaultNodeInfoOther.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DefaultNodeInfoOther message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.DefaultNodeInfoOther} DefaultNodeInfoOther
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DefaultNodeInfoOther.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.DefaultNodeInfoOther();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tx_index = reader.string();
                        break;
                    case 2:
                        message.rpc_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DefaultNodeInfoOther message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.DefaultNodeInfoOther} DefaultNodeInfoOther
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DefaultNodeInfoOther.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DefaultNodeInfoOther message.
             * @function verify
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DefaultNodeInfoOther.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                    if (!$util.isString(message.tx_index))
                        return "tx_index: string expected";
                if (message.rpc_address != null && message.hasOwnProperty("rpc_address"))
                    if (!$util.isString(message.rpc_address))
                        return "rpc_address: string expected";
                return null;
            };

            /**
             * Creates a DefaultNodeInfoOther message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.DefaultNodeInfoOther} DefaultNodeInfoOther
             */
            DefaultNodeInfoOther.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.DefaultNodeInfoOther)
                    return object;
                let message = new $root.tendermint.p2p.DefaultNodeInfoOther();
                if (object.tx_index != null)
                    message.tx_index = String(object.tx_index);
                if (object.rpc_address != null)
                    message.rpc_address = String(object.rpc_address);
                return message;
            };

            /**
             * Creates a plain object from a DefaultNodeInfoOther message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @static
             * @param {tendermint.p2p.DefaultNodeInfoOther} message DefaultNodeInfoOther
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DefaultNodeInfoOther.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.tx_index = "";
                    object.rpc_address = "";
                }
                if (message.tx_index != null && message.hasOwnProperty("tx_index"))
                    object.tx_index = message.tx_index;
                if (message.rpc_address != null && message.hasOwnProperty("rpc_address"))
                    object.rpc_address = message.rpc_address;
                return object;
            };

            /**
             * Converts this DefaultNodeInfoOther to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.DefaultNodeInfoOther
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DefaultNodeInfoOther.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DefaultNodeInfoOther;
        })();

        p2p.PacketPing = (function() {

            /**
             * Properties of a PacketPing.
             * @memberof tendermint.p2p
             * @interface IPacketPing
             */

            /**
             * Constructs a new PacketPing.
             * @memberof tendermint.p2p
             * @classdesc Represents a PacketPing.
             * @implements IPacketPing
             * @constructor
             * @param {tendermint.p2p.IPacketPing=} [properties] Properties to set
             */
            function PacketPing(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified PacketPing message. Does not implicitly {@link tendermint.p2p.PacketPing.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.PacketPing
             * @static
             * @param {tendermint.p2p.IPacketPing} message PacketPing message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PacketPing.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PacketPing message, length delimited. Does not implicitly {@link tendermint.p2p.PacketPing.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.PacketPing
             * @static
             * @param {tendermint.p2p.IPacketPing} message PacketPing message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PacketPing.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PacketPing message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.PacketPing
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.PacketPing} PacketPing
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PacketPing.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.PacketPing();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PacketPing message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.PacketPing
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.PacketPing} PacketPing
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PacketPing.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PacketPing message.
             * @function verify
             * @memberof tendermint.p2p.PacketPing
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PacketPing.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PacketPing message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.PacketPing
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.PacketPing} PacketPing
             */
            PacketPing.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.PacketPing)
                    return object;
                return new $root.tendermint.p2p.PacketPing();
            };

            /**
             * Creates a plain object from a PacketPing message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.PacketPing
             * @static
             * @param {tendermint.p2p.PacketPing} message PacketPing
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PacketPing.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PacketPing to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.PacketPing
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PacketPing.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PacketPing;
        })();

        p2p.PacketPong = (function() {

            /**
             * Properties of a PacketPong.
             * @memberof tendermint.p2p
             * @interface IPacketPong
             */

            /**
             * Constructs a new PacketPong.
             * @memberof tendermint.p2p
             * @classdesc Represents a PacketPong.
             * @implements IPacketPong
             * @constructor
             * @param {tendermint.p2p.IPacketPong=} [properties] Properties to set
             */
            function PacketPong(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified PacketPong message. Does not implicitly {@link tendermint.p2p.PacketPong.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.PacketPong
             * @static
             * @param {tendermint.p2p.IPacketPong} message PacketPong message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PacketPong.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PacketPong message, length delimited. Does not implicitly {@link tendermint.p2p.PacketPong.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.PacketPong
             * @static
             * @param {tendermint.p2p.IPacketPong} message PacketPong message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PacketPong.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PacketPong message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.PacketPong
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.PacketPong} PacketPong
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PacketPong.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.PacketPong();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PacketPong message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.PacketPong
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.PacketPong} PacketPong
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PacketPong.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PacketPong message.
             * @function verify
             * @memberof tendermint.p2p.PacketPong
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PacketPong.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PacketPong message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.PacketPong
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.PacketPong} PacketPong
             */
            PacketPong.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.PacketPong)
                    return object;
                return new $root.tendermint.p2p.PacketPong();
            };

            /**
             * Creates a plain object from a PacketPong message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.PacketPong
             * @static
             * @param {tendermint.p2p.PacketPong} message PacketPong
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PacketPong.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PacketPong to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.PacketPong
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PacketPong.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PacketPong;
        })();

        p2p.PacketMsg = (function() {

            /**
             * Properties of a PacketMsg.
             * @memberof tendermint.p2p
             * @interface IPacketMsg
             * @property {number|null} [channel_id] PacketMsg channel_id
             * @property {boolean|null} [eof] PacketMsg eof
             * @property {Uint8Array|null} [data] PacketMsg data
             */

            /**
             * Constructs a new PacketMsg.
             * @memberof tendermint.p2p
             * @classdesc Represents a PacketMsg.
             * @implements IPacketMsg
             * @constructor
             * @param {tendermint.p2p.IPacketMsg=} [properties] Properties to set
             */
            function PacketMsg(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PacketMsg channel_id.
             * @member {number} channel_id
             * @memberof tendermint.p2p.PacketMsg
             * @instance
             */
            PacketMsg.prototype.channel_id = 0;

            /**
             * PacketMsg eof.
             * @member {boolean} eof
             * @memberof tendermint.p2p.PacketMsg
             * @instance
             */
            PacketMsg.prototype.eof = false;

            /**
             * PacketMsg data.
             * @member {Uint8Array} data
             * @memberof tendermint.p2p.PacketMsg
             * @instance
             */
            PacketMsg.prototype.data = $util.newBuffer([]);

            /**
             * Encodes the specified PacketMsg message. Does not implicitly {@link tendermint.p2p.PacketMsg.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.PacketMsg
             * @static
             * @param {tendermint.p2p.IPacketMsg} message PacketMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PacketMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.channel_id);
                if (message.eof != null && Object.hasOwnProperty.call(message, "eof"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.eof);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                return writer;
            };

            /**
             * Encodes the specified PacketMsg message, length delimited. Does not implicitly {@link tendermint.p2p.PacketMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.PacketMsg
             * @static
             * @param {tendermint.p2p.IPacketMsg} message PacketMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PacketMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PacketMsg message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.PacketMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.PacketMsg} PacketMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PacketMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.PacketMsg();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.channel_id = reader.int32();
                        break;
                    case 2:
                        message.eof = reader.bool();
                        break;
                    case 3:
                        message.data = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PacketMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.PacketMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.PacketMsg} PacketMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PacketMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PacketMsg message.
             * @function verify
             * @memberof tendermint.p2p.PacketMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PacketMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                    if (!$util.isInteger(message.channel_id))
                        return "channel_id: integer expected";
                if (message.eof != null && message.hasOwnProperty("eof"))
                    if (typeof message.eof !== "boolean")
                        return "eof: boolean expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                return null;
            };

            /**
             * Creates a PacketMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.PacketMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.PacketMsg} PacketMsg
             */
            PacketMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.PacketMsg)
                    return object;
                let message = new $root.tendermint.p2p.PacketMsg();
                if (object.channel_id != null)
                    message.channel_id = object.channel_id | 0;
                if (object.eof != null)
                    message.eof = Boolean(object.eof);
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                return message;
            };

            /**
             * Creates a plain object from a PacketMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.PacketMsg
             * @static
             * @param {tendermint.p2p.PacketMsg} message PacketMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PacketMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.channel_id = 0;
                    object.eof = false;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                }
                if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                    object.channel_id = message.channel_id;
                if (message.eof != null && message.hasOwnProperty("eof"))
                    object.eof = message.eof;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                return object;
            };

            /**
             * Converts this PacketMsg to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.PacketMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PacketMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PacketMsg;
        })();

        p2p.Packet = (function() {

            /**
             * Properties of a Packet.
             * @memberof tendermint.p2p
             * @interface IPacket
             * @property {tendermint.p2p.IPacketPing|null} [packet_ping] Packet packet_ping
             * @property {tendermint.p2p.IPacketPong|null} [packet_pong] Packet packet_pong
             * @property {tendermint.p2p.IPacketMsg|null} [packet_msg] Packet packet_msg
             */

            /**
             * Constructs a new Packet.
             * @memberof tendermint.p2p
             * @classdesc Represents a Packet.
             * @implements IPacket
             * @constructor
             * @param {tendermint.p2p.IPacket=} [properties] Properties to set
             */
            function Packet(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Packet packet_ping.
             * @member {tendermint.p2p.IPacketPing|null|undefined} packet_ping
             * @memberof tendermint.p2p.Packet
             * @instance
             */
            Packet.prototype.packet_ping = null;

            /**
             * Packet packet_pong.
             * @member {tendermint.p2p.IPacketPong|null|undefined} packet_pong
             * @memberof tendermint.p2p.Packet
             * @instance
             */
            Packet.prototype.packet_pong = null;

            /**
             * Packet packet_msg.
             * @member {tendermint.p2p.IPacketMsg|null|undefined} packet_msg
             * @memberof tendermint.p2p.Packet
             * @instance
             */
            Packet.prototype.packet_msg = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Packet sum.
             * @member {"packet_ping"|"packet_pong"|"packet_msg"|undefined} sum
             * @memberof tendermint.p2p.Packet
             * @instance
             */
            Object.defineProperty(Packet.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["packet_ping", "packet_pong", "packet_msg"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Packet message. Does not implicitly {@link tendermint.p2p.Packet.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.Packet
             * @static
             * @param {tendermint.p2p.IPacket} message Packet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Packet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.packet_ping != null && Object.hasOwnProperty.call(message, "packet_ping"))
                    $root.tendermint.p2p.PacketPing.encode(message.packet_ping, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.packet_pong != null && Object.hasOwnProperty.call(message, "packet_pong"))
                    $root.tendermint.p2p.PacketPong.encode(message.packet_pong, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.packet_msg != null && Object.hasOwnProperty.call(message, "packet_msg"))
                    $root.tendermint.p2p.PacketMsg.encode(message.packet_msg, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Packet message, length delimited. Does not implicitly {@link tendermint.p2p.Packet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.Packet
             * @static
             * @param {tendermint.p2p.IPacket} message Packet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Packet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Packet message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.Packet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.Packet} Packet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Packet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.Packet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.packet_ping = $root.tendermint.p2p.PacketPing.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.packet_pong = $root.tendermint.p2p.PacketPong.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.packet_msg = $root.tendermint.p2p.PacketMsg.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Packet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.Packet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.Packet} Packet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Packet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Packet message.
             * @function verify
             * @memberof tendermint.p2p.Packet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Packet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.packet_ping != null && message.hasOwnProperty("packet_ping")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.p2p.PacketPing.verify(message.packet_ping);
                        if (error)
                            return "packet_ping." + error;
                    }
                }
                if (message.packet_pong != null && message.hasOwnProperty("packet_pong")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.p2p.PacketPong.verify(message.packet_pong);
                        if (error)
                            return "packet_pong." + error;
                    }
                }
                if (message.packet_msg != null && message.hasOwnProperty("packet_msg")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.p2p.PacketMsg.verify(message.packet_msg);
                        if (error)
                            return "packet_msg." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Packet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.Packet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.Packet} Packet
             */
            Packet.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.Packet)
                    return object;
                let message = new $root.tendermint.p2p.Packet();
                if (object.packet_ping != null) {
                    if (typeof object.packet_ping !== "object")
                        throw TypeError(".tendermint.p2p.Packet.packet_ping: object expected");
                    message.packet_ping = $root.tendermint.p2p.PacketPing.fromObject(object.packet_ping);
                }
                if (object.packet_pong != null) {
                    if (typeof object.packet_pong !== "object")
                        throw TypeError(".tendermint.p2p.Packet.packet_pong: object expected");
                    message.packet_pong = $root.tendermint.p2p.PacketPong.fromObject(object.packet_pong);
                }
                if (object.packet_msg != null) {
                    if (typeof object.packet_msg !== "object")
                        throw TypeError(".tendermint.p2p.Packet.packet_msg: object expected");
                    message.packet_msg = $root.tendermint.p2p.PacketMsg.fromObject(object.packet_msg);
                }
                return message;
            };

            /**
             * Creates a plain object from a Packet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.Packet
             * @static
             * @param {tendermint.p2p.Packet} message Packet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Packet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.packet_ping != null && message.hasOwnProperty("packet_ping")) {
                    object.packet_ping = $root.tendermint.p2p.PacketPing.toObject(message.packet_ping, options);
                    if (options.oneofs)
                        object.sum = "packet_ping";
                }
                if (message.packet_pong != null && message.hasOwnProperty("packet_pong")) {
                    object.packet_pong = $root.tendermint.p2p.PacketPong.toObject(message.packet_pong, options);
                    if (options.oneofs)
                        object.sum = "packet_pong";
                }
                if (message.packet_msg != null && message.hasOwnProperty("packet_msg")) {
                    object.packet_msg = $root.tendermint.p2p.PacketMsg.toObject(message.packet_msg, options);
                    if (options.oneofs)
                        object.sum = "packet_msg";
                }
                return object;
            };

            /**
             * Converts this Packet to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.Packet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Packet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Packet;
        })();

        p2p.AuthSigMessage = (function() {

            /**
             * Properties of an AuthSigMessage.
             * @memberof tendermint.p2p
             * @interface IAuthSigMessage
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] AuthSigMessage pub_key
             * @property {Uint8Array|null} [sig] AuthSigMessage sig
             */

            /**
             * Constructs a new AuthSigMessage.
             * @memberof tendermint.p2p
             * @classdesc Represents an AuthSigMessage.
             * @implements IAuthSigMessage
             * @constructor
             * @param {tendermint.p2p.IAuthSigMessage=} [properties] Properties to set
             */
            function AuthSigMessage(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuthSigMessage pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.p2p.AuthSigMessage
             * @instance
             */
            AuthSigMessage.prototype.pub_key = null;

            /**
             * AuthSigMessage sig.
             * @member {Uint8Array} sig
             * @memberof tendermint.p2p.AuthSigMessage
             * @instance
             */
            AuthSigMessage.prototype.sig = $util.newBuffer([]);

            /**
             * Encodes the specified AuthSigMessage message. Does not implicitly {@link tendermint.p2p.AuthSigMessage.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.AuthSigMessage
             * @static
             * @param {tendermint.p2p.IAuthSigMessage} message AuthSigMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthSigMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.sig != null && Object.hasOwnProperty.call(message, "sig"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.sig);
                return writer;
            };

            /**
             * Encodes the specified AuthSigMessage message, length delimited. Does not implicitly {@link tendermint.p2p.AuthSigMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.AuthSigMessage
             * @static
             * @param {tendermint.p2p.IAuthSigMessage} message AuthSigMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthSigMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuthSigMessage message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.AuthSigMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.AuthSigMessage} AuthSigMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthSigMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.AuthSigMessage();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.sig = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuthSigMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.AuthSigMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.AuthSigMessage} AuthSigMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthSigMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuthSigMessage message.
             * @function verify
             * @memberof tendermint.p2p.AuthSigMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuthSigMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.sig != null && message.hasOwnProperty("sig"))
                    if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                        return "sig: buffer expected";
                return null;
            };

            /**
             * Creates an AuthSigMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.AuthSigMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.AuthSigMessage} AuthSigMessage
             */
            AuthSigMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.AuthSigMessage)
                    return object;
                let message = new $root.tendermint.p2p.AuthSigMessage();
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.p2p.AuthSigMessage.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.sig != null)
                    if (typeof object.sig === "string")
                        $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                    else if (object.sig.length)
                        message.sig = object.sig;
                return message;
            };

            /**
             * Creates a plain object from an AuthSigMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.AuthSigMessage
             * @static
             * @param {tendermint.p2p.AuthSigMessage} message AuthSigMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuthSigMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pub_key = null;
                    if (options.bytes === String)
                        object.sig = "";
                    else {
                        object.sig = [];
                        if (options.bytes !== Array)
                            object.sig = $util.newBuffer(object.sig);
                    }
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.sig != null && message.hasOwnProperty("sig"))
                    object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
                return object;
            };

            /**
             * Converts this AuthSigMessage to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.AuthSigMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuthSigMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuthSigMessage;
        })();

        p2p.PexRequest = (function() {

            /**
             * Properties of a PexRequest.
             * @memberof tendermint.p2p
             * @interface IPexRequest
             */

            /**
             * Constructs a new PexRequest.
             * @memberof tendermint.p2p
             * @classdesc Represents a PexRequest.
             * @implements IPexRequest
             * @constructor
             * @param {tendermint.p2p.IPexRequest=} [properties] Properties to set
             */
            function PexRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified PexRequest message. Does not implicitly {@link tendermint.p2p.PexRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.PexRequest
             * @static
             * @param {tendermint.p2p.IPexRequest} message PexRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PexRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PexRequest message, length delimited. Does not implicitly {@link tendermint.p2p.PexRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.PexRequest
             * @static
             * @param {tendermint.p2p.IPexRequest} message PexRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PexRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PexRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.PexRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.PexRequest} PexRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PexRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.PexRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PexRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.PexRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.PexRequest} PexRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PexRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PexRequest message.
             * @function verify
             * @memberof tendermint.p2p.PexRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PexRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PexRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.PexRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.PexRequest} PexRequest
             */
            PexRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.PexRequest)
                    return object;
                return new $root.tendermint.p2p.PexRequest();
            };

            /**
             * Creates a plain object from a PexRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.PexRequest
             * @static
             * @param {tendermint.p2p.PexRequest} message PexRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PexRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PexRequest to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.PexRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PexRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PexRequest;
        })();

        p2p.PexAddrs = (function() {

            /**
             * Properties of a PexAddrs.
             * @memberof tendermint.p2p
             * @interface IPexAddrs
             * @property {Array.<tendermint.p2p.INetAddress>|null} [addrs] PexAddrs addrs
             */

            /**
             * Constructs a new PexAddrs.
             * @memberof tendermint.p2p
             * @classdesc Represents a PexAddrs.
             * @implements IPexAddrs
             * @constructor
             * @param {tendermint.p2p.IPexAddrs=} [properties] Properties to set
             */
            function PexAddrs(properties) {
                this.addrs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PexAddrs addrs.
             * @member {Array.<tendermint.p2p.INetAddress>} addrs
             * @memberof tendermint.p2p.PexAddrs
             * @instance
             */
            PexAddrs.prototype.addrs = $util.emptyArray;

            /**
             * Encodes the specified PexAddrs message. Does not implicitly {@link tendermint.p2p.PexAddrs.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.PexAddrs
             * @static
             * @param {tendermint.p2p.IPexAddrs} message PexAddrs message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PexAddrs.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.addrs != null && message.addrs.length)
                    for (let i = 0; i < message.addrs.length; ++i)
                        $root.tendermint.p2p.NetAddress.encode(message.addrs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PexAddrs message, length delimited. Does not implicitly {@link tendermint.p2p.PexAddrs.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.PexAddrs
             * @static
             * @param {tendermint.p2p.IPexAddrs} message PexAddrs message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PexAddrs.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PexAddrs message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.PexAddrs
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.PexAddrs} PexAddrs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PexAddrs.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.PexAddrs();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.addrs && message.addrs.length))
                            message.addrs = [];
                        message.addrs.push($root.tendermint.p2p.NetAddress.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PexAddrs message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.PexAddrs
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.PexAddrs} PexAddrs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PexAddrs.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PexAddrs message.
             * @function verify
             * @memberof tendermint.p2p.PexAddrs
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PexAddrs.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.addrs != null && message.hasOwnProperty("addrs")) {
                    if (!Array.isArray(message.addrs))
                        return "addrs: array expected";
                    for (let i = 0; i < message.addrs.length; ++i) {
                        let error = $root.tendermint.p2p.NetAddress.verify(message.addrs[i]);
                        if (error)
                            return "addrs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PexAddrs message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.PexAddrs
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.PexAddrs} PexAddrs
             */
            PexAddrs.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.PexAddrs)
                    return object;
                let message = new $root.tendermint.p2p.PexAddrs();
                if (object.addrs) {
                    if (!Array.isArray(object.addrs))
                        throw TypeError(".tendermint.p2p.PexAddrs.addrs: array expected");
                    message.addrs = [];
                    for (let i = 0; i < object.addrs.length; ++i) {
                        if (typeof object.addrs[i] !== "object")
                            throw TypeError(".tendermint.p2p.PexAddrs.addrs: object expected");
                        message.addrs[i] = $root.tendermint.p2p.NetAddress.fromObject(object.addrs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PexAddrs message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.PexAddrs
             * @static
             * @param {tendermint.p2p.PexAddrs} message PexAddrs
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PexAddrs.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.addrs = [];
                if (message.addrs && message.addrs.length) {
                    object.addrs = [];
                    for (let j = 0; j < message.addrs.length; ++j)
                        object.addrs[j] = $root.tendermint.p2p.NetAddress.toObject(message.addrs[j], options);
                }
                return object;
            };

            /**
             * Converts this PexAddrs to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.PexAddrs
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PexAddrs.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PexAddrs;
        })();

        p2p.Message = (function() {

            /**
             * Properties of a Message.
             * @memberof tendermint.p2p
             * @interface IMessage
             * @property {tendermint.p2p.IPexRequest|null} [pex_request] Message pex_request
             * @property {tendermint.p2p.IPexAddrs|null} [pex_addrs] Message pex_addrs
             */

            /**
             * Constructs a new Message.
             * @memberof tendermint.p2p
             * @classdesc Represents a Message.
             * @implements IMessage
             * @constructor
             * @param {tendermint.p2p.IMessage=} [properties] Properties to set
             */
            function Message(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Message pex_request.
             * @member {tendermint.p2p.IPexRequest|null|undefined} pex_request
             * @memberof tendermint.p2p.Message
             * @instance
             */
            Message.prototype.pex_request = null;

            /**
             * Message pex_addrs.
             * @member {tendermint.p2p.IPexAddrs|null|undefined} pex_addrs
             * @memberof tendermint.p2p.Message
             * @instance
             */
            Message.prototype.pex_addrs = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Message sum.
             * @member {"pex_request"|"pex_addrs"|undefined} sum
             * @memberof tendermint.p2p.Message
             * @instance
             */
            Object.defineProperty(Message.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["pex_request", "pex_addrs"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Message message. Does not implicitly {@link tendermint.p2p.Message.verify|verify} messages.
             * @function encode
             * @memberof tendermint.p2p.Message
             * @static
             * @param {tendermint.p2p.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pex_request != null && Object.hasOwnProperty.call(message, "pex_request"))
                    $root.tendermint.p2p.PexRequest.encode(message.pex_request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pex_addrs != null && Object.hasOwnProperty.call(message, "pex_addrs"))
                    $root.tendermint.p2p.PexAddrs.encode(message.pex_addrs, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link tendermint.p2p.Message.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.p2p.Message
             * @static
             * @param {tendermint.p2p.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.p2p.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.p2p.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.p2p.Message();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pex_request = $root.tendermint.p2p.PexRequest.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.pex_addrs = $root.tendermint.p2p.PexAddrs.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.p2p.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.p2p.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Message message.
             * @function verify
             * @memberof tendermint.p2p.Message
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Message.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.pex_request != null && message.hasOwnProperty("pex_request")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.p2p.PexRequest.verify(message.pex_request);
                        if (error)
                            return "pex_request." + error;
                    }
                }
                if (message.pex_addrs != null && message.hasOwnProperty("pex_addrs")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.p2p.PexAddrs.verify(message.pex_addrs);
                        if (error)
                            return "pex_addrs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.p2p.Message
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.p2p.Message} Message
             */
            Message.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.p2p.Message)
                    return object;
                let message = new $root.tendermint.p2p.Message();
                if (object.pex_request != null) {
                    if (typeof object.pex_request !== "object")
                        throw TypeError(".tendermint.p2p.Message.pex_request: object expected");
                    message.pex_request = $root.tendermint.p2p.PexRequest.fromObject(object.pex_request);
                }
                if (object.pex_addrs != null) {
                    if (typeof object.pex_addrs !== "object")
                        throw TypeError(".tendermint.p2p.Message.pex_addrs: object expected");
                    message.pex_addrs = $root.tendermint.p2p.PexAddrs.fromObject(object.pex_addrs);
                }
                return message;
            };

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.p2p.Message
             * @static
             * @param {tendermint.p2p.Message} message Message
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Message.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.pex_request != null && message.hasOwnProperty("pex_request")) {
                    object.pex_request = $root.tendermint.p2p.PexRequest.toObject(message.pex_request, options);
                    if (options.oneofs)
                        object.sum = "pex_request";
                }
                if (message.pex_addrs != null && message.hasOwnProperty("pex_addrs")) {
                    object.pex_addrs = $root.tendermint.p2p.PexAddrs.toObject(message.pex_addrs, options);
                    if (options.oneofs)
                        object.sum = "pex_addrs";
                }
                return object;
            };

            /**
             * Converts this Message to JSON.
             * @function toJSON
             * @memberof tendermint.p2p.Message
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Message.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Message;
        })();

        return p2p;
    })();

    tendermint.privval = (function() {

        /**
         * Namespace privval.
         * @memberof tendermint
         * @namespace
         */
        const privval = {};

        /**
         * Errors enum.
         * @name tendermint.privval.Errors
         * @enum {number}
         * @property {number} ERRORS_UNKNOWN=0 ERRORS_UNKNOWN value
         * @property {number} ERRORS_UNEXPECTED_RESPONSE=1 ERRORS_UNEXPECTED_RESPONSE value
         * @property {number} ERRORS_NO_CONNECTION=2 ERRORS_NO_CONNECTION value
         * @property {number} ERRORS_CONNECTION_TIMEOUT=3 ERRORS_CONNECTION_TIMEOUT value
         * @property {number} ERRORS_READ_TIMEOUT=4 ERRORS_READ_TIMEOUT value
         * @property {number} ERRORS_WRITE_TIMEOUT=5 ERRORS_WRITE_TIMEOUT value
         */
        privval.Errors = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ERRORS_UNKNOWN"] = 0;
            values[valuesById[1] = "ERRORS_UNEXPECTED_RESPONSE"] = 1;
            values[valuesById[2] = "ERRORS_NO_CONNECTION"] = 2;
            values[valuesById[3] = "ERRORS_CONNECTION_TIMEOUT"] = 3;
            values[valuesById[4] = "ERRORS_READ_TIMEOUT"] = 4;
            values[valuesById[5] = "ERRORS_WRITE_TIMEOUT"] = 5;
            return values;
        })();

        privval.RemoteSignerError = (function() {

            /**
             * Properties of a RemoteSignerError.
             * @memberof tendermint.privval
             * @interface IRemoteSignerError
             * @property {number|null} [code] RemoteSignerError code
             * @property {string|null} [description] RemoteSignerError description
             */

            /**
             * Constructs a new RemoteSignerError.
             * @memberof tendermint.privval
             * @classdesc Represents a RemoteSignerError.
             * @implements IRemoteSignerError
             * @constructor
             * @param {tendermint.privval.IRemoteSignerError=} [properties] Properties to set
             */
            function RemoteSignerError(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RemoteSignerError code.
             * @member {number} code
             * @memberof tendermint.privval.RemoteSignerError
             * @instance
             */
            RemoteSignerError.prototype.code = 0;

            /**
             * RemoteSignerError description.
             * @member {string} description
             * @memberof tendermint.privval.RemoteSignerError
             * @instance
             */
            RemoteSignerError.prototype.description = "";

            /**
             * Encodes the specified RemoteSignerError message. Does not implicitly {@link tendermint.privval.RemoteSignerError.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.RemoteSignerError
             * @static
             * @param {tendermint.privval.IRemoteSignerError} message RemoteSignerError message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemoteSignerError.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                return writer;
            };

            /**
             * Encodes the specified RemoteSignerError message, length delimited. Does not implicitly {@link tendermint.privval.RemoteSignerError.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.RemoteSignerError
             * @static
             * @param {tendermint.privval.IRemoteSignerError} message RemoteSignerError message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemoteSignerError.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RemoteSignerError message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.RemoteSignerError
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.RemoteSignerError} RemoteSignerError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemoteSignerError.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.RemoteSignerError();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.description = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RemoteSignerError message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.RemoteSignerError
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.RemoteSignerError} RemoteSignerError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemoteSignerError.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RemoteSignerError message.
             * @function verify
             * @memberof tendermint.privval.RemoteSignerError
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RemoteSignerError.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                return null;
            };

            /**
             * Creates a RemoteSignerError message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.RemoteSignerError
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.RemoteSignerError} RemoteSignerError
             */
            RemoteSignerError.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.RemoteSignerError)
                    return object;
                let message = new $root.tendermint.privval.RemoteSignerError();
                if (object.code != null)
                    message.code = object.code | 0;
                if (object.description != null)
                    message.description = String(object.description);
                return message;
            };

            /**
             * Creates a plain object from a RemoteSignerError message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.RemoteSignerError
             * @static
             * @param {tendermint.privval.RemoteSignerError} message RemoteSignerError
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RemoteSignerError.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.description = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                return object;
            };

            /**
             * Converts this RemoteSignerError to JSON.
             * @function toJSON
             * @memberof tendermint.privval.RemoteSignerError
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RemoteSignerError.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RemoteSignerError;
        })();

        privval.PubKeyRequest = (function() {

            /**
             * Properties of a PubKeyRequest.
             * @memberof tendermint.privval
             * @interface IPubKeyRequest
             * @property {string|null} [chain_id] PubKeyRequest chain_id
             */

            /**
             * Constructs a new PubKeyRequest.
             * @memberof tendermint.privval
             * @classdesc Represents a PubKeyRequest.
             * @implements IPubKeyRequest
             * @constructor
             * @param {tendermint.privval.IPubKeyRequest=} [properties] Properties to set
             */
            function PubKeyRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PubKeyRequest chain_id.
             * @member {string} chain_id
             * @memberof tendermint.privval.PubKeyRequest
             * @instance
             */
            PubKeyRequest.prototype.chain_id = "";

            /**
             * Encodes the specified PubKeyRequest message. Does not implicitly {@link tendermint.privval.PubKeyRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.PubKeyRequest
             * @static
             * @param {tendermint.privval.IPubKeyRequest} message PubKeyRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PubKeyRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                return writer;
            };

            /**
             * Encodes the specified PubKeyRequest message, length delimited. Does not implicitly {@link tendermint.privval.PubKeyRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.PubKeyRequest
             * @static
             * @param {tendermint.privval.IPubKeyRequest} message PubKeyRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PubKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PubKeyRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.PubKeyRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.PubKeyRequest} PubKeyRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PubKeyRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.PubKeyRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.chain_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PubKeyRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.PubKeyRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.PubKeyRequest} PubKeyRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PubKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PubKeyRequest message.
             * @function verify
             * @memberof tendermint.privval.PubKeyRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PubKeyRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                return null;
            };

            /**
             * Creates a PubKeyRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.PubKeyRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.PubKeyRequest} PubKeyRequest
             */
            PubKeyRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.PubKeyRequest)
                    return object;
                let message = new $root.tendermint.privval.PubKeyRequest();
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                return message;
            };

            /**
             * Creates a plain object from a PubKeyRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.PubKeyRequest
             * @static
             * @param {tendermint.privval.PubKeyRequest} message PubKeyRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PubKeyRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.chain_id = "";
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                return object;
            };

            /**
             * Converts this PubKeyRequest to JSON.
             * @function toJSON
             * @memberof tendermint.privval.PubKeyRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PubKeyRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PubKeyRequest;
        })();

        privval.PubKeyResponse = (function() {

            /**
             * Properties of a PubKeyResponse.
             * @memberof tendermint.privval
             * @interface IPubKeyResponse
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] PubKeyResponse pub_key
             * @property {tendermint.privval.IRemoteSignerError|null} [error] PubKeyResponse error
             */

            /**
             * Constructs a new PubKeyResponse.
             * @memberof tendermint.privval
             * @classdesc Represents a PubKeyResponse.
             * @implements IPubKeyResponse
             * @constructor
             * @param {tendermint.privval.IPubKeyResponse=} [properties] Properties to set
             */
            function PubKeyResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PubKeyResponse pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.privval.PubKeyResponse
             * @instance
             */
            PubKeyResponse.prototype.pub_key = null;

            /**
             * PubKeyResponse error.
             * @member {tendermint.privval.IRemoteSignerError|null|undefined} error
             * @memberof tendermint.privval.PubKeyResponse
             * @instance
             */
            PubKeyResponse.prototype.error = null;

            /**
             * Encodes the specified PubKeyResponse message. Does not implicitly {@link tendermint.privval.PubKeyResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.PubKeyResponse
             * @static
             * @param {tendermint.privval.IPubKeyResponse} message PubKeyResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PubKeyResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                    $root.tendermint.privval.RemoteSignerError.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PubKeyResponse message, length delimited. Does not implicitly {@link tendermint.privval.PubKeyResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.PubKeyResponse
             * @static
             * @param {tendermint.privval.IPubKeyResponse} message PubKeyResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PubKeyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PubKeyResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.PubKeyResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.PubKeyResponse} PubKeyResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PubKeyResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.PubKeyResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.error = $root.tendermint.privval.RemoteSignerError.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PubKeyResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.PubKeyResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.PubKeyResponse} PubKeyResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PubKeyResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PubKeyResponse message.
             * @function verify
             * @memberof tendermint.privval.PubKeyResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PubKeyResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.error != null && message.hasOwnProperty("error")) {
                    let error = $root.tendermint.privval.RemoteSignerError.verify(message.error);
                    if (error)
                        return "error." + error;
                }
                return null;
            };

            /**
             * Creates a PubKeyResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.PubKeyResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.PubKeyResponse} PubKeyResponse
             */
            PubKeyResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.PubKeyResponse)
                    return object;
                let message = new $root.tendermint.privval.PubKeyResponse();
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.privval.PubKeyResponse.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.error != null) {
                    if (typeof object.error !== "object")
                        throw TypeError(".tendermint.privval.PubKeyResponse.error: object expected");
                    message.error = $root.tendermint.privval.RemoteSignerError.fromObject(object.error);
                }
                return message;
            };

            /**
             * Creates a plain object from a PubKeyResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.PubKeyResponse
             * @static
             * @param {tendermint.privval.PubKeyResponse} message PubKeyResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PubKeyResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pub_key = null;
                    object.error = null;
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = $root.tendermint.privval.RemoteSignerError.toObject(message.error, options);
                return object;
            };

            /**
             * Converts this PubKeyResponse to JSON.
             * @function toJSON
             * @memberof tendermint.privval.PubKeyResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PubKeyResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PubKeyResponse;
        })();

        privval.SignVoteRequest = (function() {

            /**
             * Properties of a SignVoteRequest.
             * @memberof tendermint.privval
             * @interface ISignVoteRequest
             * @property {tendermint.types.IVote|null} [vote] SignVoteRequest vote
             * @property {string|null} [chain_id] SignVoteRequest chain_id
             */

            /**
             * Constructs a new SignVoteRequest.
             * @memberof tendermint.privval
             * @classdesc Represents a SignVoteRequest.
             * @implements ISignVoteRequest
             * @constructor
             * @param {tendermint.privval.ISignVoteRequest=} [properties] Properties to set
             */
            function SignVoteRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SignVoteRequest vote.
             * @member {tendermint.types.IVote|null|undefined} vote
             * @memberof tendermint.privval.SignVoteRequest
             * @instance
             */
            SignVoteRequest.prototype.vote = null;

            /**
             * SignVoteRequest chain_id.
             * @member {string} chain_id
             * @memberof tendermint.privval.SignVoteRequest
             * @instance
             */
            SignVoteRequest.prototype.chain_id = "";

            /**
             * Encodes the specified SignVoteRequest message. Does not implicitly {@link tendermint.privval.SignVoteRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.SignVoteRequest
             * @static
             * @param {tendermint.privval.ISignVoteRequest} message SignVoteRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignVoteRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                    $root.tendermint.types.Vote.encode(message.vote, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                return writer;
            };

            /**
             * Encodes the specified SignVoteRequest message, length delimited. Does not implicitly {@link tendermint.privval.SignVoteRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.SignVoteRequest
             * @static
             * @param {tendermint.privval.ISignVoteRequest} message SignVoteRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignVoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SignVoteRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.SignVoteRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.SignVoteRequest} SignVoteRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignVoteRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.SignVoteRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vote = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SignVoteRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.SignVoteRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.SignVoteRequest} SignVoteRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignVoteRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SignVoteRequest message.
             * @function verify
             * @memberof tendermint.privval.SignVoteRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignVoteRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote);
                    if (error)
                        return "vote." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                return null;
            };

            /**
             * Creates a SignVoteRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.SignVoteRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.SignVoteRequest} SignVoteRequest
             */
            SignVoteRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.SignVoteRequest)
                    return object;
                let message = new $root.tendermint.privval.SignVoteRequest();
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".tendermint.privval.SignVoteRequest.vote: object expected");
                    message.vote = $root.tendermint.types.Vote.fromObject(object.vote);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                return message;
            };

            /**
             * Creates a plain object from a SignVoteRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.SignVoteRequest
             * @static
             * @param {tendermint.privval.SignVoteRequest} message SignVoteRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignVoteRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.vote = null;
                    object.chain_id = "";
                }
                if (message.vote != null && message.hasOwnProperty("vote"))
                    object.vote = $root.tendermint.types.Vote.toObject(message.vote, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                return object;
            };

            /**
             * Converts this SignVoteRequest to JSON.
             * @function toJSON
             * @memberof tendermint.privval.SignVoteRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignVoteRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SignVoteRequest;
        })();

        privval.SignedVoteResponse = (function() {

            /**
             * Properties of a SignedVoteResponse.
             * @memberof tendermint.privval
             * @interface ISignedVoteResponse
             * @property {tendermint.types.IVote|null} [vote] SignedVoteResponse vote
             * @property {tendermint.privval.IRemoteSignerError|null} [error] SignedVoteResponse error
             */

            /**
             * Constructs a new SignedVoteResponse.
             * @memberof tendermint.privval
             * @classdesc Represents a SignedVoteResponse.
             * @implements ISignedVoteResponse
             * @constructor
             * @param {tendermint.privval.ISignedVoteResponse=} [properties] Properties to set
             */
            function SignedVoteResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SignedVoteResponse vote.
             * @member {tendermint.types.IVote|null|undefined} vote
             * @memberof tendermint.privval.SignedVoteResponse
             * @instance
             */
            SignedVoteResponse.prototype.vote = null;

            /**
             * SignedVoteResponse error.
             * @member {tendermint.privval.IRemoteSignerError|null|undefined} error
             * @memberof tendermint.privval.SignedVoteResponse
             * @instance
             */
            SignedVoteResponse.prototype.error = null;

            /**
             * Encodes the specified SignedVoteResponse message. Does not implicitly {@link tendermint.privval.SignedVoteResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.SignedVoteResponse
             * @static
             * @param {tendermint.privval.ISignedVoteResponse} message SignedVoteResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedVoteResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                    $root.tendermint.types.Vote.encode(message.vote, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                    $root.tendermint.privval.RemoteSignerError.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SignedVoteResponse message, length delimited. Does not implicitly {@link tendermint.privval.SignedVoteResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.SignedVoteResponse
             * @static
             * @param {tendermint.privval.ISignedVoteResponse} message SignedVoteResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedVoteResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SignedVoteResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.SignedVoteResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.SignedVoteResponse} SignedVoteResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedVoteResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.SignedVoteResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vote = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.error = $root.tendermint.privval.RemoteSignerError.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SignedVoteResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.SignedVoteResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.SignedVoteResponse} SignedVoteResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedVoteResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SignedVoteResponse message.
             * @function verify
             * @memberof tendermint.privval.SignedVoteResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignedVoteResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote);
                    if (error)
                        return "vote." + error;
                }
                if (message.error != null && message.hasOwnProperty("error")) {
                    let error = $root.tendermint.privval.RemoteSignerError.verify(message.error);
                    if (error)
                        return "error." + error;
                }
                return null;
            };

            /**
             * Creates a SignedVoteResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.SignedVoteResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.SignedVoteResponse} SignedVoteResponse
             */
            SignedVoteResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.SignedVoteResponse)
                    return object;
                let message = new $root.tendermint.privval.SignedVoteResponse();
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".tendermint.privval.SignedVoteResponse.vote: object expected");
                    message.vote = $root.tendermint.types.Vote.fromObject(object.vote);
                }
                if (object.error != null) {
                    if (typeof object.error !== "object")
                        throw TypeError(".tendermint.privval.SignedVoteResponse.error: object expected");
                    message.error = $root.tendermint.privval.RemoteSignerError.fromObject(object.error);
                }
                return message;
            };

            /**
             * Creates a plain object from a SignedVoteResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.SignedVoteResponse
             * @static
             * @param {tendermint.privval.SignedVoteResponse} message SignedVoteResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignedVoteResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.vote = null;
                    object.error = null;
                }
                if (message.vote != null && message.hasOwnProperty("vote"))
                    object.vote = $root.tendermint.types.Vote.toObject(message.vote, options);
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = $root.tendermint.privval.RemoteSignerError.toObject(message.error, options);
                return object;
            };

            /**
             * Converts this SignedVoteResponse to JSON.
             * @function toJSON
             * @memberof tendermint.privval.SignedVoteResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignedVoteResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SignedVoteResponse;
        })();

        privval.SignProposalRequest = (function() {

            /**
             * Properties of a SignProposalRequest.
             * @memberof tendermint.privval
             * @interface ISignProposalRequest
             * @property {tendermint.types.IProposal|null} [proposal] SignProposalRequest proposal
             * @property {string|null} [chain_id] SignProposalRequest chain_id
             */

            /**
             * Constructs a new SignProposalRequest.
             * @memberof tendermint.privval
             * @classdesc Represents a SignProposalRequest.
             * @implements ISignProposalRequest
             * @constructor
             * @param {tendermint.privval.ISignProposalRequest=} [properties] Properties to set
             */
            function SignProposalRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SignProposalRequest proposal.
             * @member {tendermint.types.IProposal|null|undefined} proposal
             * @memberof tendermint.privval.SignProposalRequest
             * @instance
             */
            SignProposalRequest.prototype.proposal = null;

            /**
             * SignProposalRequest chain_id.
             * @member {string} chain_id
             * @memberof tendermint.privval.SignProposalRequest
             * @instance
             */
            SignProposalRequest.prototype.chain_id = "";

            /**
             * Encodes the specified SignProposalRequest message. Does not implicitly {@link tendermint.privval.SignProposalRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.SignProposalRequest
             * @static
             * @param {tendermint.privval.ISignProposalRequest} message SignProposalRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignProposalRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.proposal != null && Object.hasOwnProperty.call(message, "proposal"))
                    $root.tendermint.types.Proposal.encode(message.proposal, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                return writer;
            };

            /**
             * Encodes the specified SignProposalRequest message, length delimited. Does not implicitly {@link tendermint.privval.SignProposalRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.SignProposalRequest
             * @static
             * @param {tendermint.privval.ISignProposalRequest} message SignProposalRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignProposalRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SignProposalRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.SignProposalRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.SignProposalRequest} SignProposalRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignProposalRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.SignProposalRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.proposal = $root.tendermint.types.Proposal.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SignProposalRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.SignProposalRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.SignProposalRequest} SignProposalRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignProposalRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SignProposalRequest message.
             * @function verify
             * @memberof tendermint.privval.SignProposalRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignProposalRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.proposal != null && message.hasOwnProperty("proposal")) {
                    let error = $root.tendermint.types.Proposal.verify(message.proposal);
                    if (error)
                        return "proposal." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                return null;
            };

            /**
             * Creates a SignProposalRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.SignProposalRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.SignProposalRequest} SignProposalRequest
             */
            SignProposalRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.SignProposalRequest)
                    return object;
                let message = new $root.tendermint.privval.SignProposalRequest();
                if (object.proposal != null) {
                    if (typeof object.proposal !== "object")
                        throw TypeError(".tendermint.privval.SignProposalRequest.proposal: object expected");
                    message.proposal = $root.tendermint.types.Proposal.fromObject(object.proposal);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                return message;
            };

            /**
             * Creates a plain object from a SignProposalRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.SignProposalRequest
             * @static
             * @param {tendermint.privval.SignProposalRequest} message SignProposalRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignProposalRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.proposal = null;
                    object.chain_id = "";
                }
                if (message.proposal != null && message.hasOwnProperty("proposal"))
                    object.proposal = $root.tendermint.types.Proposal.toObject(message.proposal, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                return object;
            };

            /**
             * Converts this SignProposalRequest to JSON.
             * @function toJSON
             * @memberof tendermint.privval.SignProposalRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignProposalRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SignProposalRequest;
        })();

        privval.SignedProposalResponse = (function() {

            /**
             * Properties of a SignedProposalResponse.
             * @memberof tendermint.privval
             * @interface ISignedProposalResponse
             * @property {tendermint.types.IProposal|null} [proposal] SignedProposalResponse proposal
             * @property {tendermint.privval.IRemoteSignerError|null} [error] SignedProposalResponse error
             */

            /**
             * Constructs a new SignedProposalResponse.
             * @memberof tendermint.privval
             * @classdesc Represents a SignedProposalResponse.
             * @implements ISignedProposalResponse
             * @constructor
             * @param {tendermint.privval.ISignedProposalResponse=} [properties] Properties to set
             */
            function SignedProposalResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SignedProposalResponse proposal.
             * @member {tendermint.types.IProposal|null|undefined} proposal
             * @memberof tendermint.privval.SignedProposalResponse
             * @instance
             */
            SignedProposalResponse.prototype.proposal = null;

            /**
             * SignedProposalResponse error.
             * @member {tendermint.privval.IRemoteSignerError|null|undefined} error
             * @memberof tendermint.privval.SignedProposalResponse
             * @instance
             */
            SignedProposalResponse.prototype.error = null;

            /**
             * Encodes the specified SignedProposalResponse message. Does not implicitly {@link tendermint.privval.SignedProposalResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.SignedProposalResponse
             * @static
             * @param {tendermint.privval.ISignedProposalResponse} message SignedProposalResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedProposalResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.proposal != null && Object.hasOwnProperty.call(message, "proposal"))
                    $root.tendermint.types.Proposal.encode(message.proposal, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                    $root.tendermint.privval.RemoteSignerError.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SignedProposalResponse message, length delimited. Does not implicitly {@link tendermint.privval.SignedProposalResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.SignedProposalResponse
             * @static
             * @param {tendermint.privval.ISignedProposalResponse} message SignedProposalResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedProposalResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SignedProposalResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.SignedProposalResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.SignedProposalResponse} SignedProposalResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedProposalResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.SignedProposalResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.proposal = $root.tendermint.types.Proposal.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.error = $root.tendermint.privval.RemoteSignerError.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SignedProposalResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.SignedProposalResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.SignedProposalResponse} SignedProposalResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedProposalResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SignedProposalResponse message.
             * @function verify
             * @memberof tendermint.privval.SignedProposalResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignedProposalResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.proposal != null && message.hasOwnProperty("proposal")) {
                    let error = $root.tendermint.types.Proposal.verify(message.proposal);
                    if (error)
                        return "proposal." + error;
                }
                if (message.error != null && message.hasOwnProperty("error")) {
                    let error = $root.tendermint.privval.RemoteSignerError.verify(message.error);
                    if (error)
                        return "error." + error;
                }
                return null;
            };

            /**
             * Creates a SignedProposalResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.SignedProposalResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.SignedProposalResponse} SignedProposalResponse
             */
            SignedProposalResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.SignedProposalResponse)
                    return object;
                let message = new $root.tendermint.privval.SignedProposalResponse();
                if (object.proposal != null) {
                    if (typeof object.proposal !== "object")
                        throw TypeError(".tendermint.privval.SignedProposalResponse.proposal: object expected");
                    message.proposal = $root.tendermint.types.Proposal.fromObject(object.proposal);
                }
                if (object.error != null) {
                    if (typeof object.error !== "object")
                        throw TypeError(".tendermint.privval.SignedProposalResponse.error: object expected");
                    message.error = $root.tendermint.privval.RemoteSignerError.fromObject(object.error);
                }
                return message;
            };

            /**
             * Creates a plain object from a SignedProposalResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.SignedProposalResponse
             * @static
             * @param {tendermint.privval.SignedProposalResponse} message SignedProposalResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignedProposalResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.proposal = null;
                    object.error = null;
                }
                if (message.proposal != null && message.hasOwnProperty("proposal"))
                    object.proposal = $root.tendermint.types.Proposal.toObject(message.proposal, options);
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = $root.tendermint.privval.RemoteSignerError.toObject(message.error, options);
                return object;
            };

            /**
             * Converts this SignedProposalResponse to JSON.
             * @function toJSON
             * @memberof tendermint.privval.SignedProposalResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignedProposalResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SignedProposalResponse;
        })();

        privval.PingRequest = (function() {

            /**
             * Properties of a PingRequest.
             * @memberof tendermint.privval
             * @interface IPingRequest
             */

            /**
             * Constructs a new PingRequest.
             * @memberof tendermint.privval
             * @classdesc Represents a PingRequest.
             * @implements IPingRequest
             * @constructor
             * @param {tendermint.privval.IPingRequest=} [properties] Properties to set
             */
            function PingRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified PingRequest message. Does not implicitly {@link tendermint.privval.PingRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.PingRequest
             * @static
             * @param {tendermint.privval.IPingRequest} message PingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PingRequest message, length delimited. Does not implicitly {@link tendermint.privval.PingRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.PingRequest
             * @static
             * @param {tendermint.privval.IPingRequest} message PingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PingRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.PingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.PingRequest} PingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.PingRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PingRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.PingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.PingRequest} PingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PingRequest message.
             * @function verify
             * @memberof tendermint.privval.PingRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PingRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PingRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.PingRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.PingRequest} PingRequest
             */
            PingRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.PingRequest)
                    return object;
                return new $root.tendermint.privval.PingRequest();
            };

            /**
             * Creates a plain object from a PingRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.PingRequest
             * @static
             * @param {tendermint.privval.PingRequest} message PingRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PingRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PingRequest to JSON.
             * @function toJSON
             * @memberof tendermint.privval.PingRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PingRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PingRequest;
        })();

        privval.PingResponse = (function() {

            /**
             * Properties of a PingResponse.
             * @memberof tendermint.privval
             * @interface IPingResponse
             */

            /**
             * Constructs a new PingResponse.
             * @memberof tendermint.privval
             * @classdesc Represents a PingResponse.
             * @implements IPingResponse
             * @constructor
             * @param {tendermint.privval.IPingResponse=} [properties] Properties to set
             */
            function PingResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified PingResponse message. Does not implicitly {@link tendermint.privval.PingResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.PingResponse
             * @static
             * @param {tendermint.privval.IPingResponse} message PingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PingResponse message, length delimited. Does not implicitly {@link tendermint.privval.PingResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.PingResponse
             * @static
             * @param {tendermint.privval.IPingResponse} message PingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PingResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.PingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.PingResponse} PingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.PingResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PingResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.PingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.PingResponse} PingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PingResponse message.
             * @function verify
             * @memberof tendermint.privval.PingResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PingResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PingResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.PingResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.PingResponse} PingResponse
             */
            PingResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.PingResponse)
                    return object;
                return new $root.tendermint.privval.PingResponse();
            };

            /**
             * Creates a plain object from a PingResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.PingResponse
             * @static
             * @param {tendermint.privval.PingResponse} message PingResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PingResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PingResponse to JSON.
             * @function toJSON
             * @memberof tendermint.privval.PingResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PingResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PingResponse;
        })();

        privval.Message = (function() {

            /**
             * Properties of a Message.
             * @memberof tendermint.privval
             * @interface IMessage
             * @property {tendermint.privval.IPubKeyRequest|null} [pub_key_request] Message pub_key_request
             * @property {tendermint.privval.IPubKeyResponse|null} [pub_key_response] Message pub_key_response
             * @property {tendermint.privval.ISignVoteRequest|null} [sign_vote_request] Message sign_vote_request
             * @property {tendermint.privval.ISignedVoteResponse|null} [signed_vote_response] Message signed_vote_response
             * @property {tendermint.privval.ISignProposalRequest|null} [sign_proposal_request] Message sign_proposal_request
             * @property {tendermint.privval.ISignedProposalResponse|null} [signed_proposal_response] Message signed_proposal_response
             * @property {tendermint.privval.IPingRequest|null} [ping_request] Message ping_request
             * @property {tendermint.privval.IPingResponse|null} [ping_response] Message ping_response
             */

            /**
             * Constructs a new Message.
             * @memberof tendermint.privval
             * @classdesc Represents a Message.
             * @implements IMessage
             * @constructor
             * @param {tendermint.privval.IMessage=} [properties] Properties to set
             */
            function Message(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Message pub_key_request.
             * @member {tendermint.privval.IPubKeyRequest|null|undefined} pub_key_request
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.pub_key_request = null;

            /**
             * Message pub_key_response.
             * @member {tendermint.privval.IPubKeyResponse|null|undefined} pub_key_response
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.pub_key_response = null;

            /**
             * Message sign_vote_request.
             * @member {tendermint.privval.ISignVoteRequest|null|undefined} sign_vote_request
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.sign_vote_request = null;

            /**
             * Message signed_vote_response.
             * @member {tendermint.privval.ISignedVoteResponse|null|undefined} signed_vote_response
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.signed_vote_response = null;

            /**
             * Message sign_proposal_request.
             * @member {tendermint.privval.ISignProposalRequest|null|undefined} sign_proposal_request
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.sign_proposal_request = null;

            /**
             * Message signed_proposal_response.
             * @member {tendermint.privval.ISignedProposalResponse|null|undefined} signed_proposal_response
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.signed_proposal_response = null;

            /**
             * Message ping_request.
             * @member {tendermint.privval.IPingRequest|null|undefined} ping_request
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.ping_request = null;

            /**
             * Message ping_response.
             * @member {tendermint.privval.IPingResponse|null|undefined} ping_response
             * @memberof tendermint.privval.Message
             * @instance
             */
            Message.prototype.ping_response = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Message sum.
             * @member {"pub_key_request"|"pub_key_response"|"sign_vote_request"|"signed_vote_response"|"sign_proposal_request"|"signed_proposal_response"|"ping_request"|"ping_response"|undefined} sum
             * @memberof tendermint.privval.Message
             * @instance
             */
            Object.defineProperty(Message.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["pub_key_request", "pub_key_response", "sign_vote_request", "signed_vote_response", "sign_proposal_request", "signed_proposal_response", "ping_request", "ping_response"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Message message. Does not implicitly {@link tendermint.privval.Message.verify|verify} messages.
             * @function encode
             * @memberof tendermint.privval.Message
             * @static
             * @param {tendermint.privval.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key_request != null && Object.hasOwnProperty.call(message, "pub_key_request"))
                    $root.tendermint.privval.PubKeyRequest.encode(message.pub_key_request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pub_key_response != null && Object.hasOwnProperty.call(message, "pub_key_response"))
                    $root.tendermint.privval.PubKeyResponse.encode(message.pub_key_response, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.sign_vote_request != null && Object.hasOwnProperty.call(message, "sign_vote_request"))
                    $root.tendermint.privval.SignVoteRequest.encode(message.sign_vote_request, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.signed_vote_response != null && Object.hasOwnProperty.call(message, "signed_vote_response"))
                    $root.tendermint.privval.SignedVoteResponse.encode(message.signed_vote_response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.sign_proposal_request != null && Object.hasOwnProperty.call(message, "sign_proposal_request"))
                    $root.tendermint.privval.SignProposalRequest.encode(message.sign_proposal_request, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.signed_proposal_response != null && Object.hasOwnProperty.call(message, "signed_proposal_response"))
                    $root.tendermint.privval.SignedProposalResponse.encode(message.signed_proposal_response, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.ping_request != null && Object.hasOwnProperty.call(message, "ping_request"))
                    $root.tendermint.privval.PingRequest.encode(message.ping_request, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.ping_response != null && Object.hasOwnProperty.call(message, "ping_response"))
                    $root.tendermint.privval.PingResponse.encode(message.ping_response, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link tendermint.privval.Message.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.privval.Message
             * @static
             * @param {tendermint.privval.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.privval.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.privval.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.privval.Message();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key_request = $root.tendermint.privval.PubKeyRequest.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.pub_key_response = $root.tendermint.privval.PubKeyResponse.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.sign_vote_request = $root.tendermint.privval.SignVoteRequest.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.signed_vote_response = $root.tendermint.privval.SignedVoteResponse.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.sign_proposal_request = $root.tendermint.privval.SignProposalRequest.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.signed_proposal_response = $root.tendermint.privval.SignedProposalResponse.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.ping_request = $root.tendermint.privval.PingRequest.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.ping_response = $root.tendermint.privval.PingResponse.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.privval.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.privval.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Message message.
             * @function verify
             * @memberof tendermint.privval.Message
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Message.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.pub_key_request != null && message.hasOwnProperty("pub_key_request")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.PubKeyRequest.verify(message.pub_key_request);
                        if (error)
                            return "pub_key_request." + error;
                    }
                }
                if (message.pub_key_response != null && message.hasOwnProperty("pub_key_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.PubKeyResponse.verify(message.pub_key_response);
                        if (error)
                            return "pub_key_response." + error;
                    }
                }
                if (message.sign_vote_request != null && message.hasOwnProperty("sign_vote_request")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.SignVoteRequest.verify(message.sign_vote_request);
                        if (error)
                            return "sign_vote_request." + error;
                    }
                }
                if (message.signed_vote_response != null && message.hasOwnProperty("signed_vote_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.SignedVoteResponse.verify(message.signed_vote_response);
                        if (error)
                            return "signed_vote_response." + error;
                    }
                }
                if (message.sign_proposal_request != null && message.hasOwnProperty("sign_proposal_request")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.SignProposalRequest.verify(message.sign_proposal_request);
                        if (error)
                            return "sign_proposal_request." + error;
                    }
                }
                if (message.signed_proposal_response != null && message.hasOwnProperty("signed_proposal_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.SignedProposalResponse.verify(message.signed_proposal_response);
                        if (error)
                            return "signed_proposal_response." + error;
                    }
                }
                if (message.ping_request != null && message.hasOwnProperty("ping_request")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.PingRequest.verify(message.ping_request);
                        if (error)
                            return "ping_request." + error;
                    }
                }
                if (message.ping_response != null && message.hasOwnProperty("ping_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.privval.PingResponse.verify(message.ping_response);
                        if (error)
                            return "ping_response." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.privval.Message
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.privval.Message} Message
             */
            Message.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.privval.Message)
                    return object;
                let message = new $root.tendermint.privval.Message();
                if (object.pub_key_request != null) {
                    if (typeof object.pub_key_request !== "object")
                        throw TypeError(".tendermint.privval.Message.pub_key_request: object expected");
                    message.pub_key_request = $root.tendermint.privval.PubKeyRequest.fromObject(object.pub_key_request);
                }
                if (object.pub_key_response != null) {
                    if (typeof object.pub_key_response !== "object")
                        throw TypeError(".tendermint.privval.Message.pub_key_response: object expected");
                    message.pub_key_response = $root.tendermint.privval.PubKeyResponse.fromObject(object.pub_key_response);
                }
                if (object.sign_vote_request != null) {
                    if (typeof object.sign_vote_request !== "object")
                        throw TypeError(".tendermint.privval.Message.sign_vote_request: object expected");
                    message.sign_vote_request = $root.tendermint.privval.SignVoteRequest.fromObject(object.sign_vote_request);
                }
                if (object.signed_vote_response != null) {
                    if (typeof object.signed_vote_response !== "object")
                        throw TypeError(".tendermint.privval.Message.signed_vote_response: object expected");
                    message.signed_vote_response = $root.tendermint.privval.SignedVoteResponse.fromObject(object.signed_vote_response);
                }
                if (object.sign_proposal_request != null) {
                    if (typeof object.sign_proposal_request !== "object")
                        throw TypeError(".tendermint.privval.Message.sign_proposal_request: object expected");
                    message.sign_proposal_request = $root.tendermint.privval.SignProposalRequest.fromObject(object.sign_proposal_request);
                }
                if (object.signed_proposal_response != null) {
                    if (typeof object.signed_proposal_response !== "object")
                        throw TypeError(".tendermint.privval.Message.signed_proposal_response: object expected");
                    message.signed_proposal_response = $root.tendermint.privval.SignedProposalResponse.fromObject(object.signed_proposal_response);
                }
                if (object.ping_request != null) {
                    if (typeof object.ping_request !== "object")
                        throw TypeError(".tendermint.privval.Message.ping_request: object expected");
                    message.ping_request = $root.tendermint.privval.PingRequest.fromObject(object.ping_request);
                }
                if (object.ping_response != null) {
                    if (typeof object.ping_response !== "object")
                        throw TypeError(".tendermint.privval.Message.ping_response: object expected");
                    message.ping_response = $root.tendermint.privval.PingResponse.fromObject(object.ping_response);
                }
                return message;
            };

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.privval.Message
             * @static
             * @param {tendermint.privval.Message} message Message
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Message.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.pub_key_request != null && message.hasOwnProperty("pub_key_request")) {
                    object.pub_key_request = $root.tendermint.privval.PubKeyRequest.toObject(message.pub_key_request, options);
                    if (options.oneofs)
                        object.sum = "pub_key_request";
                }
                if (message.pub_key_response != null && message.hasOwnProperty("pub_key_response")) {
                    object.pub_key_response = $root.tendermint.privval.PubKeyResponse.toObject(message.pub_key_response, options);
                    if (options.oneofs)
                        object.sum = "pub_key_response";
                }
                if (message.sign_vote_request != null && message.hasOwnProperty("sign_vote_request")) {
                    object.sign_vote_request = $root.tendermint.privval.SignVoteRequest.toObject(message.sign_vote_request, options);
                    if (options.oneofs)
                        object.sum = "sign_vote_request";
                }
                if (message.signed_vote_response != null && message.hasOwnProperty("signed_vote_response")) {
                    object.signed_vote_response = $root.tendermint.privval.SignedVoteResponse.toObject(message.signed_vote_response, options);
                    if (options.oneofs)
                        object.sum = "signed_vote_response";
                }
                if (message.sign_proposal_request != null && message.hasOwnProperty("sign_proposal_request")) {
                    object.sign_proposal_request = $root.tendermint.privval.SignProposalRequest.toObject(message.sign_proposal_request, options);
                    if (options.oneofs)
                        object.sum = "sign_proposal_request";
                }
                if (message.signed_proposal_response != null && message.hasOwnProperty("signed_proposal_response")) {
                    object.signed_proposal_response = $root.tendermint.privval.SignedProposalResponse.toObject(message.signed_proposal_response, options);
                    if (options.oneofs)
                        object.sum = "signed_proposal_response";
                }
                if (message.ping_request != null && message.hasOwnProperty("ping_request")) {
                    object.ping_request = $root.tendermint.privval.PingRequest.toObject(message.ping_request, options);
                    if (options.oneofs)
                        object.sum = "ping_request";
                }
                if (message.ping_response != null && message.hasOwnProperty("ping_response")) {
                    object.ping_response = $root.tendermint.privval.PingResponse.toObject(message.ping_response, options);
                    if (options.oneofs)
                        object.sum = "ping_response";
                }
                return object;
            };

            /**
             * Converts this Message to JSON.
             * @function toJSON
             * @memberof tendermint.privval.Message
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Message.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Message;
        })();

        return privval;
    })();

    tendermint.rpc = (function() {

        /**
         * Namespace rpc.
         * @memberof tendermint
         * @namespace
         */
        const rpc = {};

        rpc.grpc = (function() {

            /**
             * Namespace grpc.
             * @memberof tendermint.rpc
             * @namespace
             */
            const grpc = {};

            grpc.RequestPing = (function() {

                /**
                 * Properties of a RequestPing.
                 * @memberof tendermint.rpc.grpc
                 * @interface IRequestPing
                 */

                /**
                 * Constructs a new RequestPing.
                 * @memberof tendermint.rpc.grpc
                 * @classdesc Represents a RequestPing.
                 * @implements IRequestPing
                 * @constructor
                 * @param {tendermint.rpc.grpc.IRequestPing=} [properties] Properties to set
                 */
                function RequestPing(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified RequestPing message. Does not implicitly {@link tendermint.rpc.grpc.RequestPing.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @static
                 * @param {tendermint.rpc.grpc.IRequestPing} message RequestPing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestPing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified RequestPing message, length delimited. Does not implicitly {@link tendermint.rpc.grpc.RequestPing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @static
                 * @param {tendermint.rpc.grpc.IRequestPing} message RequestPing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestPing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RequestPing message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.rpc.grpc.RequestPing} RequestPing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestPing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.rpc.grpc.RequestPing();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RequestPing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.rpc.grpc.RequestPing} RequestPing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestPing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RequestPing message.
                 * @function verify
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestPing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a RequestPing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.rpc.grpc.RequestPing} RequestPing
                 */
                RequestPing.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.rpc.grpc.RequestPing)
                        return object;
                    return new $root.tendermint.rpc.grpc.RequestPing();
                };

                /**
                 * Creates a plain object from a RequestPing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @static
                 * @param {tendermint.rpc.grpc.RequestPing} message RequestPing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestPing.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this RequestPing to JSON.
                 * @function toJSON
                 * @memberof tendermint.rpc.grpc.RequestPing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestPing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RequestPing;
            })();

            grpc.RequestBroadcastTx = (function() {

                /**
                 * Properties of a RequestBroadcastTx.
                 * @memberof tendermint.rpc.grpc
                 * @interface IRequestBroadcastTx
                 * @property {Uint8Array|null} [tx] RequestBroadcastTx tx
                 */

                /**
                 * Constructs a new RequestBroadcastTx.
                 * @memberof tendermint.rpc.grpc
                 * @classdesc Represents a RequestBroadcastTx.
                 * @implements IRequestBroadcastTx
                 * @constructor
                 * @param {tendermint.rpc.grpc.IRequestBroadcastTx=} [properties] Properties to set
                 */
                function RequestBroadcastTx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RequestBroadcastTx tx.
                 * @member {Uint8Array} tx
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @instance
                 */
                RequestBroadcastTx.prototype.tx = $util.newBuffer([]);

                /**
                 * Encodes the specified RequestBroadcastTx message. Does not implicitly {@link tendermint.rpc.grpc.RequestBroadcastTx.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @static
                 * @param {tendermint.rpc.grpc.IRequestBroadcastTx} message RequestBroadcastTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestBroadcastTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.tx);
                    return writer;
                };

                /**
                 * Encodes the specified RequestBroadcastTx message, length delimited. Does not implicitly {@link tendermint.rpc.grpc.RequestBroadcastTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @static
                 * @param {tendermint.rpc.grpc.IRequestBroadcastTx} message RequestBroadcastTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestBroadcastTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RequestBroadcastTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.rpc.grpc.RequestBroadcastTx} RequestBroadcastTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestBroadcastTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.rpc.grpc.RequestBroadcastTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.tx = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RequestBroadcastTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.rpc.grpc.RequestBroadcastTx} RequestBroadcastTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestBroadcastTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RequestBroadcastTx message.
                 * @function verify
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestBroadcastTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                            return "tx: buffer expected";
                    return null;
                };

                /**
                 * Creates a RequestBroadcastTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.rpc.grpc.RequestBroadcastTx} RequestBroadcastTx
                 */
                RequestBroadcastTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.rpc.grpc.RequestBroadcastTx)
                        return object;
                    let message = new $root.tendermint.rpc.grpc.RequestBroadcastTx();
                    if (object.tx != null)
                        if (typeof object.tx === "string")
                            $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                        else if (object.tx.length)
                            message.tx = object.tx;
                    return message;
                };

                /**
                 * Creates a plain object from a RequestBroadcastTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @static
                 * @param {tendermint.rpc.grpc.RequestBroadcastTx} message RequestBroadcastTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestBroadcastTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.tx = "";
                        else {
                            object.tx = [];
                            if (options.bytes !== Array)
                                object.tx = $util.newBuffer(object.tx);
                        }
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                    return object;
                };

                /**
                 * Converts this RequestBroadcastTx to JSON.
                 * @function toJSON
                 * @memberof tendermint.rpc.grpc.RequestBroadcastTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestBroadcastTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RequestBroadcastTx;
            })();

            grpc.ResponsePing = (function() {

                /**
                 * Properties of a ResponsePing.
                 * @memberof tendermint.rpc.grpc
                 * @interface IResponsePing
                 */

                /**
                 * Constructs a new ResponsePing.
                 * @memberof tendermint.rpc.grpc
                 * @classdesc Represents a ResponsePing.
                 * @implements IResponsePing
                 * @constructor
                 * @param {tendermint.rpc.grpc.IResponsePing=} [properties] Properties to set
                 */
                function ResponsePing(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Encodes the specified ResponsePing message. Does not implicitly {@link tendermint.rpc.grpc.ResponsePing.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @static
                 * @param {tendermint.rpc.grpc.IResponsePing} message ResponsePing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponsePing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified ResponsePing message, length delimited. Does not implicitly {@link tendermint.rpc.grpc.ResponsePing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @static
                 * @param {tendermint.rpc.grpc.IResponsePing} message ResponsePing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponsePing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ResponsePing message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.rpc.grpc.ResponsePing} ResponsePing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponsePing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.rpc.grpc.ResponsePing();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ResponsePing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.rpc.grpc.ResponsePing} ResponsePing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponsePing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ResponsePing message.
                 * @function verify
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponsePing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a ResponsePing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.rpc.grpc.ResponsePing} ResponsePing
                 */
                ResponsePing.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.rpc.grpc.ResponsePing)
                        return object;
                    return new $root.tendermint.rpc.grpc.ResponsePing();
                };

                /**
                 * Creates a plain object from a ResponsePing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @static
                 * @param {tendermint.rpc.grpc.ResponsePing} message ResponsePing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponsePing.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this ResponsePing to JSON.
                 * @function toJSON
                 * @memberof tendermint.rpc.grpc.ResponsePing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponsePing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ResponsePing;
            })();

            grpc.ResponseBroadcastTx = (function() {

                /**
                 * Properties of a ResponseBroadcastTx.
                 * @memberof tendermint.rpc.grpc
                 * @interface IResponseBroadcastTx
                 * @property {tendermint.abci.IResponseCheckTx|null} [check_tx] ResponseBroadcastTx check_tx
                 * @property {tendermint.abci.IResponseDeliverTx|null} [deliver_tx] ResponseBroadcastTx deliver_tx
                 */

                /**
                 * Constructs a new ResponseBroadcastTx.
                 * @memberof tendermint.rpc.grpc
                 * @classdesc Represents a ResponseBroadcastTx.
                 * @implements IResponseBroadcastTx
                 * @constructor
                 * @param {tendermint.rpc.grpc.IResponseBroadcastTx=} [properties] Properties to set
                 */
                function ResponseBroadcastTx(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ResponseBroadcastTx check_tx.
                 * @member {tendermint.abci.IResponseCheckTx|null|undefined} check_tx
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @instance
                 */
                ResponseBroadcastTx.prototype.check_tx = null;

                /**
                 * ResponseBroadcastTx deliver_tx.
                 * @member {tendermint.abci.IResponseDeliverTx|null|undefined} deliver_tx
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @instance
                 */
                ResponseBroadcastTx.prototype.deliver_tx = null;

                /**
                 * Encodes the specified ResponseBroadcastTx message. Does not implicitly {@link tendermint.rpc.grpc.ResponseBroadcastTx.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @static
                 * @param {tendermint.rpc.grpc.IResponseBroadcastTx} message ResponseBroadcastTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseBroadcastTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.check_tx != null && Object.hasOwnProperty.call(message, "check_tx"))
                        $root.tendermint.abci.ResponseCheckTx.encode(message.check_tx, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.deliver_tx != null && Object.hasOwnProperty.call(message, "deliver_tx"))
                        $root.tendermint.abci.ResponseDeliverTx.encode(message.deliver_tx, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ResponseBroadcastTx message, length delimited. Does not implicitly {@link tendermint.rpc.grpc.ResponseBroadcastTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @static
                 * @param {tendermint.rpc.grpc.IResponseBroadcastTx} message ResponseBroadcastTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseBroadcastTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ResponseBroadcastTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.rpc.grpc.ResponseBroadcastTx} ResponseBroadcastTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseBroadcastTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.rpc.grpc.ResponseBroadcastTx();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.check_tx = $root.tendermint.abci.ResponseCheckTx.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ResponseBroadcastTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.rpc.grpc.ResponseBroadcastTx} ResponseBroadcastTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseBroadcastTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ResponseBroadcastTx message.
                 * @function verify
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseBroadcastTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                        let error = $root.tendermint.abci.ResponseCheckTx.verify(message.check_tx);
                        if (error)
                            return "check_tx." + error;
                    }
                    if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                        let error = $root.tendermint.abci.ResponseDeliverTx.verify(message.deliver_tx);
                        if (error)
                            return "deliver_tx." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ResponseBroadcastTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.rpc.grpc.ResponseBroadcastTx} ResponseBroadcastTx
                 */
                ResponseBroadcastTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.rpc.grpc.ResponseBroadcastTx)
                        return object;
                    let message = new $root.tendermint.rpc.grpc.ResponseBroadcastTx();
                    if (object.check_tx != null) {
                        if (typeof object.check_tx !== "object")
                            throw TypeError(".tendermint.rpc.grpc.ResponseBroadcastTx.check_tx: object expected");
                        message.check_tx = $root.tendermint.abci.ResponseCheckTx.fromObject(object.check_tx);
                    }
                    if (object.deliver_tx != null) {
                        if (typeof object.deliver_tx !== "object")
                            throw TypeError(".tendermint.rpc.grpc.ResponseBroadcastTx.deliver_tx: object expected");
                        message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.deliver_tx);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ResponseBroadcastTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @static
                 * @param {tendermint.rpc.grpc.ResponseBroadcastTx} message ResponseBroadcastTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseBroadcastTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.check_tx = null;
                        object.deliver_tx = null;
                    }
                    if (message.check_tx != null && message.hasOwnProperty("check_tx"))
                        object.check_tx = $root.tendermint.abci.ResponseCheckTx.toObject(message.check_tx, options);
                    if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx"))
                        object.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.toObject(message.deliver_tx, options);
                    return object;
                };

                /**
                 * Converts this ResponseBroadcastTx to JSON.
                 * @function toJSON
                 * @memberof tendermint.rpc.grpc.ResponseBroadcastTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseBroadcastTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ResponseBroadcastTx;
            })();

            grpc.BroadcastAPI = (function() {

                /**
                 * Constructs a new BroadcastAPI service.
                 * @memberof tendermint.rpc.grpc
                 * @classdesc Represents a BroadcastAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function BroadcastAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (BroadcastAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BroadcastAPI;

                /**
                 * Callback as used by {@link tendermint.rpc.grpc.BroadcastAPI#ping}.
                 * @memberof tendermint.rpc.grpc.BroadcastAPI
                 * @typedef PingCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.rpc.grpc.ResponsePing} [response] ResponsePing
                 */

                /**
                 * Calls Ping.
                 * @function ping
                 * @memberof tendermint.rpc.grpc.BroadcastAPI
                 * @instance
                 * @param {tendermint.rpc.grpc.IRequestPing} request RequestPing message or plain object
                 * @param {tendermint.rpc.grpc.BroadcastAPI.PingCallback} callback Node-style callback called with the error, if any, and ResponsePing
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(BroadcastAPI.prototype.ping = function ping(request, callback) {
                    return this.rpcCall(ping, $root.tendermint.rpc.grpc.RequestPing, $root.tendermint.rpc.grpc.ResponsePing, request, callback);
                }, "name", { value: "Ping" });

                /**
                 * Calls Ping.
                 * @function ping
                 * @memberof tendermint.rpc.grpc.BroadcastAPI
                 * @instance
                 * @param {tendermint.rpc.grpc.IRequestPing} request RequestPing message or plain object
                 * @returns {Promise<tendermint.rpc.grpc.ResponsePing>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link tendermint.rpc.grpc.BroadcastAPI#broadcastTx}.
                 * @memberof tendermint.rpc.grpc.BroadcastAPI
                 * @typedef BroadcastTxCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.rpc.grpc.ResponseBroadcastTx} [response] ResponseBroadcastTx
                 */

                /**
                 * Calls BroadcastTx.
                 * @function broadcastTx
                 * @memberof tendermint.rpc.grpc.BroadcastAPI
                 * @instance
                 * @param {tendermint.rpc.grpc.IRequestBroadcastTx} request RequestBroadcastTx message or plain object
                 * @param {tendermint.rpc.grpc.BroadcastAPI.BroadcastTxCallback} callback Node-style callback called with the error, if any, and ResponseBroadcastTx
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(BroadcastAPI.prototype.broadcastTx = function broadcastTx(request, callback) {
                    return this.rpcCall(broadcastTx, $root.tendermint.rpc.grpc.RequestBroadcastTx, $root.tendermint.rpc.grpc.ResponseBroadcastTx, request, callback);
                }, "name", { value: "BroadcastTx" });

                /**
                 * Calls BroadcastTx.
                 * @function broadcastTx
                 * @memberof tendermint.rpc.grpc.BroadcastAPI
                 * @instance
                 * @param {tendermint.rpc.grpc.IRequestBroadcastTx} request RequestBroadcastTx message or plain object
                 * @returns {Promise<tendermint.rpc.grpc.ResponseBroadcastTx>} Promise
                 * @variation 2
                 */

                return BroadcastAPI;
            })();

            return grpc;
        })();

        return rpc;
    })();

    tendermint.state = (function() {

        /**
         * Namespace state.
         * @memberof tendermint
         * @namespace
         */
        const state = {};

        state.ABCIResponses = (function() {

            /**
             * Properties of a ABCIResponses.
             * @memberof tendermint.state
             * @interface IABCIResponses
             * @property {Array.<tendermint.abci.IResponseDeliverTx>|null} [deliver_txs] ABCIResponses deliver_txs
             * @property {tendermint.abci.IResponseEndBlock|null} [end_block] ABCIResponses end_block
             * @property {tendermint.abci.IResponseBeginBlock|null} [begin_block] ABCIResponses begin_block
             */

            /**
             * Constructs a new ABCIResponses.
             * @memberof tendermint.state
             * @classdesc Represents a ABCIResponses.
             * @implements IABCIResponses
             * @constructor
             * @param {tendermint.state.IABCIResponses=} [properties] Properties to set
             */
            function ABCIResponses(properties) {
                this.deliver_txs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ABCIResponses deliver_txs.
             * @member {Array.<tendermint.abci.IResponseDeliverTx>} deliver_txs
             * @memberof tendermint.state.ABCIResponses
             * @instance
             */
            ABCIResponses.prototype.deliver_txs = $util.emptyArray;

            /**
             * ABCIResponses end_block.
             * @member {tendermint.abci.IResponseEndBlock|null|undefined} end_block
             * @memberof tendermint.state.ABCIResponses
             * @instance
             */
            ABCIResponses.prototype.end_block = null;

            /**
             * ABCIResponses begin_block.
             * @member {tendermint.abci.IResponseBeginBlock|null|undefined} begin_block
             * @memberof tendermint.state.ABCIResponses
             * @instance
             */
            ABCIResponses.prototype.begin_block = null;

            /**
             * Encodes the specified ABCIResponses message. Does not implicitly {@link tendermint.state.ABCIResponses.verify|verify} messages.
             * @function encode
             * @memberof tendermint.state.ABCIResponses
             * @static
             * @param {tendermint.state.IABCIResponses} message ABCIResponses message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ABCIResponses.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deliver_txs != null && message.deliver_txs.length)
                    for (let i = 0; i < message.deliver_txs.length; ++i)
                        $root.tendermint.abci.ResponseDeliverTx.encode(message.deliver_txs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.end_block != null && Object.hasOwnProperty.call(message, "end_block"))
                    $root.tendermint.abci.ResponseEndBlock.encode(message.end_block, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.begin_block != null && Object.hasOwnProperty.call(message, "begin_block"))
                    $root.tendermint.abci.ResponseBeginBlock.encode(message.begin_block, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ABCIResponses message, length delimited. Does not implicitly {@link tendermint.state.ABCIResponses.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.state.ABCIResponses
             * @static
             * @param {tendermint.state.IABCIResponses} message ABCIResponses message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ABCIResponses.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ABCIResponses message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.state.ABCIResponses
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.state.ABCIResponses} ABCIResponses
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ABCIResponses.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.state.ABCIResponses();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.deliver_txs && message.deliver_txs.length))
                            message.deliver_txs = [];
                        message.deliver_txs.push($root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.end_block = $root.tendermint.abci.ResponseEndBlock.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.begin_block = $root.tendermint.abci.ResponseBeginBlock.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ABCIResponses message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.state.ABCIResponses
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.state.ABCIResponses} ABCIResponses
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ABCIResponses.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ABCIResponses message.
             * @function verify
             * @memberof tendermint.state.ABCIResponses
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ABCIResponses.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deliver_txs != null && message.hasOwnProperty("deliver_txs")) {
                    if (!Array.isArray(message.deliver_txs))
                        return "deliver_txs: array expected";
                    for (let i = 0; i < message.deliver_txs.length; ++i) {
                        let error = $root.tendermint.abci.ResponseDeliverTx.verify(message.deliver_txs[i]);
                        if (error)
                            return "deliver_txs." + error;
                    }
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    let error = $root.tendermint.abci.ResponseEndBlock.verify(message.end_block);
                    if (error)
                        return "end_block." + error;
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    let error = $root.tendermint.abci.ResponseBeginBlock.verify(message.begin_block);
                    if (error)
                        return "begin_block." + error;
                }
                return null;
            };

            /**
             * Creates a ABCIResponses message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.state.ABCIResponses
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.state.ABCIResponses} ABCIResponses
             */
            ABCIResponses.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.state.ABCIResponses)
                    return object;
                let message = new $root.tendermint.state.ABCIResponses();
                if (object.deliver_txs) {
                    if (!Array.isArray(object.deliver_txs))
                        throw TypeError(".tendermint.state.ABCIResponses.deliver_txs: array expected");
                    message.deliver_txs = [];
                    for (let i = 0; i < object.deliver_txs.length; ++i) {
                        if (typeof object.deliver_txs[i] !== "object")
                            throw TypeError(".tendermint.state.ABCIResponses.deliver_txs: object expected");
                        message.deliver_txs[i] = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.deliver_txs[i]);
                    }
                }
                if (object.end_block != null) {
                    if (typeof object.end_block !== "object")
                        throw TypeError(".tendermint.state.ABCIResponses.end_block: object expected");
                    message.end_block = $root.tendermint.abci.ResponseEndBlock.fromObject(object.end_block);
                }
                if (object.begin_block != null) {
                    if (typeof object.begin_block !== "object")
                        throw TypeError(".tendermint.state.ABCIResponses.begin_block: object expected");
                    message.begin_block = $root.tendermint.abci.ResponseBeginBlock.fromObject(object.begin_block);
                }
                return message;
            };

            /**
             * Creates a plain object from a ABCIResponses message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.state.ABCIResponses
             * @static
             * @param {tendermint.state.ABCIResponses} message ABCIResponses
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ABCIResponses.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.deliver_txs = [];
                if (options.defaults) {
                    object.end_block = null;
                    object.begin_block = null;
                }
                if (message.deliver_txs && message.deliver_txs.length) {
                    object.deliver_txs = [];
                    for (let j = 0; j < message.deliver_txs.length; ++j)
                        object.deliver_txs[j] = $root.tendermint.abci.ResponseDeliverTx.toObject(message.deliver_txs[j], options);
                }
                if (message.end_block != null && message.hasOwnProperty("end_block"))
                    object.end_block = $root.tendermint.abci.ResponseEndBlock.toObject(message.end_block, options);
                if (message.begin_block != null && message.hasOwnProperty("begin_block"))
                    object.begin_block = $root.tendermint.abci.ResponseBeginBlock.toObject(message.begin_block, options);
                return object;
            };

            /**
             * Converts this ABCIResponses to JSON.
             * @function toJSON
             * @memberof tendermint.state.ABCIResponses
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ABCIResponses.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ABCIResponses;
        })();

        state.ValidatorsInfo = (function() {

            /**
             * Properties of a ValidatorsInfo.
             * @memberof tendermint.state
             * @interface IValidatorsInfo
             * @property {tendermint.types.IValidatorSet|null} [validator_set] ValidatorsInfo validator_set
             * @property {number|null} [last_height_changed] ValidatorsInfo last_height_changed
             */

            /**
             * Constructs a new ValidatorsInfo.
             * @memberof tendermint.state
             * @classdesc Represents a ValidatorsInfo.
             * @implements IValidatorsInfo
             * @constructor
             * @param {tendermint.state.IValidatorsInfo=} [properties] Properties to set
             */
            function ValidatorsInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorsInfo validator_set.
             * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
             * @memberof tendermint.state.ValidatorsInfo
             * @instance
             */
            ValidatorsInfo.prototype.validator_set = null;

            /**
             * ValidatorsInfo last_height_changed.
             * @member {number} last_height_changed
             * @memberof tendermint.state.ValidatorsInfo
             * @instance
             */
            ValidatorsInfo.prototype.last_height_changed = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ValidatorsInfo message. Does not implicitly {@link tendermint.state.ValidatorsInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.state.ValidatorsInfo
             * @static
             * @param {tendermint.state.IValidatorsInfo} message ValidatorsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorsInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator_set != null && Object.hasOwnProperty.call(message, "validator_set"))
                    $root.tendermint.types.ValidatorSet.encode(message.validator_set, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.last_height_changed != null && Object.hasOwnProperty.call(message, "last_height_changed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.last_height_changed);
                return writer;
            };

            /**
             * Encodes the specified ValidatorsInfo message, length delimited. Does not implicitly {@link tendermint.state.ValidatorsInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.state.ValidatorsInfo
             * @static
             * @param {tendermint.state.IValidatorsInfo} message ValidatorsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorsInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorsInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.state.ValidatorsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.state.ValidatorsInfo} ValidatorsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorsInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.state.ValidatorsInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator_set = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.last_height_changed = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorsInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.state.ValidatorsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.state.ValidatorsInfo} ValidatorsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorsInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorsInfo message.
             * @function verify
             * @memberof tendermint.state.ValidatorsInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorsInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator_set != null && message.hasOwnProperty("validator_set")) {
                    let error = $root.tendermint.types.ValidatorSet.verify(message.validator_set);
                    if (error)
                        return "validator_set." + error;
                }
                if (message.last_height_changed != null && message.hasOwnProperty("last_height_changed"))
                    if (!$util.isInteger(message.last_height_changed) && !(message.last_height_changed && $util.isInteger(message.last_height_changed.low) && $util.isInteger(message.last_height_changed.high)))
                        return "last_height_changed: integer|Long expected";
                return null;
            };

            /**
             * Creates a ValidatorsInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.state.ValidatorsInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.state.ValidatorsInfo} ValidatorsInfo
             */
            ValidatorsInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.state.ValidatorsInfo)
                    return object;
                let message = new $root.tendermint.state.ValidatorsInfo();
                if (object.validator_set != null) {
                    if (typeof object.validator_set !== "object")
                        throw TypeError(".tendermint.state.ValidatorsInfo.validator_set: object expected");
                    message.validator_set = $root.tendermint.types.ValidatorSet.fromObject(object.validator_set);
                }
                if (object.last_height_changed != null)
                    if ($util.Long)
                        (message.last_height_changed = $util.Long.fromValue(object.last_height_changed)).unsigned = false;
                    else if (typeof object.last_height_changed === "string")
                        message.last_height_changed = parseInt(object.last_height_changed, 10);
                    else if (typeof object.last_height_changed === "number")
                        message.last_height_changed = object.last_height_changed;
                    else if (typeof object.last_height_changed === "object")
                        message.last_height_changed = new $util.LongBits(object.last_height_changed.low >>> 0, object.last_height_changed.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ValidatorsInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.state.ValidatorsInfo
             * @static
             * @param {tendermint.state.ValidatorsInfo} message ValidatorsInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorsInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.validator_set = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.last_height_changed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_height_changed = options.longs === String ? "0" : 0;
                }
                if (message.validator_set != null && message.hasOwnProperty("validator_set"))
                    object.validator_set = $root.tendermint.types.ValidatorSet.toObject(message.validator_set, options);
                if (message.last_height_changed != null && message.hasOwnProperty("last_height_changed"))
                    if (typeof message.last_height_changed === "number")
                        object.last_height_changed = options.longs === String ? String(message.last_height_changed) : message.last_height_changed;
                    else
                        object.last_height_changed = options.longs === String ? $util.Long.prototype.toString.call(message.last_height_changed) : options.longs === Number ? new $util.LongBits(message.last_height_changed.low >>> 0, message.last_height_changed.high >>> 0).toNumber() : message.last_height_changed;
                return object;
            };

            /**
             * Converts this ValidatorsInfo to JSON.
             * @function toJSON
             * @memberof tendermint.state.ValidatorsInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorsInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorsInfo;
        })();

        state.ConsensusParamsInfo = (function() {

            /**
             * Properties of a ConsensusParamsInfo.
             * @memberof tendermint.state
             * @interface IConsensusParamsInfo
             * @property {tendermint.types.IConsensusParams|null} [consensus_params] ConsensusParamsInfo consensus_params
             * @property {number|null} [last_height_changed] ConsensusParamsInfo last_height_changed
             */

            /**
             * Constructs a new ConsensusParamsInfo.
             * @memberof tendermint.state
             * @classdesc Represents a ConsensusParamsInfo.
             * @implements IConsensusParamsInfo
             * @constructor
             * @param {tendermint.state.IConsensusParamsInfo=} [properties] Properties to set
             */
            function ConsensusParamsInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsensusParamsInfo consensus_params.
             * @member {tendermint.types.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.state.ConsensusParamsInfo
             * @instance
             */
            ConsensusParamsInfo.prototype.consensus_params = null;

            /**
             * ConsensusParamsInfo last_height_changed.
             * @member {number} last_height_changed
             * @memberof tendermint.state.ConsensusParamsInfo
             * @instance
             */
            ConsensusParamsInfo.prototype.last_height_changed = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ConsensusParamsInfo message. Does not implicitly {@link tendermint.state.ConsensusParamsInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.state.ConsensusParamsInfo
             * @static
             * @param {tendermint.state.IConsensusParamsInfo} message ConsensusParamsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParamsInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                    $root.tendermint.types.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.last_height_changed != null && Object.hasOwnProperty.call(message, "last_height_changed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.last_height_changed);
                return writer;
            };

            /**
             * Encodes the specified ConsensusParamsInfo message, length delimited. Does not implicitly {@link tendermint.state.ConsensusParamsInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.state.ConsensusParamsInfo
             * @static
             * @param {tendermint.state.IConsensusParamsInfo} message ConsensusParamsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParamsInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsensusParamsInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.state.ConsensusParamsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.state.ConsensusParamsInfo} ConsensusParamsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParamsInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.state.ConsensusParamsInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.consensus_params = $root.tendermint.types.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.last_height_changed = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsensusParamsInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.state.ConsensusParamsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.state.ConsensusParamsInfo} ConsensusParamsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParamsInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsensusParamsInfo message.
             * @function verify
             * @memberof tendermint.state.ConsensusParamsInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsensusParamsInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                    let error = $root.tendermint.types.ConsensusParams.verify(message.consensus_params);
                    if (error)
                        return "consensus_params." + error;
                }
                if (message.last_height_changed != null && message.hasOwnProperty("last_height_changed"))
                    if (!$util.isInteger(message.last_height_changed) && !(message.last_height_changed && $util.isInteger(message.last_height_changed.low) && $util.isInteger(message.last_height_changed.high)))
                        return "last_height_changed: integer|Long expected";
                return null;
            };

            /**
             * Creates a ConsensusParamsInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.state.ConsensusParamsInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.state.ConsensusParamsInfo} ConsensusParamsInfo
             */
            ConsensusParamsInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.state.ConsensusParamsInfo)
                    return object;
                let message = new $root.tendermint.state.ConsensusParamsInfo();
                if (object.consensus_params != null) {
                    if (typeof object.consensus_params !== "object")
                        throw TypeError(".tendermint.state.ConsensusParamsInfo.consensus_params: object expected");
                    message.consensus_params = $root.tendermint.types.ConsensusParams.fromObject(object.consensus_params);
                }
                if (object.last_height_changed != null)
                    if ($util.Long)
                        (message.last_height_changed = $util.Long.fromValue(object.last_height_changed)).unsigned = false;
                    else if (typeof object.last_height_changed === "string")
                        message.last_height_changed = parseInt(object.last_height_changed, 10);
                    else if (typeof object.last_height_changed === "number")
                        message.last_height_changed = object.last_height_changed;
                    else if (typeof object.last_height_changed === "object")
                        message.last_height_changed = new $util.LongBits(object.last_height_changed.low >>> 0, object.last_height_changed.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ConsensusParamsInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.state.ConsensusParamsInfo
             * @static
             * @param {tendermint.state.ConsensusParamsInfo} message ConsensusParamsInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsensusParamsInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.consensus_params = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.last_height_changed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_height_changed = options.longs === String ? "0" : 0;
                }
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                    object.consensus_params = $root.tendermint.types.ConsensusParams.toObject(message.consensus_params, options);
                if (message.last_height_changed != null && message.hasOwnProperty("last_height_changed"))
                    if (typeof message.last_height_changed === "number")
                        object.last_height_changed = options.longs === String ? String(message.last_height_changed) : message.last_height_changed;
                    else
                        object.last_height_changed = options.longs === String ? $util.Long.prototype.toString.call(message.last_height_changed) : options.longs === Number ? new $util.LongBits(message.last_height_changed.low >>> 0, message.last_height_changed.high >>> 0).toNumber() : message.last_height_changed;
                return object;
            };

            /**
             * Converts this ConsensusParamsInfo to JSON.
             * @function toJSON
             * @memberof tendermint.state.ConsensusParamsInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsensusParamsInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsensusParamsInfo;
        })();

        state.Version = (function() {

            /**
             * Properties of a Version.
             * @memberof tendermint.state
             * @interface IVersion
             * @property {tendermint.version.IConsensus|null} [consensus] Version consensus
             * @property {string|null} [software] Version software
             */

            /**
             * Constructs a new Version.
             * @memberof tendermint.state
             * @classdesc Represents a Version.
             * @implements IVersion
             * @constructor
             * @param {tendermint.state.IVersion=} [properties] Properties to set
             */
            function Version(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Version consensus.
             * @member {tendermint.version.IConsensus|null|undefined} consensus
             * @memberof tendermint.state.Version
             * @instance
             */
            Version.prototype.consensus = null;

            /**
             * Version software.
             * @member {string} software
             * @memberof tendermint.state.Version
             * @instance
             */
            Version.prototype.software = "";

            /**
             * Encodes the specified Version message. Does not implicitly {@link tendermint.state.Version.verify|verify} messages.
             * @function encode
             * @memberof tendermint.state.Version
             * @static
             * @param {tendermint.state.IVersion} message Version message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Version.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.consensus != null && Object.hasOwnProperty.call(message, "consensus"))
                    $root.tendermint.version.Consensus.encode(message.consensus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.software != null && Object.hasOwnProperty.call(message, "software"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.software);
                return writer;
            };

            /**
             * Encodes the specified Version message, length delimited. Does not implicitly {@link tendermint.state.Version.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.state.Version
             * @static
             * @param {tendermint.state.IVersion} message Version message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Version.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Version message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.state.Version
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.state.Version} Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Version.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.state.Version();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.consensus = $root.tendermint.version.Consensus.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.software = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Version message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.state.Version
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.state.Version} Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Version.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Version message.
             * @function verify
             * @memberof tendermint.state.Version
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Version.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.consensus != null && message.hasOwnProperty("consensus")) {
                    let error = $root.tendermint.version.Consensus.verify(message.consensus);
                    if (error)
                        return "consensus." + error;
                }
                if (message.software != null && message.hasOwnProperty("software"))
                    if (!$util.isString(message.software))
                        return "software: string expected";
                return null;
            };

            /**
             * Creates a Version message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.state.Version
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.state.Version} Version
             */
            Version.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.state.Version)
                    return object;
                let message = new $root.tendermint.state.Version();
                if (object.consensus != null) {
                    if (typeof object.consensus !== "object")
                        throw TypeError(".tendermint.state.Version.consensus: object expected");
                    message.consensus = $root.tendermint.version.Consensus.fromObject(object.consensus);
                }
                if (object.software != null)
                    message.software = String(object.software);
                return message;
            };

            /**
             * Creates a plain object from a Version message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.state.Version
             * @static
             * @param {tendermint.state.Version} message Version
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Version.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.consensus = null;
                    object.software = "";
                }
                if (message.consensus != null && message.hasOwnProperty("consensus"))
                    object.consensus = $root.tendermint.version.Consensus.toObject(message.consensus, options);
                if (message.software != null && message.hasOwnProperty("software"))
                    object.software = message.software;
                return object;
            };

            /**
             * Converts this Version to JSON.
             * @function toJSON
             * @memberof tendermint.state.Version
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Version.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Version;
        })();

        state.State = (function() {

            /**
             * Properties of a State.
             * @memberof tendermint.state
             * @interface IState
             * @property {tendermint.state.IVersion|null} [version] State version
             * @property {string|null} [chain_id] State chain_id
             * @property {number|null} [initial_height] State initial_height
             * @property {number|null} [last_block_height] State last_block_height
             * @property {tendermint.types.IBlockID|null} [last_block_id] State last_block_id
             * @property {google.protobuf.ITimestamp|null} [last_block_time] State last_block_time
             * @property {tendermint.types.IValidatorSet|null} [next_validators] State next_validators
             * @property {tendermint.types.IValidatorSet|null} [validators] State validators
             * @property {tendermint.types.IValidatorSet|null} [last_validators] State last_validators
             * @property {number|null} [last_height_validators_changed] State last_height_validators_changed
             * @property {tendermint.types.IConsensusParams|null} [consensus_params] State consensus_params
             * @property {number|null} [last_height_consensus_params_changed] State last_height_consensus_params_changed
             * @property {Uint8Array|null} [last_results_hash] State last_results_hash
             * @property {Uint8Array|null} [app_hash] State app_hash
             */

            /**
             * Constructs a new State.
             * @memberof tendermint.state
             * @classdesc Represents a State.
             * @implements IState
             * @constructor
             * @param {tendermint.state.IState=} [properties] Properties to set
             */
            function State(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * State version.
             * @member {tendermint.state.IVersion|null|undefined} version
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.version = null;

            /**
             * State chain_id.
             * @member {string} chain_id
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.chain_id = "";

            /**
             * State initial_height.
             * @member {number} initial_height
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.initial_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * State last_block_height.
             * @member {number} last_block_height
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.last_block_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * State last_block_id.
             * @member {tendermint.types.IBlockID|null|undefined} last_block_id
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.last_block_id = null;

            /**
             * State last_block_time.
             * @member {google.protobuf.ITimestamp|null|undefined} last_block_time
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.last_block_time = null;

            /**
             * State next_validators.
             * @member {tendermint.types.IValidatorSet|null|undefined} next_validators
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.next_validators = null;

            /**
             * State validators.
             * @member {tendermint.types.IValidatorSet|null|undefined} validators
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.validators = null;

            /**
             * State last_validators.
             * @member {tendermint.types.IValidatorSet|null|undefined} last_validators
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.last_validators = null;

            /**
             * State last_height_validators_changed.
             * @member {number} last_height_validators_changed
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.last_height_validators_changed = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * State consensus_params.
             * @member {tendermint.types.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.consensus_params = null;

            /**
             * State last_height_consensus_params_changed.
             * @member {number} last_height_consensus_params_changed
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.last_height_consensus_params_changed = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * State last_results_hash.
             * @member {Uint8Array} last_results_hash
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.last_results_hash = $util.newBuffer([]);

            /**
             * State app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.state.State
             * @instance
             */
            State.prototype.app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified State message. Does not implicitly {@link tendermint.state.State.verify|verify} messages.
             * @function encode
             * @memberof tendermint.state.State
             * @static
             * @param {tendermint.state.IState} message State message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            State.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.state.Version.encode(message.version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                if (message.last_block_height != null && Object.hasOwnProperty.call(message, "last_block_height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.last_block_height);
                if (message.last_block_id != null && Object.hasOwnProperty.call(message, "last_block_id"))
                    $root.tendermint.types.BlockID.encode(message.last_block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.last_block_time != null && Object.hasOwnProperty.call(message, "last_block_time"))
                    $root.google.protobuf.Timestamp.encode(message.last_block_time, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.next_validators != null && Object.hasOwnProperty.call(message, "next_validators"))
                    $root.tendermint.types.ValidatorSet.encode(message.next_validators, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.validators != null && Object.hasOwnProperty.call(message, "validators"))
                    $root.tendermint.types.ValidatorSet.encode(message.validators, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.last_validators != null && Object.hasOwnProperty.call(message, "last_validators"))
                    $root.tendermint.types.ValidatorSet.encode(message.last_validators, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.last_height_validators_changed != null && Object.hasOwnProperty.call(message, "last_height_validators_changed"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.last_height_validators_changed);
                if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                    $root.tendermint.types.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.last_height_consensus_params_changed != null && Object.hasOwnProperty.call(message, "last_height_consensus_params_changed"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int64(message.last_height_consensus_params_changed);
                if (message.last_results_hash != null && Object.hasOwnProperty.call(message, "last_results_hash"))
                    writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.last_results_hash);
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.app_hash);
                if (message.initial_height != null && Object.hasOwnProperty.call(message, "initial_height"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int64(message.initial_height);
                return writer;
            };

            /**
             * Encodes the specified State message, length delimited. Does not implicitly {@link tendermint.state.State.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.state.State
             * @static
             * @param {tendermint.state.IState} message State message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            State.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a State message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.state.State
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.state.State} State
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            State.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.state.State();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.version = $root.tendermint.state.Version.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    case 14:
                        message.initial_height = reader.int64();
                        break;
                    case 3:
                        message.last_block_height = reader.int64();
                        break;
                    case 4:
                        message.last_block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.last_block_time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.next_validators = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.validators = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.last_validators = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.last_height_validators_changed = reader.int64();
                        break;
                    case 10:
                        message.consensus_params = $root.tendermint.types.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.last_height_consensus_params_changed = reader.int64();
                        break;
                    case 12:
                        message.last_results_hash = reader.bytes();
                        break;
                    case 13:
                        message.app_hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a State message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.state.State
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.state.State} State
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            State.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a State message.
             * @function verify
             * @memberof tendermint.state.State
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            State.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.state.Version.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                    if (!$util.isInteger(message.initial_height) && !(message.initial_height && $util.isInteger(message.initial_height.low) && $util.isInteger(message.initial_height.high)))
                        return "initial_height: integer|Long expected";
                if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                    if (!$util.isInteger(message.last_block_height) && !(message.last_block_height && $util.isInteger(message.last_block_height.low) && $util.isInteger(message.last_block_height.high)))
                        return "last_block_height: integer|Long expected";
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.last_block_id);
                    if (error)
                        return "last_block_id." + error;
                }
                if (message.last_block_time != null && message.hasOwnProperty("last_block_time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.last_block_time);
                    if (error)
                        return "last_block_time." + error;
                }
                if (message.next_validators != null && message.hasOwnProperty("next_validators")) {
                    let error = $root.tendermint.types.ValidatorSet.verify(message.next_validators);
                    if (error)
                        return "next_validators." + error;
                }
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    let error = $root.tendermint.types.ValidatorSet.verify(message.validators);
                    if (error)
                        return "validators." + error;
                }
                if (message.last_validators != null && message.hasOwnProperty("last_validators")) {
                    let error = $root.tendermint.types.ValidatorSet.verify(message.last_validators);
                    if (error)
                        return "last_validators." + error;
                }
                if (message.last_height_validators_changed != null && message.hasOwnProperty("last_height_validators_changed"))
                    if (!$util.isInteger(message.last_height_validators_changed) && !(message.last_height_validators_changed && $util.isInteger(message.last_height_validators_changed.low) && $util.isInteger(message.last_height_validators_changed.high)))
                        return "last_height_validators_changed: integer|Long expected";
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                    let error = $root.tendermint.types.ConsensusParams.verify(message.consensus_params);
                    if (error)
                        return "consensus_params." + error;
                }
                if (message.last_height_consensus_params_changed != null && message.hasOwnProperty("last_height_consensus_params_changed"))
                    if (!$util.isInteger(message.last_height_consensus_params_changed) && !(message.last_height_consensus_params_changed && $util.isInteger(message.last_height_consensus_params_changed.low) && $util.isInteger(message.last_height_consensus_params_changed.high)))
                        return "last_height_consensus_params_changed: integer|Long expected";
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    if (!(message.last_results_hash && typeof message.last_results_hash.length === "number" || $util.isString(message.last_results_hash)))
                        return "last_results_hash: buffer expected";
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                return null;
            };

            /**
             * Creates a State message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.state.State
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.state.State} State
             */
            State.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.state.State)
                    return object;
                let message = new $root.tendermint.state.State();
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.state.State.version: object expected");
                    message.version = $root.tendermint.state.Version.fromObject(object.version);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                if (object.initial_height != null)
                    if ($util.Long)
                        (message.initial_height = $util.Long.fromValue(object.initial_height)).unsigned = false;
                    else if (typeof object.initial_height === "string")
                        message.initial_height = parseInt(object.initial_height, 10);
                    else if (typeof object.initial_height === "number")
                        message.initial_height = object.initial_height;
                    else if (typeof object.initial_height === "object")
                        message.initial_height = new $util.LongBits(object.initial_height.low >>> 0, object.initial_height.high >>> 0).toNumber();
                if (object.last_block_height != null)
                    if ($util.Long)
                        (message.last_block_height = $util.Long.fromValue(object.last_block_height)).unsigned = false;
                    else if (typeof object.last_block_height === "string")
                        message.last_block_height = parseInt(object.last_block_height, 10);
                    else if (typeof object.last_block_height === "number")
                        message.last_block_height = object.last_block_height;
                    else if (typeof object.last_block_height === "object")
                        message.last_block_height = new $util.LongBits(object.last_block_height.low >>> 0, object.last_block_height.high >>> 0).toNumber();
                if (object.last_block_id != null) {
                    if (typeof object.last_block_id !== "object")
                        throw TypeError(".tendermint.state.State.last_block_id: object expected");
                    message.last_block_id = $root.tendermint.types.BlockID.fromObject(object.last_block_id);
                }
                if (object.last_block_time != null) {
                    if (typeof object.last_block_time !== "object")
                        throw TypeError(".tendermint.state.State.last_block_time: object expected");
                    message.last_block_time = $root.google.protobuf.Timestamp.fromObject(object.last_block_time);
                }
                if (object.next_validators != null) {
                    if (typeof object.next_validators !== "object")
                        throw TypeError(".tendermint.state.State.next_validators: object expected");
                    message.next_validators = $root.tendermint.types.ValidatorSet.fromObject(object.next_validators);
                }
                if (object.validators != null) {
                    if (typeof object.validators !== "object")
                        throw TypeError(".tendermint.state.State.validators: object expected");
                    message.validators = $root.tendermint.types.ValidatorSet.fromObject(object.validators);
                }
                if (object.last_validators != null) {
                    if (typeof object.last_validators !== "object")
                        throw TypeError(".tendermint.state.State.last_validators: object expected");
                    message.last_validators = $root.tendermint.types.ValidatorSet.fromObject(object.last_validators);
                }
                if (object.last_height_validators_changed != null)
                    if ($util.Long)
                        (message.last_height_validators_changed = $util.Long.fromValue(object.last_height_validators_changed)).unsigned = false;
                    else if (typeof object.last_height_validators_changed === "string")
                        message.last_height_validators_changed = parseInt(object.last_height_validators_changed, 10);
                    else if (typeof object.last_height_validators_changed === "number")
                        message.last_height_validators_changed = object.last_height_validators_changed;
                    else if (typeof object.last_height_validators_changed === "object")
                        message.last_height_validators_changed = new $util.LongBits(object.last_height_validators_changed.low >>> 0, object.last_height_validators_changed.high >>> 0).toNumber();
                if (object.consensus_params != null) {
                    if (typeof object.consensus_params !== "object")
                        throw TypeError(".tendermint.state.State.consensus_params: object expected");
                    message.consensus_params = $root.tendermint.types.ConsensusParams.fromObject(object.consensus_params);
                }
                if (object.last_height_consensus_params_changed != null)
                    if ($util.Long)
                        (message.last_height_consensus_params_changed = $util.Long.fromValue(object.last_height_consensus_params_changed)).unsigned = false;
                    else if (typeof object.last_height_consensus_params_changed === "string")
                        message.last_height_consensus_params_changed = parseInt(object.last_height_consensus_params_changed, 10);
                    else if (typeof object.last_height_consensus_params_changed === "number")
                        message.last_height_consensus_params_changed = object.last_height_consensus_params_changed;
                    else if (typeof object.last_height_consensus_params_changed === "object")
                        message.last_height_consensus_params_changed = new $util.LongBits(object.last_height_consensus_params_changed.low >>> 0, object.last_height_consensus_params_changed.high >>> 0).toNumber();
                if (object.last_results_hash != null)
                    if (typeof object.last_results_hash === "string")
                        $util.base64.decode(object.last_results_hash, message.last_results_hash = $util.newBuffer($util.base64.length(object.last_results_hash)), 0);
                    else if (object.last_results_hash.length)
                        message.last_results_hash = object.last_results_hash;
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                return message;
            };

            /**
             * Creates a plain object from a State message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.state.State
             * @static
             * @param {tendermint.state.State} message State
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            State.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.version = null;
                    object.chain_id = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.last_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_block_height = options.longs === String ? "0" : 0;
                    object.last_block_id = null;
                    object.last_block_time = null;
                    object.next_validators = null;
                    object.validators = null;
                    object.last_validators = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.last_height_validators_changed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_height_validators_changed = options.longs === String ? "0" : 0;
                    object.consensus_params = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.last_height_consensus_params_changed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_height_consensus_params_changed = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.last_results_hash = "";
                    else {
                        object.last_results_hash = [];
                        if (options.bytes !== Array)
                            object.last_results_hash = $util.newBuffer(object.last_results_hash);
                    }
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.initial_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.initial_height = options.longs === String ? "0" : 0;
                }
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.state.Version.toObject(message.version, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                    if (typeof message.last_block_height === "number")
                        object.last_block_height = options.longs === String ? String(message.last_block_height) : message.last_block_height;
                    else
                        object.last_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.last_block_height) : options.longs === Number ? new $util.LongBits(message.last_block_height.low >>> 0, message.last_block_height.high >>> 0).toNumber() : message.last_block_height;
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id"))
                    object.last_block_id = $root.tendermint.types.BlockID.toObject(message.last_block_id, options);
                if (message.last_block_time != null && message.hasOwnProperty("last_block_time"))
                    object.last_block_time = $root.google.protobuf.Timestamp.toObject(message.last_block_time, options);
                if (message.next_validators != null && message.hasOwnProperty("next_validators"))
                    object.next_validators = $root.tendermint.types.ValidatorSet.toObject(message.next_validators, options);
                if (message.validators != null && message.hasOwnProperty("validators"))
                    object.validators = $root.tendermint.types.ValidatorSet.toObject(message.validators, options);
                if (message.last_validators != null && message.hasOwnProperty("last_validators"))
                    object.last_validators = $root.tendermint.types.ValidatorSet.toObject(message.last_validators, options);
                if (message.last_height_validators_changed != null && message.hasOwnProperty("last_height_validators_changed"))
                    if (typeof message.last_height_validators_changed === "number")
                        object.last_height_validators_changed = options.longs === String ? String(message.last_height_validators_changed) : message.last_height_validators_changed;
                    else
                        object.last_height_validators_changed = options.longs === String ? $util.Long.prototype.toString.call(message.last_height_validators_changed) : options.longs === Number ? new $util.LongBits(message.last_height_validators_changed.low >>> 0, message.last_height_validators_changed.high >>> 0).toNumber() : message.last_height_validators_changed;
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                    object.consensus_params = $root.tendermint.types.ConsensusParams.toObject(message.consensus_params, options);
                if (message.last_height_consensus_params_changed != null && message.hasOwnProperty("last_height_consensus_params_changed"))
                    if (typeof message.last_height_consensus_params_changed === "number")
                        object.last_height_consensus_params_changed = options.longs === String ? String(message.last_height_consensus_params_changed) : message.last_height_consensus_params_changed;
                    else
                        object.last_height_consensus_params_changed = options.longs === String ? $util.Long.prototype.toString.call(message.last_height_consensus_params_changed) : options.longs === Number ? new $util.LongBits(message.last_height_consensus_params_changed.low >>> 0, message.last_height_consensus_params_changed.high >>> 0).toNumber() : message.last_height_consensus_params_changed;
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    object.last_results_hash = options.bytes === String ? $util.base64.encode(message.last_results_hash, 0, message.last_results_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_results_hash) : message.last_results_hash;
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                    if (typeof message.initial_height === "number")
                        object.initial_height = options.longs === String ? String(message.initial_height) : message.initial_height;
                    else
                        object.initial_height = options.longs === String ? $util.Long.prototype.toString.call(message.initial_height) : options.longs === Number ? new $util.LongBits(message.initial_height.low >>> 0, message.initial_height.high >>> 0).toNumber() : message.initial_height;
                return object;
            };

            /**
             * Converts this State to JSON.
             * @function toJSON
             * @memberof tendermint.state.State
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            State.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return State;
        })();

        return state;
    })();

    tendermint.statesync = (function() {

        /**
         * Namespace statesync.
         * @memberof tendermint
         * @namespace
         */
        const statesync = {};

        statesync.Message = (function() {

            /**
             * Properties of a Message.
             * @memberof tendermint.statesync
             * @interface IMessage
             * @property {tendermint.statesync.ISnapshotsRequest|null} [snapshots_request] Message snapshots_request
             * @property {tendermint.statesync.ISnapshotsResponse|null} [snapshots_response] Message snapshots_response
             * @property {tendermint.statesync.IChunkRequest|null} [chunk_request] Message chunk_request
             * @property {tendermint.statesync.IChunkResponse|null} [chunk_response] Message chunk_response
             */

            /**
             * Constructs a new Message.
             * @memberof tendermint.statesync
             * @classdesc Represents a Message.
             * @implements IMessage
             * @constructor
             * @param {tendermint.statesync.IMessage=} [properties] Properties to set
             */
            function Message(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Message snapshots_request.
             * @member {tendermint.statesync.ISnapshotsRequest|null|undefined} snapshots_request
             * @memberof tendermint.statesync.Message
             * @instance
             */
            Message.prototype.snapshots_request = null;

            /**
             * Message snapshots_response.
             * @member {tendermint.statesync.ISnapshotsResponse|null|undefined} snapshots_response
             * @memberof tendermint.statesync.Message
             * @instance
             */
            Message.prototype.snapshots_response = null;

            /**
             * Message chunk_request.
             * @member {tendermint.statesync.IChunkRequest|null|undefined} chunk_request
             * @memberof tendermint.statesync.Message
             * @instance
             */
            Message.prototype.chunk_request = null;

            /**
             * Message chunk_response.
             * @member {tendermint.statesync.IChunkResponse|null|undefined} chunk_response
             * @memberof tendermint.statesync.Message
             * @instance
             */
            Message.prototype.chunk_response = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Message sum.
             * @member {"snapshots_request"|"snapshots_response"|"chunk_request"|"chunk_response"|undefined} sum
             * @memberof tendermint.statesync.Message
             * @instance
             */
            Object.defineProperty(Message.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["snapshots_request", "snapshots_response", "chunk_request", "chunk_response"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Message message. Does not implicitly {@link tendermint.statesync.Message.verify|verify} messages.
             * @function encode
             * @memberof tendermint.statesync.Message
             * @static
             * @param {tendermint.statesync.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.snapshots_request != null && Object.hasOwnProperty.call(message, "snapshots_request"))
                    $root.tendermint.statesync.SnapshotsRequest.encode(message.snapshots_request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.snapshots_response != null && Object.hasOwnProperty.call(message, "snapshots_response"))
                    $root.tendermint.statesync.SnapshotsResponse.encode(message.snapshots_response, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.chunk_request != null && Object.hasOwnProperty.call(message, "chunk_request"))
                    $root.tendermint.statesync.ChunkRequest.encode(message.chunk_request, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.chunk_response != null && Object.hasOwnProperty.call(message, "chunk_response"))
                    $root.tendermint.statesync.ChunkResponse.encode(message.chunk_response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link tendermint.statesync.Message.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.statesync.Message
             * @static
             * @param {tendermint.statesync.IMessage} message Message message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Message.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.statesync.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.statesync.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.statesync.Message();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.snapshots_request = $root.tendermint.statesync.SnapshotsRequest.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.snapshots_response = $root.tendermint.statesync.SnapshotsResponse.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.chunk_request = $root.tendermint.statesync.ChunkRequest.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.chunk_response = $root.tendermint.statesync.ChunkResponse.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.statesync.Message
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.statesync.Message} Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Message.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Message message.
             * @function verify
             * @memberof tendermint.statesync.Message
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Message.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.snapshots_request != null && message.hasOwnProperty("snapshots_request")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.statesync.SnapshotsRequest.verify(message.snapshots_request);
                        if (error)
                            return "snapshots_request." + error;
                    }
                }
                if (message.snapshots_response != null && message.hasOwnProperty("snapshots_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.statesync.SnapshotsResponse.verify(message.snapshots_response);
                        if (error)
                            return "snapshots_response." + error;
                    }
                }
                if (message.chunk_request != null && message.hasOwnProperty("chunk_request")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.statesync.ChunkRequest.verify(message.chunk_request);
                        if (error)
                            return "chunk_request." + error;
                    }
                }
                if (message.chunk_response != null && message.hasOwnProperty("chunk_response")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.statesync.ChunkResponse.verify(message.chunk_response);
                        if (error)
                            return "chunk_response." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.statesync.Message
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.statesync.Message} Message
             */
            Message.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.statesync.Message)
                    return object;
                let message = new $root.tendermint.statesync.Message();
                if (object.snapshots_request != null) {
                    if (typeof object.snapshots_request !== "object")
                        throw TypeError(".tendermint.statesync.Message.snapshots_request: object expected");
                    message.snapshots_request = $root.tendermint.statesync.SnapshotsRequest.fromObject(object.snapshots_request);
                }
                if (object.snapshots_response != null) {
                    if (typeof object.snapshots_response !== "object")
                        throw TypeError(".tendermint.statesync.Message.snapshots_response: object expected");
                    message.snapshots_response = $root.tendermint.statesync.SnapshotsResponse.fromObject(object.snapshots_response);
                }
                if (object.chunk_request != null) {
                    if (typeof object.chunk_request !== "object")
                        throw TypeError(".tendermint.statesync.Message.chunk_request: object expected");
                    message.chunk_request = $root.tendermint.statesync.ChunkRequest.fromObject(object.chunk_request);
                }
                if (object.chunk_response != null) {
                    if (typeof object.chunk_response !== "object")
                        throw TypeError(".tendermint.statesync.Message.chunk_response: object expected");
                    message.chunk_response = $root.tendermint.statesync.ChunkResponse.fromObject(object.chunk_response);
                }
                return message;
            };

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.statesync.Message
             * @static
             * @param {tendermint.statesync.Message} message Message
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Message.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.snapshots_request != null && message.hasOwnProperty("snapshots_request")) {
                    object.snapshots_request = $root.tendermint.statesync.SnapshotsRequest.toObject(message.snapshots_request, options);
                    if (options.oneofs)
                        object.sum = "snapshots_request";
                }
                if (message.snapshots_response != null && message.hasOwnProperty("snapshots_response")) {
                    object.snapshots_response = $root.tendermint.statesync.SnapshotsResponse.toObject(message.snapshots_response, options);
                    if (options.oneofs)
                        object.sum = "snapshots_response";
                }
                if (message.chunk_request != null && message.hasOwnProperty("chunk_request")) {
                    object.chunk_request = $root.tendermint.statesync.ChunkRequest.toObject(message.chunk_request, options);
                    if (options.oneofs)
                        object.sum = "chunk_request";
                }
                if (message.chunk_response != null && message.hasOwnProperty("chunk_response")) {
                    object.chunk_response = $root.tendermint.statesync.ChunkResponse.toObject(message.chunk_response, options);
                    if (options.oneofs)
                        object.sum = "chunk_response";
                }
                return object;
            };

            /**
             * Converts this Message to JSON.
             * @function toJSON
             * @memberof tendermint.statesync.Message
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Message.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Message;
        })();

        statesync.SnapshotsRequest = (function() {

            /**
             * Properties of a SnapshotsRequest.
             * @memberof tendermint.statesync
             * @interface ISnapshotsRequest
             */

            /**
             * Constructs a new SnapshotsRequest.
             * @memberof tendermint.statesync
             * @classdesc Represents a SnapshotsRequest.
             * @implements ISnapshotsRequest
             * @constructor
             * @param {tendermint.statesync.ISnapshotsRequest=} [properties] Properties to set
             */
            function SnapshotsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified SnapshotsRequest message. Does not implicitly {@link tendermint.statesync.SnapshotsRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.statesync.SnapshotsRequest
             * @static
             * @param {tendermint.statesync.ISnapshotsRequest} message SnapshotsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SnapshotsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified SnapshotsRequest message, length delimited. Does not implicitly {@link tendermint.statesync.SnapshotsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.statesync.SnapshotsRequest
             * @static
             * @param {tendermint.statesync.ISnapshotsRequest} message SnapshotsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SnapshotsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SnapshotsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.statesync.SnapshotsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.statesync.SnapshotsRequest} SnapshotsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SnapshotsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.statesync.SnapshotsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SnapshotsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.statesync.SnapshotsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.statesync.SnapshotsRequest} SnapshotsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SnapshotsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SnapshotsRequest message.
             * @function verify
             * @memberof tendermint.statesync.SnapshotsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SnapshotsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a SnapshotsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.statesync.SnapshotsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.statesync.SnapshotsRequest} SnapshotsRequest
             */
            SnapshotsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.statesync.SnapshotsRequest)
                    return object;
                return new $root.tendermint.statesync.SnapshotsRequest();
            };

            /**
             * Creates a plain object from a SnapshotsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.statesync.SnapshotsRequest
             * @static
             * @param {tendermint.statesync.SnapshotsRequest} message SnapshotsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SnapshotsRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this SnapshotsRequest to JSON.
             * @function toJSON
             * @memberof tendermint.statesync.SnapshotsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SnapshotsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SnapshotsRequest;
        })();

        statesync.SnapshotsResponse = (function() {

            /**
             * Properties of a SnapshotsResponse.
             * @memberof tendermint.statesync
             * @interface ISnapshotsResponse
             * @property {number|null} [height] SnapshotsResponse height
             * @property {number|null} [format] SnapshotsResponse format
             * @property {number|null} [chunks] SnapshotsResponse chunks
             * @property {Uint8Array|null} [hash] SnapshotsResponse hash
             * @property {Uint8Array|null} [metadata] SnapshotsResponse metadata
             */

            /**
             * Constructs a new SnapshotsResponse.
             * @memberof tendermint.statesync
             * @classdesc Represents a SnapshotsResponse.
             * @implements ISnapshotsResponse
             * @constructor
             * @param {tendermint.statesync.ISnapshotsResponse=} [properties] Properties to set
             */
            function SnapshotsResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SnapshotsResponse height.
             * @member {number} height
             * @memberof tendermint.statesync.SnapshotsResponse
             * @instance
             */
            SnapshotsResponse.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * SnapshotsResponse format.
             * @member {number} format
             * @memberof tendermint.statesync.SnapshotsResponse
             * @instance
             */
            SnapshotsResponse.prototype.format = 0;

            /**
             * SnapshotsResponse chunks.
             * @member {number} chunks
             * @memberof tendermint.statesync.SnapshotsResponse
             * @instance
             */
            SnapshotsResponse.prototype.chunks = 0;

            /**
             * SnapshotsResponse hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.statesync.SnapshotsResponse
             * @instance
             */
            SnapshotsResponse.prototype.hash = $util.newBuffer([]);

            /**
             * SnapshotsResponse metadata.
             * @member {Uint8Array} metadata
             * @memberof tendermint.statesync.SnapshotsResponse
             * @instance
             */
            SnapshotsResponse.prototype.metadata = $util.newBuffer([]);

            /**
             * Encodes the specified SnapshotsResponse message. Does not implicitly {@link tendermint.statesync.SnapshotsResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.statesync.SnapshotsResponse
             * @static
             * @param {tendermint.statesync.ISnapshotsResponse} message SnapshotsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SnapshotsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                if (message.chunks != null && Object.hasOwnProperty.call(message, "chunks"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chunks);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.hash);
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.metadata);
                return writer;
            };

            /**
             * Encodes the specified SnapshotsResponse message, length delimited. Does not implicitly {@link tendermint.statesync.SnapshotsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.statesync.SnapshotsResponse
             * @static
             * @param {tendermint.statesync.ISnapshotsResponse} message SnapshotsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SnapshotsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SnapshotsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.statesync.SnapshotsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.statesync.SnapshotsResponse} SnapshotsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SnapshotsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.statesync.SnapshotsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.uint64();
                        break;
                    case 2:
                        message.format = reader.uint32();
                        break;
                    case 3:
                        message.chunks = reader.uint32();
                        break;
                    case 4:
                        message.hash = reader.bytes();
                        break;
                    case 5:
                        message.metadata = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SnapshotsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.statesync.SnapshotsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.statesync.SnapshotsResponse} SnapshotsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SnapshotsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SnapshotsResponse message.
             * @function verify
             * @memberof tendermint.statesync.SnapshotsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SnapshotsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.format != null && message.hasOwnProperty("format"))
                    if (!$util.isInteger(message.format))
                        return "format: integer expected";
                if (message.chunks != null && message.hasOwnProperty("chunks"))
                    if (!$util.isInteger(message.chunks))
                        return "chunks: integer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!(message.metadata && typeof message.metadata.length === "number" || $util.isString(message.metadata)))
                        return "metadata: buffer expected";
                return null;
            };

            /**
             * Creates a SnapshotsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.statesync.SnapshotsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.statesync.SnapshotsResponse} SnapshotsResponse
             */
            SnapshotsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.statesync.SnapshotsResponse)
                    return object;
                let message = new $root.tendermint.statesync.SnapshotsResponse();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.format != null)
                    message.format = object.format >>> 0;
                if (object.chunks != null)
                    message.chunks = object.chunks >>> 0;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.metadata != null)
                    if (typeof object.metadata === "string")
                        $util.base64.decode(object.metadata, message.metadata = $util.newBuffer($util.base64.length(object.metadata)), 0);
                    else if (object.metadata.length)
                        message.metadata = object.metadata;
                return message;
            };

            /**
             * Creates a plain object from a SnapshotsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.statesync.SnapshotsResponse
             * @static
             * @param {tendermint.statesync.SnapshotsResponse} message SnapshotsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SnapshotsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.format = 0;
                    object.chunks = 0;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    if (options.bytes === String)
                        object.metadata = "";
                    else {
                        object.metadata = [];
                        if (options.bytes !== Array)
                            object.metadata = $util.newBuffer(object.metadata);
                    }
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.format != null && message.hasOwnProperty("format"))
                    object.format = message.format;
                if (message.chunks != null && message.hasOwnProperty("chunks"))
                    object.chunks = message.chunks;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = options.bytes === String ? $util.base64.encode(message.metadata, 0, message.metadata.length) : options.bytes === Array ? Array.prototype.slice.call(message.metadata) : message.metadata;
                return object;
            };

            /**
             * Converts this SnapshotsResponse to JSON.
             * @function toJSON
             * @memberof tendermint.statesync.SnapshotsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SnapshotsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SnapshotsResponse;
        })();

        statesync.ChunkRequest = (function() {

            /**
             * Properties of a ChunkRequest.
             * @memberof tendermint.statesync
             * @interface IChunkRequest
             * @property {number|null} [height] ChunkRequest height
             * @property {number|null} [format] ChunkRequest format
             * @property {number|null} [index] ChunkRequest index
             */

            /**
             * Constructs a new ChunkRequest.
             * @memberof tendermint.statesync
             * @classdesc Represents a ChunkRequest.
             * @implements IChunkRequest
             * @constructor
             * @param {tendermint.statesync.IChunkRequest=} [properties] Properties to set
             */
            function ChunkRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChunkRequest height.
             * @member {number} height
             * @memberof tendermint.statesync.ChunkRequest
             * @instance
             */
            ChunkRequest.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ChunkRequest format.
             * @member {number} format
             * @memberof tendermint.statesync.ChunkRequest
             * @instance
             */
            ChunkRequest.prototype.format = 0;

            /**
             * ChunkRequest index.
             * @member {number} index
             * @memberof tendermint.statesync.ChunkRequest
             * @instance
             */
            ChunkRequest.prototype.index = 0;

            /**
             * Encodes the specified ChunkRequest message. Does not implicitly {@link tendermint.statesync.ChunkRequest.verify|verify} messages.
             * @function encode
             * @memberof tendermint.statesync.ChunkRequest
             * @static
             * @param {tendermint.statesync.IChunkRequest} message ChunkRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.index);
                return writer;
            };

            /**
             * Encodes the specified ChunkRequest message, length delimited. Does not implicitly {@link tendermint.statesync.ChunkRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.statesync.ChunkRequest
             * @static
             * @param {tendermint.statesync.IChunkRequest} message ChunkRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChunkRequest message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.statesync.ChunkRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.statesync.ChunkRequest} ChunkRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.statesync.ChunkRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.uint64();
                        break;
                    case 2:
                        message.format = reader.uint32();
                        break;
                    case 3:
                        message.index = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChunkRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.statesync.ChunkRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.statesync.ChunkRequest} ChunkRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChunkRequest message.
             * @function verify
             * @memberof tendermint.statesync.ChunkRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChunkRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.format != null && message.hasOwnProperty("format"))
                    if (!$util.isInteger(message.format))
                        return "format: integer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                return null;
            };

            /**
             * Creates a ChunkRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.statesync.ChunkRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.statesync.ChunkRequest} ChunkRequest
             */
            ChunkRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.statesync.ChunkRequest)
                    return object;
                let message = new $root.tendermint.statesync.ChunkRequest();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.format != null)
                    message.format = object.format >>> 0;
                if (object.index != null)
                    message.index = object.index >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a ChunkRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.statesync.ChunkRequest
             * @static
             * @param {tendermint.statesync.ChunkRequest} message ChunkRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChunkRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.format = 0;
                    object.index = 0;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.format != null && message.hasOwnProperty("format"))
                    object.format = message.format;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                return object;
            };

            /**
             * Converts this ChunkRequest to JSON.
             * @function toJSON
             * @memberof tendermint.statesync.ChunkRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChunkRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ChunkRequest;
        })();

        statesync.ChunkResponse = (function() {

            /**
             * Properties of a ChunkResponse.
             * @memberof tendermint.statesync
             * @interface IChunkResponse
             * @property {number|null} [height] ChunkResponse height
             * @property {number|null} [format] ChunkResponse format
             * @property {number|null} [index] ChunkResponse index
             * @property {Uint8Array|null} [chunk] ChunkResponse chunk
             * @property {boolean|null} [missing] ChunkResponse missing
             */

            /**
             * Constructs a new ChunkResponse.
             * @memberof tendermint.statesync
             * @classdesc Represents a ChunkResponse.
             * @implements IChunkResponse
             * @constructor
             * @param {tendermint.statesync.IChunkResponse=} [properties] Properties to set
             */
            function ChunkResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChunkResponse height.
             * @member {number} height
             * @memberof tendermint.statesync.ChunkResponse
             * @instance
             */
            ChunkResponse.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ChunkResponse format.
             * @member {number} format
             * @memberof tendermint.statesync.ChunkResponse
             * @instance
             */
            ChunkResponse.prototype.format = 0;

            /**
             * ChunkResponse index.
             * @member {number} index
             * @memberof tendermint.statesync.ChunkResponse
             * @instance
             */
            ChunkResponse.prototype.index = 0;

            /**
             * ChunkResponse chunk.
             * @member {Uint8Array} chunk
             * @memberof tendermint.statesync.ChunkResponse
             * @instance
             */
            ChunkResponse.prototype.chunk = $util.newBuffer([]);

            /**
             * ChunkResponse missing.
             * @member {boolean} missing
             * @memberof tendermint.statesync.ChunkResponse
             * @instance
             */
            ChunkResponse.prototype.missing = false;

            /**
             * Encodes the specified ChunkResponse message. Does not implicitly {@link tendermint.statesync.ChunkResponse.verify|verify} messages.
             * @function encode
             * @memberof tendermint.statesync.ChunkResponse
             * @static
             * @param {tendermint.statesync.IChunkResponse} message ChunkResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.index);
                if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.chunk);
                if (message.missing != null && Object.hasOwnProperty.call(message, "missing"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.missing);
                return writer;
            };

            /**
             * Encodes the specified ChunkResponse message, length delimited. Does not implicitly {@link tendermint.statesync.ChunkResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.statesync.ChunkResponse
             * @static
             * @param {tendermint.statesync.IChunkResponse} message ChunkResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChunkResponse message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.statesync.ChunkResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.statesync.ChunkResponse} ChunkResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.statesync.ChunkResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.uint64();
                        break;
                    case 2:
                        message.format = reader.uint32();
                        break;
                    case 3:
                        message.index = reader.uint32();
                        break;
                    case 4:
                        message.chunk = reader.bytes();
                        break;
                    case 5:
                        message.missing = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChunkResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.statesync.ChunkResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.statesync.ChunkResponse} ChunkResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChunkResponse message.
             * @function verify
             * @memberof tendermint.statesync.ChunkResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChunkResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.format != null && message.hasOwnProperty("format"))
                    if (!$util.isInteger(message.format))
                        return "format: integer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    if (!(message.chunk && typeof message.chunk.length === "number" || $util.isString(message.chunk)))
                        return "chunk: buffer expected";
                if (message.missing != null && message.hasOwnProperty("missing"))
                    if (typeof message.missing !== "boolean")
                        return "missing: boolean expected";
                return null;
            };

            /**
             * Creates a ChunkResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.statesync.ChunkResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.statesync.ChunkResponse} ChunkResponse
             */
            ChunkResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.statesync.ChunkResponse)
                    return object;
                let message = new $root.tendermint.statesync.ChunkResponse();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.format != null)
                    message.format = object.format >>> 0;
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.chunk != null)
                    if (typeof object.chunk === "string")
                        $util.base64.decode(object.chunk, message.chunk = $util.newBuffer($util.base64.length(object.chunk)), 0);
                    else if (object.chunk.length)
                        message.chunk = object.chunk;
                if (object.missing != null)
                    message.missing = Boolean(object.missing);
                return message;
            };

            /**
             * Creates a plain object from a ChunkResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.statesync.ChunkResponse
             * @static
             * @param {tendermint.statesync.ChunkResponse} message ChunkResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChunkResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.format = 0;
                    object.index = 0;
                    if (options.bytes === String)
                        object.chunk = "";
                    else {
                        object.chunk = [];
                        if (options.bytes !== Array)
                            object.chunk = $util.newBuffer(object.chunk);
                    }
                    object.missing = false;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.format != null && message.hasOwnProperty("format"))
                    object.format = message.format;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    object.chunk = options.bytes === String ? $util.base64.encode(message.chunk, 0, message.chunk.length) : options.bytes === Array ? Array.prototype.slice.call(message.chunk) : message.chunk;
                if (message.missing != null && message.hasOwnProperty("missing"))
                    object.missing = message.missing;
                return object;
            };

            /**
             * Converts this ChunkResponse to JSON.
             * @function toJSON
             * @memberof tendermint.statesync.ChunkResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChunkResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ChunkResponse;
        })();

        return statesync;
    })();

    tendermint.store = (function() {

        /**
         * Namespace store.
         * @memberof tendermint
         * @namespace
         */
        const store = {};

        store.BlockStoreState = (function() {

            /**
             * Properties of a BlockStoreState.
             * @memberof tendermint.store
             * @interface IBlockStoreState
             * @property {number|null} [base] BlockStoreState base
             * @property {number|null} [height] BlockStoreState height
             */

            /**
             * Constructs a new BlockStoreState.
             * @memberof tendermint.store
             * @classdesc Represents a BlockStoreState.
             * @implements IBlockStoreState
             * @constructor
             * @param {tendermint.store.IBlockStoreState=} [properties] Properties to set
             */
            function BlockStoreState(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockStoreState base.
             * @member {number} base
             * @memberof tendermint.store.BlockStoreState
             * @instance
             */
            BlockStoreState.prototype.base = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockStoreState height.
             * @member {number} height
             * @memberof tendermint.store.BlockStoreState
             * @instance
             */
            BlockStoreState.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockStoreState message. Does not implicitly {@link tendermint.store.BlockStoreState.verify|verify} messages.
             * @function encode
             * @memberof tendermint.store.BlockStoreState
             * @static
             * @param {tendermint.store.IBlockStoreState} message BlockStoreState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockStoreState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && Object.hasOwnProperty.call(message, "base"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.base);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                return writer;
            };

            /**
             * Encodes the specified BlockStoreState message, length delimited. Does not implicitly {@link tendermint.store.BlockStoreState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.store.BlockStoreState
             * @static
             * @param {tendermint.store.IBlockStoreState} message BlockStoreState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockStoreState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockStoreState message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.store.BlockStoreState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.store.BlockStoreState} BlockStoreState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockStoreState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.store.BlockStoreState();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = reader.int64();
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockStoreState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.store.BlockStoreState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.store.BlockStoreState} BlockStoreState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockStoreState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockStoreState message.
             * @function verify
             * @memberof tendermint.store.BlockStoreState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockStoreState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base"))
                    if (!$util.isInteger(message.base) && !(message.base && $util.isInteger(message.base.low) && $util.isInteger(message.base.high)))
                        return "base: integer|Long expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockStoreState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.store.BlockStoreState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.store.BlockStoreState} BlockStoreState
             */
            BlockStoreState.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.store.BlockStoreState)
                    return object;
                let message = new $root.tendermint.store.BlockStoreState();
                if (object.base != null)
                    if ($util.Long)
                        (message.base = $util.Long.fromValue(object.base)).unsigned = false;
                    else if (typeof object.base === "string")
                        message.base = parseInt(object.base, 10);
                    else if (typeof object.base === "number")
                        message.base = object.base;
                    else if (typeof object.base === "object")
                        message.base = new $util.LongBits(object.base.low >>> 0, object.base.high >>> 0).toNumber();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockStoreState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.store.BlockStoreState
             * @static
             * @param {tendermint.store.BlockStoreState} message BlockStoreState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockStoreState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.base = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.base = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    if (typeof message.base === "number")
                        object.base = options.longs === String ? String(message.base) : message.base;
                    else
                        object.base = options.longs === String ? $util.Long.prototype.toString.call(message.base) : options.longs === Number ? new $util.LongBits(message.base.low >>> 0, message.base.high >>> 0).toNumber() : message.base;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                return object;
            };

            /**
             * Converts this BlockStoreState to JSON.
             * @function toJSON
             * @memberof tendermint.store.BlockStoreState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockStoreState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockStoreState;
        })();

        return store;
    })();

    return tendermint;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (let i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.public_dependency = [];
                this.weak_dependency = [];
                this.message_type = [];
                this.enum_type = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto public_dependency.
             * @member {Array.<number>} public_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto weak_dependency.
             * @member {Array.<number>} weak_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto message_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} message_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.message_type = $util.emptyArray;

            /**
             * FileDescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto source_code_info.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.source_code_info = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (let i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.message_type != null && message.message_type.length)
                    for (let i = 0; i < message.message_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (let i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.public_dependency != null && message.public_dependency.length)
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                if (message.weak_dependency != null && message.weak_dependency.length)
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.public_dependency && message.public_dependency.length))
                            message.public_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.public_dependency.push(reader.int32());
                        } else
                            message.public_dependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weak_dependency && message.weak_dependency.length))
                            message.weak_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weak_dependency.push(reader.int32());
                        } else
                            message.weak_dependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.message_type && message.message_type.length))
                            message.message_type = [];
                        message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                    if (!Array.isArray(message.public_dependency))
                        return "public_dependency: array expected";
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        if (!$util.isInteger(message.public_dependency[i]))
                            return "public_dependency: integer[] expected";
                }
                if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                    if (!Array.isArray(message.weak_dependency))
                        return "weak_dependency: array expected";
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        if (!$util.isInteger(message.weak_dependency[i]))
                            return "weak_dependency: integer[] expected";
                }
                if (message.message_type != null && message.hasOwnProperty("message_type")) {
                    if (!Array.isArray(message.message_type))
                        return "message_type: array expected";
                    for (let i = 0; i < message.message_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                        if (error)
                            return "message_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                    if (error)
                        return "source_code_info." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.public_dependency) {
                    if (!Array.isArray(object.public_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                    message.public_dependency = [];
                    for (let i = 0; i < object.public_dependency.length; ++i)
                        message.public_dependency[i] = object.public_dependency[i] | 0;
                }
                if (object.weak_dependency) {
                    if (!Array.isArray(object.weak_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                    message.weak_dependency = [];
                    for (let i = 0; i < object.weak_dependency.length; ++i)
                        message.weak_dependency[i] = object.weak_dependency[i] | 0;
                }
                if (object.message_type) {
                    if (!Array.isArray(object.message_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                    message.message_type = [];
                    for (let i = 0; i < object.message_type.length; ++i) {
                        if (typeof object.message_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                        message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.source_code_info != null) {
                    if (typeof object.source_code_info !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                    message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.message_type = [];
                    object.enum_type = [];
                    object.service = [];
                    object.extension = [];
                    object.public_dependency = [];
                    object.weak_dependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.source_code_info = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.message_type && message.message_type.length) {
                    object.message_type = [];
                    for (let j = 0; j < message.message_type.length; ++j)
                        object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                    object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                if (message.public_dependency && message.public_dependency.length) {
                    object.public_dependency = [];
                    for (let j = 0; j < message.public_dependency.length; ++j)
                        object.public_dependency[j] = message.public_dependency[j];
                }
                if (message.weak_dependency && message.weak_dependency.length) {
                    object.weak_dependency = [];
                    for (let j = 0; j < message.weak_dependency.length; ++j)
                        object.weak_dependency[j] = message.weak_dependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nested_type = [];
                this.enum_type = [];
                this.extension_range = [];
                this.oneof_decl = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nested_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nested_type = $util.emptyArray;

            /**
             * DescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * DescriptorProto extension_range.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension_range = $util.emptyArray;

            /**
             * DescriptorProto oneof_decl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneof_decl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reserved_range.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * DescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (let i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nested_type != null && message.nested_type.length)
                    for (let i = 0; i < message.nested_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extension_range != null && message.extension_range.length)
                    for (let i = 0; i < message.extension_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneof_decl != null && message.oneof_decl.length)
                    for (let i = 0; i < message.oneof_decl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reserved_range != null && message.reserved_range.length)
                    for (let i = 0; i < message.reserved_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reserved_name != null && message.reserved_name.length)
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nested_type && message.nested_type.length))
                            message.nested_type = [];
                        message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extension_range && message.extension_range.length))
                            message.extension_range = [];
                        message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneof_decl && message.oneof_decl.length))
                            message.oneof_decl = [];
                        message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reserved_range && message.reserved_range.length))
                            message.reserved_range = [];
                        message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reserved_name && message.reserved_name.length))
                            message.reserved_name = [];
                        message.reserved_name.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                    if (!Array.isArray(message.nested_type))
                        return "nested_type: array expected";
                    for (let i = 0; i < message.nested_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                        if (error)
                            return "nested_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                    if (!Array.isArray(message.extension_range))
                        return "extension_range: array expected";
                    for (let i = 0; i < message.extension_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                        if (error)
                            return "extension_range." + error;
                    }
                }
                if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                    if (!Array.isArray(message.oneof_decl))
                        return "oneof_decl: array expected";
                    for (let i = 0; i < message.oneof_decl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                        if (error)
                            return "oneof_decl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                    if (!Array.isArray(message.reserved_range))
                        return "reserved_range: array expected";
                    for (let i = 0; i < message.reserved_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                        if (error)
                            return "reserved_range." + error;
                    }
                }
                if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                    if (!Array.isArray(message.reserved_name))
                        return "reserved_name: array expected";
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        if (!$util.isString(message.reserved_name[i]))
                            return "reserved_name: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nested_type) {
                    if (!Array.isArray(object.nested_type))
                        throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                    message.nested_type = [];
                    for (let i = 0; i < object.nested_type.length; ++i) {
                        if (typeof object.nested_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                        message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.extension_range) {
                    if (!Array.isArray(object.extension_range))
                        throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                    message.extension_range = [];
                    for (let i = 0; i < object.extension_range.length; ++i) {
                        if (typeof object.extension_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                        message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                    }
                }
                if (object.oneof_decl) {
                    if (!Array.isArray(object.oneof_decl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                    message.oneof_decl = [];
                    for (let i = 0; i < object.oneof_decl.length; ++i) {
                        if (typeof object.oneof_decl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                        message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reserved_range) {
                    if (!Array.isArray(object.reserved_range))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                    message.reserved_range = [];
                    for (let i = 0; i < object.reserved_range.length; ++i) {
                        if (typeof object.reserved_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                        message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                    }
                }
                if (object.reserved_name) {
                    if (!Array.isArray(object.reserved_name))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                    message.reserved_name = [];
                    for (let i = 0; i < object.reserved_name.length; ++i)
                        message.reserved_name[i] = String(object.reserved_name[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nested_type = [];
                    object.enum_type = [];
                    object.extension_range = [];
                    object.extension = [];
                    object.oneof_decl = [];
                    object.reserved_range = [];
                    object.reserved_name = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nested_type && message.nested_type.length) {
                    object.nested_type = [];
                    for (let j = 0; j < message.nested_type.length; ++j)
                        object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.extension_range && message.extension_range.length) {
                    object.extension_range = [];
                    for (let j = 0; j < message.extension_range.length; ++j)
                        object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneof_decl && message.oneof_decl.length) {
                    object.oneof_decl = [];
                    for (let j = 0; j < message.oneof_decl.length; ++j)
                        object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                }
                if (message.reserved_range && message.reserved_range.length) {
                    object.reserved_range = [];
                    for (let j = 0; j < message.reserved_range.length; ++j)
                        object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                }
                if (message.reserved_name && message.reserved_name.length) {
                    object.reserved_name = [];
                    for (let j = 0; j < message.reserved_name.length; ++j)
                        object.reserved_name[j] = message.reserved_name[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [type_name] FieldDescriptorProto type_name
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [default_value] FieldDescriptorProto default_value
             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
             * @property {string|null} [json_name] FieldDescriptorProto json_name
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto type_name.
             * @member {string} type_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type_name = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto default_value.
             * @member {string} default_value
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.default_value = "";

            /**
             * FieldDescriptorProto oneof_index.
             * @member {number} oneof_index
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneof_index = 0;

            /**
             * FieldDescriptorProto json_name.
             * @member {string} json_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.json_name = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.type_name = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.default_value = reader.string();
                        break;
                    case 9:
                        message.oneof_index = reader.int32();
                        break;
                    case 10:
                        message.json_name = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    if (!$util.isString(message.type_name))
                        return "type_name: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    if (!$util.isString(message.default_value))
                        return "default_value: string expected";
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    if (!$util.isInteger(message.oneof_index))
                        return "oneof_index: integer expected";
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    if (!$util.isString(message.json_name))
                        return "json_name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.type_name != null)
                    message.type_name = String(object.type_name);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.default_value != null)
                    message.default_value = String(object.default_value);
                if (object.oneof_index != null)
                    message.oneof_index = object.oneof_index | 0;
                if (object.json_name != null)
                    message.json_name = String(object.json_name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.type_name = "";
                    object.default_value = "";
                    object.options = null;
                    object.oneof_index = 0;
                    object.json_name = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    object.type_name = message.type_name;
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    object.default_value = message.default_value;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    object.oneof_index = message.oneof_index;
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    object.json_name = message.json_name;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (let i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (let i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [input_type] MethodDescriptorProto input_type
             * @property {string|null} [output_type] MethodDescriptorProto output_type
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto input_type.
             * @member {string} input_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.input_type = "";

            /**
             * MethodDescriptorProto output_type.
             * @member {string} output_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.output_type = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto client_streaming.
             * @member {boolean} client_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.client_streaming = false;

            /**
             * MethodDescriptorProto server_streaming.
             * @member {boolean} server_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.server_streaming = false;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.input_type = reader.string();
                        break;
                    case 3:
                        message.output_type = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.client_streaming = reader.bool();
                        break;
                    case 6:
                        message.server_streaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    if (!$util.isString(message.input_type))
                        return "input_type: string expected";
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    if (!$util.isString(message.output_type))
                        return "output_type: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    if (typeof message.client_streaming !== "boolean")
                        return "client_streaming: boolean expected";
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    if (typeof message.server_streaming !== "boolean")
                        return "server_streaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.input_type != null)
                    message.input_type = String(object.input_type);
                if (object.output_type != null)
                    message.output_type = String(object.output_type);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.client_streaming != null)
                    message.client_streaming = Boolean(object.client_streaming);
                if (object.server_streaming != null)
                    message.server_streaming = Boolean(object.server_streaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.input_type = "";
                    object.output_type = "";
                    object.options = null;
                    object.client_streaming = false;
                    object.server_streaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    object.input_type = message.input_type;
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    object.output_type = message.output_type;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    object.client_streaming = message.client_streaming;
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    object.server_streaming = message.server_streaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [java_package] FileOptions java_package
             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
             * @property {string|null} [go_package] FileOptions go_package
             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters_all"] FileOptions .gogoproto.goproto_getters_all
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix_all"] FileOptions .gogoproto.goproto_enum_prefix_all
             * @property {boolean|null} [".gogoproto.goproto_stringer_all"] FileOptions .gogoproto.goproto_stringer_all
             * @property {boolean|null} [".gogoproto.verbose_equal_all"] FileOptions .gogoproto.verbose_equal_all
             * @property {boolean|null} [".gogoproto.face_all"] FileOptions .gogoproto.face_all
             * @property {boolean|null} [".gogoproto.gostring_all"] FileOptions .gogoproto.gostring_all
             * @property {boolean|null} [".gogoproto.populate_all"] FileOptions .gogoproto.populate_all
             * @property {boolean|null} [".gogoproto.stringer_all"] FileOptions .gogoproto.stringer_all
             * @property {boolean|null} [".gogoproto.onlyone_all"] FileOptions .gogoproto.onlyone_all
             * @property {boolean|null} [".gogoproto.equal_all"] FileOptions .gogoproto.equal_all
             * @property {boolean|null} [".gogoproto.description_all"] FileOptions .gogoproto.description_all
             * @property {boolean|null} [".gogoproto.testgen_all"] FileOptions .gogoproto.testgen_all
             * @property {boolean|null} [".gogoproto.benchgen_all"] FileOptions .gogoproto.benchgen_all
             * @property {boolean|null} [".gogoproto.marshaler_all"] FileOptions .gogoproto.marshaler_all
             * @property {boolean|null} [".gogoproto.unmarshaler_all"] FileOptions .gogoproto.unmarshaler_all
             * @property {boolean|null} [".gogoproto.stable_marshaler_all"] FileOptions .gogoproto.stable_marshaler_all
             * @property {boolean|null} [".gogoproto.sizer_all"] FileOptions .gogoproto.sizer_all
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer_all"] FileOptions .gogoproto.goproto_enum_stringer_all
             * @property {boolean|null} [".gogoproto.enum_stringer_all"] FileOptions .gogoproto.enum_stringer_all
             * @property {boolean|null} [".gogoproto.unsafe_marshaler_all"] FileOptions .gogoproto.unsafe_marshaler_all
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler_all"] FileOptions .gogoproto.unsafe_unmarshaler_all
             * @property {boolean|null} [".gogoproto.goproto_extensions_map_all"] FileOptions .gogoproto.goproto_extensions_map_all
             * @property {boolean|null} [".gogoproto.goproto_unrecognized_all"] FileOptions .gogoproto.goproto_unrecognized_all
             * @property {boolean|null} [".gogoproto.gogoproto_import"] FileOptions .gogoproto.gogoproto_import
             * @property {boolean|null} [".gogoproto.protosizer_all"] FileOptions .gogoproto.protosizer_all
             * @property {boolean|null} [".gogoproto.compare_all"] FileOptions .gogoproto.compare_all
             * @property {boolean|null} [".gogoproto.typedecl_all"] FileOptions .gogoproto.typedecl_all
             * @property {boolean|null} [".gogoproto.enumdecl_all"] FileOptions .gogoproto.enumdecl_all
             * @property {boolean|null} [".gogoproto.goproto_registration"] FileOptions .gogoproto.goproto_registration
             * @property {boolean|null} [".gogoproto.messagename_all"] FileOptions .gogoproto.messagename_all
             * @property {boolean|null} [".gogoproto.goproto_sizecache_all"] FileOptions .gogoproto.goproto_sizecache_all
             * @property {boolean|null} [".gogoproto.goproto_unkeyed_all"] FileOptions .gogoproto.goproto_unkeyed_all
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions java_package.
             * @member {string} java_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_package = "";

            /**
             * FileOptions java_outer_classname.
             * @member {string} java_outer_classname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_outer_classname = "";

            /**
             * FileOptions java_multiple_files.
             * @member {boolean} java_multiple_files
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_multiple_files = false;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @member {boolean} java_generate_equals_and_hash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generate_equals_and_hash = false;

            /**
             * FileOptions java_string_check_utf8.
             * @member {boolean} java_string_check_utf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_string_check_utf8 = false;

            /**
             * FileOptions optimize_for.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimize_for = 1;

            /**
             * FileOptions go_package.
             * @member {string} go_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.go_package = "";

            /**
             * FileOptions cc_generic_services.
             * @member {boolean} cc_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_generic_services = false;

            /**
             * FileOptions java_generic_services.
             * @member {boolean} java_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generic_services = false;

            /**
             * FileOptions py_generic_services.
             * @member {boolean} py_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.py_generic_services = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions cc_enable_arenas.
             * @member {boolean} cc_enable_arenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_enable_arenas = false;

            /**
             * FileOptions objc_class_prefix.
             * @member {string} objc_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objc_class_prefix = "";

            /**
             * FileOptions csharp_namespace.
             * @member {string} csharp_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharp_namespace = "";

            /**
             * FileOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FileOptions .gogoproto.goproto_getters_all.
             * @member {boolean} .gogoproto.goproto_getters_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_getters_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_prefix_all.
             * @member {boolean} .gogoproto.goproto_enum_prefix_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_prefix_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_stringer_all.
             * @member {boolean} .gogoproto.goproto_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.verbose_equal_all.
             * @member {boolean} .gogoproto.verbose_equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.verbose_equal_all"] = false;

            /**
             * FileOptions .gogoproto.face_all.
             * @member {boolean} .gogoproto.face_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.face_all"] = false;

            /**
             * FileOptions .gogoproto.gostring_all.
             * @member {boolean} .gogoproto.gostring_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gostring_all"] = false;

            /**
             * FileOptions .gogoproto.populate_all.
             * @member {boolean} .gogoproto.populate_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.populate_all"] = false;

            /**
             * FileOptions .gogoproto.stringer_all.
             * @member {boolean} .gogoproto.stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stringer_all"] = false;

            /**
             * FileOptions .gogoproto.onlyone_all.
             * @member {boolean} .gogoproto.onlyone_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.onlyone_all"] = false;

            /**
             * FileOptions .gogoproto.equal_all.
             * @member {boolean} .gogoproto.equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.equal_all"] = false;

            /**
             * FileOptions .gogoproto.description_all.
             * @member {boolean} .gogoproto.description_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.description_all"] = false;

            /**
             * FileOptions .gogoproto.testgen_all.
             * @member {boolean} .gogoproto.testgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.testgen_all"] = false;

            /**
             * FileOptions .gogoproto.benchgen_all.
             * @member {boolean} .gogoproto.benchgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.benchgen_all"] = false;

            /**
             * FileOptions .gogoproto.marshaler_all.
             * @member {boolean} .gogoproto.marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unmarshaler_all.
             * @member {boolean} .gogoproto.unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.stable_marshaler_all.
             * @member {boolean} .gogoproto.stable_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stable_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.sizer_all.
             * @member {boolean} .gogoproto.sizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.sizer_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_stringer_all.
             * @member {boolean} .gogoproto.goproto_enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.enum_stringer_all.
             * @member {boolean} .gogoproto.enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_marshaler_all.
             * @member {boolean} .gogoproto.unsafe_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_unmarshaler_all.
             * @member {boolean} .gogoproto.unsafe_unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_extensions_map_all.
             * @member {boolean} .gogoproto.goproto_extensions_map_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_extensions_map_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unrecognized_all.
             * @member {boolean} .gogoproto.goproto_unrecognized_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unrecognized_all"] = false;

            /**
             * FileOptions .gogoproto.gogoproto_import.
             * @member {boolean} .gogoproto.gogoproto_import
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gogoproto_import"] = false;

            /**
             * FileOptions .gogoproto.protosizer_all.
             * @member {boolean} .gogoproto.protosizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.protosizer_all"] = false;

            /**
             * FileOptions .gogoproto.compare_all.
             * @member {boolean} .gogoproto.compare_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.compare_all"] = false;

            /**
             * FileOptions .gogoproto.typedecl_all.
             * @member {boolean} .gogoproto.typedecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.typedecl_all"] = false;

            /**
             * FileOptions .gogoproto.enumdecl_all.
             * @member {boolean} .gogoproto.enumdecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enumdecl_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_registration.
             * @member {boolean} .gogoproto.goproto_registration
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_registration"] = false;

            /**
             * FileOptions .gogoproto.messagename_all.
             * @member {boolean} .gogoproto.messagename_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.messagename_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_sizecache_all.
             * @member {boolean} .gogoproto.goproto_sizecache_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_sizecache_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unkeyed_all.
             * @member {boolean} .gogoproto.goproto_unkeyed_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unkeyed_all"] = false;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters_all"))
                    writer.uint32(/* id 63001, wireType 0 =*/504008).bool(message[".gogoproto.goproto_getters_all"]);
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix_all"))
                    writer.uint32(/* id 63002, wireType 0 =*/504016).bool(message[".gogoproto.goproto_enum_prefix_all"]);
                if (message[".gogoproto.goproto_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer_all"))
                    writer.uint32(/* id 63003, wireType 0 =*/504024).bool(message[".gogoproto.goproto_stringer_all"]);
                if (message[".gogoproto.verbose_equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal_all"))
                    writer.uint32(/* id 63004, wireType 0 =*/504032).bool(message[".gogoproto.verbose_equal_all"]);
                if (message[".gogoproto.face_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face_all"))
                    writer.uint32(/* id 63005, wireType 0 =*/504040).bool(message[".gogoproto.face_all"]);
                if (message[".gogoproto.gostring_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring_all"))
                    writer.uint32(/* id 63006, wireType 0 =*/504048).bool(message[".gogoproto.gostring_all"]);
                if (message[".gogoproto.populate_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate_all"))
                    writer.uint32(/* id 63007, wireType 0 =*/504056).bool(message[".gogoproto.populate_all"]);
                if (message[".gogoproto.stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer_all"))
                    writer.uint32(/* id 63008, wireType 0 =*/504064).bool(message[".gogoproto.stringer_all"]);
                if (message[".gogoproto.onlyone_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone_all"))
                    writer.uint32(/* id 63009, wireType 0 =*/504072).bool(message[".gogoproto.onlyone_all"]);
                if (message[".gogoproto.equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal_all"))
                    writer.uint32(/* id 63013, wireType 0 =*/504104).bool(message[".gogoproto.equal_all"]);
                if (message[".gogoproto.description_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description_all"))
                    writer.uint32(/* id 63014, wireType 0 =*/504112).bool(message[".gogoproto.description_all"]);
                if (message[".gogoproto.testgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen_all"))
                    writer.uint32(/* id 63015, wireType 0 =*/504120).bool(message[".gogoproto.testgen_all"]);
                if (message[".gogoproto.benchgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen_all"))
                    writer.uint32(/* id 63016, wireType 0 =*/504128).bool(message[".gogoproto.benchgen_all"]);
                if (message[".gogoproto.marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler_all"))
                    writer.uint32(/* id 63017, wireType 0 =*/504136).bool(message[".gogoproto.marshaler_all"]);
                if (message[".gogoproto.unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler_all"))
                    writer.uint32(/* id 63018, wireType 0 =*/504144).bool(message[".gogoproto.unmarshaler_all"]);
                if (message[".gogoproto.stable_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler_all"))
                    writer.uint32(/* id 63019, wireType 0 =*/504152).bool(message[".gogoproto.stable_marshaler_all"]);
                if (message[".gogoproto.sizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer_all"))
                    writer.uint32(/* id 63020, wireType 0 =*/504160).bool(message[".gogoproto.sizer_all"]);
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer_all"))
                    writer.uint32(/* id 63021, wireType 0 =*/504168).bool(message[".gogoproto.goproto_enum_stringer_all"]);
                if (message[".gogoproto.enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer_all"))
                    writer.uint32(/* id 63022, wireType 0 =*/504176).bool(message[".gogoproto.enum_stringer_all"]);
                if (message[".gogoproto.unsafe_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler_all"))
                    writer.uint32(/* id 63023, wireType 0 =*/504184).bool(message[".gogoproto.unsafe_marshaler_all"]);
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler_all"))
                    writer.uint32(/* id 63024, wireType 0 =*/504192).bool(message[".gogoproto.unsafe_unmarshaler_all"]);
                if (message[".gogoproto.goproto_extensions_map_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map_all"))
                    writer.uint32(/* id 63025, wireType 0 =*/504200).bool(message[".gogoproto.goproto_extensions_map_all"]);
                if (message[".gogoproto.goproto_unrecognized_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized_all"))
                    writer.uint32(/* id 63026, wireType 0 =*/504208).bool(message[".gogoproto.goproto_unrecognized_all"]);
                if (message[".gogoproto.gogoproto_import"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gogoproto_import"))
                    writer.uint32(/* id 63027, wireType 0 =*/504216).bool(message[".gogoproto.gogoproto_import"]);
                if (message[".gogoproto.protosizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer_all"))
                    writer.uint32(/* id 63028, wireType 0 =*/504224).bool(message[".gogoproto.protosizer_all"]);
                if (message[".gogoproto.compare_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare_all"))
                    writer.uint32(/* id 63029, wireType 0 =*/504232).bool(message[".gogoproto.compare_all"]);
                if (message[".gogoproto.typedecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl_all"))
                    writer.uint32(/* id 63030, wireType 0 =*/504240).bool(message[".gogoproto.typedecl_all"]);
                if (message[".gogoproto.enumdecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl_all"))
                    writer.uint32(/* id 63031, wireType 0 =*/504248).bool(message[".gogoproto.enumdecl_all"]);
                if (message[".gogoproto.goproto_registration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_registration"))
                    writer.uint32(/* id 63032, wireType 0 =*/504256).bool(message[".gogoproto.goproto_registration"]);
                if (message[".gogoproto.messagename_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename_all"))
                    writer.uint32(/* id 63033, wireType 0 =*/504264).bool(message[".gogoproto.messagename_all"]);
                if (message[".gogoproto.goproto_sizecache_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache_all"))
                    writer.uint32(/* id 63034, wireType 0 =*/504272).bool(message[".gogoproto.goproto_sizecache_all"]);
                if (message[".gogoproto.goproto_unkeyed_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed_all"))
                    writer.uint32(/* id 63035, wireType 0 =*/504280).bool(message[".gogoproto.goproto_unkeyed_all"]);
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.java_package = reader.string();
                        break;
                    case 8:
                        message.java_outer_classname = reader.string();
                        break;
                    case 10:
                        message.java_multiple_files = reader.bool();
                        break;
                    case 20:
                        message.java_generate_equals_and_hash = reader.bool();
                        break;
                    case 27:
                        message.java_string_check_utf8 = reader.bool();
                        break;
                    case 9:
                        message.optimize_for = reader.int32();
                        break;
                    case 11:
                        message.go_package = reader.string();
                        break;
                    case 16:
                        message.cc_generic_services = reader.bool();
                        break;
                    case 17:
                        message.java_generic_services = reader.bool();
                        break;
                    case 18:
                        message.py_generic_services = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.cc_enable_arenas = reader.bool();
                        break;
                    case 36:
                        message.objc_class_prefix = reader.string();
                        break;
                    case 37:
                        message.csharp_namespace = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 63001:
                        message[".gogoproto.goproto_getters_all"] = reader.bool();
                        break;
                    case 63002:
                        message[".gogoproto.goproto_enum_prefix_all"] = reader.bool();
                        break;
                    case 63003:
                        message[".gogoproto.goproto_stringer_all"] = reader.bool();
                        break;
                    case 63004:
                        message[".gogoproto.verbose_equal_all"] = reader.bool();
                        break;
                    case 63005:
                        message[".gogoproto.face_all"] = reader.bool();
                        break;
                    case 63006:
                        message[".gogoproto.gostring_all"] = reader.bool();
                        break;
                    case 63007:
                        message[".gogoproto.populate_all"] = reader.bool();
                        break;
                    case 63008:
                        message[".gogoproto.stringer_all"] = reader.bool();
                        break;
                    case 63009:
                        message[".gogoproto.onlyone_all"] = reader.bool();
                        break;
                    case 63013:
                        message[".gogoproto.equal_all"] = reader.bool();
                        break;
                    case 63014:
                        message[".gogoproto.description_all"] = reader.bool();
                        break;
                    case 63015:
                        message[".gogoproto.testgen_all"] = reader.bool();
                        break;
                    case 63016:
                        message[".gogoproto.benchgen_all"] = reader.bool();
                        break;
                    case 63017:
                        message[".gogoproto.marshaler_all"] = reader.bool();
                        break;
                    case 63018:
                        message[".gogoproto.unmarshaler_all"] = reader.bool();
                        break;
                    case 63019:
                        message[".gogoproto.stable_marshaler_all"] = reader.bool();
                        break;
                    case 63020:
                        message[".gogoproto.sizer_all"] = reader.bool();
                        break;
                    case 63021:
                        message[".gogoproto.goproto_enum_stringer_all"] = reader.bool();
                        break;
                    case 63022:
                        message[".gogoproto.enum_stringer_all"] = reader.bool();
                        break;
                    case 63023:
                        message[".gogoproto.unsafe_marshaler_all"] = reader.bool();
                        break;
                    case 63024:
                        message[".gogoproto.unsafe_unmarshaler_all"] = reader.bool();
                        break;
                    case 63025:
                        message[".gogoproto.goproto_extensions_map_all"] = reader.bool();
                        break;
                    case 63026:
                        message[".gogoproto.goproto_unrecognized_all"] = reader.bool();
                        break;
                    case 63027:
                        message[".gogoproto.gogoproto_import"] = reader.bool();
                        break;
                    case 63028:
                        message[".gogoproto.protosizer_all"] = reader.bool();
                        break;
                    case 63029:
                        message[".gogoproto.compare_all"] = reader.bool();
                        break;
                    case 63030:
                        message[".gogoproto.typedecl_all"] = reader.bool();
                        break;
                    case 63031:
                        message[".gogoproto.enumdecl_all"] = reader.bool();
                        break;
                    case 63032:
                        message[".gogoproto.goproto_registration"] = reader.bool();
                        break;
                    case 63033:
                        message[".gogoproto.messagename_all"] = reader.bool();
                        break;
                    case 63034:
                        message[".gogoproto.goproto_sizecache_all"] = reader.bool();
                        break;
                    case 63035:
                        message[".gogoproto.goproto_unkeyed_all"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    if (!$util.isString(message.java_package))
                        return "java_package: string expected";
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    if (!$util.isString(message.java_outer_classname))
                        return "java_outer_classname: string expected";
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    if (typeof message.java_multiple_files !== "boolean")
                        return "java_multiple_files: boolean expected";
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    if (typeof message.java_generate_equals_and_hash !== "boolean")
                        return "java_generate_equals_and_hash: boolean expected";
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    if (typeof message.java_string_check_utf8 !== "boolean")
                        return "java_string_check_utf8: boolean expected";
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    switch (message.optimize_for) {
                    default:
                        return "optimize_for: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    if (!$util.isString(message.go_package))
                        return "go_package: string expected";
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    if (typeof message.cc_generic_services !== "boolean")
                        return "cc_generic_services: boolean expected";
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    if (typeof message.java_generic_services !== "boolean")
                        return "java_generic_services: boolean expected";
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    if (typeof message.py_generic_services !== "boolean")
                        return "py_generic_services: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    if (typeof message.cc_enable_arenas !== "boolean")
                        return "cc_enable_arenas: boolean expected";
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    if (!$util.isString(message.objc_class_prefix))
                        return "objc_class_prefix: string expected";
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    if (!$util.isString(message.csharp_namespace))
                        return "csharp_namespace: string expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    if (typeof message[".gogoproto.goproto_getters_all"] !== "boolean")
                        return ".gogoproto.goproto_getters_all: boolean expected";
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    if (typeof message[".gogoproto.goproto_enum_prefix_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix_all: boolean expected";
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    if (typeof message[".gogoproto.goproto_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_stringer_all: boolean expected";
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    if (typeof message[".gogoproto.verbose_equal_all"] !== "boolean")
                        return ".gogoproto.verbose_equal_all: boolean expected";
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    if (typeof message[".gogoproto.face_all"] !== "boolean")
                        return ".gogoproto.face_all: boolean expected";
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    if (typeof message[".gogoproto.gostring_all"] !== "boolean")
                        return ".gogoproto.gostring_all: boolean expected";
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    if (typeof message[".gogoproto.populate_all"] !== "boolean")
                        return ".gogoproto.populate_all: boolean expected";
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    if (typeof message[".gogoproto.stringer_all"] !== "boolean")
                        return ".gogoproto.stringer_all: boolean expected";
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    if (typeof message[".gogoproto.onlyone_all"] !== "boolean")
                        return ".gogoproto.onlyone_all: boolean expected";
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    if (typeof message[".gogoproto.equal_all"] !== "boolean")
                        return ".gogoproto.equal_all: boolean expected";
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    if (typeof message[".gogoproto.description_all"] !== "boolean")
                        return ".gogoproto.description_all: boolean expected";
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    if (typeof message[".gogoproto.testgen_all"] !== "boolean")
                        return ".gogoproto.testgen_all: boolean expected";
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    if (typeof message[".gogoproto.benchgen_all"] !== "boolean")
                        return ".gogoproto.benchgen_all: boolean expected";
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    if (typeof message[".gogoproto.marshaler_all"] !== "boolean")
                        return ".gogoproto.marshaler_all: boolean expected";
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    if (typeof message[".gogoproto.unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unmarshaler_all: boolean expected";
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    if (typeof message[".gogoproto.stable_marshaler_all"] !== "boolean")
                        return ".gogoproto.stable_marshaler_all: boolean expected";
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    if (typeof message[".gogoproto.sizer_all"] !== "boolean")
                        return ".gogoproto.sizer_all: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    if (typeof message[".gogoproto.goproto_enum_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer_all: boolean expected";
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    if (typeof message[".gogoproto.enum_stringer_all"] !== "boolean")
                        return ".gogoproto.enum_stringer_all: boolean expected";
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    if (typeof message[".gogoproto.unsafe_marshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler_all: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler_all: boolean expected";
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    if (typeof message[".gogoproto.goproto_extensions_map_all"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map_all: boolean expected";
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    if (typeof message[".gogoproto.goproto_unrecognized_all"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized_all: boolean expected";
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    if (typeof message[".gogoproto.gogoproto_import"] !== "boolean")
                        return ".gogoproto.gogoproto_import: boolean expected";
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    if (typeof message[".gogoproto.protosizer_all"] !== "boolean")
                        return ".gogoproto.protosizer_all: boolean expected";
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    if (typeof message[".gogoproto.compare_all"] !== "boolean")
                        return ".gogoproto.compare_all: boolean expected";
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    if (typeof message[".gogoproto.typedecl_all"] !== "boolean")
                        return ".gogoproto.typedecl_all: boolean expected";
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    if (typeof message[".gogoproto.enumdecl_all"] !== "boolean")
                        return ".gogoproto.enumdecl_all: boolean expected";
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    if (typeof message[".gogoproto.goproto_registration"] !== "boolean")
                        return ".gogoproto.goproto_registration: boolean expected";
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    if (typeof message[".gogoproto.messagename_all"] !== "boolean")
                        return ".gogoproto.messagename_all: boolean expected";
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    if (typeof message[".gogoproto.goproto_sizecache_all"] !== "boolean")
                        return ".gogoproto.goproto_sizecache_all: boolean expected";
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    if (typeof message[".gogoproto.goproto_unkeyed_all"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed_all: boolean expected";
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.java_package != null)
                    message.java_package = String(object.java_package);
                if (object.java_outer_classname != null)
                    message.java_outer_classname = String(object.java_outer_classname);
                if (object.java_multiple_files != null)
                    message.java_multiple_files = Boolean(object.java_multiple_files);
                if (object.java_generate_equals_and_hash != null)
                    message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                if (object.java_string_check_utf8 != null)
                    message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                switch (object.optimize_for) {
                case "SPEED":
                case 1:
                    message.optimize_for = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimize_for = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimize_for = 3;
                    break;
                }
                if (object.go_package != null)
                    message.go_package = String(object.go_package);
                if (object.cc_generic_services != null)
                    message.cc_generic_services = Boolean(object.cc_generic_services);
                if (object.java_generic_services != null)
                    message.java_generic_services = Boolean(object.java_generic_services);
                if (object.py_generic_services != null)
                    message.py_generic_services = Boolean(object.py_generic_services);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.cc_enable_arenas != null)
                    message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                if (object.objc_class_prefix != null)
                    message.objc_class_prefix = String(object.objc_class_prefix);
                if (object.csharp_namespace != null)
                    message.csharp_namespace = String(object.csharp_namespace);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters_all"] != null)
                    message[".gogoproto.goproto_getters_all"] = Boolean(object[".gogoproto.goproto_getters_all"]);
                if (object[".gogoproto.goproto_enum_prefix_all"] != null)
                    message[".gogoproto.goproto_enum_prefix_all"] = Boolean(object[".gogoproto.goproto_enum_prefix_all"]);
                if (object[".gogoproto.goproto_stringer_all"] != null)
                    message[".gogoproto.goproto_stringer_all"] = Boolean(object[".gogoproto.goproto_stringer_all"]);
                if (object[".gogoproto.verbose_equal_all"] != null)
                    message[".gogoproto.verbose_equal_all"] = Boolean(object[".gogoproto.verbose_equal_all"]);
                if (object[".gogoproto.face_all"] != null)
                    message[".gogoproto.face_all"] = Boolean(object[".gogoproto.face_all"]);
                if (object[".gogoproto.gostring_all"] != null)
                    message[".gogoproto.gostring_all"] = Boolean(object[".gogoproto.gostring_all"]);
                if (object[".gogoproto.populate_all"] != null)
                    message[".gogoproto.populate_all"] = Boolean(object[".gogoproto.populate_all"]);
                if (object[".gogoproto.stringer_all"] != null)
                    message[".gogoproto.stringer_all"] = Boolean(object[".gogoproto.stringer_all"]);
                if (object[".gogoproto.onlyone_all"] != null)
                    message[".gogoproto.onlyone_all"] = Boolean(object[".gogoproto.onlyone_all"]);
                if (object[".gogoproto.equal_all"] != null)
                    message[".gogoproto.equal_all"] = Boolean(object[".gogoproto.equal_all"]);
                if (object[".gogoproto.description_all"] != null)
                    message[".gogoproto.description_all"] = Boolean(object[".gogoproto.description_all"]);
                if (object[".gogoproto.testgen_all"] != null)
                    message[".gogoproto.testgen_all"] = Boolean(object[".gogoproto.testgen_all"]);
                if (object[".gogoproto.benchgen_all"] != null)
                    message[".gogoproto.benchgen_all"] = Boolean(object[".gogoproto.benchgen_all"]);
                if (object[".gogoproto.marshaler_all"] != null)
                    message[".gogoproto.marshaler_all"] = Boolean(object[".gogoproto.marshaler_all"]);
                if (object[".gogoproto.unmarshaler_all"] != null)
                    message[".gogoproto.unmarshaler_all"] = Boolean(object[".gogoproto.unmarshaler_all"]);
                if (object[".gogoproto.stable_marshaler_all"] != null)
                    message[".gogoproto.stable_marshaler_all"] = Boolean(object[".gogoproto.stable_marshaler_all"]);
                if (object[".gogoproto.sizer_all"] != null)
                    message[".gogoproto.sizer_all"] = Boolean(object[".gogoproto.sizer_all"]);
                if (object[".gogoproto.goproto_enum_stringer_all"] != null)
                    message[".gogoproto.goproto_enum_stringer_all"] = Boolean(object[".gogoproto.goproto_enum_stringer_all"]);
                if (object[".gogoproto.enum_stringer_all"] != null)
                    message[".gogoproto.enum_stringer_all"] = Boolean(object[".gogoproto.enum_stringer_all"]);
                if (object[".gogoproto.unsafe_marshaler_all"] != null)
                    message[".gogoproto.unsafe_marshaler_all"] = Boolean(object[".gogoproto.unsafe_marshaler_all"]);
                if (object[".gogoproto.unsafe_unmarshaler_all"] != null)
                    message[".gogoproto.unsafe_unmarshaler_all"] = Boolean(object[".gogoproto.unsafe_unmarshaler_all"]);
                if (object[".gogoproto.goproto_extensions_map_all"] != null)
                    message[".gogoproto.goproto_extensions_map_all"] = Boolean(object[".gogoproto.goproto_extensions_map_all"]);
                if (object[".gogoproto.goproto_unrecognized_all"] != null)
                    message[".gogoproto.goproto_unrecognized_all"] = Boolean(object[".gogoproto.goproto_unrecognized_all"]);
                if (object[".gogoproto.gogoproto_import"] != null)
                    message[".gogoproto.gogoproto_import"] = Boolean(object[".gogoproto.gogoproto_import"]);
                if (object[".gogoproto.protosizer_all"] != null)
                    message[".gogoproto.protosizer_all"] = Boolean(object[".gogoproto.protosizer_all"]);
                if (object[".gogoproto.compare_all"] != null)
                    message[".gogoproto.compare_all"] = Boolean(object[".gogoproto.compare_all"]);
                if (object[".gogoproto.typedecl_all"] != null)
                    message[".gogoproto.typedecl_all"] = Boolean(object[".gogoproto.typedecl_all"]);
                if (object[".gogoproto.enumdecl_all"] != null)
                    message[".gogoproto.enumdecl_all"] = Boolean(object[".gogoproto.enumdecl_all"]);
                if (object[".gogoproto.goproto_registration"] != null)
                    message[".gogoproto.goproto_registration"] = Boolean(object[".gogoproto.goproto_registration"]);
                if (object[".gogoproto.messagename_all"] != null)
                    message[".gogoproto.messagename_all"] = Boolean(object[".gogoproto.messagename_all"]);
                if (object[".gogoproto.goproto_sizecache_all"] != null)
                    message[".gogoproto.goproto_sizecache_all"] = Boolean(object[".gogoproto.goproto_sizecache_all"]);
                if (object[".gogoproto.goproto_unkeyed_all"] != null)
                    message[".gogoproto.goproto_unkeyed_all"] = Boolean(object[".gogoproto.goproto_unkeyed_all"]);
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.java_package = "";
                    object.java_outer_classname = "";
                    object.optimize_for = options.enums === String ? "SPEED" : 1;
                    object.java_multiple_files = false;
                    object.go_package = "";
                    object.cc_generic_services = false;
                    object.java_generic_services = false;
                    object.py_generic_services = false;
                    object.java_generate_equals_and_hash = false;
                    object.deprecated = false;
                    object.java_string_check_utf8 = false;
                    object.cc_enable_arenas = false;
                    object.objc_class_prefix = "";
                    object.csharp_namespace = "";
                    object[".gogoproto.goproto_getters_all"] = false;
                    object[".gogoproto.goproto_enum_prefix_all"] = false;
                    object[".gogoproto.goproto_stringer_all"] = false;
                    object[".gogoproto.verbose_equal_all"] = false;
                    object[".gogoproto.face_all"] = false;
                    object[".gogoproto.gostring_all"] = false;
                    object[".gogoproto.populate_all"] = false;
                    object[".gogoproto.stringer_all"] = false;
                    object[".gogoproto.onlyone_all"] = false;
                    object[".gogoproto.equal_all"] = false;
                    object[".gogoproto.description_all"] = false;
                    object[".gogoproto.testgen_all"] = false;
                    object[".gogoproto.benchgen_all"] = false;
                    object[".gogoproto.marshaler_all"] = false;
                    object[".gogoproto.unmarshaler_all"] = false;
                    object[".gogoproto.stable_marshaler_all"] = false;
                    object[".gogoproto.sizer_all"] = false;
                    object[".gogoproto.goproto_enum_stringer_all"] = false;
                    object[".gogoproto.enum_stringer_all"] = false;
                    object[".gogoproto.unsafe_marshaler_all"] = false;
                    object[".gogoproto.unsafe_unmarshaler_all"] = false;
                    object[".gogoproto.goproto_extensions_map_all"] = false;
                    object[".gogoproto.goproto_unrecognized_all"] = false;
                    object[".gogoproto.gogoproto_import"] = false;
                    object[".gogoproto.protosizer_all"] = false;
                    object[".gogoproto.compare_all"] = false;
                    object[".gogoproto.typedecl_all"] = false;
                    object[".gogoproto.enumdecl_all"] = false;
                    object[".gogoproto.goproto_registration"] = false;
                    object[".gogoproto.messagename_all"] = false;
                    object[".gogoproto.goproto_sizecache_all"] = false;
                    object[".gogoproto.goproto_unkeyed_all"] = false;
                }
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    object.java_package = message.java_package;
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    object.java_outer_classname = message.java_outer_classname;
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    object.java_multiple_files = message.java_multiple_files;
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    object.go_package = message.go_package;
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    object.cc_generic_services = message.cc_generic_services;
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    object.java_generic_services = message.java_generic_services;
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    object.py_generic_services = message.py_generic_services;
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    object.java_string_check_utf8 = message.java_string_check_utf8;
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    object.cc_enable_arenas = message.cc_enable_arenas;
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    object.objc_class_prefix = message.objc_class_prefix;
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    object.csharp_namespace = message.csharp_namespace;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    object[".gogoproto.goproto_getters_all"] = message[".gogoproto.goproto_getters_all"];
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    object[".gogoproto.goproto_enum_prefix_all"] = message[".gogoproto.goproto_enum_prefix_all"];
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    object[".gogoproto.goproto_stringer_all"] = message[".gogoproto.goproto_stringer_all"];
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    object[".gogoproto.verbose_equal_all"] = message[".gogoproto.verbose_equal_all"];
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    object[".gogoproto.face_all"] = message[".gogoproto.face_all"];
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    object[".gogoproto.gostring_all"] = message[".gogoproto.gostring_all"];
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    object[".gogoproto.populate_all"] = message[".gogoproto.populate_all"];
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    object[".gogoproto.stringer_all"] = message[".gogoproto.stringer_all"];
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    object[".gogoproto.onlyone_all"] = message[".gogoproto.onlyone_all"];
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    object[".gogoproto.equal_all"] = message[".gogoproto.equal_all"];
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    object[".gogoproto.description_all"] = message[".gogoproto.description_all"];
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    object[".gogoproto.testgen_all"] = message[".gogoproto.testgen_all"];
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    object[".gogoproto.benchgen_all"] = message[".gogoproto.benchgen_all"];
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    object[".gogoproto.marshaler_all"] = message[".gogoproto.marshaler_all"];
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    object[".gogoproto.unmarshaler_all"] = message[".gogoproto.unmarshaler_all"];
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    object[".gogoproto.stable_marshaler_all"] = message[".gogoproto.stable_marshaler_all"];
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    object[".gogoproto.sizer_all"] = message[".gogoproto.sizer_all"];
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    object[".gogoproto.goproto_enum_stringer_all"] = message[".gogoproto.goproto_enum_stringer_all"];
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    object[".gogoproto.enum_stringer_all"] = message[".gogoproto.enum_stringer_all"];
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    object[".gogoproto.unsafe_marshaler_all"] = message[".gogoproto.unsafe_marshaler_all"];
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    object[".gogoproto.unsafe_unmarshaler_all"] = message[".gogoproto.unsafe_unmarshaler_all"];
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    object[".gogoproto.goproto_extensions_map_all"] = message[".gogoproto.goproto_extensions_map_all"];
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    object[".gogoproto.goproto_unrecognized_all"] = message[".gogoproto.goproto_unrecognized_all"];
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    object[".gogoproto.gogoproto_import"] = message[".gogoproto.gogoproto_import"];
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    object[".gogoproto.protosizer_all"] = message[".gogoproto.protosizer_all"];
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    object[".gogoproto.compare_all"] = message[".gogoproto.compare_all"];
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    object[".gogoproto.typedecl_all"] = message[".gogoproto.typedecl_all"];
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    object[".gogoproto.enumdecl_all"] = message[".gogoproto.enumdecl_all"];
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    object[".gogoproto.goproto_registration"] = message[".gogoproto.goproto_registration"];
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    object[".gogoproto.messagename_all"] = message[".gogoproto.messagename_all"];
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    object[".gogoproto.goproto_sizecache_all"] = message[".gogoproto.goproto_sizecache_all"];
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    object[".gogoproto.goproto_unkeyed_all"] = message[".gogoproto.goproto_unkeyed_all"];
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [map_entry] MessageOptions map_entry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters"] MessageOptions .gogoproto.goproto_getters
             * @property {boolean|null} [".gogoproto.goproto_stringer"] MessageOptions .gogoproto.goproto_stringer
             * @property {boolean|null} [".gogoproto.verbose_equal"] MessageOptions .gogoproto.verbose_equal
             * @property {boolean|null} [".gogoproto.face"] MessageOptions .gogoproto.face
             * @property {boolean|null} [".gogoproto.gostring"] MessageOptions .gogoproto.gostring
             * @property {boolean|null} [".gogoproto.populate"] MessageOptions .gogoproto.populate
             * @property {boolean|null} [".gogoproto.stringer"] MessageOptions .gogoproto.stringer
             * @property {boolean|null} [".gogoproto.onlyone"] MessageOptions .gogoproto.onlyone
             * @property {boolean|null} [".gogoproto.equal"] MessageOptions .gogoproto.equal
             * @property {boolean|null} [".gogoproto.description"] MessageOptions .gogoproto.description
             * @property {boolean|null} [".gogoproto.testgen"] MessageOptions .gogoproto.testgen
             * @property {boolean|null} [".gogoproto.benchgen"] MessageOptions .gogoproto.benchgen
             * @property {boolean|null} [".gogoproto.marshaler"] MessageOptions .gogoproto.marshaler
             * @property {boolean|null} [".gogoproto.unmarshaler"] MessageOptions .gogoproto.unmarshaler
             * @property {boolean|null} [".gogoproto.stable_marshaler"] MessageOptions .gogoproto.stable_marshaler
             * @property {boolean|null} [".gogoproto.sizer"] MessageOptions .gogoproto.sizer
             * @property {boolean|null} [".gogoproto.unsafe_marshaler"] MessageOptions .gogoproto.unsafe_marshaler
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler"] MessageOptions .gogoproto.unsafe_unmarshaler
             * @property {boolean|null} [".gogoproto.goproto_extensions_map"] MessageOptions .gogoproto.goproto_extensions_map
             * @property {boolean|null} [".gogoproto.goproto_unrecognized"] MessageOptions .gogoproto.goproto_unrecognized
             * @property {boolean|null} [".gogoproto.protosizer"] MessageOptions .gogoproto.protosizer
             * @property {boolean|null} [".gogoproto.compare"] MessageOptions .gogoproto.compare
             * @property {boolean|null} [".gogoproto.typedecl"] MessageOptions .gogoproto.typedecl
             * @property {boolean|null} [".gogoproto.messagename"] MessageOptions .gogoproto.messagename
             * @property {boolean|null} [".gogoproto.goproto_sizecache"] MessageOptions .gogoproto.goproto_sizecache
             * @property {boolean|null} [".gogoproto.goproto_unkeyed"] MessageOptions .gogoproto.goproto_unkeyed
             * @property {string|null} [".cosmos_proto.interface_type"] MessageOptions .cosmos_proto.interface_type
             * @property {string|null} [".cosmos_proto.implements_interface"] MessageOptions .cosmos_proto.implements_interface
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions message_set_wire_format.
             * @member {boolean} message_set_wire_format
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.message_set_wire_format = false;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @member {boolean} no_standard_descriptor_accessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_standard_descriptor_accessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions map_entry.
             * @member {boolean} map_entry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.map_entry = false;

            /**
             * MessageOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MessageOptions .gogoproto.goproto_getters.
             * @member {boolean} .gogoproto.goproto_getters
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_getters"] = false;

            /**
             * MessageOptions .gogoproto.goproto_stringer.
             * @member {boolean} .gogoproto.goproto_stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_stringer"] = false;

            /**
             * MessageOptions .gogoproto.verbose_equal.
             * @member {boolean} .gogoproto.verbose_equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.verbose_equal"] = false;

            /**
             * MessageOptions .gogoproto.face.
             * @member {boolean} .gogoproto.face
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.face"] = false;

            /**
             * MessageOptions .gogoproto.gostring.
             * @member {boolean} .gogoproto.gostring
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.gostring"] = false;

            /**
             * MessageOptions .gogoproto.populate.
             * @member {boolean} .gogoproto.populate
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.populate"] = false;

            /**
             * MessageOptions .gogoproto.stringer.
             * @member {boolean} .gogoproto.stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stringer"] = false;

            /**
             * MessageOptions .gogoproto.onlyone.
             * @member {boolean} .gogoproto.onlyone
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.onlyone"] = false;

            /**
             * MessageOptions .gogoproto.equal.
             * @member {boolean} .gogoproto.equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.equal"] = false;

            /**
             * MessageOptions .gogoproto.description.
             * @member {boolean} .gogoproto.description
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.description"] = false;

            /**
             * MessageOptions .gogoproto.testgen.
             * @member {boolean} .gogoproto.testgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.testgen"] = false;

            /**
             * MessageOptions .gogoproto.benchgen.
             * @member {boolean} .gogoproto.benchgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.benchgen"] = false;

            /**
             * MessageOptions .gogoproto.marshaler.
             * @member {boolean} .gogoproto.marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unmarshaler.
             * @member {boolean} .gogoproto.unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.stable_marshaler.
             * @member {boolean} .gogoproto.stable_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stable_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.sizer.
             * @member {boolean} .gogoproto.sizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.sizer"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_marshaler.
             * @member {boolean} .gogoproto.unsafe_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_unmarshaler.
             * @member {boolean} .gogoproto.unsafe_unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.goproto_extensions_map.
             * @member {boolean} .gogoproto.goproto_extensions_map
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_extensions_map"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unrecognized.
             * @member {boolean} .gogoproto.goproto_unrecognized
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unrecognized"] = false;

            /**
             * MessageOptions .gogoproto.protosizer.
             * @member {boolean} .gogoproto.protosizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.protosizer"] = false;

            /**
             * MessageOptions .gogoproto.compare.
             * @member {boolean} .gogoproto.compare
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.compare"] = false;

            /**
             * MessageOptions .gogoproto.typedecl.
             * @member {boolean} .gogoproto.typedecl
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.typedecl"] = false;

            /**
             * MessageOptions .gogoproto.messagename.
             * @member {boolean} .gogoproto.messagename
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.messagename"] = false;

            /**
             * MessageOptions .gogoproto.goproto_sizecache.
             * @member {boolean} .gogoproto.goproto_sizecache
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_sizecache"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unkeyed.
             * @member {boolean} .gogoproto.goproto_unkeyed
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unkeyed"] = false;

            /**
             * MessageOptions .cosmos_proto.interface_type.
             * @member {string} .cosmos_proto.interface_type
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".cosmos_proto.interface_type"] = "";

            /**
             * MessageOptions .cosmos_proto.implements_interface.
             * @member {string} .cosmos_proto.implements_interface
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".cosmos_proto.implements_interface"] = "";

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters"))
                    writer.uint32(/* id 64001, wireType 0 =*/512008).bool(message[".gogoproto.goproto_getters"]);
                if (message[".gogoproto.goproto_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer"))
                    writer.uint32(/* id 64003, wireType 0 =*/512024).bool(message[".gogoproto.goproto_stringer"]);
                if (message[".gogoproto.verbose_equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal"))
                    writer.uint32(/* id 64004, wireType 0 =*/512032).bool(message[".gogoproto.verbose_equal"]);
                if (message[".gogoproto.face"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face"))
                    writer.uint32(/* id 64005, wireType 0 =*/512040).bool(message[".gogoproto.face"]);
                if (message[".gogoproto.gostring"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring"))
                    writer.uint32(/* id 64006, wireType 0 =*/512048).bool(message[".gogoproto.gostring"]);
                if (message[".gogoproto.populate"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate"))
                    writer.uint32(/* id 64007, wireType 0 =*/512056).bool(message[".gogoproto.populate"]);
                if (message[".gogoproto.onlyone"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone"))
                    writer.uint32(/* id 64009, wireType 0 =*/512072).bool(message[".gogoproto.onlyone"]);
                if (message[".gogoproto.equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal"))
                    writer.uint32(/* id 64013, wireType 0 =*/512104).bool(message[".gogoproto.equal"]);
                if (message[".gogoproto.description"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description"))
                    writer.uint32(/* id 64014, wireType 0 =*/512112).bool(message[".gogoproto.description"]);
                if (message[".gogoproto.testgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen"))
                    writer.uint32(/* id 64015, wireType 0 =*/512120).bool(message[".gogoproto.testgen"]);
                if (message[".gogoproto.benchgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen"))
                    writer.uint32(/* id 64016, wireType 0 =*/512128).bool(message[".gogoproto.benchgen"]);
                if (message[".gogoproto.marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler"))
                    writer.uint32(/* id 64017, wireType 0 =*/512136).bool(message[".gogoproto.marshaler"]);
                if (message[".gogoproto.unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler"))
                    writer.uint32(/* id 64018, wireType 0 =*/512144).bool(message[".gogoproto.unmarshaler"]);
                if (message[".gogoproto.stable_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler"))
                    writer.uint32(/* id 64019, wireType 0 =*/512152).bool(message[".gogoproto.stable_marshaler"]);
                if (message[".gogoproto.sizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer"))
                    writer.uint32(/* id 64020, wireType 0 =*/512160).bool(message[".gogoproto.sizer"]);
                if (message[".gogoproto.unsafe_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler"))
                    writer.uint32(/* id 64023, wireType 0 =*/512184).bool(message[".gogoproto.unsafe_marshaler"]);
                if (message[".gogoproto.unsafe_unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler"))
                    writer.uint32(/* id 64024, wireType 0 =*/512192).bool(message[".gogoproto.unsafe_unmarshaler"]);
                if (message[".gogoproto.goproto_extensions_map"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map"))
                    writer.uint32(/* id 64025, wireType 0 =*/512200).bool(message[".gogoproto.goproto_extensions_map"]);
                if (message[".gogoproto.goproto_unrecognized"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized"))
                    writer.uint32(/* id 64026, wireType 0 =*/512208).bool(message[".gogoproto.goproto_unrecognized"]);
                if (message[".gogoproto.protosizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer"))
                    writer.uint32(/* id 64028, wireType 0 =*/512224).bool(message[".gogoproto.protosizer"]);
                if (message[".gogoproto.compare"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare"))
                    writer.uint32(/* id 64029, wireType 0 =*/512232).bool(message[".gogoproto.compare"]);
                if (message[".gogoproto.typedecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl"))
                    writer.uint32(/* id 64030, wireType 0 =*/512240).bool(message[".gogoproto.typedecl"]);
                if (message[".gogoproto.messagename"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename"))
                    writer.uint32(/* id 64033, wireType 0 =*/512264).bool(message[".gogoproto.messagename"]);
                if (message[".gogoproto.goproto_sizecache"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache"))
                    writer.uint32(/* id 64034, wireType 0 =*/512272).bool(message[".gogoproto.goproto_sizecache"]);
                if (message[".gogoproto.goproto_unkeyed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed"))
                    writer.uint32(/* id 64035, wireType 0 =*/512280).bool(message[".gogoproto.goproto_unkeyed"]);
                if (message[".gogoproto.stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer"))
                    writer.uint32(/* id 67008, wireType 0 =*/536064).bool(message[".gogoproto.stringer"]);
                if (message[".cosmos_proto.interface_type"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.interface_type"))
                    writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.interface_type"]);
                if (message[".cosmos_proto.implements_interface"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.implements_interface"))
                    writer.uint32(/* id 93002, wireType 2 =*/744018).string(message[".cosmos_proto.implements_interface"]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message_set_wire_format = reader.bool();
                        break;
                    case 2:
                        message.no_standard_descriptor_accessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.map_entry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 64001:
                        message[".gogoproto.goproto_getters"] = reader.bool();
                        break;
                    case 64003:
                        message[".gogoproto.goproto_stringer"] = reader.bool();
                        break;
                    case 64004:
                        message[".gogoproto.verbose_equal"] = reader.bool();
                        break;
                    case 64005:
                        message[".gogoproto.face"] = reader.bool();
                        break;
                    case 64006:
                        message[".gogoproto.gostring"] = reader.bool();
                        break;
                    case 64007:
                        message[".gogoproto.populate"] = reader.bool();
                        break;
                    case 67008:
                        message[".gogoproto.stringer"] = reader.bool();
                        break;
                    case 64009:
                        message[".gogoproto.onlyone"] = reader.bool();
                        break;
                    case 64013:
                        message[".gogoproto.equal"] = reader.bool();
                        break;
                    case 64014:
                        message[".gogoproto.description"] = reader.bool();
                        break;
                    case 64015:
                        message[".gogoproto.testgen"] = reader.bool();
                        break;
                    case 64016:
                        message[".gogoproto.benchgen"] = reader.bool();
                        break;
                    case 64017:
                        message[".gogoproto.marshaler"] = reader.bool();
                        break;
                    case 64018:
                        message[".gogoproto.unmarshaler"] = reader.bool();
                        break;
                    case 64019:
                        message[".gogoproto.stable_marshaler"] = reader.bool();
                        break;
                    case 64020:
                        message[".gogoproto.sizer"] = reader.bool();
                        break;
                    case 64023:
                        message[".gogoproto.unsafe_marshaler"] = reader.bool();
                        break;
                    case 64024:
                        message[".gogoproto.unsafe_unmarshaler"] = reader.bool();
                        break;
                    case 64025:
                        message[".gogoproto.goproto_extensions_map"] = reader.bool();
                        break;
                    case 64026:
                        message[".gogoproto.goproto_unrecognized"] = reader.bool();
                        break;
                    case 64028:
                        message[".gogoproto.protosizer"] = reader.bool();
                        break;
                    case 64029:
                        message[".gogoproto.compare"] = reader.bool();
                        break;
                    case 64030:
                        message[".gogoproto.typedecl"] = reader.bool();
                        break;
                    case 64033:
                        message[".gogoproto.messagename"] = reader.bool();
                        break;
                    case 64034:
                        message[".gogoproto.goproto_sizecache"] = reader.bool();
                        break;
                    case 64035:
                        message[".gogoproto.goproto_unkeyed"] = reader.bool();
                        break;
                    case 93001:
                        message[".cosmos_proto.interface_type"] = reader.string();
                        break;
                    case 93002:
                        message[".cosmos_proto.implements_interface"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    if (typeof message.message_set_wire_format !== "boolean")
                        return "message_set_wire_format: boolean expected";
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    if (typeof message.no_standard_descriptor_accessor !== "boolean")
                        return "no_standard_descriptor_accessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    if (typeof message.map_entry !== "boolean")
                        return "map_entry: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    if (typeof message[".gogoproto.goproto_getters"] !== "boolean")
                        return ".gogoproto.goproto_getters: boolean expected";
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    if (typeof message[".gogoproto.goproto_stringer"] !== "boolean")
                        return ".gogoproto.goproto_stringer: boolean expected";
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    if (typeof message[".gogoproto.verbose_equal"] !== "boolean")
                        return ".gogoproto.verbose_equal: boolean expected";
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    if (typeof message[".gogoproto.face"] !== "boolean")
                        return ".gogoproto.face: boolean expected";
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    if (typeof message[".gogoproto.gostring"] !== "boolean")
                        return ".gogoproto.gostring: boolean expected";
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    if (typeof message[".gogoproto.populate"] !== "boolean")
                        return ".gogoproto.populate: boolean expected";
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    if (typeof message[".gogoproto.stringer"] !== "boolean")
                        return ".gogoproto.stringer: boolean expected";
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    if (typeof message[".gogoproto.onlyone"] !== "boolean")
                        return ".gogoproto.onlyone: boolean expected";
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    if (typeof message[".gogoproto.equal"] !== "boolean")
                        return ".gogoproto.equal: boolean expected";
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    if (typeof message[".gogoproto.description"] !== "boolean")
                        return ".gogoproto.description: boolean expected";
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    if (typeof message[".gogoproto.testgen"] !== "boolean")
                        return ".gogoproto.testgen: boolean expected";
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    if (typeof message[".gogoproto.benchgen"] !== "boolean")
                        return ".gogoproto.benchgen: boolean expected";
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    if (typeof message[".gogoproto.marshaler"] !== "boolean")
                        return ".gogoproto.marshaler: boolean expected";
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    if (typeof message[".gogoproto.unmarshaler"] !== "boolean")
                        return ".gogoproto.unmarshaler: boolean expected";
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    if (typeof message[".gogoproto.stable_marshaler"] !== "boolean")
                        return ".gogoproto.stable_marshaler: boolean expected";
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    if (typeof message[".gogoproto.sizer"] !== "boolean")
                        return ".gogoproto.sizer: boolean expected";
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    if (typeof message[".gogoproto.unsafe_marshaler"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler: boolean expected";
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    if (typeof message[".gogoproto.goproto_extensions_map"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map: boolean expected";
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    if (typeof message[".gogoproto.goproto_unrecognized"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized: boolean expected";
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    if (typeof message[".gogoproto.protosizer"] !== "boolean")
                        return ".gogoproto.protosizer: boolean expected";
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    if (typeof message[".gogoproto.compare"] !== "boolean")
                        return ".gogoproto.compare: boolean expected";
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    if (typeof message[".gogoproto.typedecl"] !== "boolean")
                        return ".gogoproto.typedecl: boolean expected";
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    if (typeof message[".gogoproto.messagename"] !== "boolean")
                        return ".gogoproto.messagename: boolean expected";
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    if (typeof message[".gogoproto.goproto_sizecache"] !== "boolean")
                        return ".gogoproto.goproto_sizecache: boolean expected";
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    if (typeof message[".gogoproto.goproto_unkeyed"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed: boolean expected";
                if (message[".cosmos_proto.interface_type"] != null && message.hasOwnProperty(".cosmos_proto.interface_type"))
                    if (!$util.isString(message[".cosmos_proto.interface_type"]))
                        return ".cosmos_proto.interface_type: string expected";
                if (message[".cosmos_proto.implements_interface"] != null && message.hasOwnProperty(".cosmos_proto.implements_interface"))
                    if (!$util.isString(message[".cosmos_proto.implements_interface"]))
                        return ".cosmos_proto.implements_interface: string expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.message_set_wire_format != null)
                    message.message_set_wire_format = Boolean(object.message_set_wire_format);
                if (object.no_standard_descriptor_accessor != null)
                    message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.map_entry != null)
                    message.map_entry = Boolean(object.map_entry);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters"] != null)
                    message[".gogoproto.goproto_getters"] = Boolean(object[".gogoproto.goproto_getters"]);
                if (object[".gogoproto.goproto_stringer"] != null)
                    message[".gogoproto.goproto_stringer"] = Boolean(object[".gogoproto.goproto_stringer"]);
                if (object[".gogoproto.verbose_equal"] != null)
                    message[".gogoproto.verbose_equal"] = Boolean(object[".gogoproto.verbose_equal"]);
                if (object[".gogoproto.face"] != null)
                    message[".gogoproto.face"] = Boolean(object[".gogoproto.face"]);
                if (object[".gogoproto.gostring"] != null)
                    message[".gogoproto.gostring"] = Boolean(object[".gogoproto.gostring"]);
                if (object[".gogoproto.populate"] != null)
                    message[".gogoproto.populate"] = Boolean(object[".gogoproto.populate"]);
                if (object[".gogoproto.stringer"] != null)
                    message[".gogoproto.stringer"] = Boolean(object[".gogoproto.stringer"]);
                if (object[".gogoproto.onlyone"] != null)
                    message[".gogoproto.onlyone"] = Boolean(object[".gogoproto.onlyone"]);
                if (object[".gogoproto.equal"] != null)
                    message[".gogoproto.equal"] = Boolean(object[".gogoproto.equal"]);
                if (object[".gogoproto.description"] != null)
                    message[".gogoproto.description"] = Boolean(object[".gogoproto.description"]);
                if (object[".gogoproto.testgen"] != null)
                    message[".gogoproto.testgen"] = Boolean(object[".gogoproto.testgen"]);
                if (object[".gogoproto.benchgen"] != null)
                    message[".gogoproto.benchgen"] = Boolean(object[".gogoproto.benchgen"]);
                if (object[".gogoproto.marshaler"] != null)
                    message[".gogoproto.marshaler"] = Boolean(object[".gogoproto.marshaler"]);
                if (object[".gogoproto.unmarshaler"] != null)
                    message[".gogoproto.unmarshaler"] = Boolean(object[".gogoproto.unmarshaler"]);
                if (object[".gogoproto.stable_marshaler"] != null)
                    message[".gogoproto.stable_marshaler"] = Boolean(object[".gogoproto.stable_marshaler"]);
                if (object[".gogoproto.sizer"] != null)
                    message[".gogoproto.sizer"] = Boolean(object[".gogoproto.sizer"]);
                if (object[".gogoproto.unsafe_marshaler"] != null)
                    message[".gogoproto.unsafe_marshaler"] = Boolean(object[".gogoproto.unsafe_marshaler"]);
                if (object[".gogoproto.unsafe_unmarshaler"] != null)
                    message[".gogoproto.unsafe_unmarshaler"] = Boolean(object[".gogoproto.unsafe_unmarshaler"]);
                if (object[".gogoproto.goproto_extensions_map"] != null)
                    message[".gogoproto.goproto_extensions_map"] = Boolean(object[".gogoproto.goproto_extensions_map"]);
                if (object[".gogoproto.goproto_unrecognized"] != null)
                    message[".gogoproto.goproto_unrecognized"] = Boolean(object[".gogoproto.goproto_unrecognized"]);
                if (object[".gogoproto.protosizer"] != null)
                    message[".gogoproto.protosizer"] = Boolean(object[".gogoproto.protosizer"]);
                if (object[".gogoproto.compare"] != null)
                    message[".gogoproto.compare"] = Boolean(object[".gogoproto.compare"]);
                if (object[".gogoproto.typedecl"] != null)
                    message[".gogoproto.typedecl"] = Boolean(object[".gogoproto.typedecl"]);
                if (object[".gogoproto.messagename"] != null)
                    message[".gogoproto.messagename"] = Boolean(object[".gogoproto.messagename"]);
                if (object[".gogoproto.goproto_sizecache"] != null)
                    message[".gogoproto.goproto_sizecache"] = Boolean(object[".gogoproto.goproto_sizecache"]);
                if (object[".gogoproto.goproto_unkeyed"] != null)
                    message[".gogoproto.goproto_unkeyed"] = Boolean(object[".gogoproto.goproto_unkeyed"]);
                if (object[".cosmos_proto.interface_type"] != null)
                    message[".cosmos_proto.interface_type"] = String(object[".cosmos_proto.interface_type"]);
                if (object[".cosmos_proto.implements_interface"] != null)
                    message[".cosmos_proto.implements_interface"] = String(object[".cosmos_proto.implements_interface"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.message_set_wire_format = false;
                    object.no_standard_descriptor_accessor = false;
                    object.deprecated = false;
                    object.map_entry = false;
                    object[".gogoproto.goproto_getters"] = false;
                    object[".gogoproto.goproto_stringer"] = false;
                    object[".gogoproto.verbose_equal"] = false;
                    object[".gogoproto.face"] = false;
                    object[".gogoproto.gostring"] = false;
                    object[".gogoproto.populate"] = false;
                    object[".gogoproto.onlyone"] = false;
                    object[".gogoproto.equal"] = false;
                    object[".gogoproto.description"] = false;
                    object[".gogoproto.testgen"] = false;
                    object[".gogoproto.benchgen"] = false;
                    object[".gogoproto.marshaler"] = false;
                    object[".gogoproto.unmarshaler"] = false;
                    object[".gogoproto.stable_marshaler"] = false;
                    object[".gogoproto.sizer"] = false;
                    object[".gogoproto.unsafe_marshaler"] = false;
                    object[".gogoproto.unsafe_unmarshaler"] = false;
                    object[".gogoproto.goproto_extensions_map"] = false;
                    object[".gogoproto.goproto_unrecognized"] = false;
                    object[".gogoproto.protosizer"] = false;
                    object[".gogoproto.compare"] = false;
                    object[".gogoproto.typedecl"] = false;
                    object[".gogoproto.messagename"] = false;
                    object[".gogoproto.goproto_sizecache"] = false;
                    object[".gogoproto.goproto_unkeyed"] = false;
                    object[".gogoproto.stringer"] = false;
                    object[".cosmos_proto.interface_type"] = "";
                    object[".cosmos_proto.implements_interface"] = "";
                }
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    object.message_set_wire_format = message.message_set_wire_format;
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    object.map_entry = message.map_entry;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    object[".gogoproto.goproto_getters"] = message[".gogoproto.goproto_getters"];
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    object[".gogoproto.goproto_stringer"] = message[".gogoproto.goproto_stringer"];
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    object[".gogoproto.verbose_equal"] = message[".gogoproto.verbose_equal"];
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    object[".gogoproto.face"] = message[".gogoproto.face"];
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    object[".gogoproto.gostring"] = message[".gogoproto.gostring"];
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    object[".gogoproto.populate"] = message[".gogoproto.populate"];
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    object[".gogoproto.onlyone"] = message[".gogoproto.onlyone"];
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    object[".gogoproto.equal"] = message[".gogoproto.equal"];
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    object[".gogoproto.description"] = message[".gogoproto.description"];
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    object[".gogoproto.testgen"] = message[".gogoproto.testgen"];
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    object[".gogoproto.benchgen"] = message[".gogoproto.benchgen"];
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    object[".gogoproto.marshaler"] = message[".gogoproto.marshaler"];
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    object[".gogoproto.unmarshaler"] = message[".gogoproto.unmarshaler"];
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    object[".gogoproto.stable_marshaler"] = message[".gogoproto.stable_marshaler"];
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    object[".gogoproto.sizer"] = message[".gogoproto.sizer"];
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    object[".gogoproto.unsafe_marshaler"] = message[".gogoproto.unsafe_marshaler"];
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    object[".gogoproto.unsafe_unmarshaler"] = message[".gogoproto.unsafe_unmarshaler"];
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    object[".gogoproto.goproto_extensions_map"] = message[".gogoproto.goproto_extensions_map"];
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    object[".gogoproto.goproto_unrecognized"] = message[".gogoproto.goproto_unrecognized"];
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    object[".gogoproto.protosizer"] = message[".gogoproto.protosizer"];
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    object[".gogoproto.compare"] = message[".gogoproto.compare"];
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    object[".gogoproto.typedecl"] = message[".gogoproto.typedecl"];
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    object[".gogoproto.messagename"] = message[".gogoproto.messagename"];
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    object[".gogoproto.goproto_sizecache"] = message[".gogoproto.goproto_sizecache"];
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    object[".gogoproto.goproto_unkeyed"] = message[".gogoproto.goproto_unkeyed"];
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    object[".gogoproto.stringer"] = message[".gogoproto.stringer"];
                if (message[".cosmos_proto.interface_type"] != null && message.hasOwnProperty(".cosmos_proto.interface_type"))
                    object[".cosmos_proto.interface_type"] = message[".cosmos_proto.interface_type"];
                if (message[".cosmos_proto.implements_interface"] != null && message.hasOwnProperty(".cosmos_proto.implements_interface"))
                    object[".cosmos_proto.implements_interface"] = message[".cosmos_proto.implements_interface"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.nullable"] FieldOptions .gogoproto.nullable
             * @property {boolean|null} [".gogoproto.embed"] FieldOptions .gogoproto.embed
             * @property {string|null} [".gogoproto.customtype"] FieldOptions .gogoproto.customtype
             * @property {string|null} [".gogoproto.customname"] FieldOptions .gogoproto.customname
             * @property {string|null} [".gogoproto.jsontag"] FieldOptions .gogoproto.jsontag
             * @property {string|null} [".gogoproto.moretags"] FieldOptions .gogoproto.moretags
             * @property {string|null} [".gogoproto.casttype"] FieldOptions .gogoproto.casttype
             * @property {string|null} [".gogoproto.castkey"] FieldOptions .gogoproto.castkey
             * @property {string|null} [".gogoproto.castvalue"] FieldOptions .gogoproto.castvalue
             * @property {boolean|null} [".gogoproto.stdtime"] FieldOptions .gogoproto.stdtime
             * @property {boolean|null} [".gogoproto.stdduration"] FieldOptions .gogoproto.stdduration
             * @property {boolean|null} [".gogoproto.wktpointer"] FieldOptions .gogoproto.wktpointer
             * @property {string|null} [".gogoproto.castrepeated"] FieldOptions .gogoproto.castrepeated
             * @property {string|null} [".cosmos_proto.accepts_interface"] FieldOptions .cosmos_proto.accepts_interface
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FieldOptions .gogoproto.nullable.
             * @member {boolean} .gogoproto.nullable
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.nullable"] = false;

            /**
             * FieldOptions .gogoproto.embed.
             * @member {boolean} .gogoproto.embed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.embed"] = false;

            /**
             * FieldOptions .gogoproto.customtype.
             * @member {string} .gogoproto.customtype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customtype"] = "";

            /**
             * FieldOptions .gogoproto.customname.
             * @member {string} .gogoproto.customname
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customname"] = "";

            /**
             * FieldOptions .gogoproto.jsontag.
             * @member {string} .gogoproto.jsontag
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.jsontag"] = "";

            /**
             * FieldOptions .gogoproto.moretags.
             * @member {string} .gogoproto.moretags
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.moretags"] = "";

            /**
             * FieldOptions .gogoproto.casttype.
             * @member {string} .gogoproto.casttype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.casttype"] = "";

            /**
             * FieldOptions .gogoproto.castkey.
             * @member {string} .gogoproto.castkey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castkey"] = "";

            /**
             * FieldOptions .gogoproto.castvalue.
             * @member {string} .gogoproto.castvalue
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castvalue"] = "";

            /**
             * FieldOptions .gogoproto.stdtime.
             * @member {boolean} .gogoproto.stdtime
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdtime"] = false;

            /**
             * FieldOptions .gogoproto.stdduration.
             * @member {boolean} .gogoproto.stdduration
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdduration"] = false;

            /**
             * FieldOptions .gogoproto.wktpointer.
             * @member {boolean} .gogoproto.wktpointer
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.wktpointer"] = false;

            /**
             * FieldOptions .gogoproto.castrepeated.
             * @member {string} .gogoproto.castrepeated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castrepeated"] = "";

            /**
             * FieldOptions .cosmos_proto.accepts_interface.
             * @member {string} .cosmos_proto.accepts_interface
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".cosmos_proto.accepts_interface"] = "";

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.nullable"] != null && Object.hasOwnProperty.call(message, ".gogoproto.nullable"))
                    writer.uint32(/* id 65001, wireType 0 =*/520008).bool(message[".gogoproto.nullable"]);
                if (message[".gogoproto.embed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.embed"))
                    writer.uint32(/* id 65002, wireType 0 =*/520016).bool(message[".gogoproto.embed"]);
                if (message[".gogoproto.customtype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customtype"))
                    writer.uint32(/* id 65003, wireType 2 =*/520026).string(message[".gogoproto.customtype"]);
                if (message[".gogoproto.customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customname"))
                    writer.uint32(/* id 65004, wireType 2 =*/520034).string(message[".gogoproto.customname"]);
                if (message[".gogoproto.jsontag"] != null && Object.hasOwnProperty.call(message, ".gogoproto.jsontag"))
                    writer.uint32(/* id 65005, wireType 2 =*/520042).string(message[".gogoproto.jsontag"]);
                if (message[".gogoproto.moretags"] != null && Object.hasOwnProperty.call(message, ".gogoproto.moretags"))
                    writer.uint32(/* id 65006, wireType 2 =*/520050).string(message[".gogoproto.moretags"]);
                if (message[".gogoproto.casttype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.casttype"))
                    writer.uint32(/* id 65007, wireType 2 =*/520058).string(message[".gogoproto.casttype"]);
                if (message[".gogoproto.castkey"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castkey"))
                    writer.uint32(/* id 65008, wireType 2 =*/520066).string(message[".gogoproto.castkey"]);
                if (message[".gogoproto.castvalue"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castvalue"))
                    writer.uint32(/* id 65009, wireType 2 =*/520074).string(message[".gogoproto.castvalue"]);
                if (message[".gogoproto.stdtime"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdtime"))
                    writer.uint32(/* id 65010, wireType 0 =*/520080).bool(message[".gogoproto.stdtime"]);
                if (message[".gogoproto.stdduration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdduration"))
                    writer.uint32(/* id 65011, wireType 0 =*/520088).bool(message[".gogoproto.stdduration"]);
                if (message[".gogoproto.wktpointer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.wktpointer"))
                    writer.uint32(/* id 65012, wireType 0 =*/520096).bool(message[".gogoproto.wktpointer"]);
                if (message[".gogoproto.castrepeated"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castrepeated"))
                    writer.uint32(/* id 65013, wireType 2 =*/520106).string(message[".gogoproto.castrepeated"]);
                if (message[".cosmos_proto.accepts_interface"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.accepts_interface"))
                    writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.accepts_interface"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 65001:
                        message[".gogoproto.nullable"] = reader.bool();
                        break;
                    case 65002:
                        message[".gogoproto.embed"] = reader.bool();
                        break;
                    case 65003:
                        message[".gogoproto.customtype"] = reader.string();
                        break;
                    case 65004:
                        message[".gogoproto.customname"] = reader.string();
                        break;
                    case 65005:
                        message[".gogoproto.jsontag"] = reader.string();
                        break;
                    case 65006:
                        message[".gogoproto.moretags"] = reader.string();
                        break;
                    case 65007:
                        message[".gogoproto.casttype"] = reader.string();
                        break;
                    case 65008:
                        message[".gogoproto.castkey"] = reader.string();
                        break;
                    case 65009:
                        message[".gogoproto.castvalue"] = reader.string();
                        break;
                    case 65010:
                        message[".gogoproto.stdtime"] = reader.bool();
                        break;
                    case 65011:
                        message[".gogoproto.stdduration"] = reader.bool();
                        break;
                    case 65012:
                        message[".gogoproto.wktpointer"] = reader.bool();
                        break;
                    case 65013:
                        message[".gogoproto.castrepeated"] = reader.string();
                        break;
                    case 93001:
                        message[".cosmos_proto.accepts_interface"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    if (typeof message[".gogoproto.nullable"] !== "boolean")
                        return ".gogoproto.nullable: boolean expected";
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    if (typeof message[".gogoproto.embed"] !== "boolean")
                        return ".gogoproto.embed: boolean expected";
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    if (!$util.isString(message[".gogoproto.customtype"]))
                        return ".gogoproto.customtype: string expected";
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    if (!$util.isString(message[".gogoproto.customname"]))
                        return ".gogoproto.customname: string expected";
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    if (!$util.isString(message[".gogoproto.jsontag"]))
                        return ".gogoproto.jsontag: string expected";
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    if (!$util.isString(message[".gogoproto.moretags"]))
                        return ".gogoproto.moretags: string expected";
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    if (!$util.isString(message[".gogoproto.casttype"]))
                        return ".gogoproto.casttype: string expected";
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    if (!$util.isString(message[".gogoproto.castkey"]))
                        return ".gogoproto.castkey: string expected";
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    if (!$util.isString(message[".gogoproto.castvalue"]))
                        return ".gogoproto.castvalue: string expected";
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    if (typeof message[".gogoproto.stdtime"] !== "boolean")
                        return ".gogoproto.stdtime: boolean expected";
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    if (typeof message[".gogoproto.stdduration"] !== "boolean")
                        return ".gogoproto.stdduration: boolean expected";
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    if (typeof message[".gogoproto.wktpointer"] !== "boolean")
                        return ".gogoproto.wktpointer: boolean expected";
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    if (!$util.isString(message[".gogoproto.castrepeated"]))
                        return ".gogoproto.castrepeated: string expected";
                if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                    if (!$util.isString(message[".cosmos_proto.accepts_interface"]))
                        return ".cosmos_proto.accepts_interface: string expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.nullable"] != null)
                    message[".gogoproto.nullable"] = Boolean(object[".gogoproto.nullable"]);
                if (object[".gogoproto.embed"] != null)
                    message[".gogoproto.embed"] = Boolean(object[".gogoproto.embed"]);
                if (object[".gogoproto.customtype"] != null)
                    message[".gogoproto.customtype"] = String(object[".gogoproto.customtype"]);
                if (object[".gogoproto.customname"] != null)
                    message[".gogoproto.customname"] = String(object[".gogoproto.customname"]);
                if (object[".gogoproto.jsontag"] != null)
                    message[".gogoproto.jsontag"] = String(object[".gogoproto.jsontag"]);
                if (object[".gogoproto.moretags"] != null)
                    message[".gogoproto.moretags"] = String(object[".gogoproto.moretags"]);
                if (object[".gogoproto.casttype"] != null)
                    message[".gogoproto.casttype"] = String(object[".gogoproto.casttype"]);
                if (object[".gogoproto.castkey"] != null)
                    message[".gogoproto.castkey"] = String(object[".gogoproto.castkey"]);
                if (object[".gogoproto.castvalue"] != null)
                    message[".gogoproto.castvalue"] = String(object[".gogoproto.castvalue"]);
                if (object[".gogoproto.stdtime"] != null)
                    message[".gogoproto.stdtime"] = Boolean(object[".gogoproto.stdtime"]);
                if (object[".gogoproto.stdduration"] != null)
                    message[".gogoproto.stdduration"] = Boolean(object[".gogoproto.stdduration"]);
                if (object[".gogoproto.wktpointer"] != null)
                    message[".gogoproto.wktpointer"] = Boolean(object[".gogoproto.wktpointer"]);
                if (object[".gogoproto.castrepeated"] != null)
                    message[".gogoproto.castrepeated"] = String(object[".gogoproto.castrepeated"]);
                if (object[".cosmos_proto.accepts_interface"] != null)
                    message[".cosmos_proto.accepts_interface"] = String(object[".cosmos_proto.accepts_interface"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".gogoproto.nullable"] = false;
                    object[".gogoproto.embed"] = false;
                    object[".gogoproto.customtype"] = "";
                    object[".gogoproto.customname"] = "";
                    object[".gogoproto.jsontag"] = "";
                    object[".gogoproto.moretags"] = "";
                    object[".gogoproto.casttype"] = "";
                    object[".gogoproto.castkey"] = "";
                    object[".gogoproto.castvalue"] = "";
                    object[".gogoproto.stdtime"] = false;
                    object[".gogoproto.stdduration"] = false;
                    object[".gogoproto.wktpointer"] = false;
                    object[".gogoproto.castrepeated"] = "";
                    object[".cosmos_proto.accepts_interface"] = "";
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    object[".gogoproto.nullable"] = message[".gogoproto.nullable"];
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    object[".gogoproto.embed"] = message[".gogoproto.embed"];
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    object[".gogoproto.customtype"] = message[".gogoproto.customtype"];
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    object[".gogoproto.customname"] = message[".gogoproto.customname"];
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    object[".gogoproto.jsontag"] = message[".gogoproto.jsontag"];
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    object[".gogoproto.moretags"] = message[".gogoproto.moretags"];
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    object[".gogoproto.casttype"] = message[".gogoproto.casttype"];
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    object[".gogoproto.castkey"] = message[".gogoproto.castkey"];
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    object[".gogoproto.castvalue"] = message[".gogoproto.castvalue"];
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    object[".gogoproto.stdtime"] = message[".gogoproto.stdtime"];
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    object[".gogoproto.stdduration"] = message[".gogoproto.stdduration"];
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    object[".gogoproto.wktpointer"] = message[".gogoproto.wktpointer"];
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    object[".gogoproto.castrepeated"] = message[".gogoproto.castrepeated"];
                if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                    object[".cosmos_proto.accepts_interface"] = message[".cosmos_proto.accepts_interface"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allow_alias] EnumOptions allow_alias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix"] EnumOptions .gogoproto.goproto_enum_prefix
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer"] EnumOptions .gogoproto.goproto_enum_stringer
             * @property {boolean|null} [".gogoproto.enum_stringer"] EnumOptions .gogoproto.enum_stringer
             * @property {string|null} [".gogoproto.enum_customname"] EnumOptions .gogoproto.enum_customname
             * @property {boolean|null} [".gogoproto.enumdecl"] EnumOptions .gogoproto.enumdecl
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allow_alias.
             * @member {boolean} allow_alias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allow_alias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumOptions .gogoproto.goproto_enum_prefix.
             * @member {boolean} .gogoproto.goproto_enum_prefix
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_prefix"] = false;

            /**
             * EnumOptions .gogoproto.goproto_enum_stringer.
             * @member {boolean} .gogoproto.goproto_enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_stringer.
             * @member {boolean} .gogoproto.enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_customname.
             * @member {string} .gogoproto.enum_customname
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_customname"] = "";

            /**
             * EnumOptions .gogoproto.enumdecl.
             * @member {boolean} .gogoproto.enumdecl
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enumdecl"] = false;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_enum_prefix"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix"))
                    writer.uint32(/* id 62001, wireType 0 =*/496008).bool(message[".gogoproto.goproto_enum_prefix"]);
                if (message[".gogoproto.goproto_enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer"))
                    writer.uint32(/* id 62021, wireType 0 =*/496168).bool(message[".gogoproto.goproto_enum_stringer"]);
                if (message[".gogoproto.enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer"))
                    writer.uint32(/* id 62022, wireType 0 =*/496176).bool(message[".gogoproto.enum_stringer"]);
                if (message[".gogoproto.enum_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_customname"))
                    writer.uint32(/* id 62023, wireType 2 =*/496186).string(message[".gogoproto.enum_customname"]);
                if (message[".gogoproto.enumdecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl"))
                    writer.uint32(/* id 62024, wireType 0 =*/496192).bool(message[".gogoproto.enumdecl"]);
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allow_alias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 62001:
                        message[".gogoproto.goproto_enum_prefix"] = reader.bool();
                        break;
                    case 62021:
                        message[".gogoproto.goproto_enum_stringer"] = reader.bool();
                        break;
                    case 62022:
                        message[".gogoproto.enum_stringer"] = reader.bool();
                        break;
                    case 62023:
                        message[".gogoproto.enum_customname"] = reader.string();
                        break;
                    case 62024:
                        message[".gogoproto.enumdecl"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    if (typeof message.allow_alias !== "boolean")
                        return "allow_alias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    if (typeof message[".gogoproto.goproto_enum_prefix"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    if (typeof message[".gogoproto.goproto_enum_stringer"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer: boolean expected";
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    if (typeof message[".gogoproto.enum_stringer"] !== "boolean")
                        return ".gogoproto.enum_stringer: boolean expected";
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    if (!$util.isString(message[".gogoproto.enum_customname"]))
                        return ".gogoproto.enum_customname: string expected";
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    if (typeof message[".gogoproto.enumdecl"] !== "boolean")
                        return ".gogoproto.enumdecl: boolean expected";
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allow_alias != null)
                    message.allow_alias = Boolean(object.allow_alias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_enum_prefix"] != null)
                    message[".gogoproto.goproto_enum_prefix"] = Boolean(object[".gogoproto.goproto_enum_prefix"]);
                if (object[".gogoproto.goproto_enum_stringer"] != null)
                    message[".gogoproto.goproto_enum_stringer"] = Boolean(object[".gogoproto.goproto_enum_stringer"]);
                if (object[".gogoproto.enum_stringer"] != null)
                    message[".gogoproto.enum_stringer"] = Boolean(object[".gogoproto.enum_stringer"]);
                if (object[".gogoproto.enum_customname"] != null)
                    message[".gogoproto.enum_customname"] = String(object[".gogoproto.enum_customname"]);
                if (object[".gogoproto.enumdecl"] != null)
                    message[".gogoproto.enumdecl"] = Boolean(object[".gogoproto.enumdecl"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.allow_alias = false;
                    object.deprecated = false;
                    object[".gogoproto.goproto_enum_prefix"] = false;
                    object[".gogoproto.goproto_enum_stringer"] = false;
                    object[".gogoproto.enum_stringer"] = false;
                    object[".gogoproto.enum_customname"] = "";
                    object[".gogoproto.enumdecl"] = false;
                }
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    object.allow_alias = message.allow_alias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    object[".gogoproto.goproto_enum_prefix"] = message[".gogoproto.goproto_enum_prefix"];
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    object[".gogoproto.goproto_enum_stringer"] = message[".gogoproto.goproto_enum_stringer"];
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    object[".gogoproto.enum_stringer"] = message[".gogoproto.enum_stringer"];
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    object[".gogoproto.enum_customname"] = message[".gogoproto.enum_customname"];
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    object[".gogoproto.enumdecl"] = message[".gogoproto.enumdecl"];
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
             * @property {string|null} [".gogoproto.enumvalue_customname"] EnumValueOptions .gogoproto.enumvalue_customname
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumValueOptions .gogoproto.enumvalue_customname.
             * @member {string} .gogoproto.enumvalue_customname
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype[".gogoproto.enumvalue_customname"] = "";

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.enumvalue_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumvalue_customname"))
                    writer.uint32(/* id 66001, wireType 2 =*/528010).string(message[".gogoproto.enumvalue_customname"]);
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 66001:
                        message[".gogoproto.enumvalue_customname"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    if (!$util.isString(message[".gogoproto.enumvalue_customname"]))
                        return ".gogoproto.enumvalue_customname: string expected";
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.enumvalue_customname"] != null)
                    message[".gogoproto.enumvalue_customname"] = String(object[".gogoproto.enumvalue_customname"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".gogoproto.enumvalue_customname"] = "";
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    object[".gogoproto.enumvalue_customname"] = message[".gogoproto.enumvalue_customname"];
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                    $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 72295728:
                        message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifier_value] UninterpretedOption identifier_value
             * @property {number|null} [positive_int_value] UninterpretedOption positive_int_value
             * @property {number|null} [negative_int_value] UninterpretedOption negative_int_value
             * @property {number|null} [double_value] UninterpretedOption double_value
             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifier_value.
             * @member {string} identifier_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifier_value = "";

            /**
             * UninterpretedOption positive_int_value.
             * @member {number} positive_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negative_int_value.
             * @member {number} negative_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption double_value.
             * @member {number} double_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.double_value = 0;

            /**
             * UninterpretedOption string_value.
             * @member {Uint8Array} string_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.string_value = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregate_value.
             * @member {string} aggregate_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregate_value = "";

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (let i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifier_value = reader.string();
                        break;
                    case 4:
                        message.positive_int_value = reader.uint64();
                        break;
                    case 5:
                        message.negative_int_value = reader.int64();
                        break;
                    case 6:
                        message.double_value = reader.double();
                        break;
                    case 7:
                        message.string_value = reader.bytes();
                        break;
                    case 8:
                        message.aggregate_value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    if (!$util.isString(message.identifier_value))
                        return "identifier_value: string expected";
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                        return "positive_int_value: integer|Long expected";
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                        return "negative_int_value: integer|Long expected";
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    if (typeof message.double_value !== "number")
                        return "double_value: number expected";
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                        return "string_value: buffer expected";
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    if (!$util.isString(message.aggregate_value))
                        return "aggregate_value: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifier_value != null)
                    message.identifier_value = String(object.identifier_value);
                if (object.positive_int_value != null)
                    if ($util.Long)
                        (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                    else if (typeof object.positive_int_value === "string")
                        message.positive_int_value = parseInt(object.positive_int_value, 10);
                    else if (typeof object.positive_int_value === "number")
                        message.positive_int_value = object.positive_int_value;
                    else if (typeof object.positive_int_value === "object")
                        message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                if (object.negative_int_value != null)
                    if ($util.Long)
                        (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                    else if (typeof object.negative_int_value === "string")
                        message.negative_int_value = parseInt(object.negative_int_value, 10);
                    else if (typeof object.negative_int_value === "number")
                        message.negative_int_value = object.negative_int_value;
                    else if (typeof object.negative_int_value === "object")
                        message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                if (object.double_value != null)
                    message.double_value = Number(object.double_value);
                if (object.string_value != null)
                    if (typeof object.string_value === "string")
                        $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                    else if (object.string_value.length)
                        message.string_value = object.string_value;
                if (object.aggregate_value != null)
                    message.aggregate_value = String(object.aggregate_value);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifier_value = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positive_int_value = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negative_int_value = options.longs === String ? "0" : 0;
                    object.double_value = 0;
                    if (options.bytes === String)
                        object.string_value = "";
                    else {
                        object.string_value = [];
                        if (options.bytes !== Array)
                            object.string_value = $util.newBuffer(object.string_value);
                    }
                    object.aggregate_value = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    object.identifier_value = message.identifier_value;
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (typeof message.positive_int_value === "number")
                        object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                    else
                        object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (typeof message.negative_int_value === "number")
                        object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                    else
                        object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    object.aggregate_value = message.aggregate_value;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} name_part NamePart name_part
                 * @property {boolean} is_extension NamePart is_extension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart name_part.
                 * @member {string} name_part
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.name_part = "";

                /**
                 * NamePart is_extension.
                 * @member {boolean} is_extension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.is_extension = false;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name_part = reader.string();
                            break;
                        case 2:
                            message.is_extension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name_part"))
                        throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                    if (!message.hasOwnProperty("is_extension"))
                        throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name_part))
                        return "name_part: string expected";
                    if (typeof message.is_extension !== "boolean")
                        return "is_extension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.name_part != null)
                        message.name_part = String(object.name_part);
                    if (object.is_extension != null)
                        message.is_extension = Boolean(object.is_extension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name_part = "";
                        object.is_extension = false;
                    }
                    if (message.name_part != null && message.hasOwnProperty("name_part"))
                        object.name_part = message.name_part;
                    if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                        object.is_extension = message.is_extension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (let i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leading_comments] Location leading_comments
                 * @property {string|null} [trailing_comments] Location trailing_comments
                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leading_detached_comments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leading_comments.
                 * @member {string} leading_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_comments = "";

                /**
                 * Location trailing_comments.
                 * @member {string} trailing_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailing_comments = "";

                /**
                 * Location leading_detached_comments.
                 * @member {Array.<string>} leading_detached_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_detached_comments = $util.emptyArray;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                    if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                    if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leading_comments = reader.string();
                            break;
                        case 4:
                            message.trailing_comments = reader.string();
                            break;
                        case 6:
                            if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                message.leading_detached_comments = [];
                            message.leading_detached_comments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        if (!$util.isString(message.leading_comments))
                            return "leading_comments: string expected";
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        if (!$util.isString(message.trailing_comments))
                            return "trailing_comments: string expected";
                    if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                        if (!Array.isArray(message.leading_detached_comments))
                            return "leading_detached_comments: array expected";
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            if (!$util.isString(message.leading_detached_comments[i]))
                                return "leading_detached_comments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leading_comments != null)
                        message.leading_comments = String(object.leading_comments);
                    if (object.trailing_comments != null)
                        message.trailing_comments = String(object.trailing_comments);
                    if (object.leading_detached_comments) {
                        if (!Array.isArray(object.leading_detached_comments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                        message.leading_detached_comments = [];
                        for (let i = 0; i < object.leading_detached_comments.length; ++i)
                            message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leading_detached_comments = [];
                    }
                    if (options.defaults) {
                        object.leading_comments = "";
                        object.trailing_comments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        object.leading_comments = message.leading_comments;
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        object.trailing_comments = message.trailing_comments;
                    if (message.leading_detached_comments && message.leading_detached_comments.length) {
                        object.leading_detached_comments = [];
                        for (let j = 0; j < message.leading_detached_comments.length; ++j)
                            object.leading_detached_comments[j] = message.leading_detached_comments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (let i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [source_file] Annotation source_file
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation source_file.
                 * @member {string} source_file
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.source_file = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.source_file = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        if (!$util.isString(message.source_file))
                            return "source_file: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.source_file != null)
                        message.source_file = String(object.source_file);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.source_file = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        object.source_file = message.source_file;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                let message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {number|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {number} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                let message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        protobuf.Duration = (function() {

            /**
             * Properties of a Duration.
             * @memberof google.protobuf
             * @interface IDuration
             * @property {number|null} [seconds] Duration seconds
             * @property {number|null} [nanos] Duration nanos
             */

            /**
             * Constructs a new Duration.
             * @memberof google.protobuf
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {google.protobuf.IDuration=} [properties] Properties to set
             */
            function Duration(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Duration seconds.
             * @member {number} seconds
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Duration nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.nanos = 0;

            /**
             * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Duration message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Duration message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Duration message.
             * @function verify
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Duration.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Duration} Duration
             */
            Duration.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Duration)
                    return object;
                let message = new $root.google.protobuf.Duration();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.Duration} message Duration
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Duration.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Duration to JSON.
             * @function toJSON
             * @memberof google.protobuf.Duration
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Duration.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Duration;
        })();

        return protobuf;
    })();

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             * @property {boolean|null} [fully_decode_reserved_expansion] Http fully_decode_reserved_expansion
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Http fully_decode_reserved_expansion.
             * @member {boolean} fully_decode_reserved_expansion
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.fully_decode_reserved_expansion = false;

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rules != null && message.rules.length)
                    for (let i = 0; i < message.rules.length; ++i)
                        $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.fully_decode_reserved_expansion != null && Object.hasOwnProperty.call(message, "fully_decode_reserved_expansion"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fully_decode_reserved_expansion);
                return writer;
            };

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.rules && message.rules.length))
                            message.rules = [];
                        message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.fully_decode_reserved_expansion = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    if (typeof message.fully_decode_reserved_expansion !== "boolean")
                        return "fully_decode_reserved_expansion: boolean expected";
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                if (object.fully_decode_reserved_expansion != null)
                    message.fully_decode_reserved_expansion = Boolean(object.fully_decode_reserved_expansion);
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (options.defaults)
                    object.fully_decode_reserved_expansion = false;
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    object.fully_decode_reserved_expansion = message.fully_decode_reserved_expansion;
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [body] HttpRule body
             * @property {string|null} [response_body] HttpRule response_body
             * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additional_bindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule response_body.
             * @member {string} response_body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.response_body = "";

            /**
             * HttpRule additional_bindings.
             * @member {Array.<google.api.IHttpRule>} additional_bindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additional_bindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                    $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.additional_bindings != null && message.additional_bindings.length)
                    for (let i = 0; i < message.additional_bindings.length; ++i)
                        $root.google.api.HttpRule.encode(message.additional_bindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.response_body != null && Object.hasOwnProperty.call(message, "response_body"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.response_body);
                return writer;
            };

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.selector = reader.string();
                        break;
                    case 2:
                        message.get = reader.string();
                        break;
                    case 3:
                        message.put = reader.string();
                        break;
                    case 4:
                        message.post = reader.string();
                        break;
                    case 5:
                        message["delete"] = reader.string();
                        break;
                    case 6:
                        message.patch = reader.string();
                        break;
                    case 8:
                        message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.body = reader.string();
                        break;
                    case 12:
                        message.response_body = reader.string();
                        break;
                    case 11:
                        if (!(message.additional_bindings && message.additional_bindings.length))
                            message.additional_bindings = [];
                        message.additional_bindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    if (!$util.isString(message.response_body))
                        return "response_body: string expected";
                if (message.additional_bindings != null && message.hasOwnProperty("additional_bindings")) {
                    if (!Array.isArray(message.additional_bindings))
                        return "additional_bindings: array expected";
                    for (let i = 0; i < message.additional_bindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additional_bindings[i]);
                        if (error)
                            return "additional_bindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.response_body != null)
                    message.response_body = String(object.response_body);
                if (object.additional_bindings) {
                    if (!Array.isArray(object.additional_bindings))
                        throw TypeError(".google.api.HttpRule.additional_bindings: array expected");
                    message.additional_bindings = [];
                    for (let i = 0; i < object.additional_bindings.length; ++i) {
                        if (typeof object.additional_bindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additional_bindings: object expected");
                        message.additional_bindings[i] = $root.google.api.HttpRule.fromObject(object.additional_bindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additional_bindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                    object.response_body = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additional_bindings && message.additional_bindings.length) {
                    object.additional_bindings = [];
                    for (let j = 0; j < message.additional_bindings.length; ++j)
                        object.additional_bindings[j] = $root.google.api.HttpRule.toObject(message.additional_bindings[j], options);
                }
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    object.response_body = message.response_body;
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                return writer;
            };

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.kind = reader.string();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    return google;
})();

export { $root as default };
